//////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.

syntax = "proto3";

package octaneapi;

option optimize_for = CODE_SIZE;

import "common.proto";

 // GRPC proto definitions for 'ApiModuleData' class from 'apimoduledata.h'
message ApiModuleData
{
    // Request packet corresponding to '[in] parameters in ApiModuleData::loadApplicationData'
    message loadApplicationDataRequest
    {
        // Id of the module loading the data.
        ModuleIdT moduleId = 1;
    }

    // Response packet corresponding to '[out] parameters in 'ApiModuleData::loadApplicationData'
    message loadApplicationDataResponse
    {
        //     Pointer to loaded data. If there was no data stored for the module, an empty table is
        ObjectRef result = 1;
        // Version of Octane used to store the data.
        uint32 octaneVersion = 2;
    }

    // Request packet corresponding to '[in] parameters in ApiModuleData::storeApplicationData'
    message storeApplicationDataRequest
    {
        // Id of the module storing the data.
        ModuleIdT moduleId = 1;
        // Table with the data.
        ObjectRef table = 2;
    }

    // Response packet corresponding to '[out] parameters in 'ApiModuleData::storeApplicationData'
    message storeApplicationDataResponse
    {
        //     TRUE when the data was saved successfully, FALSE otherwise.
        bool result = 1;
    }

}


// GRPC interface definition for class 'ApiModuleData' from 'apimoduledata.h'
service ApiModuleDataService
{
    /// Loads application data stored for this module
    rpc loadApplicationData(ApiModuleData.loadApplicationDataRequest) returns (ApiModuleData.loadApplicationDataResponse);
    /// Stores application data
    rpc storeApplicationData(ApiModuleData.storeApplicationDataRequest) returns (ApiModuleData.storeApplicationDataResponse);
}
