//////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.

syntax = "proto3";

package octaneapi;

option optimize_for = CODE_SIZE;

import "common.proto";
import "google/protobuf/empty.proto";
import "apitimesampling.proto";
import "octaneenums.proto";
import "octanetime.proto";

 // GRPC proto definitions for 'ApiGeometryExporter' class from 'apigeometryexporter.h'
message ApiGeometryExporter
{
    // Request packet corresponding to '[in] parameters in ApiGeometryExporter::isSupported'
    message isSupportedRequest
    {
    }

    // Response packet corresponding to '[out] parameters in 'ApiGeometryExporter::isSupported'
    message isSupportedResponse
    {
        
        bool result = 1;
    }

    // Request packet corresponding to '[in] parameters in ApiGeometryExporter::create'
    message createRequest
    {
        // file name, encoded as UTF-8. The file name is taken as is, it usually ends with the
        string fileName = 1;
        // A line of text describing the contents of this file.
        string description = 2;
        // The format that should be used for the geometry export.
        GeometryExportFormat exportFormat = 3;
        // If set to TRUE, geometry generated by built-in script graphs will be exported as
        bool exportGeneratedGeometry = 4;
    }

    // Response packet corresponding to '[out] parameters in 'ApiGeometryExporter::create'
    message createResponse
    {
        //     the created object. If the file can't be opened this call returns NULL, which indicates
        ObjectRef result = 1;
    }

    // Request packet corresponding to '[in] parameters in ApiGeometryExporter::setAspectRatio'
    message setAspectRatioRequest
    {
        // ID of the object on which to call the method
        ObjectRef objectPtr = 1;
        // film width / film height
        float ratio = 2;
    }

    // Request packet corresponding to '[in] parameters in ApiGeometryExporter::setFbxOptions'
    message setFbxOptionsRequest
    {
        // ID of the object on which to call the method
        ObjectRef objectPtr = 1;
        // If TRUE, the child of a scatter node is exported only on the first transform node.
        bool fastScatterExport = 2;
        // If TRUE, basic materials and textures will be exported with geometry. Textures are generated
        bool exportMaterial = 3;
        // If TRUE, materials are exported in Stingray format. Read only by Max, Maya and unity applications.
        bool asStingrayMaterial = 4;
        // Texture render dimension in X. larger the value, slower the export.
        uint32 renderSizeX = 5;
        // Texture render dimension in Y. larger the value, slower the export.
        uint32 renderSizeY = 6;
        // export octane OCS data of the material into FBX file. all the corresponding external files are also
        bool writeOcsData = 7;
    }

    // Request packet corresponding to '[in] parameters in ApiGeometryExporter::addItem'
    message addItemRequest
    {
        // ID of the object on which to call the method
        ObjectRef objectPtr = 1;
        ObjectRef item = 2;
    }

    // Response packet corresponding to '[out] parameters in 'ApiGeometryExporter::addItem'
    message addItemResponse
    {
        
        bool result = 1;
    }

    // Request packet corresponding to '[in] parameters in ApiGeometryExporter::writeFrame'
    message writeFrameRequest
    {
        // ID of the object on which to call the method
        ObjectRef objectPtr = 1;
        // The interval covered by the current frame.
        TimeSpanT interval = 2;
    }

    // Response packet corresponding to '[out] parameters in 'ApiGeometryExporter::writeFrame'
    message writeFrameResponse
    {
        
        bool result = 1;
    }

    // Request packet corresponding to '[in] parameters in ApiGeometryExporter::writeFrame1'
    message writeFrame1Request
    {
        // ID of the object on which to call the method
        ObjectRef objectPtr = 1;
    }

    // Response packet corresponding to '[out] parameters in 'ApiGeometryExporter::writeFrame1'
    message writeFrame1Response
    {
        
        bool result = 1;
    }

    // Request packet corresponding to '[in] parameters in ApiGeometryExporter::writeTimeSampling'
    message writeTimeSamplingRequest
    {
        // ID of the object on which to call the method
        ObjectRef objectPtr = 1;
        // The time sampling pattern which was used.
        ApiTimeSampling times = 2;
    }

    // Response packet corresponding to '[out] parameters in 'ApiGeometryExporter::writeTimeSampling'
    message writeTimeSamplingResponse
    {
        //     TRUE if the given time sampling was valid and can be written to the file.
        bool result = 1;
    }

    // Request packet corresponding to '[in] parameters in ApiGeometryExporter::createGeometryArchive'
    message createGeometryArchiveRequest
    {
        // ID of the object on which to call the method
        ObjectRef objectPtr = 1;
        // The parent node graph where to place the node graph. Should be the same node graph where
        ObjectRef owner = 2;
        // TRUE if the created node graph should contain inputs for object layer entries
        bool createObjectInputs = 3;
    }

    // Response packet corresponding to '[out] parameters in 'ApiGeometryExporter::createGeometryArchive'
    message createGeometryArchiveResponse
    {
        //     A geometry archive. This archive will have its file name set, but it will not be
        ObjectRef result = 1;
    }

    // Request packet corresponding to '[in] parameters in ApiGeometryExporter::destroy'
    message destroyRequest
    {
        // ID of the object on which to call the method
        ObjectRef objectPtr = 1;
    }

}


// GRPC interface definition for class 'ApiGeometryExporter' from 'apigeometryexporter.h'
service ApiGeometryExporterService
{
    /// Tells whether 
    rpc isSupported(ApiGeometryExporter.isSupportedRequest) returns (ApiGeometryExporter.isSupportedResponse);
    /// Creates an exporter to export geometry to a file
    rpc create(ApiGeometryExporter.createRequest) returns (ApiGeometryExporter.createResponse);
    /// Sets the aspect ratio used for exporting cameras
    rpc setAspectRatio(ApiGeometryExporter.setAspectRatioRequest) returns (google.protobuf.Empty);
    /// Sets additional FBX options
    ///
    /// 
    rpc setFbxOptions(ApiGeometryExporter.setFbxOptionsRequest) returns (google.protobuf.Empty);
    /// Adds an item to this exporter
    rpc addItem(ApiGeometryExporter.addItemRequest) returns (ApiGeometryExporter.addItemResponse);
    /// Write the current state of the node graph to the file
    rpc writeFrame(ApiGeometryExporter.writeFrameRequest) returns (ApiGeometryExporter.writeFrameResponse);
    /// Write the current state of the node graph to the file, using an empty interval so no
    /// sub frames will be exported for any object
    rpc writeFrame1(ApiGeometryExporter.writeFrame1Request) returns (ApiGeometryExporter.writeFrame1Response);
    /// Saves the time sampling pattern to the file
    rpc writeTimeSampling(ApiGeometryExporter.writeTimeSamplingRequest) returns (ApiGeometryExporter.writeTimeSamplingResponse);
    /// Creates a geometry archive node for this exported geometry, containing all the input pins
    /// which will be created when the exported file is loaded into this node
    rpc createGeometryArchive(ApiGeometryExporter.createGeometryArchiveRequest) returns (ApiGeometryExporter.createGeometryArchiveResponse);
    /// Closes the file and destroys this exporter
    rpc destroy(ApiGeometryExporter.destroyRequest) returns (google.protobuf.Empty);
}
