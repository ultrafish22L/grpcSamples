// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apigeometryexporter.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apigeometryexporter_2eproto__INCLUDED
#define GRPC_apigeometryexporter_2eproto__INCLUDED

#include "apigeometryexporter.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiGeometryExporter' from 'apigeometryexporter.h'
class ApiGeometryExporterService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiGeometryExporterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Tells whether 
    virtual ::grpc::Status isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest& request, ::octaneapi::ApiGeometryExporter_isSupportedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_isSupportedResponse>> AsyncisSupported(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_isSupportedResponse>>(AsyncisSupportedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_isSupportedResponse>> PrepareAsyncisSupported(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_isSupportedResponse>>(PrepareAsyncisSupportedRaw(context, request, cq));
    }
    // / Creates an exporter to export geometry to a file
    virtual ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createRequest& request, ::octaneapi::ApiGeometryExporter_createResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    // / Sets the aspect ratio used for exporting cameras
    virtual ::grpc::Status setAspectRatio(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetAspectRatio(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetAspectRatioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetAspectRatio(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetAspectRatioRaw(context, request, cq));
    }
    // / Sets additional FBX options
    // /
    // / 
    virtual ::grpc::Status setFbxOptions(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetFbxOptions(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetFbxOptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetFbxOptions(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetFbxOptionsRaw(context, request, cq));
    }
    // / Adds an item to this exporter
    virtual ::grpc::Status addItem(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest& request, ::octaneapi::ApiGeometryExporter_addItemResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_addItemResponse>> AsyncaddItem(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_addItemResponse>>(AsyncaddItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_addItemResponse>> PrepareAsyncaddItem(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_addItemResponse>>(PrepareAsyncaddItemRaw(context, request, cq));
    }
    // / Write the current state of the node graph to the file
    virtual ::grpc::Status writeFrame(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest& request, ::octaneapi::ApiGeometryExporter_writeFrameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeFrameResponse>> AsyncwriteFrame(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeFrameResponse>>(AsyncwriteFrameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeFrameResponse>> PrepareAsyncwriteFrame(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeFrameResponse>>(PrepareAsyncwriteFrameRaw(context, request, cq));
    }
    // / Write the current state of the node graph to the file, using an empty interval so no
    // / sub frames will be exported for any object
    virtual ::grpc::Status writeFrame1(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request& request, ::octaneapi::ApiGeometryExporter_writeFrame1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeFrame1Response>> AsyncwriteFrame1(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeFrame1Response>>(AsyncwriteFrame1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeFrame1Response>> PrepareAsyncwriteFrame1(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeFrame1Response>>(PrepareAsyncwriteFrame1Raw(context, request, cq));
    }
    // / Saves the time sampling pattern to the file
    virtual ::grpc::Status writeTimeSampling(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest& request, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>> AsyncwriteTimeSampling(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>>(AsyncwriteTimeSamplingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>> PrepareAsyncwriteTimeSampling(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>>(PrepareAsyncwriteTimeSamplingRaw(context, request, cq));
    }
    // / Creates a geometry archive node for this exported geometry, containing all the input pins
    // / which will be created when the exported file is loaded into this node
    virtual ::grpc::Status createGeometryArchive(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest& request, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>> AsynccreateGeometryArchive(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>>(AsynccreateGeometryArchiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>> PrepareAsynccreateGeometryArchive(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>>(PrepareAsynccreateGeometryArchiveRaw(context, request, cq));
    }
    // / Closes the file and destroys this exporter
    virtual ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Tells whether 
      virtual void isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest* request, ::octaneapi::ApiGeometryExporter_isSupportedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest* request, ::octaneapi::ApiGeometryExporter_isSupportedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Creates an exporter to export geometry to a file
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createRequest* request, ::octaneapi::ApiGeometryExporter_createResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createRequest* request, ::octaneapi::ApiGeometryExporter_createResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Sets the aspect ratio used for exporting cameras
      virtual void setAspectRatio(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setAspectRatio(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Sets additional FBX options
      // /
      // / 
      virtual void setFbxOptions(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setFbxOptions(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Adds an item to this exporter
      virtual void addItem(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest* request, ::octaneapi::ApiGeometryExporter_addItemResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addItem(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest* request, ::octaneapi::ApiGeometryExporter_addItemResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Write the current state of the node graph to the file
      virtual void writeFrame(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest* request, ::octaneapi::ApiGeometryExporter_writeFrameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void writeFrame(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest* request, ::octaneapi::ApiGeometryExporter_writeFrameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Write the current state of the node graph to the file, using an empty interval so no
      // / sub frames will be exported for any object
      virtual void writeFrame1(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request* request, ::octaneapi::ApiGeometryExporter_writeFrame1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void writeFrame1(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request* request, ::octaneapi::ApiGeometryExporter_writeFrame1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Saves the time sampling pattern to the file
      virtual void writeTimeSampling(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest* request, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void writeTimeSampling(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest* request, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Creates a geometry archive node for this exported geometry, containing all the input pins
      // / which will be created when the exported file is loaded into this node
      virtual void createGeometryArchive(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest* request, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createGeometryArchive(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest* request, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Closes the file and destroys this exporter
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_isSupportedResponse>* AsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_isSupportedResponse>* PrepareAsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetAspectRatioRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetAspectRatioRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetFbxOptionsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetFbxOptionsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_addItemResponse>* AsyncaddItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_addItemResponse>* PrepareAsyncaddItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeFrameResponse>* AsyncwriteFrameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeFrameResponse>* PrepareAsyncwriteFrameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeFrame1Response>* AsyncwriteFrame1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeFrame1Response>* PrepareAsyncwriteFrame1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>* AsyncwriteTimeSamplingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>* PrepareAsyncwriteTimeSamplingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>* AsynccreateGeometryArchiveRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>* PrepareAsynccreateGeometryArchiveRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest& request, ::octaneapi::ApiGeometryExporter_isSupportedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_isSupportedResponse>> AsyncisSupported(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_isSupportedResponse>>(AsyncisSupportedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_isSupportedResponse>> PrepareAsyncisSupported(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_isSupportedResponse>>(PrepareAsyncisSupportedRaw(context, request, cq));
    }
    ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createRequest& request, ::octaneapi::ApiGeometryExporter_createResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    ::grpc::Status setAspectRatio(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetAspectRatio(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetAspectRatioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetAspectRatio(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetAspectRatioRaw(context, request, cq));
    }
    ::grpc::Status setFbxOptions(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetFbxOptions(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetFbxOptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetFbxOptions(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetFbxOptionsRaw(context, request, cq));
    }
    ::grpc::Status addItem(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest& request, ::octaneapi::ApiGeometryExporter_addItemResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_addItemResponse>> AsyncaddItem(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_addItemResponse>>(AsyncaddItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_addItemResponse>> PrepareAsyncaddItem(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_addItemResponse>>(PrepareAsyncaddItemRaw(context, request, cq));
    }
    ::grpc::Status writeFrame(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest& request, ::octaneapi::ApiGeometryExporter_writeFrameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeFrameResponse>> AsyncwriteFrame(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeFrameResponse>>(AsyncwriteFrameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeFrameResponse>> PrepareAsyncwriteFrame(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeFrameResponse>>(PrepareAsyncwriteFrameRaw(context, request, cq));
    }
    ::grpc::Status writeFrame1(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request& request, ::octaneapi::ApiGeometryExporter_writeFrame1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeFrame1Response>> AsyncwriteFrame1(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeFrame1Response>>(AsyncwriteFrame1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeFrame1Response>> PrepareAsyncwriteFrame1(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeFrame1Response>>(PrepareAsyncwriteFrame1Raw(context, request, cq));
    }
    ::grpc::Status writeTimeSampling(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest& request, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>> AsyncwriteTimeSampling(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>>(AsyncwriteTimeSamplingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>> PrepareAsyncwriteTimeSampling(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>>(PrepareAsyncwriteTimeSamplingRaw(context, request, cq));
    }
    ::grpc::Status createGeometryArchive(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest& request, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>> AsynccreateGeometryArchive(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>>(AsynccreateGeometryArchiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>> PrepareAsynccreateGeometryArchive(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>>(PrepareAsynccreateGeometryArchiveRaw(context, request, cq));
    }
    ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest* request, ::octaneapi::ApiGeometryExporter_isSupportedResponse* response, std::function<void(::grpc::Status)>) override;
      void isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest* request, ::octaneapi::ApiGeometryExporter_isSupportedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createRequest* request, ::octaneapi::ApiGeometryExporter_createResponse* response, std::function<void(::grpc::Status)>) override;
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createRequest* request, ::octaneapi::ApiGeometryExporter_createResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setAspectRatio(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void setAspectRatio(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setFbxOptions(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void setFbxOptions(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void addItem(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest* request, ::octaneapi::ApiGeometryExporter_addItemResponse* response, std::function<void(::grpc::Status)>) override;
      void addItem(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest* request, ::octaneapi::ApiGeometryExporter_addItemResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void writeFrame(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest* request, ::octaneapi::ApiGeometryExporter_writeFrameResponse* response, std::function<void(::grpc::Status)>) override;
      void writeFrame(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest* request, ::octaneapi::ApiGeometryExporter_writeFrameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void writeFrame1(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request* request, ::octaneapi::ApiGeometryExporter_writeFrame1Response* response, std::function<void(::grpc::Status)>) override;
      void writeFrame1(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request* request, ::octaneapi::ApiGeometryExporter_writeFrame1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void writeTimeSampling(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest* request, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* response, std::function<void(::grpc::Status)>) override;
      void writeTimeSampling(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest* request, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void createGeometryArchive(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest* request, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* response, std::function<void(::grpc::Status)>) override;
      void createGeometryArchive(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest* request, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_isSupportedResponse>* AsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_isSupportedResponse>* PrepareAsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetAspectRatioRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetAspectRatioRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetFbxOptionsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetFbxOptionsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_addItemResponse>* AsyncaddItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_addItemResponse>* PrepareAsyncaddItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeFrameResponse>* AsyncwriteFrameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeFrameResponse>* PrepareAsyncwriteFrameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeFrame1Response>* AsyncwriteFrame1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeFrame1Response>* PrepareAsyncwriteFrame1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>* AsyncwriteTimeSamplingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>* PrepareAsyncwriteTimeSamplingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>* AsynccreateGeometryArchiveRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>* PrepareAsynccreateGeometryArchiveRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_isSupported_;
    const ::grpc::internal::RpcMethod rpcmethod_create_;
    const ::grpc::internal::RpcMethod rpcmethod_setAspectRatio_;
    const ::grpc::internal::RpcMethod rpcmethod_setFbxOptions_;
    const ::grpc::internal::RpcMethod rpcmethod_addItem_;
    const ::grpc::internal::RpcMethod rpcmethod_writeFrame_;
    const ::grpc::internal::RpcMethod rpcmethod_writeFrame1_;
    const ::grpc::internal::RpcMethod rpcmethod_writeTimeSampling_;
    const ::grpc::internal::RpcMethod rpcmethod_createGeometryArchive_;
    const ::grpc::internal::RpcMethod rpcmethod_destroy_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Tells whether 
    virtual ::grpc::Status isSupported(::grpc::ServerContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest* request, ::octaneapi::ApiGeometryExporter_isSupportedResponse* response);
    // / Creates an exporter to export geometry to a file
    virtual ::grpc::Status create(::grpc::ServerContext* context, const ::octaneapi::ApiGeometryExporter_createRequest* request, ::octaneapi::ApiGeometryExporter_createResponse* response);
    // / Sets the aspect ratio used for exporting cameras
    virtual ::grpc::Status setAspectRatio(::grpc::ServerContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest* request, ::google::protobuf::Empty* response);
    // / Sets additional FBX options
    // /
    // / 
    virtual ::grpc::Status setFbxOptions(::grpc::ServerContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest* request, ::google::protobuf::Empty* response);
    // / Adds an item to this exporter
    virtual ::grpc::Status addItem(::grpc::ServerContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest* request, ::octaneapi::ApiGeometryExporter_addItemResponse* response);
    // / Write the current state of the node graph to the file
    virtual ::grpc::Status writeFrame(::grpc::ServerContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest* request, ::octaneapi::ApiGeometryExporter_writeFrameResponse* response);
    // / Write the current state of the node graph to the file, using an empty interval so no
    // / sub frames will be exported for any object
    virtual ::grpc::Status writeFrame1(::grpc::ServerContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request* request, ::octaneapi::ApiGeometryExporter_writeFrame1Response* response);
    // / Saves the time sampling pattern to the file
    virtual ::grpc::Status writeTimeSampling(::grpc::ServerContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest* request, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* response);
    // / Creates a geometry archive node for this exported geometry, containing all the input pins
    // / which will be created when the exported file is loaded into this node
    virtual ::grpc::Status createGeometryArchive(::grpc::ServerContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest* request, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* response);
    // / Closes the file and destroys this exporter
    virtual ::grpc::Status destroy(::grpc::ServerContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isSupported() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_isSupportedRequest* /*request*/, ::octaneapi::ApiGeometryExporter_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisSupported(::grpc::ServerContext* context, ::octaneapi::ApiGeometryExporter_isSupportedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiGeometryExporter_isSupportedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_create() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_createRequest* /*request*/, ::octaneapi::ApiGeometryExporter_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::octaneapi::ApiGeometryExporter_createRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiGeometryExporter_createResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setAspectRatio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setAspectRatio() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_setAspectRatio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setAspectRatio(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetAspectRatio(::grpc::ServerContext* context, ::octaneapi::ApiGeometryExporter_setAspectRatioRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setFbxOptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setFbxOptions() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_setFbxOptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFbxOptions(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetFbxOptions(::grpc::ServerContext* context, ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addItem() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_addItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_addItemRequest* /*request*/, ::octaneapi::ApiGeometryExporter_addItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddItem(::grpc::ServerContext* context, ::octaneapi::ApiGeometryExporter_addItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiGeometryExporter_addItemResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_writeFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_writeFrame() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_writeFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeFrame(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeFrameRequest* /*request*/, ::octaneapi::ApiGeometryExporter_writeFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestwriteFrame(::grpc::ServerContext* context, ::octaneapi::ApiGeometryExporter_writeFrameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiGeometryExporter_writeFrameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_writeFrame1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_writeFrame1() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_writeFrame1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeFrame1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeFrame1Request* /*request*/, ::octaneapi::ApiGeometryExporter_writeFrame1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestwriteFrame1(::grpc::ServerContext* context, ::octaneapi::ApiGeometryExporter_writeFrame1Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiGeometryExporter_writeFrame1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_writeTimeSampling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_writeTimeSampling() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_writeTimeSampling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeTimeSampling(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest* /*request*/, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestwriteTimeSampling(::grpc::ServerContext* context, ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createGeometryArchive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createGeometryArchive() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_createGeometryArchive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGeometryArchive(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest* /*request*/, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateGeometryArchive(::grpc::ServerContext* context, ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_destroy() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::octaneapi::ApiGeometryExporter_destroyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_isSupported<WithAsyncMethod_create<WithAsyncMethod_setAspectRatio<WithAsyncMethod_setFbxOptions<WithAsyncMethod_addItem<WithAsyncMethod_writeFrame<WithAsyncMethod_writeFrame1<WithAsyncMethod_writeTimeSampling<WithAsyncMethod_createGeometryArchive<WithAsyncMethod_destroy<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isSupported() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_isSupportedRequest, ::octaneapi::ApiGeometryExporter_isSupportedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiGeometryExporter_isSupportedRequest* request, ::octaneapi::ApiGeometryExporter_isSupportedResponse* response) { return this->isSupported(context, request, response); }));}
    void SetMessageAllocatorFor_isSupported(
        ::grpc::MessageAllocator< ::octaneapi::ApiGeometryExporter_isSupportedRequest, ::octaneapi::ApiGeometryExporter_isSupportedResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_isSupportedRequest, ::octaneapi::ApiGeometryExporter_isSupportedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_isSupportedRequest* /*request*/, ::octaneapi::ApiGeometryExporter_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isSupported(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_isSupportedRequest* /*request*/, ::octaneapi::ApiGeometryExporter_isSupportedResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_create() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_createRequest, ::octaneapi::ApiGeometryExporter_createResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiGeometryExporter_createRequest* request, ::octaneapi::ApiGeometryExporter_createResponse* response) { return this->create(context, request, response); }));}
    void SetMessageAllocatorFor_create(
        ::grpc::MessageAllocator< ::octaneapi::ApiGeometryExporter_createRequest, ::octaneapi::ApiGeometryExporter_createResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_createRequest, ::octaneapi::ApiGeometryExporter_createResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_createRequest* /*request*/, ::octaneapi::ApiGeometryExporter_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_createRequest* /*request*/, ::octaneapi::ApiGeometryExporter_createResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setAspectRatio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setAspectRatio() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_setAspectRatioRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest* request, ::google::protobuf::Empty* response) { return this->setAspectRatio(context, request, response); }));}
    void SetMessageAllocatorFor_setAspectRatio(
        ::grpc::MessageAllocator< ::octaneapi::ApiGeometryExporter_setAspectRatioRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_setAspectRatioRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setAspectRatio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setAspectRatio(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setAspectRatio(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setFbxOptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setFbxOptions() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest* request, ::google::protobuf::Empty* response) { return this->setFbxOptions(context, request, response); }));}
    void SetMessageAllocatorFor_setFbxOptions(
        ::grpc::MessageAllocator< ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setFbxOptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFbxOptions(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setFbxOptions(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_addItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addItem() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_addItemRequest, ::octaneapi::ApiGeometryExporter_addItemResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiGeometryExporter_addItemRequest* request, ::octaneapi::ApiGeometryExporter_addItemResponse* response) { return this->addItem(context, request, response); }));}
    void SetMessageAllocatorFor_addItem(
        ::grpc::MessageAllocator< ::octaneapi::ApiGeometryExporter_addItemRequest, ::octaneapi::ApiGeometryExporter_addItemResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_addItemRequest, ::octaneapi::ApiGeometryExporter_addItemResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_addItemRequest* /*request*/, ::octaneapi::ApiGeometryExporter_addItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addItem(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_addItemRequest* /*request*/, ::octaneapi::ApiGeometryExporter_addItemResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_writeFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_writeFrame() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_writeFrameRequest, ::octaneapi::ApiGeometryExporter_writeFrameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiGeometryExporter_writeFrameRequest* request, ::octaneapi::ApiGeometryExporter_writeFrameResponse* response) { return this->writeFrame(context, request, response); }));}
    void SetMessageAllocatorFor_writeFrame(
        ::grpc::MessageAllocator< ::octaneapi::ApiGeometryExporter_writeFrameRequest, ::octaneapi::ApiGeometryExporter_writeFrameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_writeFrameRequest, ::octaneapi::ApiGeometryExporter_writeFrameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_writeFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeFrame(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeFrameRequest* /*request*/, ::octaneapi::ApiGeometryExporter_writeFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* writeFrame(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeFrameRequest* /*request*/, ::octaneapi::ApiGeometryExporter_writeFrameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_writeFrame1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_writeFrame1() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_writeFrame1Request, ::octaneapi::ApiGeometryExporter_writeFrame1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiGeometryExporter_writeFrame1Request* request, ::octaneapi::ApiGeometryExporter_writeFrame1Response* response) { return this->writeFrame1(context, request, response); }));}
    void SetMessageAllocatorFor_writeFrame1(
        ::grpc::MessageAllocator< ::octaneapi::ApiGeometryExporter_writeFrame1Request, ::octaneapi::ApiGeometryExporter_writeFrame1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_writeFrame1Request, ::octaneapi::ApiGeometryExporter_writeFrame1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_writeFrame1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeFrame1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeFrame1Request* /*request*/, ::octaneapi::ApiGeometryExporter_writeFrame1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* writeFrame1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeFrame1Request* /*request*/, ::octaneapi::ApiGeometryExporter_writeFrame1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_writeTimeSampling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_writeTimeSampling() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest* request, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* response) { return this->writeTimeSampling(context, request, response); }));}
    void SetMessageAllocatorFor_writeTimeSampling(
        ::grpc::MessageAllocator< ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_writeTimeSampling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeTimeSampling(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest* /*request*/, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* writeTimeSampling(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest* /*request*/, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createGeometryArchive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createGeometryArchive() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest* request, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* response) { return this->createGeometryArchive(context, request, response); }));}
    void SetMessageAllocatorFor_createGeometryArchive(
        ::grpc::MessageAllocator< ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createGeometryArchive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGeometryArchive(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest* /*request*/, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createGeometryArchive(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest* /*request*/, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_destroyRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiGeometryExporter_destroyRequest* request, ::google::protobuf::Empty* response) { return this->destroy(context, request, response); }));}
    void SetMessageAllocatorFor_destroy(
        ::grpc::MessageAllocator< ::octaneapi::ApiGeometryExporter_destroyRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiGeometryExporter_destroyRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_isSupported<WithCallbackMethod_create<WithCallbackMethod_setAspectRatio<WithCallbackMethod_setFbxOptions<WithCallbackMethod_addItem<WithCallbackMethod_writeFrame<WithCallbackMethod_writeFrame1<WithCallbackMethod_writeTimeSampling<WithCallbackMethod_createGeometryArchive<WithCallbackMethod_destroy<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isSupported() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_isSupportedRequest* /*request*/, ::octaneapi::ApiGeometryExporter_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_create() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_createRequest* /*request*/, ::octaneapi::ApiGeometryExporter_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setAspectRatio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setAspectRatio() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_setAspectRatio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setAspectRatio(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setFbxOptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setFbxOptions() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_setFbxOptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFbxOptions(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addItem() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_addItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_addItemRequest* /*request*/, ::octaneapi::ApiGeometryExporter_addItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_writeFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_writeFrame() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_writeFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeFrame(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeFrameRequest* /*request*/, ::octaneapi::ApiGeometryExporter_writeFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_writeFrame1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_writeFrame1() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_writeFrame1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeFrame1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeFrame1Request* /*request*/, ::octaneapi::ApiGeometryExporter_writeFrame1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_writeTimeSampling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_writeTimeSampling() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_writeTimeSampling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeTimeSampling(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest* /*request*/, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createGeometryArchive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createGeometryArchive() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_createGeometryArchive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGeometryArchive(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest* /*request*/, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_destroy() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isSupported() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_isSupportedRequest* /*request*/, ::octaneapi::ApiGeometryExporter_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisSupported(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_create() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_createRequest* /*request*/, ::octaneapi::ApiGeometryExporter_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setAspectRatio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setAspectRatio() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_setAspectRatio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setAspectRatio(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetAspectRatio(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setFbxOptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setFbxOptions() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_setFbxOptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFbxOptions(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetFbxOptions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addItem() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_addItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_addItemRequest* /*request*/, ::octaneapi::ApiGeometryExporter_addItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_writeFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_writeFrame() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_writeFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeFrame(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeFrameRequest* /*request*/, ::octaneapi::ApiGeometryExporter_writeFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestwriteFrame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_writeFrame1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_writeFrame1() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_writeFrame1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeFrame1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeFrame1Request* /*request*/, ::octaneapi::ApiGeometryExporter_writeFrame1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestwriteFrame1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_writeTimeSampling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_writeTimeSampling() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_writeTimeSampling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeTimeSampling(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest* /*request*/, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestwriteTimeSampling(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createGeometryArchive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createGeometryArchive() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_createGeometryArchive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGeometryArchive(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest* /*request*/, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateGeometryArchive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_destroy() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isSupported() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isSupported(context, request, response); }));
    }
    ~WithRawCallbackMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_isSupportedRequest* /*request*/, ::octaneapi::ApiGeometryExporter_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isSupported(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_create() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->create(context, request, response); }));
    }
    ~WithRawCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_createRequest* /*request*/, ::octaneapi::ApiGeometryExporter_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setAspectRatio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setAspectRatio() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setAspectRatio(context, request, response); }));
    }
    ~WithRawCallbackMethod_setAspectRatio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setAspectRatio(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setAspectRatio(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setFbxOptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setFbxOptions() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setFbxOptions(context, request, response); }));
    }
    ~WithRawCallbackMethod_setFbxOptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFbxOptions(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setFbxOptions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addItem() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addItem(context, request, response); }));
    }
    ~WithRawCallbackMethod_addItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_addItemRequest* /*request*/, ::octaneapi::ApiGeometryExporter_addItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_writeFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_writeFrame() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->writeFrame(context, request, response); }));
    }
    ~WithRawCallbackMethod_writeFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeFrame(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeFrameRequest* /*request*/, ::octaneapi::ApiGeometryExporter_writeFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* writeFrame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_writeFrame1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_writeFrame1() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->writeFrame1(context, request, response); }));
    }
    ~WithRawCallbackMethod_writeFrame1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeFrame1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeFrame1Request* /*request*/, ::octaneapi::ApiGeometryExporter_writeFrame1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* writeFrame1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_writeTimeSampling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_writeTimeSampling() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->writeTimeSampling(context, request, response); }));
    }
    ~WithRawCallbackMethod_writeTimeSampling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status writeTimeSampling(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest* /*request*/, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* writeTimeSampling(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createGeometryArchive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createGeometryArchive() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createGeometryArchive(context, request, response); }));
    }
    ~WithRawCallbackMethod_createGeometryArchive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createGeometryArchive(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest* /*request*/, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createGeometryArchive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->destroy(context, request, response); }));
    }
    ~WithRawCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isSupported() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiGeometryExporter_isSupportedRequest, ::octaneapi::ApiGeometryExporter_isSupportedResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiGeometryExporter_isSupportedRequest, ::octaneapi::ApiGeometryExporter_isSupportedResponse>* streamer) {
                       return this->StreamedisSupported(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_isSupportedRequest* /*request*/, ::octaneapi::ApiGeometryExporter_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisSupported(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiGeometryExporter_isSupportedRequest,::octaneapi::ApiGeometryExporter_isSupportedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_create() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiGeometryExporter_createRequest, ::octaneapi::ApiGeometryExporter_createResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiGeometryExporter_createRequest, ::octaneapi::ApiGeometryExporter_createResponse>* streamer) {
                       return this->Streamedcreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_createRequest* /*request*/, ::octaneapi::ApiGeometryExporter_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiGeometryExporter_createRequest,::octaneapi::ApiGeometryExporter_createResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setAspectRatio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setAspectRatio() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiGeometryExporter_setAspectRatioRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiGeometryExporter_setAspectRatioRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetAspectRatio(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setAspectRatio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setAspectRatio(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_setAspectRatioRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetAspectRatio(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiGeometryExporter_setAspectRatioRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setFbxOptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setFbxOptions() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetFbxOptions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setFbxOptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setFbxOptions(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetFbxOptions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiGeometryExporter_setFbxOptionsRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addItem() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiGeometryExporter_addItemRequest, ::octaneapi::ApiGeometryExporter_addItemResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiGeometryExporter_addItemRequest, ::octaneapi::ApiGeometryExporter_addItemResponse>* streamer) {
                       return this->StreamedaddItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_addItemRequest* /*request*/, ::octaneapi::ApiGeometryExporter_addItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiGeometryExporter_addItemRequest,::octaneapi::ApiGeometryExporter_addItemResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_writeFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_writeFrame() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiGeometryExporter_writeFrameRequest, ::octaneapi::ApiGeometryExporter_writeFrameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiGeometryExporter_writeFrameRequest, ::octaneapi::ApiGeometryExporter_writeFrameResponse>* streamer) {
                       return this->StreamedwriteFrame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_writeFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status writeFrame(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeFrameRequest* /*request*/, ::octaneapi::ApiGeometryExporter_writeFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedwriteFrame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiGeometryExporter_writeFrameRequest,::octaneapi::ApiGeometryExporter_writeFrameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_writeFrame1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_writeFrame1() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiGeometryExporter_writeFrame1Request, ::octaneapi::ApiGeometryExporter_writeFrame1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiGeometryExporter_writeFrame1Request, ::octaneapi::ApiGeometryExporter_writeFrame1Response>* streamer) {
                       return this->StreamedwriteFrame1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_writeFrame1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status writeFrame1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeFrame1Request* /*request*/, ::octaneapi::ApiGeometryExporter_writeFrame1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedwriteFrame1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiGeometryExporter_writeFrame1Request,::octaneapi::ApiGeometryExporter_writeFrame1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_writeTimeSampling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_writeTimeSampling() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>* streamer) {
                       return this->StreamedwriteTimeSampling(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_writeTimeSampling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status writeTimeSampling(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest* /*request*/, ::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedwriteTimeSampling(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiGeometryExporter_writeTimeSamplingRequest,::octaneapi::ApiGeometryExporter_writeTimeSamplingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createGeometryArchive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createGeometryArchive() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>* streamer) {
                       return this->StreamedcreateGeometryArchive(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createGeometryArchive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createGeometryArchive(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest* /*request*/, ::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateGeometryArchive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiGeometryExporter_createGeometryArchiveRequest,::octaneapi::ApiGeometryExporter_createGeometryArchiveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_destroy() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiGeometryExporter_destroyRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiGeometryExporter_destroyRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streameddestroy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiGeometryExporter_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddestroy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiGeometryExporter_destroyRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_isSupported<WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_setAspectRatio<WithStreamedUnaryMethod_setFbxOptions<WithStreamedUnaryMethod_addItem<WithStreamedUnaryMethod_writeFrame<WithStreamedUnaryMethod_writeFrame1<WithStreamedUnaryMethod_writeTimeSampling<WithStreamedUnaryMethod_createGeometryArchive<WithStreamedUnaryMethod_destroy<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_isSupported<WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_setAspectRatio<WithStreamedUnaryMethod_setFbxOptions<WithStreamedUnaryMethod_addItem<WithStreamedUnaryMethod_writeFrame<WithStreamedUnaryMethod_writeFrame1<WithStreamedUnaryMethod_writeTimeSampling<WithStreamedUnaryMethod_createGeometryArchive<WithStreamedUnaryMethod_destroy<Service > > > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apigeometryexporter_2eproto__INCLUDED
