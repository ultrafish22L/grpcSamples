// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apirender.proto

#include "apirender.pb.h"
#include "apirender.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiRenderEngineService_method_names[] = {
  "/octaneapi.ApiRenderEngineService/setRenderTargetNode",
  "/octaneapi.ApiRenderEngineService/getRenderTargetNode",
  "/octaneapi.ApiRenderEngineService/getRenderGeometryNode",
  "/octaneapi.ApiRenderEngineService/getRenderCameraNode",
  "/octaneapi.ApiRenderEngineService/setRenderRegion",
  "/octaneapi.ApiRenderEngineService/getRenderRegion",
  "/octaneapi.ApiRenderEngineService/setAsyncTonemapParams",
  "/octaneapi.ApiRenderEngineService/setAsyncTonemapParams1",
  "/octaneapi.ApiRenderEngineService/asyncTonemapBufferType",
  "/octaneapi.ApiRenderEngineService/asyncTonemapCryptomatteFalseColor",
  "/octaneapi.ApiRenderEngineService/asyncTonemapOutputColorSpaceInfo",
  "/octaneapi.ApiRenderEngineService/asyncTonemapColorSpace",
  "/octaneapi.ApiRenderEngineService/asyncTonemapPremultipliedAlphaType",
  "/octaneapi.ApiRenderEngineService/setAsyncTonemapRenderPasses",
  "/octaneapi.ApiRenderEngineService/asyncTonemapRenderPasses",
  "/octaneapi.ApiRenderEngineService/getEnabledAovs",
  "/octaneapi.ApiRenderEngineService/freeTonemapPasses",
  "/octaneapi.ApiRenderEngineService/displayRenderPassId",
  "/octaneapi.ApiRenderEngineService/setSubSampleMode",
  "/octaneapi.ApiRenderEngineService/getSubSampleMode",
  "/octaneapi.ApiRenderEngineService/setClayMode",
  "/octaneapi.ApiRenderEngineService/clayMode",
  "/octaneapi.ApiRenderEngineService/fps",
  "/octaneapi.ApiRenderEngineService/setFps",
  "/octaneapi.ApiRenderEngineService/isCompiling",
  "/octaneapi.ApiRenderEngineService/isCompressingTextures",
  "/octaneapi.ApiRenderEngineService/hasPendingRenderData",
  "/octaneapi.ApiRenderEngineService/getCurrentChangeLevel",
  "/octaneapi.ApiRenderEngineService/getRenderImageChangeLevel",
  "/octaneapi.ApiRenderEngineService/getRenderRestartedChangeLevel",
  "/octaneapi.ApiRenderEngineService/setAsyncUpdateCallback",
  "/octaneapi.ApiRenderEngineService/updatesAreAsync",
  "/octaneapi.ApiRenderEngineService/isImageReady",
  "/octaneapi.ApiRenderEngineService/resetImageReady",
  "/octaneapi.ApiRenderEngineService/isRenderFailure",
  "/octaneapi.ApiRenderEngineService/resetRenderFailure",
  "/octaneapi.ApiRenderEngineService/setOnTileBlendedCallback",
  "/octaneapi.ApiRenderEngineService/setOnNewStatisticsCallback",
  "/octaneapi.ApiRenderEngineService/setOnNewImageCallback",
  "/octaneapi.ApiRenderEngineService/setOnOcioErrorCallback",
  "/octaneapi.ApiRenderEngineService/setOnRenderFailureCallback",
  "/octaneapi.ApiRenderEngineService/setForceCallbacksInRenderThreads",
  "/octaneapi.ApiRenderEngineService/grabRenderResult",
  "/octaneapi.ApiRenderEngineService/releaseRenderResult",
  "/octaneapi.ApiRenderEngineService/synchronousTonemap",
  "/octaneapi.ApiRenderEngineService/synchronousTonemap1",
  "/octaneapi.ApiRenderEngineService/synchronousTonemapAllRenderPasses",
  "/octaneapi.ApiRenderEngineService/synchronousTonemapAllRenderPasses1",
  "/octaneapi.ApiRenderEngineService/getRenderStatistics",
  "/octaneapi.ApiRenderEngineService/getRenderResultStatistics",
  "/octaneapi.ApiRenderEngineService/saveImage",
  "/octaneapi.ApiRenderEngineService/saveImage1",
  "/octaneapi.ApiRenderEngineService/saveImage2",
  "/octaneapi.ApiRenderEngineService/saveRenderPasses",
  "/octaneapi.ApiRenderEngineService/saveRenderPasses1",
  "/octaneapi.ApiRenderEngineService/saveRenderPasses2",
  "/octaneapi.ApiRenderEngineService/saveRenderPassesMultiExr",
  "/octaneapi.ApiRenderEngineService/saveRenderPassesMultiExr1",
  "/octaneapi.ApiRenderEngineService/saveRenderPassesDeepExr",
  "/octaneapi.ApiRenderEngineService/deepImageEnabled",
  "/octaneapi.ApiRenderEngineService/deepImageEnabled1",
  "/octaneapi.ApiRenderEngineService/deepPassesEnabled",
  "/octaneapi.ApiRenderEngineService/canSaveDeepImage",
  "/octaneapi.ApiRenderEngineService/saveDeepImage",
  "/octaneapi.ApiRenderEngineService/saveRenderState",
  "/octaneapi.ApiRenderEngineService/loadRenderState",
  "/octaneapi.ApiRenderEngineService/previewMaterial",
  "/octaneapi.ApiRenderEngineService/previewMaterialHdr",
  "/octaneapi.ApiRenderEngineService/previewMaterial1",
  "/octaneapi.ApiRenderEngineService/getMemoryUsage",
  "/octaneapi.ApiRenderEngineService/getResourceStatistics",
  "/octaneapi.ApiRenderEngineService/getGeometryStatistics",
  "/octaneapi.ApiRenderEngineService/getTexturesStatistics",
  "/octaneapi.ApiRenderEngineService/getSceneBounds",
  "/octaneapi.ApiRenderEngineService/getDeviceCount",
  "/octaneapi.ApiRenderEngineService/getDeviceComputeModel",
  "/octaneapi.ApiRenderEngineService/getDeviceName",
  "/octaneapi.ApiRenderEngineService/isSupportedDevice",
  "/octaneapi.ApiRenderEngineService/deviceCanRender",
  "/octaneapi.ApiRenderEngineService/deviceCanDenoise",
  "/octaneapi.ApiRenderEngineService/deviceSupportsHardwareRayTracing",
  "/octaneapi.ApiRenderEngineService/deviceSharedSurfaceInfo",
  "/octaneapi.ApiRenderEngineService/getAvailablePeerToPeerPairs",
  "/octaneapi.ApiRenderEngineService/setDevicesActivity",
  "/octaneapi.ApiRenderEngineService/isDeviceUsedForRendering",
  "/octaneapi.ApiRenderEngineService/deviceUsesPriority",
  "/octaneapi.ApiRenderEngineService/deviceUsesHardwareRayTracing",
  "/octaneapi.ApiRenderEngineService/imageDeviceIndex",
  "/octaneapi.ApiRenderEngineService/isDeviceUsedForDenoising",
  "/octaneapi.ApiRenderEngineService/renderPriority",
  "/octaneapi.ApiRenderEngineService/setRenderPriority",
  "/octaneapi.ApiRenderEngineService/currentPeerToPeerGroups",
  "/octaneapi.ApiRenderEngineService/hardwareRayTracingEnabled",
  "/octaneapi.ApiRenderEngineService/openDeviceSettings",
  "/octaneapi.ApiRenderEngineService/renderDeviceState",
  "/octaneapi.ApiRenderEngineService/renderDeviceErrorCode",
  "/octaneapi.ApiRenderEngineService/errorcodeToString",
  "/octaneapi.ApiRenderEngineService/renderDeviceErrorMessage",
  "/octaneapi.ApiRenderEngineService/saveRenderDeviceConfig",
  "/octaneapi.ApiRenderEngineService/outOfCoreEnabled",
  "/octaneapi.ApiRenderEngineService/enableOutOfCore",
  "/octaneapi.ApiRenderEngineService/disableOutOfCore",
  "/octaneapi.ApiRenderEngineService/getOutOfCoreMemoryUsage",
  "/octaneapi.ApiRenderEngineService/setGpuHeadroom",
  "/octaneapi.ApiRenderEngineService/getGpuHeadroom",
  "/octaneapi.ApiRenderEngineService/setCoreLimit",
  "/octaneapi.ApiRenderEngineService/disableCoreLimit",
  "/octaneapi.ApiRenderEngineService/registerInputSharedSurface",
  "/octaneapi.ApiRenderEngineService/unregisterInputSharedSurface",
  "/octaneapi.ApiRenderEngineService/triggerAsyncTonemap",
  "/octaneapi.ApiRenderEngineService/setSharedSurfaceOutputType",
  "/octaneapi.ApiRenderEngineService/getSharedSurfaceOutputType",
  "/octaneapi.ApiRenderEngineService/getRealTime",
  "/octaneapi.ApiRenderEngineService/pauseRendering",
  "/octaneapi.ApiRenderEngineService/continueRendering",
  "/octaneapi.ApiRenderEngineService/isRenderingPaused",
  "/octaneapi.ApiRenderEngineService/restartRendering",
  "/octaneapi.ApiRenderEngineService/stopRendering",
  "/octaneapi.ApiRenderEngineService/pick",
  "/octaneapi.ApiRenderEngineService/pickWhitePoint",
  "/octaneapi.ApiRenderEngineService/pickImagerWhitePoint",
  "/octaneapi.ApiRenderEngineService/isOutputAovWhitePointPickable",
  "/octaneapi.ApiRenderEngineService/pickOutputAovWhitePoint",
  "/octaneapi.ApiRenderEngineService/pickCryptomatteMatte",
  "/octaneapi.ApiRenderEngineService/modifyCryptomatteMatteSelection",
  "/octaneapi.ApiRenderEngineService/toString",
  "/octaneapi.ApiRenderEngineService/getDevicePciIds",
};

std::unique_ptr< ApiRenderEngineService::Stub> ApiRenderEngineService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiRenderEngineService::Stub> stub(new ApiRenderEngineService::Stub(channel, options));
  return stub;
}

ApiRenderEngineService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_setRenderTargetNode_(ApiRenderEngineService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRenderTargetNode_(ApiRenderEngineService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRenderGeometryNode_(ApiRenderEngineService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRenderCameraNode_(ApiRenderEngineService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setRenderRegion_(ApiRenderEngineService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRenderRegion_(ApiRenderEngineService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setAsyncTonemapParams_(ApiRenderEngineService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setAsyncTonemapParams1_(ApiRenderEngineService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_asyncTonemapBufferType_(ApiRenderEngineService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_asyncTonemapCryptomatteFalseColor_(ApiRenderEngineService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_asyncTonemapOutputColorSpaceInfo_(ApiRenderEngineService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_asyncTonemapColorSpace_(ApiRenderEngineService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_asyncTonemapPremultipliedAlphaType_(ApiRenderEngineService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setAsyncTonemapRenderPasses_(ApiRenderEngineService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_asyncTonemapRenderPasses_(ApiRenderEngineService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getEnabledAovs_(ApiRenderEngineService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_freeTonemapPasses_(ApiRenderEngineService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_displayRenderPassId_(ApiRenderEngineService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setSubSampleMode_(ApiRenderEngineService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getSubSampleMode_(ApiRenderEngineService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setClayMode_(ApiRenderEngineService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clayMode_(ApiRenderEngineService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_fps_(ApiRenderEngineService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setFps_(ApiRenderEngineService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isCompiling_(ApiRenderEngineService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isCompressingTextures_(ApiRenderEngineService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hasPendingRenderData_(ApiRenderEngineService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCurrentChangeLevel_(ApiRenderEngineService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRenderImageChangeLevel_(ApiRenderEngineService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRenderRestartedChangeLevel_(ApiRenderEngineService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setAsyncUpdateCallback_(ApiRenderEngineService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_updatesAreAsync_(ApiRenderEngineService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isImageReady_(ApiRenderEngineService_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_resetImageReady_(ApiRenderEngineService_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isRenderFailure_(ApiRenderEngineService_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_resetRenderFailure_(ApiRenderEngineService_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setOnTileBlendedCallback_(ApiRenderEngineService_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setOnNewStatisticsCallback_(ApiRenderEngineService_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setOnNewImageCallback_(ApiRenderEngineService_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setOnOcioErrorCallback_(ApiRenderEngineService_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setOnRenderFailureCallback_(ApiRenderEngineService_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setForceCallbacksInRenderThreads_(ApiRenderEngineService_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_grabRenderResult_(ApiRenderEngineService_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_releaseRenderResult_(ApiRenderEngineService_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_synchronousTonemap_(ApiRenderEngineService_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_synchronousTonemap1_(ApiRenderEngineService_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_synchronousTonemapAllRenderPasses_(ApiRenderEngineService_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_synchronousTonemapAllRenderPasses1_(ApiRenderEngineService_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRenderStatistics_(ApiRenderEngineService_method_names[48], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRenderResultStatistics_(ApiRenderEngineService_method_names[49], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveImage_(ApiRenderEngineService_method_names[50], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveImage1_(ApiRenderEngineService_method_names[51], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveImage2_(ApiRenderEngineService_method_names[52], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveRenderPasses_(ApiRenderEngineService_method_names[53], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveRenderPasses1_(ApiRenderEngineService_method_names[54], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveRenderPasses2_(ApiRenderEngineService_method_names[55], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveRenderPassesMultiExr_(ApiRenderEngineService_method_names[56], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveRenderPassesMultiExr1_(ApiRenderEngineService_method_names[57], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveRenderPassesDeepExr_(ApiRenderEngineService_method_names[58], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deepImageEnabled_(ApiRenderEngineService_method_names[59], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deepImageEnabled1_(ApiRenderEngineService_method_names[60], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deepPassesEnabled_(ApiRenderEngineService_method_names[61], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_canSaveDeepImage_(ApiRenderEngineService_method_names[62], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveDeepImage_(ApiRenderEngineService_method_names[63], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveRenderState_(ApiRenderEngineService_method_names[64], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadRenderState_(ApiRenderEngineService_method_names[65], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_previewMaterial_(ApiRenderEngineService_method_names[66], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_previewMaterialHdr_(ApiRenderEngineService_method_names[67], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_previewMaterial1_(ApiRenderEngineService_method_names[68], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMemoryUsage_(ApiRenderEngineService_method_names[69], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getResourceStatistics_(ApiRenderEngineService_method_names[70], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGeometryStatistics_(ApiRenderEngineService_method_names[71], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTexturesStatistics_(ApiRenderEngineService_method_names[72], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getSceneBounds_(ApiRenderEngineService_method_names[73], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDeviceCount_(ApiRenderEngineService_method_names[74], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDeviceComputeModel_(ApiRenderEngineService_method_names[75], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDeviceName_(ApiRenderEngineService_method_names[76], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isSupportedDevice_(ApiRenderEngineService_method_names[77], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deviceCanRender_(ApiRenderEngineService_method_names[78], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deviceCanDenoise_(ApiRenderEngineService_method_names[79], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deviceSupportsHardwareRayTracing_(ApiRenderEngineService_method_names[80], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deviceSharedSurfaceInfo_(ApiRenderEngineService_method_names[81], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAvailablePeerToPeerPairs_(ApiRenderEngineService_method_names[82], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setDevicesActivity_(ApiRenderEngineService_method_names[83], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isDeviceUsedForRendering_(ApiRenderEngineService_method_names[84], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deviceUsesPriority_(ApiRenderEngineService_method_names[85], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deviceUsesHardwareRayTracing_(ApiRenderEngineService_method_names[86], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_imageDeviceIndex_(ApiRenderEngineService_method_names[87], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isDeviceUsedForDenoising_(ApiRenderEngineService_method_names[88], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_renderPriority_(ApiRenderEngineService_method_names[89], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setRenderPriority_(ApiRenderEngineService_method_names[90], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_currentPeerToPeerGroups_(ApiRenderEngineService_method_names[91], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hardwareRayTracingEnabled_(ApiRenderEngineService_method_names[92], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_openDeviceSettings_(ApiRenderEngineService_method_names[93], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_renderDeviceState_(ApiRenderEngineService_method_names[94], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_renderDeviceErrorCode_(ApiRenderEngineService_method_names[95], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_errorcodeToString_(ApiRenderEngineService_method_names[96], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_renderDeviceErrorMessage_(ApiRenderEngineService_method_names[97], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveRenderDeviceConfig_(ApiRenderEngineService_method_names[98], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_outOfCoreEnabled_(ApiRenderEngineService_method_names[99], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_enableOutOfCore_(ApiRenderEngineService_method_names[100], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_disableOutOfCore_(ApiRenderEngineService_method_names[101], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getOutOfCoreMemoryUsage_(ApiRenderEngineService_method_names[102], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setGpuHeadroom_(ApiRenderEngineService_method_names[103], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGpuHeadroom_(ApiRenderEngineService_method_names[104], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setCoreLimit_(ApiRenderEngineService_method_names[105], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_disableCoreLimit_(ApiRenderEngineService_method_names[106], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_registerInputSharedSurface_(ApiRenderEngineService_method_names[107], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unregisterInputSharedSurface_(ApiRenderEngineService_method_names[108], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_triggerAsyncTonemap_(ApiRenderEngineService_method_names[109], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setSharedSurfaceOutputType_(ApiRenderEngineService_method_names[110], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getSharedSurfaceOutputType_(ApiRenderEngineService_method_names[111], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRealTime_(ApiRenderEngineService_method_names[112], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pauseRendering_(ApiRenderEngineService_method_names[113], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_continueRendering_(ApiRenderEngineService_method_names[114], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isRenderingPaused_(ApiRenderEngineService_method_names[115], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_restartRendering_(ApiRenderEngineService_method_names[116], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stopRendering_(ApiRenderEngineService_method_names[117], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pick_(ApiRenderEngineService_method_names[118], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pickWhitePoint_(ApiRenderEngineService_method_names[119], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pickImagerWhitePoint_(ApiRenderEngineService_method_names[120], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isOutputAovWhitePointPickable_(ApiRenderEngineService_method_names[121], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pickOutputAovWhitePoint_(ApiRenderEngineService_method_names[122], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pickCryptomatteMatte_(ApiRenderEngineService_method_names[123], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_modifyCryptomatteMatteSelection_(ApiRenderEngineService_method_names[124], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_toString_(ApiRenderEngineService_method_names[125], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDevicePciIds_(ApiRenderEngineService_method_names[126], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiRenderEngineService::Stub::setRenderTargetNode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderTargetNodeRequest& request, ::octaneapi::ApiRenderEngine_setRenderTargetNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setRenderTargetNodeRequest, ::octaneapi::ApiRenderEngine_setRenderTargetNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setRenderTargetNode_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setRenderTargetNode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderTargetNodeRequest* request, ::octaneapi::ApiRenderEngine_setRenderTargetNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setRenderTargetNodeRequest, ::octaneapi::ApiRenderEngine_setRenderTargetNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setRenderTargetNode_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setRenderTargetNode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderTargetNodeRequest* request, ::octaneapi::ApiRenderEngine_setRenderTargetNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setRenderTargetNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setRenderTargetNodeResponse>* ApiRenderEngineService::Stub::PrepareAsyncsetRenderTargetNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderTargetNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_setRenderTargetNodeResponse, ::octaneapi::ApiRenderEngine_setRenderTargetNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setRenderTargetNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setRenderTargetNodeResponse>* ApiRenderEngineService::Stub::AsyncsetRenderTargetNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderTargetNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetRenderTargetNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getRenderTargetNode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderTargetNodeRequest& request, ::octaneapi::ApiRenderEngine_getRenderTargetNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getRenderTargetNodeRequest, ::octaneapi::ApiRenderEngine_getRenderTargetNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRenderTargetNode_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getRenderTargetNode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderTargetNodeRequest* request, ::octaneapi::ApiRenderEngine_getRenderTargetNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getRenderTargetNodeRequest, ::octaneapi::ApiRenderEngine_getRenderTargetNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderTargetNode_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getRenderTargetNode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderTargetNodeRequest* request, ::octaneapi::ApiRenderEngine_getRenderTargetNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderTargetNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderTargetNodeResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetRenderTargetNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderTargetNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getRenderTargetNodeResponse, ::octaneapi::ApiRenderEngine_getRenderTargetNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRenderTargetNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderTargetNodeResponse>* ApiRenderEngineService::Stub::AsyncgetRenderTargetNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderTargetNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRenderTargetNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getRenderGeometryNode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderGeometryNodeRequest& request, ::octaneapi::ApiRenderEngine_getRenderGeometryNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getRenderGeometryNodeRequest, ::octaneapi::ApiRenderEngine_getRenderGeometryNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRenderGeometryNode_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getRenderGeometryNode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderGeometryNodeRequest* request, ::octaneapi::ApiRenderEngine_getRenderGeometryNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getRenderGeometryNodeRequest, ::octaneapi::ApiRenderEngine_getRenderGeometryNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderGeometryNode_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getRenderGeometryNode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderGeometryNodeRequest* request, ::octaneapi::ApiRenderEngine_getRenderGeometryNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderGeometryNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderGeometryNodeResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetRenderGeometryNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderGeometryNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getRenderGeometryNodeResponse, ::octaneapi::ApiRenderEngine_getRenderGeometryNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRenderGeometryNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderGeometryNodeResponse>* ApiRenderEngineService::Stub::AsyncgetRenderGeometryNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderGeometryNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRenderGeometryNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getRenderCameraNode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderCameraNodeRequest& request, ::octaneapi::ApiRenderEngine_getRenderCameraNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getRenderCameraNodeRequest, ::octaneapi::ApiRenderEngine_getRenderCameraNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRenderCameraNode_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getRenderCameraNode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderCameraNodeRequest* request, ::octaneapi::ApiRenderEngine_getRenderCameraNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getRenderCameraNodeRequest, ::octaneapi::ApiRenderEngine_getRenderCameraNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderCameraNode_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getRenderCameraNode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderCameraNodeRequest* request, ::octaneapi::ApiRenderEngine_getRenderCameraNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderCameraNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderCameraNodeResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetRenderCameraNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderCameraNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getRenderCameraNodeResponse, ::octaneapi::ApiRenderEngine_getRenderCameraNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRenderCameraNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderCameraNodeResponse>* ApiRenderEngineService::Stub::AsyncgetRenderCameraNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderCameraNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRenderCameraNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setRenderRegion(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderRegionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setRenderRegionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setRenderRegion_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setRenderRegion(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderRegionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setRenderRegionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setRenderRegion_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setRenderRegion(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderRegionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setRenderRegion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncsetRenderRegionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderRegionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_setRenderRegionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setRenderRegion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncsetRenderRegionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderRegionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetRenderRegionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getRenderRegion(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderRegionRequest& request, ::octaneapi::ApiRenderEngine_getRenderRegionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getRenderRegionRequest, ::octaneapi::ApiRenderEngine_getRenderRegionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRenderRegion_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getRenderRegion(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderRegionRequest* request, ::octaneapi::ApiRenderEngine_getRenderRegionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getRenderRegionRequest, ::octaneapi::ApiRenderEngine_getRenderRegionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderRegion_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getRenderRegion(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderRegionRequest* request, ::octaneapi::ApiRenderEngine_getRenderRegionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderRegion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderRegionResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetRenderRegionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderRegionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getRenderRegionResponse, ::octaneapi::ApiRenderEngine_getRenderRegionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRenderRegion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderRegionResponse>* ApiRenderEngineService::Stub::AsyncgetRenderRegionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderRegionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRenderRegionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setAsyncTonemapParams(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapParamsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setAsyncTonemapParamsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setAsyncTonemapParams_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setAsyncTonemapParams(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapParamsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setAsyncTonemapParamsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setAsyncTonemapParams_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setAsyncTonemapParams(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapParamsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setAsyncTonemapParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncsetAsyncTonemapParamsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_setAsyncTonemapParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setAsyncTonemapParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncsetAsyncTonemapParamsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetAsyncTonemapParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setAsyncTonemapParams1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapParams1Request& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setAsyncTonemapParams1Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setAsyncTonemapParams1_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setAsyncTonemapParams1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapParams1Request* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setAsyncTonemapParams1Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setAsyncTonemapParams1_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setAsyncTonemapParams1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapParams1Request* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setAsyncTonemapParams1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncsetAsyncTonemapParams1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapParams1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_setAsyncTonemapParams1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setAsyncTonemapParams1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncsetAsyncTonemapParams1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapParams1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetAsyncTonemapParams1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::asyncTonemapBufferType(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeRequest& request, ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeRequest, ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_asyncTonemapBufferType_, context, request, response);
}

void ApiRenderEngineService::Stub::async::asyncTonemapBufferType(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeRequest, ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_asyncTonemapBufferType_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::asyncTonemapBufferType(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_asyncTonemapBufferType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeResponse>* ApiRenderEngineService::Stub::PrepareAsyncasyncTonemapBufferTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeResponse, ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_asyncTonemapBufferType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeResponse>* ApiRenderEngineService::Stub::AsyncasyncTonemapBufferTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncasyncTonemapBufferTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::asyncTonemapCryptomatteFalseColor(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorRequest& request, ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorRequest, ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_asyncTonemapCryptomatteFalseColor_, context, request, response);
}

void ApiRenderEngineService::Stub::async::asyncTonemapCryptomatteFalseColor(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorRequest, ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_asyncTonemapCryptomatteFalseColor_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::asyncTonemapCryptomatteFalseColor(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_asyncTonemapCryptomatteFalseColor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorResponse>* ApiRenderEngineService::Stub::PrepareAsyncasyncTonemapCryptomatteFalseColorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorResponse, ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_asyncTonemapCryptomatteFalseColor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorResponse>* ApiRenderEngineService::Stub::AsyncasyncTonemapCryptomatteFalseColorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncasyncTonemapCryptomatteFalseColorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::asyncTonemapOutputColorSpaceInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoRequest& request, ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoRequest, ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_asyncTonemapOutputColorSpaceInfo_, context, request, response);
}

void ApiRenderEngineService::Stub::async::asyncTonemapOutputColorSpaceInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoRequest, ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_asyncTonemapOutputColorSpaceInfo_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::asyncTonemapOutputColorSpaceInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_asyncTonemapOutputColorSpaceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoResponse>* ApiRenderEngineService::Stub::PrepareAsyncasyncTonemapOutputColorSpaceInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoResponse, ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_asyncTonemapOutputColorSpaceInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoResponse>* ApiRenderEngineService::Stub::AsyncasyncTonemapOutputColorSpaceInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncasyncTonemapOutputColorSpaceInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::asyncTonemapColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceRequest& request, ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceRequest, ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_asyncTonemapColorSpace_, context, request, response);
}

void ApiRenderEngineService::Stub::async::asyncTonemapColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceRequest, ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_asyncTonemapColorSpace_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::asyncTonemapColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_asyncTonemapColorSpace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceResponse>* ApiRenderEngineService::Stub::PrepareAsyncasyncTonemapColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceResponse, ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_asyncTonemapColorSpace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceResponse>* ApiRenderEngineService::Stub::AsyncasyncTonemapColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncasyncTonemapColorSpaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::asyncTonemapPremultipliedAlphaType(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeRequest& request, ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeRequest, ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_asyncTonemapPremultipliedAlphaType_, context, request, response);
}

void ApiRenderEngineService::Stub::async::asyncTonemapPremultipliedAlphaType(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeRequest, ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_asyncTonemapPremultipliedAlphaType_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::asyncTonemapPremultipliedAlphaType(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_asyncTonemapPremultipliedAlphaType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeResponse>* ApiRenderEngineService::Stub::PrepareAsyncasyncTonemapPremultipliedAlphaTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeResponse, ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_asyncTonemapPremultipliedAlphaType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeResponse>* ApiRenderEngineService::Stub::AsyncasyncTonemapPremultipliedAlphaTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncasyncTonemapPremultipliedAlphaTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setAsyncTonemapRenderPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesRequest& request, ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesRequest, ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setAsyncTonemapRenderPasses_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setAsyncTonemapRenderPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesRequest* request, ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesRequest, ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setAsyncTonemapRenderPasses_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setAsyncTonemapRenderPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesRequest* request, ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setAsyncTonemapRenderPasses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesResponse>* ApiRenderEngineService::Stub::PrepareAsyncsetAsyncTonemapRenderPassesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesResponse, ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setAsyncTonemapRenderPasses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesResponse>* ApiRenderEngineService::Stub::AsyncsetAsyncTonemapRenderPassesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetAsyncTonemapRenderPassesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::asyncTonemapRenderPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapRenderPassesRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_asyncTonemapRenderPassesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_asyncTonemapRenderPasses_, context, request, response);
}

void ApiRenderEngineService::Stub::async::asyncTonemapRenderPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapRenderPassesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_asyncTonemapRenderPassesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_asyncTonemapRenderPasses_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::asyncTonemapRenderPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapRenderPassesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_asyncTonemapRenderPasses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncasyncTonemapRenderPassesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapRenderPassesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_asyncTonemapRenderPassesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_asyncTonemapRenderPasses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncasyncTonemapRenderPassesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapRenderPassesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncasyncTonemapRenderPassesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getEnabledAovs(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getEnabledAovsRequest& request, ::octaneapi::ApiRenderEngine_getEnabledAovsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getEnabledAovsRequest, ::octaneapi::ApiRenderEngine_getEnabledAovsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getEnabledAovs_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getEnabledAovs(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getEnabledAovsRequest* request, ::octaneapi::ApiRenderEngine_getEnabledAovsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getEnabledAovsRequest, ::octaneapi::ApiRenderEngine_getEnabledAovsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getEnabledAovs_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getEnabledAovs(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getEnabledAovsRequest* request, ::octaneapi::ApiRenderEngine_getEnabledAovsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getEnabledAovs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getEnabledAovsResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetEnabledAovsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getEnabledAovsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getEnabledAovsResponse, ::octaneapi::ApiRenderEngine_getEnabledAovsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getEnabledAovs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getEnabledAovsResponse>* ApiRenderEngineService::Stub::AsyncgetEnabledAovsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getEnabledAovsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetEnabledAovsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::freeTonemapPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_freeTonemapPassesRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_freeTonemapPassesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_freeTonemapPasses_, context, request, response);
}

void ApiRenderEngineService::Stub::async::freeTonemapPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_freeTonemapPassesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_freeTonemapPassesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_freeTonemapPasses_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::freeTonemapPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_freeTonemapPassesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_freeTonemapPasses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncfreeTonemapPassesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_freeTonemapPassesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_freeTonemapPassesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_freeTonemapPasses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncfreeTonemapPassesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_freeTonemapPassesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfreeTonemapPassesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::displayRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_displayRenderPassIdRequest& request, ::octaneapi::ApiRenderEngine_displayRenderPassIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_displayRenderPassIdRequest, ::octaneapi::ApiRenderEngine_displayRenderPassIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_displayRenderPassId_, context, request, response);
}

void ApiRenderEngineService::Stub::async::displayRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_displayRenderPassIdRequest* request, ::octaneapi::ApiRenderEngine_displayRenderPassIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_displayRenderPassIdRequest, ::octaneapi::ApiRenderEngine_displayRenderPassIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_displayRenderPassId_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::displayRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_displayRenderPassIdRequest* request, ::octaneapi::ApiRenderEngine_displayRenderPassIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_displayRenderPassId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_displayRenderPassIdResponse>* ApiRenderEngineService::Stub::PrepareAsyncdisplayRenderPassIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_displayRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_displayRenderPassIdResponse, ::octaneapi::ApiRenderEngine_displayRenderPassIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_displayRenderPassId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_displayRenderPassIdResponse>* ApiRenderEngineService::Stub::AsyncdisplayRenderPassIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_displayRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdisplayRenderPassIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setSubSampleMode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setSubSampleModeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setSubSampleModeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setSubSampleMode_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setSubSampleMode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setSubSampleModeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setSubSampleModeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setSubSampleMode_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setSubSampleMode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setSubSampleModeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setSubSampleMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncsetSubSampleModeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setSubSampleModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_setSubSampleModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setSubSampleMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncsetSubSampleModeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setSubSampleModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetSubSampleModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getSubSampleMode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSubSampleModeRequest& request, ::octaneapi::ApiRenderEngine_getSubSampleModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getSubSampleModeRequest, ::octaneapi::ApiRenderEngine_getSubSampleModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getSubSampleMode_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getSubSampleMode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSubSampleModeRequest* request, ::octaneapi::ApiRenderEngine_getSubSampleModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getSubSampleModeRequest, ::octaneapi::ApiRenderEngine_getSubSampleModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSubSampleMode_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getSubSampleMode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSubSampleModeRequest* request, ::octaneapi::ApiRenderEngine_getSubSampleModeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSubSampleMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getSubSampleModeResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetSubSampleModeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSubSampleModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getSubSampleModeResponse, ::octaneapi::ApiRenderEngine_getSubSampleModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getSubSampleMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getSubSampleModeResponse>* ApiRenderEngineService::Stub::AsyncgetSubSampleModeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSubSampleModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetSubSampleModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setClayMode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setClayModeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setClayModeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setClayMode_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setClayMode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setClayModeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setClayModeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setClayMode_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setClayMode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setClayModeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setClayMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncsetClayModeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setClayModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_setClayModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setClayMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncsetClayModeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setClayModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetClayModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::clayMode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_clayModeRequest& request, ::octaneapi::ApiRenderEngine_clayModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_clayModeRequest, ::octaneapi::ApiRenderEngine_clayModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clayMode_, context, request, response);
}

void ApiRenderEngineService::Stub::async::clayMode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_clayModeRequest* request, ::octaneapi::ApiRenderEngine_clayModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_clayModeRequest, ::octaneapi::ApiRenderEngine_clayModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clayMode_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::clayMode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_clayModeRequest* request, ::octaneapi::ApiRenderEngine_clayModeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clayMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_clayModeResponse>* ApiRenderEngineService::Stub::PrepareAsyncclayModeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_clayModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_clayModeResponse, ::octaneapi::ApiRenderEngine_clayModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clayMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_clayModeResponse>* ApiRenderEngineService::Stub::AsyncclayModeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_clayModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclayModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::fps(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_fpsRequest& request, ::octaneapi::ApiRenderEngine_fpsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_fpsRequest, ::octaneapi::ApiRenderEngine_fpsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_fps_, context, request, response);
}

void ApiRenderEngineService::Stub::async::fps(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_fpsRequest* request, ::octaneapi::ApiRenderEngine_fpsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_fpsRequest, ::octaneapi::ApiRenderEngine_fpsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_fps_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::fps(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_fpsRequest* request, ::octaneapi::ApiRenderEngine_fpsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_fps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_fpsResponse>* ApiRenderEngineService::Stub::PrepareAsyncfpsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_fpsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_fpsResponse, ::octaneapi::ApiRenderEngine_fpsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_fps_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_fpsResponse>* ApiRenderEngineService::Stub::AsyncfpsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_fpsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfpsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setFps(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setFpsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setFpsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setFps_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setFps(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setFpsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setFpsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setFps_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setFps(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setFpsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setFps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncsetFpsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setFpsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_setFpsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setFps_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncsetFpsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setFpsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetFpsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::isCompiling(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isCompilingRequest& request, ::octaneapi::ApiRenderEngine_isCompilingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_isCompilingRequest, ::octaneapi::ApiRenderEngine_isCompilingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isCompiling_, context, request, response);
}

void ApiRenderEngineService::Stub::async::isCompiling(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isCompilingRequest* request, ::octaneapi::ApiRenderEngine_isCompilingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_isCompilingRequest, ::octaneapi::ApiRenderEngine_isCompilingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isCompiling_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::isCompiling(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isCompilingRequest* request, ::octaneapi::ApiRenderEngine_isCompilingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isCompiling_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isCompilingResponse>* ApiRenderEngineService::Stub::PrepareAsyncisCompilingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isCompilingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_isCompilingResponse, ::octaneapi::ApiRenderEngine_isCompilingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isCompiling_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isCompilingResponse>* ApiRenderEngineService::Stub::AsyncisCompilingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isCompilingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisCompilingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::isCompressingTextures(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isCompressingTexturesRequest& request, ::octaneapi::ApiRenderEngine_isCompressingTexturesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_isCompressingTexturesRequest, ::octaneapi::ApiRenderEngine_isCompressingTexturesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isCompressingTextures_, context, request, response);
}

void ApiRenderEngineService::Stub::async::isCompressingTextures(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isCompressingTexturesRequest* request, ::octaneapi::ApiRenderEngine_isCompressingTexturesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_isCompressingTexturesRequest, ::octaneapi::ApiRenderEngine_isCompressingTexturesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isCompressingTextures_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::isCompressingTextures(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isCompressingTexturesRequest* request, ::octaneapi::ApiRenderEngine_isCompressingTexturesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isCompressingTextures_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isCompressingTexturesResponse>* ApiRenderEngineService::Stub::PrepareAsyncisCompressingTexturesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isCompressingTexturesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_isCompressingTexturesResponse, ::octaneapi::ApiRenderEngine_isCompressingTexturesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isCompressingTextures_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isCompressingTexturesResponse>* ApiRenderEngineService::Stub::AsyncisCompressingTexturesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isCompressingTexturesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisCompressingTexturesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::hasPendingRenderData(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_hasPendingRenderDataRequest& request, ::octaneapi::ApiRenderEngine_hasPendingRenderDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_hasPendingRenderDataRequest, ::octaneapi::ApiRenderEngine_hasPendingRenderDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hasPendingRenderData_, context, request, response);
}

void ApiRenderEngineService::Stub::async::hasPendingRenderData(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_hasPendingRenderDataRequest* request, ::octaneapi::ApiRenderEngine_hasPendingRenderDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_hasPendingRenderDataRequest, ::octaneapi::ApiRenderEngine_hasPendingRenderDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasPendingRenderData_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::hasPendingRenderData(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_hasPendingRenderDataRequest* request, ::octaneapi::ApiRenderEngine_hasPendingRenderDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasPendingRenderData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_hasPendingRenderDataResponse>* ApiRenderEngineService::Stub::PrepareAsynchasPendingRenderDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_hasPendingRenderDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_hasPendingRenderDataResponse, ::octaneapi::ApiRenderEngine_hasPendingRenderDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hasPendingRenderData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_hasPendingRenderDataResponse>* ApiRenderEngineService::Stub::AsynchasPendingRenderDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_hasPendingRenderDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchasPendingRenderDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getCurrentChangeLevel(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getCurrentChangeLevelRequest& request, ::octaneapi::ApiRenderEngine_getCurrentChangeLevelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getCurrentChangeLevelRequest, ::octaneapi::ApiRenderEngine_getCurrentChangeLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getCurrentChangeLevel_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getCurrentChangeLevel(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getCurrentChangeLevelRequest* request, ::octaneapi::ApiRenderEngine_getCurrentChangeLevelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getCurrentChangeLevelRequest, ::octaneapi::ApiRenderEngine_getCurrentChangeLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCurrentChangeLevel_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getCurrentChangeLevel(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getCurrentChangeLevelRequest* request, ::octaneapi::ApiRenderEngine_getCurrentChangeLevelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCurrentChangeLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getCurrentChangeLevelResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetCurrentChangeLevelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getCurrentChangeLevelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getCurrentChangeLevelResponse, ::octaneapi::ApiRenderEngine_getCurrentChangeLevelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getCurrentChangeLevel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getCurrentChangeLevelResponse>* ApiRenderEngineService::Stub::AsyncgetCurrentChangeLevelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getCurrentChangeLevelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetCurrentChangeLevelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getRenderImageChangeLevel(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelRequest& request, ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelRequest, ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRenderImageChangeLevel_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getRenderImageChangeLevel(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelRequest* request, ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelRequest, ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderImageChangeLevel_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getRenderImageChangeLevel(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelRequest* request, ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderImageChangeLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetRenderImageChangeLevelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelResponse, ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRenderImageChangeLevel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelResponse>* ApiRenderEngineService::Stub::AsyncgetRenderImageChangeLevelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRenderImageChangeLevelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getRenderRestartedChangeLevel(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelRequest& request, ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelRequest, ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRenderRestartedChangeLevel_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getRenderRestartedChangeLevel(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelRequest* request, ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelRequest, ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderRestartedChangeLevel_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getRenderRestartedChangeLevel(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelRequest* request, ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderRestartedChangeLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetRenderRestartedChangeLevelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelResponse, ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRenderRestartedChangeLevel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelResponse>* ApiRenderEngineService::Stub::AsyncgetRenderRestartedChangeLevelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRenderRestartedChangeLevelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setAsyncUpdateCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackRequest& request, ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackRequest, ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setAsyncUpdateCallback_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setAsyncUpdateCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackRequest* request, ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackRequest, ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setAsyncUpdateCallback_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setAsyncUpdateCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackRequest* request, ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setAsyncUpdateCallback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackResponse>* ApiRenderEngineService::Stub::PrepareAsyncsetAsyncUpdateCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackResponse, ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setAsyncUpdateCallback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackResponse>* ApiRenderEngineService::Stub::AsyncsetAsyncUpdateCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetAsyncUpdateCallbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::updatesAreAsync(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_updatesAreAsyncRequest& request, ::octaneapi::ApiRenderEngine_updatesAreAsyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_updatesAreAsyncRequest, ::octaneapi::ApiRenderEngine_updatesAreAsyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_updatesAreAsync_, context, request, response);
}

void ApiRenderEngineService::Stub::async::updatesAreAsync(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_updatesAreAsyncRequest* request, ::octaneapi::ApiRenderEngine_updatesAreAsyncResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_updatesAreAsyncRequest, ::octaneapi::ApiRenderEngine_updatesAreAsyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updatesAreAsync_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::updatesAreAsync(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_updatesAreAsyncRequest* request, ::octaneapi::ApiRenderEngine_updatesAreAsyncResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updatesAreAsync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_updatesAreAsyncResponse>* ApiRenderEngineService::Stub::PrepareAsyncupdatesAreAsyncRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_updatesAreAsyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_updatesAreAsyncResponse, ::octaneapi::ApiRenderEngine_updatesAreAsyncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_updatesAreAsync_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_updatesAreAsyncResponse>* ApiRenderEngineService::Stub::AsyncupdatesAreAsyncRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_updatesAreAsyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncupdatesAreAsyncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::isImageReady(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isImageReadyRequest& request, ::octaneapi::ApiRenderEngine_isImageReadyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_isImageReadyRequest, ::octaneapi::ApiRenderEngine_isImageReadyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isImageReady_, context, request, response);
}

void ApiRenderEngineService::Stub::async::isImageReady(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isImageReadyRequest* request, ::octaneapi::ApiRenderEngine_isImageReadyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_isImageReadyRequest, ::octaneapi::ApiRenderEngine_isImageReadyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isImageReady_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::isImageReady(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isImageReadyRequest* request, ::octaneapi::ApiRenderEngine_isImageReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isImageReady_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isImageReadyResponse>* ApiRenderEngineService::Stub::PrepareAsyncisImageReadyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isImageReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_isImageReadyResponse, ::octaneapi::ApiRenderEngine_isImageReadyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isImageReady_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isImageReadyResponse>* ApiRenderEngineService::Stub::AsyncisImageReadyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isImageReadyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisImageReadyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::resetImageReady(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_resetImageReadyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_resetImageReadyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_resetImageReady_, context, request, response);
}

void ApiRenderEngineService::Stub::async::resetImageReady(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_resetImageReadyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_resetImageReadyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resetImageReady_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::resetImageReady(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_resetImageReadyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resetImageReady_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncresetImageReadyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_resetImageReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_resetImageReadyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_resetImageReady_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncresetImageReadyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_resetImageReadyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncresetImageReadyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::isRenderFailure(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isRenderFailureRequest& request, ::octaneapi::ApiRenderEngine_isRenderFailureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_isRenderFailureRequest, ::octaneapi::ApiRenderEngine_isRenderFailureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isRenderFailure_, context, request, response);
}

void ApiRenderEngineService::Stub::async::isRenderFailure(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isRenderFailureRequest* request, ::octaneapi::ApiRenderEngine_isRenderFailureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_isRenderFailureRequest, ::octaneapi::ApiRenderEngine_isRenderFailureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isRenderFailure_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::isRenderFailure(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isRenderFailureRequest* request, ::octaneapi::ApiRenderEngine_isRenderFailureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isRenderFailure_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isRenderFailureResponse>* ApiRenderEngineService::Stub::PrepareAsyncisRenderFailureRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isRenderFailureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_isRenderFailureResponse, ::octaneapi::ApiRenderEngine_isRenderFailureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isRenderFailure_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isRenderFailureResponse>* ApiRenderEngineService::Stub::AsyncisRenderFailureRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isRenderFailureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisRenderFailureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::resetRenderFailure(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_resetRenderFailureRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_resetRenderFailureRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_resetRenderFailure_, context, request, response);
}

void ApiRenderEngineService::Stub::async::resetRenderFailure(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_resetRenderFailureRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_resetRenderFailureRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resetRenderFailure_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::resetRenderFailure(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_resetRenderFailureRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resetRenderFailure_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncresetRenderFailureRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_resetRenderFailureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_resetRenderFailureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_resetRenderFailure_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncresetRenderFailureRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_resetRenderFailureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncresetRenderFailureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setOnTileBlendedCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackRequest& request, ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackRequest, ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setOnTileBlendedCallback_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setOnTileBlendedCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackRequest, ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setOnTileBlendedCallback_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setOnTileBlendedCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setOnTileBlendedCallback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackResponse>* ApiRenderEngineService::Stub::PrepareAsyncsetOnTileBlendedCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackResponse, ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setOnTileBlendedCallback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackResponse>* ApiRenderEngineService::Stub::AsyncsetOnTileBlendedCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetOnTileBlendedCallbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setOnNewStatisticsCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackRequest& request, ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackRequest, ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setOnNewStatisticsCallback_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setOnNewStatisticsCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackRequest, ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setOnNewStatisticsCallback_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setOnNewStatisticsCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setOnNewStatisticsCallback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackResponse>* ApiRenderEngineService::Stub::PrepareAsyncsetOnNewStatisticsCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackResponse, ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setOnNewStatisticsCallback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackResponse>* ApiRenderEngineService::Stub::AsyncsetOnNewStatisticsCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetOnNewStatisticsCallbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setOnNewImageCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnNewImageCallbackRequest& request, ::octaneapi::ApiRenderEngine_setOnNewImageCallbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setOnNewImageCallbackRequest, ::octaneapi::ApiRenderEngine_setOnNewImageCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setOnNewImageCallback_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setOnNewImageCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnNewImageCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnNewImageCallbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setOnNewImageCallbackRequest, ::octaneapi::ApiRenderEngine_setOnNewImageCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setOnNewImageCallback_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setOnNewImageCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnNewImageCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnNewImageCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setOnNewImageCallback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setOnNewImageCallbackResponse>* ApiRenderEngineService::Stub::PrepareAsyncsetOnNewImageCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnNewImageCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_setOnNewImageCallbackResponse, ::octaneapi::ApiRenderEngine_setOnNewImageCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setOnNewImageCallback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setOnNewImageCallbackResponse>* ApiRenderEngineService::Stub::AsyncsetOnNewImageCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnNewImageCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetOnNewImageCallbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setOnOcioErrorCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackRequest& request, ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackRequest, ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setOnOcioErrorCallback_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setOnOcioErrorCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackRequest, ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setOnOcioErrorCallback_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setOnOcioErrorCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setOnOcioErrorCallback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackResponse>* ApiRenderEngineService::Stub::PrepareAsyncsetOnOcioErrorCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackResponse, ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setOnOcioErrorCallback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackResponse>* ApiRenderEngineService::Stub::AsyncsetOnOcioErrorCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetOnOcioErrorCallbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setOnRenderFailureCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackRequest& request, ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackRequest, ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setOnRenderFailureCallback_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setOnRenderFailureCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackRequest, ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setOnRenderFailureCallback_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setOnRenderFailureCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setOnRenderFailureCallback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackResponse>* ApiRenderEngineService::Stub::PrepareAsyncsetOnRenderFailureCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackResponse, ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setOnRenderFailureCallback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackResponse>* ApiRenderEngineService::Stub::AsyncsetOnRenderFailureCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetOnRenderFailureCallbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setForceCallbacksInRenderThreads(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setForceCallbacksInRenderThreadsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setForceCallbacksInRenderThreadsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setForceCallbacksInRenderThreads_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setForceCallbacksInRenderThreads(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setForceCallbacksInRenderThreadsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setForceCallbacksInRenderThreadsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setForceCallbacksInRenderThreads_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setForceCallbacksInRenderThreads(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setForceCallbacksInRenderThreadsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setForceCallbacksInRenderThreads_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncsetForceCallbacksInRenderThreadsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setForceCallbacksInRenderThreadsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_setForceCallbacksInRenderThreadsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setForceCallbacksInRenderThreads_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncsetForceCallbacksInRenderThreadsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setForceCallbacksInRenderThreadsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetForceCallbacksInRenderThreadsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::grabRenderResult(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_grabRenderResultRequest& request, ::octaneapi::ApiRenderEngine_grabRenderResultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_grabRenderResultRequest, ::octaneapi::ApiRenderEngine_grabRenderResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_grabRenderResult_, context, request, response);
}

void ApiRenderEngineService::Stub::async::grabRenderResult(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_grabRenderResultRequest* request, ::octaneapi::ApiRenderEngine_grabRenderResultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_grabRenderResultRequest, ::octaneapi::ApiRenderEngine_grabRenderResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_grabRenderResult_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::grabRenderResult(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_grabRenderResultRequest* request, ::octaneapi::ApiRenderEngine_grabRenderResultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_grabRenderResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_grabRenderResultResponse>* ApiRenderEngineService::Stub::PrepareAsyncgrabRenderResultRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_grabRenderResultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_grabRenderResultResponse, ::octaneapi::ApiRenderEngine_grabRenderResultRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_grabRenderResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_grabRenderResultResponse>* ApiRenderEngineService::Stub::AsyncgrabRenderResultRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_grabRenderResultRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgrabRenderResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::releaseRenderResult(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_releaseRenderResultRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_releaseRenderResultRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_releaseRenderResult_, context, request, response);
}

void ApiRenderEngineService::Stub::async::releaseRenderResult(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_releaseRenderResultRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_releaseRenderResultRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_releaseRenderResult_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::releaseRenderResult(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_releaseRenderResultRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_releaseRenderResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncreleaseRenderResultRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_releaseRenderResultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_releaseRenderResultRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_releaseRenderResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncreleaseRenderResultRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_releaseRenderResultRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreleaseRenderResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::synchronousTonemap(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapRequest& request, ::octaneapi::ApiRenderEngine_synchronousTonemapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_synchronousTonemapRequest, ::octaneapi::ApiRenderEngine_synchronousTonemapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_synchronousTonemap_, context, request, response);
}

void ApiRenderEngineService::Stub::async::synchronousTonemap(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapRequest* request, ::octaneapi::ApiRenderEngine_synchronousTonemapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_synchronousTonemapRequest, ::octaneapi::ApiRenderEngine_synchronousTonemapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_synchronousTonemap_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::synchronousTonemap(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapRequest* request, ::octaneapi::ApiRenderEngine_synchronousTonemapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_synchronousTonemap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_synchronousTonemapResponse>* ApiRenderEngineService::Stub::PrepareAsyncsynchronousTonemapRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_synchronousTonemapResponse, ::octaneapi::ApiRenderEngine_synchronousTonemapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_synchronousTonemap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_synchronousTonemapResponse>* ApiRenderEngineService::Stub::AsyncsynchronousTonemapRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsynchronousTonemapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::synchronousTonemap1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemap1Request& request, ::octaneapi::ApiRenderEngine_synchronousTonemap1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_synchronousTonemap1Request, ::octaneapi::ApiRenderEngine_synchronousTonemap1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_synchronousTonemap1_, context, request, response);
}

void ApiRenderEngineService::Stub::async::synchronousTonemap1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemap1Request* request, ::octaneapi::ApiRenderEngine_synchronousTonemap1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_synchronousTonemap1Request, ::octaneapi::ApiRenderEngine_synchronousTonemap1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_synchronousTonemap1_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::synchronousTonemap1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemap1Request* request, ::octaneapi::ApiRenderEngine_synchronousTonemap1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_synchronousTonemap1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_synchronousTonemap1Response>* ApiRenderEngineService::Stub::PrepareAsyncsynchronousTonemap1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemap1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_synchronousTonemap1Response, ::octaneapi::ApiRenderEngine_synchronousTonemap1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_synchronousTonemap1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_synchronousTonemap1Response>* ApiRenderEngineService::Stub::AsyncsynchronousTonemap1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemap1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsynchronousTonemap1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::synchronousTonemapAllRenderPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesRequest& request, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesRequest, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_synchronousTonemapAllRenderPasses_, context, request, response);
}

void ApiRenderEngineService::Stub::async::synchronousTonemapAllRenderPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesRequest* request, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesRequest, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_synchronousTonemapAllRenderPasses_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::synchronousTonemapAllRenderPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesRequest* request, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_synchronousTonemapAllRenderPasses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesResponse>* ApiRenderEngineService::Stub::PrepareAsyncsynchronousTonemapAllRenderPassesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesResponse, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_synchronousTonemapAllRenderPasses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesResponse>* ApiRenderEngineService::Stub::AsyncsynchronousTonemapAllRenderPassesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsynchronousTonemapAllRenderPassesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::synchronousTonemapAllRenderPasses1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Request& request, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Request, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_synchronousTonemapAllRenderPasses1_, context, request, response);
}

void ApiRenderEngineService::Stub::async::synchronousTonemapAllRenderPasses1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Request* request, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Request, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_synchronousTonemapAllRenderPasses1_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::synchronousTonemapAllRenderPasses1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Request* request, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_synchronousTonemapAllRenderPasses1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Response>* ApiRenderEngineService::Stub::PrepareAsyncsynchronousTonemapAllRenderPasses1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Response, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_synchronousTonemapAllRenderPasses1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Response>* ApiRenderEngineService::Stub::AsyncsynchronousTonemapAllRenderPasses1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsynchronousTonemapAllRenderPasses1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getRenderStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderStatisticsRequest& request, ::octaneapi::ApiRenderEngine_getRenderStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getRenderStatisticsRequest, ::octaneapi::ApiRenderEngine_getRenderStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRenderStatistics_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getRenderStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getRenderStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getRenderStatisticsRequest, ::octaneapi::ApiRenderEngine_getRenderStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderStatistics_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getRenderStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getRenderStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderStatisticsResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetRenderStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getRenderStatisticsResponse, ::octaneapi::ApiRenderEngine_getRenderStatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRenderStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderStatisticsResponse>* ApiRenderEngineService::Stub::AsyncgetRenderStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRenderStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getRenderResultStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderResultStatisticsRequest& request, ::octaneapi::ApiRenderEngine_getRenderResultStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getRenderResultStatisticsRequest, ::octaneapi::ApiRenderEngine_getRenderResultStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRenderResultStatistics_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getRenderResultStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderResultStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getRenderResultStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getRenderResultStatisticsRequest, ::octaneapi::ApiRenderEngine_getRenderResultStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderResultStatistics_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getRenderResultStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderResultStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getRenderResultStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderResultStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderResultStatisticsResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetRenderResultStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderResultStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getRenderResultStatisticsResponse, ::octaneapi::ApiRenderEngine_getRenderResultStatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRenderResultStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRenderResultStatisticsResponse>* ApiRenderEngineService::Stub::AsyncgetRenderResultStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRenderResultStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRenderResultStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::saveImage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImageRequest& request, ::octaneapi::ApiRenderEngine_saveImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_saveImageRequest, ::octaneapi::ApiRenderEngine_saveImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveImage_, context, request, response);
}

void ApiRenderEngineService::Stub::async::saveImage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImageRequest* request, ::octaneapi::ApiRenderEngine_saveImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_saveImageRequest, ::octaneapi::ApiRenderEngine_saveImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveImage_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::saveImage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImageRequest* request, ::octaneapi::ApiRenderEngine_saveImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveImageResponse>* ApiRenderEngineService::Stub::PrepareAsyncsaveImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_saveImageResponse, ::octaneapi::ApiRenderEngine_saveImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveImageResponse>* ApiRenderEngineService::Stub::AsyncsaveImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::saveImage1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImage1Request& request, ::octaneapi::ApiRenderEngine_saveImage1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_saveImage1Request, ::octaneapi::ApiRenderEngine_saveImage1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveImage1_, context, request, response);
}

void ApiRenderEngineService::Stub::async::saveImage1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImage1Request* request, ::octaneapi::ApiRenderEngine_saveImage1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_saveImage1Request, ::octaneapi::ApiRenderEngine_saveImage1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveImage1_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::saveImage1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImage1Request* request, ::octaneapi::ApiRenderEngine_saveImage1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveImage1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveImage1Response>* ApiRenderEngineService::Stub::PrepareAsyncsaveImage1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImage1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_saveImage1Response, ::octaneapi::ApiRenderEngine_saveImage1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveImage1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveImage1Response>* ApiRenderEngineService::Stub::AsyncsaveImage1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImage1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveImage1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::saveImage2(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImage2Request& request, ::octaneapi::ApiRenderEngine_saveImage2Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_saveImage2Request, ::octaneapi::ApiRenderEngine_saveImage2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveImage2_, context, request, response);
}

void ApiRenderEngineService::Stub::async::saveImage2(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImage2Request* request, ::octaneapi::ApiRenderEngine_saveImage2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_saveImage2Request, ::octaneapi::ApiRenderEngine_saveImage2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveImage2_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::saveImage2(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImage2Request* request, ::octaneapi::ApiRenderEngine_saveImage2Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveImage2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveImage2Response>* ApiRenderEngineService::Stub::PrepareAsyncsaveImage2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImage2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_saveImage2Response, ::octaneapi::ApiRenderEngine_saveImage2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveImage2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveImage2Response>* ApiRenderEngineService::Stub::AsyncsaveImage2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveImage2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveImage2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::saveRenderPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesRequest& request, ::octaneapi::ApiRenderEngine_saveRenderPassesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderPassesRequest, ::octaneapi::ApiRenderEngine_saveRenderPassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveRenderPasses_, context, request, response);
}

void ApiRenderEngineService::Stub::async::saveRenderPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesRequest* request, ::octaneapi::ApiRenderEngine_saveRenderPassesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderPassesRequest, ::octaneapi::ApiRenderEngine_saveRenderPassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderPasses_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::saveRenderPasses(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesRequest* request, ::octaneapi::ApiRenderEngine_saveRenderPassesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderPasses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveRenderPassesResponse>* ApiRenderEngineService::Stub::PrepareAsyncsaveRenderPassesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_saveRenderPassesResponse, ::octaneapi::ApiRenderEngine_saveRenderPassesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveRenderPasses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveRenderPassesResponse>* ApiRenderEngineService::Stub::AsyncsaveRenderPassesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveRenderPassesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::saveRenderPasses1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPasses1Request& request, ::octaneapi::ApiRenderEngine_saveRenderPasses1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderPasses1Request, ::octaneapi::ApiRenderEngine_saveRenderPasses1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveRenderPasses1_, context, request, response);
}

void ApiRenderEngineService::Stub::async::saveRenderPasses1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPasses1Request* request, ::octaneapi::ApiRenderEngine_saveRenderPasses1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderPasses1Request, ::octaneapi::ApiRenderEngine_saveRenderPasses1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderPasses1_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::saveRenderPasses1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPasses1Request* request, ::octaneapi::ApiRenderEngine_saveRenderPasses1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderPasses1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveRenderPasses1Response>* ApiRenderEngineService::Stub::PrepareAsyncsaveRenderPasses1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPasses1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_saveRenderPasses1Response, ::octaneapi::ApiRenderEngine_saveRenderPasses1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveRenderPasses1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveRenderPasses1Response>* ApiRenderEngineService::Stub::AsyncsaveRenderPasses1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPasses1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveRenderPasses1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::saveRenderPasses2(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPasses2Request& request, ::octaneapi::ApiRenderEngine_saveRenderPasses2Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderPasses2Request, ::octaneapi::ApiRenderEngine_saveRenderPasses2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveRenderPasses2_, context, request, response);
}

void ApiRenderEngineService::Stub::async::saveRenderPasses2(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPasses2Request* request, ::octaneapi::ApiRenderEngine_saveRenderPasses2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderPasses2Request, ::octaneapi::ApiRenderEngine_saveRenderPasses2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderPasses2_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::saveRenderPasses2(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPasses2Request* request, ::octaneapi::ApiRenderEngine_saveRenderPasses2Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderPasses2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveRenderPasses2Response>* ApiRenderEngineService::Stub::PrepareAsyncsaveRenderPasses2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPasses2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_saveRenderPasses2Response, ::octaneapi::ApiRenderEngine_saveRenderPasses2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveRenderPasses2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveRenderPasses2Response>* ApiRenderEngineService::Stub::AsyncsaveRenderPasses2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPasses2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveRenderPasses2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::saveRenderPassesMultiExr(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrRequest& request, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrRequest, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveRenderPassesMultiExr_, context, request, response);
}

void ApiRenderEngineService::Stub::async::saveRenderPassesMultiExr(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrRequest* request, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrRequest, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderPassesMultiExr_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::saveRenderPassesMultiExr(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrRequest* request, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderPassesMultiExr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrResponse>* ApiRenderEngineService::Stub::PrepareAsyncsaveRenderPassesMultiExrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrResponse, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveRenderPassesMultiExr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrResponse>* ApiRenderEngineService::Stub::AsyncsaveRenderPassesMultiExrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveRenderPassesMultiExrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::saveRenderPassesMultiExr1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Request& request, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Request, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveRenderPassesMultiExr1_, context, request, response);
}

void ApiRenderEngineService::Stub::async::saveRenderPassesMultiExr1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Request* request, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Request, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderPassesMultiExr1_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::saveRenderPassesMultiExr1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Request* request, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderPassesMultiExr1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Response>* ApiRenderEngineService::Stub::PrepareAsyncsaveRenderPassesMultiExr1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Response, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveRenderPassesMultiExr1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Response>* ApiRenderEngineService::Stub::AsyncsaveRenderPassesMultiExr1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveRenderPassesMultiExr1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::saveRenderPassesDeepExr(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrRequest& request, ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrRequest, ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveRenderPassesDeepExr_, context, request, response);
}

void ApiRenderEngineService::Stub::async::saveRenderPassesDeepExr(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrRequest* request, ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrRequest, ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderPassesDeepExr_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::saveRenderPassesDeepExr(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrRequest* request, ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderPassesDeepExr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrResponse>* ApiRenderEngineService::Stub::PrepareAsyncsaveRenderPassesDeepExrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrResponse, ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveRenderPassesDeepExr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrResponse>* ApiRenderEngineService::Stub::AsyncsaveRenderPassesDeepExrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveRenderPassesDeepExrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::deepImageEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepImageEnabledRequest& request, ::octaneapi::ApiRenderEngine_deepImageEnabledResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_deepImageEnabledRequest, ::octaneapi::ApiRenderEngine_deepImageEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deepImageEnabled_, context, request, response);
}

void ApiRenderEngineService::Stub::async::deepImageEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepImageEnabledRequest* request, ::octaneapi::ApiRenderEngine_deepImageEnabledResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_deepImageEnabledRequest, ::octaneapi::ApiRenderEngine_deepImageEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deepImageEnabled_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::deepImageEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepImageEnabledRequest* request, ::octaneapi::ApiRenderEngine_deepImageEnabledResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deepImageEnabled_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deepImageEnabledResponse>* ApiRenderEngineService::Stub::PrepareAsyncdeepImageEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepImageEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_deepImageEnabledResponse, ::octaneapi::ApiRenderEngine_deepImageEnabledRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deepImageEnabled_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deepImageEnabledResponse>* ApiRenderEngineService::Stub::AsyncdeepImageEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepImageEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeepImageEnabledRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::deepImageEnabled1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepImageEnabled1Request& request, ::octaneapi::ApiRenderEngine_deepImageEnabled1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_deepImageEnabled1Request, ::octaneapi::ApiRenderEngine_deepImageEnabled1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deepImageEnabled1_, context, request, response);
}

void ApiRenderEngineService::Stub::async::deepImageEnabled1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepImageEnabled1Request* request, ::octaneapi::ApiRenderEngine_deepImageEnabled1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_deepImageEnabled1Request, ::octaneapi::ApiRenderEngine_deepImageEnabled1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deepImageEnabled1_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::deepImageEnabled1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepImageEnabled1Request* request, ::octaneapi::ApiRenderEngine_deepImageEnabled1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deepImageEnabled1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deepImageEnabled1Response>* ApiRenderEngineService::Stub::PrepareAsyncdeepImageEnabled1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepImageEnabled1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_deepImageEnabled1Response, ::octaneapi::ApiRenderEngine_deepImageEnabled1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deepImageEnabled1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deepImageEnabled1Response>* ApiRenderEngineService::Stub::AsyncdeepImageEnabled1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepImageEnabled1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeepImageEnabled1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::deepPassesEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepPassesEnabledRequest& request, ::octaneapi::ApiRenderEngine_deepPassesEnabledResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_deepPassesEnabledRequest, ::octaneapi::ApiRenderEngine_deepPassesEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deepPassesEnabled_, context, request, response);
}

void ApiRenderEngineService::Stub::async::deepPassesEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepPassesEnabledRequest* request, ::octaneapi::ApiRenderEngine_deepPassesEnabledResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_deepPassesEnabledRequest, ::octaneapi::ApiRenderEngine_deepPassesEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deepPassesEnabled_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::deepPassesEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepPassesEnabledRequest* request, ::octaneapi::ApiRenderEngine_deepPassesEnabledResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deepPassesEnabled_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deepPassesEnabledResponse>* ApiRenderEngineService::Stub::PrepareAsyncdeepPassesEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepPassesEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_deepPassesEnabledResponse, ::octaneapi::ApiRenderEngine_deepPassesEnabledRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deepPassesEnabled_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deepPassesEnabledResponse>* ApiRenderEngineService::Stub::AsyncdeepPassesEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deepPassesEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeepPassesEnabledRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::canSaveDeepImage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_canSaveDeepImageRequest& request, ::octaneapi::ApiRenderEngine_canSaveDeepImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_canSaveDeepImageRequest, ::octaneapi::ApiRenderEngine_canSaveDeepImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_canSaveDeepImage_, context, request, response);
}

void ApiRenderEngineService::Stub::async::canSaveDeepImage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_canSaveDeepImageRequest* request, ::octaneapi::ApiRenderEngine_canSaveDeepImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_canSaveDeepImageRequest, ::octaneapi::ApiRenderEngine_canSaveDeepImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_canSaveDeepImage_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::canSaveDeepImage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_canSaveDeepImageRequest* request, ::octaneapi::ApiRenderEngine_canSaveDeepImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_canSaveDeepImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_canSaveDeepImageResponse>* ApiRenderEngineService::Stub::PrepareAsynccanSaveDeepImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_canSaveDeepImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_canSaveDeepImageResponse, ::octaneapi::ApiRenderEngine_canSaveDeepImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_canSaveDeepImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_canSaveDeepImageResponse>* ApiRenderEngineService::Stub::AsynccanSaveDeepImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_canSaveDeepImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccanSaveDeepImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::saveDeepImage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveDeepImageRequest& request, ::octaneapi::ApiRenderEngine_saveDeepImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_saveDeepImageRequest, ::octaneapi::ApiRenderEngine_saveDeepImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveDeepImage_, context, request, response);
}

void ApiRenderEngineService::Stub::async::saveDeepImage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveDeepImageRequest* request, ::octaneapi::ApiRenderEngine_saveDeepImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_saveDeepImageRequest, ::octaneapi::ApiRenderEngine_saveDeepImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveDeepImage_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::saveDeepImage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveDeepImageRequest* request, ::octaneapi::ApiRenderEngine_saveDeepImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveDeepImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveDeepImageResponse>* ApiRenderEngineService::Stub::PrepareAsyncsaveDeepImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveDeepImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_saveDeepImageResponse, ::octaneapi::ApiRenderEngine_saveDeepImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveDeepImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveDeepImageResponse>* ApiRenderEngineService::Stub::AsyncsaveDeepImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveDeepImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveDeepImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::saveRenderState(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderStateRequest& request, ::octaneapi::ApiRenderEngine_saveRenderStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderStateRequest, ::octaneapi::ApiRenderEngine_saveRenderStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveRenderState_, context, request, response);
}

void ApiRenderEngineService::Stub::async::saveRenderState(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderStateRequest* request, ::octaneapi::ApiRenderEngine_saveRenderStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderStateRequest, ::octaneapi::ApiRenderEngine_saveRenderStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderState_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::saveRenderState(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderStateRequest* request, ::octaneapi::ApiRenderEngine_saveRenderStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveRenderStateResponse>* ApiRenderEngineService::Stub::PrepareAsyncsaveRenderStateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_saveRenderStateResponse, ::octaneapi::ApiRenderEngine_saveRenderStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveRenderState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_saveRenderStateResponse>* ApiRenderEngineService::Stub::AsyncsaveRenderStateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveRenderStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::loadRenderState(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_loadRenderStateRequest& request, ::octaneapi::ApiRenderEngine_loadRenderStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_loadRenderStateRequest, ::octaneapi::ApiRenderEngine_loadRenderStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadRenderState_, context, request, response);
}

void ApiRenderEngineService::Stub::async::loadRenderState(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_loadRenderStateRequest* request, ::octaneapi::ApiRenderEngine_loadRenderStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_loadRenderStateRequest, ::octaneapi::ApiRenderEngine_loadRenderStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadRenderState_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::loadRenderState(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_loadRenderStateRequest* request, ::octaneapi::ApiRenderEngine_loadRenderStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadRenderState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_loadRenderStateResponse>* ApiRenderEngineService::Stub::PrepareAsyncloadRenderStateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_loadRenderStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_loadRenderStateResponse, ::octaneapi::ApiRenderEngine_loadRenderStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadRenderState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_loadRenderStateResponse>* ApiRenderEngineService::Stub::AsyncloadRenderStateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_loadRenderStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadRenderStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::previewMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterialRequest& request, ::octaneapi::ApiRenderEngine_previewMaterialResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_previewMaterialRequest, ::octaneapi::ApiRenderEngine_previewMaterialResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_previewMaterial_, context, request, response);
}

void ApiRenderEngineService::Stub::async::previewMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterialRequest* request, ::octaneapi::ApiRenderEngine_previewMaterialResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_previewMaterialRequest, ::octaneapi::ApiRenderEngine_previewMaterialResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_previewMaterial_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::previewMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterialRequest* request, ::octaneapi::ApiRenderEngine_previewMaterialResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_previewMaterial_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_previewMaterialResponse>* ApiRenderEngineService::Stub::PrepareAsyncpreviewMaterialRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_previewMaterialResponse, ::octaneapi::ApiRenderEngine_previewMaterialRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_previewMaterial_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_previewMaterialResponse>* ApiRenderEngineService::Stub::AsyncpreviewMaterialRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterialRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpreviewMaterialRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::previewMaterialHdr(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterialHdrRequest& request, ::octaneapi::ApiRenderEngine_previewMaterialHdrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_previewMaterialHdrRequest, ::octaneapi::ApiRenderEngine_previewMaterialHdrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_previewMaterialHdr_, context, request, response);
}

void ApiRenderEngineService::Stub::async::previewMaterialHdr(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterialHdrRequest* request, ::octaneapi::ApiRenderEngine_previewMaterialHdrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_previewMaterialHdrRequest, ::octaneapi::ApiRenderEngine_previewMaterialHdrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_previewMaterialHdr_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::previewMaterialHdr(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterialHdrRequest* request, ::octaneapi::ApiRenderEngine_previewMaterialHdrResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_previewMaterialHdr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_previewMaterialHdrResponse>* ApiRenderEngineService::Stub::PrepareAsyncpreviewMaterialHdrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterialHdrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_previewMaterialHdrResponse, ::octaneapi::ApiRenderEngine_previewMaterialHdrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_previewMaterialHdr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_previewMaterialHdrResponse>* ApiRenderEngineService::Stub::AsyncpreviewMaterialHdrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterialHdrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpreviewMaterialHdrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::previewMaterial1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterial1Request& request, ::octaneapi::ApiRenderEngine_previewMaterial1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_previewMaterial1Request, ::octaneapi::ApiRenderEngine_previewMaterial1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_previewMaterial1_, context, request, response);
}

void ApiRenderEngineService::Stub::async::previewMaterial1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterial1Request* request, ::octaneapi::ApiRenderEngine_previewMaterial1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_previewMaterial1Request, ::octaneapi::ApiRenderEngine_previewMaterial1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_previewMaterial1_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::previewMaterial1(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterial1Request* request, ::octaneapi::ApiRenderEngine_previewMaterial1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_previewMaterial1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_previewMaterial1Response>* ApiRenderEngineService::Stub::PrepareAsyncpreviewMaterial1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterial1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_previewMaterial1Response, ::octaneapi::ApiRenderEngine_previewMaterial1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_previewMaterial1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_previewMaterial1Response>* ApiRenderEngineService::Stub::AsyncpreviewMaterial1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_previewMaterial1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpreviewMaterial1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getMemoryUsage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getMemoryUsageRequest& request, ::octaneapi::ApiRenderEngine_getMemoryUsageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getMemoryUsageRequest, ::octaneapi::ApiRenderEngine_getMemoryUsageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMemoryUsage_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getMemoryUsage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getMemoryUsageRequest* request, ::octaneapi::ApiRenderEngine_getMemoryUsageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getMemoryUsageRequest, ::octaneapi::ApiRenderEngine_getMemoryUsageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMemoryUsage_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getMemoryUsage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getMemoryUsageRequest* request, ::octaneapi::ApiRenderEngine_getMemoryUsageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMemoryUsage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getMemoryUsageResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetMemoryUsageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getMemoryUsageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getMemoryUsageResponse, ::octaneapi::ApiRenderEngine_getMemoryUsageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMemoryUsage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getMemoryUsageResponse>* ApiRenderEngineService::Stub::AsyncgetMemoryUsageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getMemoryUsageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMemoryUsageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getResourceStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getResourceStatisticsRequest& request, ::octaneapi::ApiRenderEngine_getResourceStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getResourceStatisticsRequest, ::octaneapi::ApiRenderEngine_getResourceStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getResourceStatistics_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getResourceStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getResourceStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getResourceStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getResourceStatisticsRequest, ::octaneapi::ApiRenderEngine_getResourceStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getResourceStatistics_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getResourceStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getResourceStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getResourceStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getResourceStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getResourceStatisticsResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetResourceStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getResourceStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getResourceStatisticsResponse, ::octaneapi::ApiRenderEngine_getResourceStatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getResourceStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getResourceStatisticsResponse>* ApiRenderEngineService::Stub::AsyncgetResourceStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getResourceStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetResourceStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getGeometryStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getGeometryStatisticsRequest& request, ::octaneapi::ApiRenderEngine_getGeometryStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getGeometryStatisticsRequest, ::octaneapi::ApiRenderEngine_getGeometryStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getGeometryStatistics_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getGeometryStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getGeometryStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getGeometryStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getGeometryStatisticsRequest, ::octaneapi::ApiRenderEngine_getGeometryStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGeometryStatistics_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getGeometryStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getGeometryStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getGeometryStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGeometryStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getGeometryStatisticsResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetGeometryStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getGeometryStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getGeometryStatisticsResponse, ::octaneapi::ApiRenderEngine_getGeometryStatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getGeometryStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getGeometryStatisticsResponse>* ApiRenderEngineService::Stub::AsyncgetGeometryStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getGeometryStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetGeometryStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getTexturesStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getTexturesStatisticsRequest& request, ::octaneapi::ApiRenderEngine_getTexturesStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getTexturesStatisticsRequest, ::octaneapi::ApiRenderEngine_getTexturesStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getTexturesStatistics_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getTexturesStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getTexturesStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getTexturesStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getTexturesStatisticsRequest, ::octaneapi::ApiRenderEngine_getTexturesStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTexturesStatistics_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getTexturesStatistics(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getTexturesStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getTexturesStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTexturesStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getTexturesStatisticsResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetTexturesStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getTexturesStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getTexturesStatisticsResponse, ::octaneapi::ApiRenderEngine_getTexturesStatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getTexturesStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getTexturesStatisticsResponse>* ApiRenderEngineService::Stub::AsyncgetTexturesStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getTexturesStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTexturesStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getSceneBounds(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSceneBoundsRequest& request, ::octaneapi::ApiRenderEngine_getSceneBoundsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getSceneBoundsRequest, ::octaneapi::ApiRenderEngine_getSceneBoundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getSceneBounds_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getSceneBounds(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSceneBoundsRequest* request, ::octaneapi::ApiRenderEngine_getSceneBoundsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getSceneBoundsRequest, ::octaneapi::ApiRenderEngine_getSceneBoundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSceneBounds_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getSceneBounds(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSceneBoundsRequest* request, ::octaneapi::ApiRenderEngine_getSceneBoundsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSceneBounds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getSceneBoundsResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetSceneBoundsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSceneBoundsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getSceneBoundsResponse, ::octaneapi::ApiRenderEngine_getSceneBoundsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getSceneBounds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getSceneBoundsResponse>* ApiRenderEngineService::Stub::AsyncgetSceneBoundsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSceneBoundsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetSceneBoundsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getDeviceCount(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceCountRequest& request, ::octaneapi::ApiRenderEngine_getDeviceCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getDeviceCountRequest, ::octaneapi::ApiRenderEngine_getDeviceCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDeviceCount_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getDeviceCount(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceCountRequest* request, ::octaneapi::ApiRenderEngine_getDeviceCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getDeviceCountRequest, ::octaneapi::ApiRenderEngine_getDeviceCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDeviceCount_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getDeviceCount(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceCountRequest* request, ::octaneapi::ApiRenderEngine_getDeviceCountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDeviceCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getDeviceCountResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetDeviceCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getDeviceCountResponse, ::octaneapi::ApiRenderEngine_getDeviceCountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDeviceCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getDeviceCountResponse>* ApiRenderEngineService::Stub::AsyncgetDeviceCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceCountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDeviceCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getDeviceComputeModel(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceComputeModelRequest& request, ::octaneapi::ApiRenderEngine_getDeviceComputeModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getDeviceComputeModelRequest, ::octaneapi::ApiRenderEngine_getDeviceComputeModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDeviceComputeModel_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getDeviceComputeModel(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceComputeModelRequest* request, ::octaneapi::ApiRenderEngine_getDeviceComputeModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getDeviceComputeModelRequest, ::octaneapi::ApiRenderEngine_getDeviceComputeModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDeviceComputeModel_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getDeviceComputeModel(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceComputeModelRequest* request, ::octaneapi::ApiRenderEngine_getDeviceComputeModelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDeviceComputeModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getDeviceComputeModelResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetDeviceComputeModelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceComputeModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getDeviceComputeModelResponse, ::octaneapi::ApiRenderEngine_getDeviceComputeModelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDeviceComputeModel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getDeviceComputeModelResponse>* ApiRenderEngineService::Stub::AsyncgetDeviceComputeModelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceComputeModelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDeviceComputeModelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getDeviceName(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceNameRequest& request, ::octaneapi::ApiRenderEngine_getDeviceNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getDeviceNameRequest, ::octaneapi::ApiRenderEngine_getDeviceNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDeviceName_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getDeviceName(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceNameRequest* request, ::octaneapi::ApiRenderEngine_getDeviceNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getDeviceNameRequest, ::octaneapi::ApiRenderEngine_getDeviceNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDeviceName_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getDeviceName(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceNameRequest* request, ::octaneapi::ApiRenderEngine_getDeviceNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDeviceName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getDeviceNameResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetDeviceNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getDeviceNameResponse, ::octaneapi::ApiRenderEngine_getDeviceNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDeviceName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getDeviceNameResponse>* ApiRenderEngineService::Stub::AsyncgetDeviceNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDeviceNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDeviceNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::isSupportedDevice(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isSupportedDeviceRequest& request, ::octaneapi::ApiRenderEngine_isSupportedDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_isSupportedDeviceRequest, ::octaneapi::ApiRenderEngine_isSupportedDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isSupportedDevice_, context, request, response);
}

void ApiRenderEngineService::Stub::async::isSupportedDevice(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isSupportedDeviceRequest* request, ::octaneapi::ApiRenderEngine_isSupportedDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_isSupportedDeviceRequest, ::octaneapi::ApiRenderEngine_isSupportedDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isSupportedDevice_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::isSupportedDevice(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isSupportedDeviceRequest* request, ::octaneapi::ApiRenderEngine_isSupportedDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isSupportedDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isSupportedDeviceResponse>* ApiRenderEngineService::Stub::PrepareAsyncisSupportedDeviceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isSupportedDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_isSupportedDeviceResponse, ::octaneapi::ApiRenderEngine_isSupportedDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isSupportedDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isSupportedDeviceResponse>* ApiRenderEngineService::Stub::AsyncisSupportedDeviceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isSupportedDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisSupportedDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::deviceCanRender(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceCanRenderRequest& request, ::octaneapi::ApiRenderEngine_deviceCanRenderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_deviceCanRenderRequest, ::octaneapi::ApiRenderEngine_deviceCanRenderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deviceCanRender_, context, request, response);
}

void ApiRenderEngineService::Stub::async::deviceCanRender(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceCanRenderRequest* request, ::octaneapi::ApiRenderEngine_deviceCanRenderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_deviceCanRenderRequest, ::octaneapi::ApiRenderEngine_deviceCanRenderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deviceCanRender_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::deviceCanRender(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceCanRenderRequest* request, ::octaneapi::ApiRenderEngine_deviceCanRenderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deviceCanRender_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deviceCanRenderResponse>* ApiRenderEngineService::Stub::PrepareAsyncdeviceCanRenderRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceCanRenderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_deviceCanRenderResponse, ::octaneapi::ApiRenderEngine_deviceCanRenderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deviceCanRender_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deviceCanRenderResponse>* ApiRenderEngineService::Stub::AsyncdeviceCanRenderRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceCanRenderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeviceCanRenderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::deviceCanDenoise(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceCanDenoiseRequest& request, ::octaneapi::ApiRenderEngine_deviceCanDenoiseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_deviceCanDenoiseRequest, ::octaneapi::ApiRenderEngine_deviceCanDenoiseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deviceCanDenoise_, context, request, response);
}

void ApiRenderEngineService::Stub::async::deviceCanDenoise(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceCanDenoiseRequest* request, ::octaneapi::ApiRenderEngine_deviceCanDenoiseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_deviceCanDenoiseRequest, ::octaneapi::ApiRenderEngine_deviceCanDenoiseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deviceCanDenoise_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::deviceCanDenoise(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceCanDenoiseRequest* request, ::octaneapi::ApiRenderEngine_deviceCanDenoiseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deviceCanDenoise_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deviceCanDenoiseResponse>* ApiRenderEngineService::Stub::PrepareAsyncdeviceCanDenoiseRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceCanDenoiseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_deviceCanDenoiseResponse, ::octaneapi::ApiRenderEngine_deviceCanDenoiseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deviceCanDenoise_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deviceCanDenoiseResponse>* ApiRenderEngineService::Stub::AsyncdeviceCanDenoiseRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceCanDenoiseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeviceCanDenoiseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::deviceSupportsHardwareRayTracing(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingRequest& request, ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingRequest, ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deviceSupportsHardwareRayTracing_, context, request, response);
}

void ApiRenderEngineService::Stub::async::deviceSupportsHardwareRayTracing(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingRequest* request, ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingRequest, ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deviceSupportsHardwareRayTracing_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::deviceSupportsHardwareRayTracing(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingRequest* request, ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deviceSupportsHardwareRayTracing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingResponse>* ApiRenderEngineService::Stub::PrepareAsyncdeviceSupportsHardwareRayTracingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingResponse, ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deviceSupportsHardwareRayTracing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingResponse>* ApiRenderEngineService::Stub::AsyncdeviceSupportsHardwareRayTracingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeviceSupportsHardwareRayTracingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::deviceSharedSurfaceInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoRequest& request, ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoRequest, ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deviceSharedSurfaceInfo_, context, request, response);
}

void ApiRenderEngineService::Stub::async::deviceSharedSurfaceInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoRequest* request, ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoRequest, ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deviceSharedSurfaceInfo_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::deviceSharedSurfaceInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoRequest* request, ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deviceSharedSurfaceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoResponse>* ApiRenderEngineService::Stub::PrepareAsyncdeviceSharedSurfaceInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoResponse, ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deviceSharedSurfaceInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoResponse>* ApiRenderEngineService::Stub::AsyncdeviceSharedSurfaceInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeviceSharedSurfaceInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getAvailablePeerToPeerPairs(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsRequest& request, ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsRequest, ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAvailablePeerToPeerPairs_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getAvailablePeerToPeerPairs(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsRequest* request, ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsRequest, ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAvailablePeerToPeerPairs_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getAvailablePeerToPeerPairs(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsRequest* request, ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAvailablePeerToPeerPairs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetAvailablePeerToPeerPairsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsResponse, ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAvailablePeerToPeerPairs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsResponse>* ApiRenderEngineService::Stub::AsyncgetAvailablePeerToPeerPairsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAvailablePeerToPeerPairsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setDevicesActivity(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setDevicesActivityRequest& request, ::octaneapi::ApiRenderEngine_setDevicesActivityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setDevicesActivityRequest, ::octaneapi::ApiRenderEngine_setDevicesActivityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setDevicesActivity_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setDevicesActivity(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setDevicesActivityRequest* request, ::octaneapi::ApiRenderEngine_setDevicesActivityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setDevicesActivityRequest, ::octaneapi::ApiRenderEngine_setDevicesActivityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDevicesActivity_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setDevicesActivity(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setDevicesActivityRequest* request, ::octaneapi::ApiRenderEngine_setDevicesActivityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDevicesActivity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setDevicesActivityResponse>* ApiRenderEngineService::Stub::PrepareAsyncsetDevicesActivityRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setDevicesActivityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_setDevicesActivityResponse, ::octaneapi::ApiRenderEngine_setDevicesActivityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setDevicesActivity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_setDevicesActivityResponse>* ApiRenderEngineService::Stub::AsyncsetDevicesActivityRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setDevicesActivityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetDevicesActivityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::isDeviceUsedForRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingRequest& request, ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingRequest, ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isDeviceUsedForRendering_, context, request, response);
}

void ApiRenderEngineService::Stub::async::isDeviceUsedForRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingRequest* request, ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingRequest, ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isDeviceUsedForRendering_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::isDeviceUsedForRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingRequest* request, ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isDeviceUsedForRendering_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingResponse>* ApiRenderEngineService::Stub::PrepareAsyncisDeviceUsedForRenderingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingResponse, ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isDeviceUsedForRendering_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingResponse>* ApiRenderEngineService::Stub::AsyncisDeviceUsedForRenderingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisDeviceUsedForRenderingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::deviceUsesPriority(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceUsesPriorityRequest& request, ::octaneapi::ApiRenderEngine_deviceUsesPriorityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_deviceUsesPriorityRequest, ::octaneapi::ApiRenderEngine_deviceUsesPriorityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deviceUsesPriority_, context, request, response);
}

void ApiRenderEngineService::Stub::async::deviceUsesPriority(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceUsesPriorityRequest* request, ::octaneapi::ApiRenderEngine_deviceUsesPriorityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_deviceUsesPriorityRequest, ::octaneapi::ApiRenderEngine_deviceUsesPriorityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deviceUsesPriority_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::deviceUsesPriority(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceUsesPriorityRequest* request, ::octaneapi::ApiRenderEngine_deviceUsesPriorityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deviceUsesPriority_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deviceUsesPriorityResponse>* ApiRenderEngineService::Stub::PrepareAsyncdeviceUsesPriorityRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceUsesPriorityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_deviceUsesPriorityResponse, ::octaneapi::ApiRenderEngine_deviceUsesPriorityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deviceUsesPriority_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deviceUsesPriorityResponse>* ApiRenderEngineService::Stub::AsyncdeviceUsesPriorityRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceUsesPriorityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeviceUsesPriorityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::deviceUsesHardwareRayTracing(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingRequest& request, ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingRequest, ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deviceUsesHardwareRayTracing_, context, request, response);
}

void ApiRenderEngineService::Stub::async::deviceUsesHardwareRayTracing(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingRequest* request, ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingRequest, ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deviceUsesHardwareRayTracing_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::deviceUsesHardwareRayTracing(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingRequest* request, ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deviceUsesHardwareRayTracing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingResponse>* ApiRenderEngineService::Stub::PrepareAsyncdeviceUsesHardwareRayTracingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingResponse, ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deviceUsesHardwareRayTracing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingResponse>* ApiRenderEngineService::Stub::AsyncdeviceUsesHardwareRayTracingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeviceUsesHardwareRayTracingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::imageDeviceIndex(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_imageDeviceIndexRequest& request, ::octaneapi::ApiRenderEngine_imageDeviceIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_imageDeviceIndexRequest, ::octaneapi::ApiRenderEngine_imageDeviceIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_imageDeviceIndex_, context, request, response);
}

void ApiRenderEngineService::Stub::async::imageDeviceIndex(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_imageDeviceIndexRequest* request, ::octaneapi::ApiRenderEngine_imageDeviceIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_imageDeviceIndexRequest, ::octaneapi::ApiRenderEngine_imageDeviceIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_imageDeviceIndex_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::imageDeviceIndex(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_imageDeviceIndexRequest* request, ::octaneapi::ApiRenderEngine_imageDeviceIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_imageDeviceIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_imageDeviceIndexResponse>* ApiRenderEngineService::Stub::PrepareAsyncimageDeviceIndexRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_imageDeviceIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_imageDeviceIndexResponse, ::octaneapi::ApiRenderEngine_imageDeviceIndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_imageDeviceIndex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_imageDeviceIndexResponse>* ApiRenderEngineService::Stub::AsyncimageDeviceIndexRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_imageDeviceIndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncimageDeviceIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::isDeviceUsedForDenoising(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingRequest& request, ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingRequest, ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isDeviceUsedForDenoising_, context, request, response);
}

void ApiRenderEngineService::Stub::async::isDeviceUsedForDenoising(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingRequest* request, ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingRequest, ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isDeviceUsedForDenoising_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::isDeviceUsedForDenoising(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingRequest* request, ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isDeviceUsedForDenoising_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingResponse>* ApiRenderEngineService::Stub::PrepareAsyncisDeviceUsedForDenoisingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingResponse, ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isDeviceUsedForDenoising_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingResponse>* ApiRenderEngineService::Stub::AsyncisDeviceUsedForDenoisingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisDeviceUsedForDenoisingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::renderPriority(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderPriorityRequest& request, ::octaneapi::ApiRenderEngine_renderPriorityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_renderPriorityRequest, ::octaneapi::ApiRenderEngine_renderPriorityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_renderPriority_, context, request, response);
}

void ApiRenderEngineService::Stub::async::renderPriority(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderPriorityRequest* request, ::octaneapi::ApiRenderEngine_renderPriorityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_renderPriorityRequest, ::octaneapi::ApiRenderEngine_renderPriorityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderPriority_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::renderPriority(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderPriorityRequest* request, ::octaneapi::ApiRenderEngine_renderPriorityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderPriority_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_renderPriorityResponse>* ApiRenderEngineService::Stub::PrepareAsyncrenderPriorityRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderPriorityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_renderPriorityResponse, ::octaneapi::ApiRenderEngine_renderPriorityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_renderPriority_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_renderPriorityResponse>* ApiRenderEngineService::Stub::AsyncrenderPriorityRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderPriorityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrenderPriorityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setRenderPriority(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderPriorityRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setRenderPriorityRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setRenderPriority_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setRenderPriority(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderPriorityRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setRenderPriorityRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setRenderPriority_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setRenderPriority(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderPriorityRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setRenderPriority_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncsetRenderPriorityRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderPriorityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_setRenderPriorityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setRenderPriority_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncsetRenderPriorityRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setRenderPriorityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetRenderPriorityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::currentPeerToPeerGroups(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsRequest& request, ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsRequest, ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_currentPeerToPeerGroups_, context, request, response);
}

void ApiRenderEngineService::Stub::async::currentPeerToPeerGroups(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsRequest* request, ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsRequest, ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_currentPeerToPeerGroups_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::currentPeerToPeerGroups(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsRequest* request, ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_currentPeerToPeerGroups_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsResponse>* ApiRenderEngineService::Stub::PrepareAsynccurrentPeerToPeerGroupsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsResponse, ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_currentPeerToPeerGroups_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsResponse>* ApiRenderEngineService::Stub::AsynccurrentPeerToPeerGroupsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccurrentPeerToPeerGroupsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::hardwareRayTracingEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledRequest& request, ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledRequest, ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hardwareRayTracingEnabled_, context, request, response);
}

void ApiRenderEngineService::Stub::async::hardwareRayTracingEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledRequest* request, ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledRequest, ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hardwareRayTracingEnabled_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::hardwareRayTracingEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledRequest* request, ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hardwareRayTracingEnabled_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledResponse>* ApiRenderEngineService::Stub::PrepareAsynchardwareRayTracingEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledResponse, ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hardwareRayTracingEnabled_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledResponse>* ApiRenderEngineService::Stub::AsynchardwareRayTracingEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchardwareRayTracingEnabledRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::openDeviceSettings(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_openDeviceSettingsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_openDeviceSettingsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_openDeviceSettings_, context, request, response);
}

void ApiRenderEngineService::Stub::async::openDeviceSettings(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_openDeviceSettingsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_openDeviceSettingsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_openDeviceSettings_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::openDeviceSettings(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_openDeviceSettingsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_openDeviceSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncopenDeviceSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_openDeviceSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_openDeviceSettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_openDeviceSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncopenDeviceSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_openDeviceSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncopenDeviceSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::renderDeviceState(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceStateRequest& request, ::octaneapi::ApiRenderEngine_renderDeviceStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_renderDeviceStateRequest, ::octaneapi::ApiRenderEngine_renderDeviceStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_renderDeviceState_, context, request, response);
}

void ApiRenderEngineService::Stub::async::renderDeviceState(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceStateRequest* request, ::octaneapi::ApiRenderEngine_renderDeviceStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_renderDeviceStateRequest, ::octaneapi::ApiRenderEngine_renderDeviceStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderDeviceState_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::renderDeviceState(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceStateRequest* request, ::octaneapi::ApiRenderEngine_renderDeviceStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderDeviceState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_renderDeviceStateResponse>* ApiRenderEngineService::Stub::PrepareAsyncrenderDeviceStateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_renderDeviceStateResponse, ::octaneapi::ApiRenderEngine_renderDeviceStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_renderDeviceState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_renderDeviceStateResponse>* ApiRenderEngineService::Stub::AsyncrenderDeviceStateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrenderDeviceStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::renderDeviceErrorCode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeRequest& request, ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeRequest, ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_renderDeviceErrorCode_, context, request, response);
}

void ApiRenderEngineService::Stub::async::renderDeviceErrorCode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeRequest* request, ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeRequest, ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderDeviceErrorCode_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::renderDeviceErrorCode(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeRequest* request, ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderDeviceErrorCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeResponse>* ApiRenderEngineService::Stub::PrepareAsyncrenderDeviceErrorCodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeResponse, ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_renderDeviceErrorCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeResponse>* ApiRenderEngineService::Stub::AsyncrenderDeviceErrorCodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrenderDeviceErrorCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::errorcodeToString(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_errorcodeToStringRequest& request, ::octaneapi::ApiRenderEngine_errorcodeToStringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_errorcodeToStringRequest, ::octaneapi::ApiRenderEngine_errorcodeToStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_errorcodeToString_, context, request, response);
}

void ApiRenderEngineService::Stub::async::errorcodeToString(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_errorcodeToStringRequest* request, ::octaneapi::ApiRenderEngine_errorcodeToStringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_errorcodeToStringRequest, ::octaneapi::ApiRenderEngine_errorcodeToStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_errorcodeToString_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::errorcodeToString(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_errorcodeToStringRequest* request, ::octaneapi::ApiRenderEngine_errorcodeToStringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_errorcodeToString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_errorcodeToStringResponse>* ApiRenderEngineService::Stub::PrepareAsyncerrorcodeToStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_errorcodeToStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_errorcodeToStringResponse, ::octaneapi::ApiRenderEngine_errorcodeToStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_errorcodeToString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_errorcodeToStringResponse>* ApiRenderEngineService::Stub::AsyncerrorcodeToStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_errorcodeToStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncerrorcodeToStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::renderDeviceErrorMessage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageRequest& request, ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageRequest, ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_renderDeviceErrorMessage_, context, request, response);
}

void ApiRenderEngineService::Stub::async::renderDeviceErrorMessage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageRequest* request, ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageRequest, ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderDeviceErrorMessage_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::renderDeviceErrorMessage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageRequest* request, ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderDeviceErrorMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageResponse>* ApiRenderEngineService::Stub::PrepareAsyncrenderDeviceErrorMessageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageResponse, ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_renderDeviceErrorMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageResponse>* ApiRenderEngineService::Stub::AsyncrenderDeviceErrorMessageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrenderDeviceErrorMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::saveRenderDeviceConfig(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderDeviceConfigRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderDeviceConfigRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveRenderDeviceConfig_, context, request, response);
}

void ApiRenderEngineService::Stub::async::saveRenderDeviceConfig(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderDeviceConfigRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_saveRenderDeviceConfigRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderDeviceConfig_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::saveRenderDeviceConfig(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderDeviceConfigRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveRenderDeviceConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncsaveRenderDeviceConfigRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderDeviceConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_saveRenderDeviceConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveRenderDeviceConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncsaveRenderDeviceConfigRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_saveRenderDeviceConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveRenderDeviceConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::outOfCoreEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_outOfCoreEnabledRequest& request, ::octaneapi::ApiRenderEngine_outOfCoreEnabledResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_outOfCoreEnabledRequest, ::octaneapi::ApiRenderEngine_outOfCoreEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_outOfCoreEnabled_, context, request, response);
}

void ApiRenderEngineService::Stub::async::outOfCoreEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_outOfCoreEnabledRequest* request, ::octaneapi::ApiRenderEngine_outOfCoreEnabledResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_outOfCoreEnabledRequest, ::octaneapi::ApiRenderEngine_outOfCoreEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_outOfCoreEnabled_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::outOfCoreEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_outOfCoreEnabledRequest* request, ::octaneapi::ApiRenderEngine_outOfCoreEnabledResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_outOfCoreEnabled_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_outOfCoreEnabledResponse>* ApiRenderEngineService::Stub::PrepareAsyncoutOfCoreEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_outOfCoreEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_outOfCoreEnabledResponse, ::octaneapi::ApiRenderEngine_outOfCoreEnabledRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_outOfCoreEnabled_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_outOfCoreEnabledResponse>* ApiRenderEngineService::Stub::AsyncoutOfCoreEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_outOfCoreEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncoutOfCoreEnabledRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::enableOutOfCore(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_enableOutOfCoreRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_enableOutOfCoreRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_enableOutOfCore_, context, request, response);
}

void ApiRenderEngineService::Stub::async::enableOutOfCore(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_enableOutOfCoreRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_enableOutOfCoreRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_enableOutOfCore_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::enableOutOfCore(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_enableOutOfCoreRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_enableOutOfCore_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncenableOutOfCoreRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_enableOutOfCoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_enableOutOfCoreRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_enableOutOfCore_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncenableOutOfCoreRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_enableOutOfCoreRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncenableOutOfCoreRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::disableOutOfCore(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_disableOutOfCoreRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_disableOutOfCoreRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_disableOutOfCore_, context, request, response);
}

void ApiRenderEngineService::Stub::async::disableOutOfCore(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_disableOutOfCoreRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_disableOutOfCoreRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_disableOutOfCore_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::disableOutOfCore(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_disableOutOfCoreRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_disableOutOfCore_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncdisableOutOfCoreRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_disableOutOfCoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_disableOutOfCoreRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_disableOutOfCore_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncdisableOutOfCoreRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_disableOutOfCoreRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdisableOutOfCoreRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getOutOfCoreMemoryUsage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageRequest& request, ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageRequest, ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getOutOfCoreMemoryUsage_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getOutOfCoreMemoryUsage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageRequest* request, ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageRequest, ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getOutOfCoreMemoryUsage_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getOutOfCoreMemoryUsage(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageRequest* request, ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getOutOfCoreMemoryUsage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetOutOfCoreMemoryUsageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageResponse, ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getOutOfCoreMemoryUsage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageResponse>* ApiRenderEngineService::Stub::AsyncgetOutOfCoreMemoryUsageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetOutOfCoreMemoryUsageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setGpuHeadroom(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setGpuHeadroomRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setGpuHeadroomRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setGpuHeadroom_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setGpuHeadroom(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setGpuHeadroomRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setGpuHeadroomRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setGpuHeadroom_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setGpuHeadroom(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setGpuHeadroomRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setGpuHeadroom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncsetGpuHeadroomRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setGpuHeadroomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_setGpuHeadroomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setGpuHeadroom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncsetGpuHeadroomRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setGpuHeadroomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetGpuHeadroomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getGpuHeadroom(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getGpuHeadroomRequest& request, ::octaneapi::ApiRenderEngine_getGpuHeadroomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getGpuHeadroomRequest, ::octaneapi::ApiRenderEngine_getGpuHeadroomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getGpuHeadroom_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getGpuHeadroom(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getGpuHeadroomRequest* request, ::octaneapi::ApiRenderEngine_getGpuHeadroomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getGpuHeadroomRequest, ::octaneapi::ApiRenderEngine_getGpuHeadroomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGpuHeadroom_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getGpuHeadroom(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getGpuHeadroomRequest* request, ::octaneapi::ApiRenderEngine_getGpuHeadroomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGpuHeadroom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getGpuHeadroomResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetGpuHeadroomRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getGpuHeadroomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getGpuHeadroomResponse, ::octaneapi::ApiRenderEngine_getGpuHeadroomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getGpuHeadroom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getGpuHeadroomResponse>* ApiRenderEngineService::Stub::AsyncgetGpuHeadroomRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getGpuHeadroomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetGpuHeadroomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setCoreLimit(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setCoreLimitRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setCoreLimitRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setCoreLimit_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setCoreLimit(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setCoreLimitRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setCoreLimitRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCoreLimit_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setCoreLimit(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setCoreLimitRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCoreLimit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncsetCoreLimitRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setCoreLimitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_setCoreLimitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setCoreLimit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncsetCoreLimitRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setCoreLimitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetCoreLimitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::disableCoreLimit(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_disableCoreLimitRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_disableCoreLimitRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_disableCoreLimit_, context, request, response);
}

void ApiRenderEngineService::Stub::async::disableCoreLimit(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_disableCoreLimitRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_disableCoreLimitRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_disableCoreLimit_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::disableCoreLimit(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_disableCoreLimitRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_disableCoreLimit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncdisableCoreLimitRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_disableCoreLimitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_disableCoreLimitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_disableCoreLimit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncdisableCoreLimitRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_disableCoreLimitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdisableCoreLimitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::registerInputSharedSurface(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceRequest& request, ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceRequest, ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_registerInputSharedSurface_, context, request, response);
}

void ApiRenderEngineService::Stub::async::registerInputSharedSurface(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceRequest* request, ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceRequest, ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerInputSharedSurface_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::registerInputSharedSurface(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceRequest* request, ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerInputSharedSurface_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceResponse>* ApiRenderEngineService::Stub::PrepareAsyncregisterInputSharedSurfaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceResponse, ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_registerInputSharedSurface_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceResponse>* ApiRenderEngineService::Stub::AsyncregisterInputSharedSurfaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncregisterInputSharedSurfaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::unregisterInputSharedSurface(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_unregisterInputSharedSurfaceRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_unregisterInputSharedSurfaceRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unregisterInputSharedSurface_, context, request, response);
}

void ApiRenderEngineService::Stub::async::unregisterInputSharedSurface(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_unregisterInputSharedSurfaceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_unregisterInputSharedSurfaceRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregisterInputSharedSurface_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::unregisterInputSharedSurface(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_unregisterInputSharedSurfaceRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregisterInputSharedSurface_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncunregisterInputSharedSurfaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_unregisterInputSharedSurfaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_unregisterInputSharedSurfaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unregisterInputSharedSurface_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncunregisterInputSharedSurfaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_unregisterInputSharedSurfaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunregisterInputSharedSurfaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::triggerAsyncTonemap(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_triggerAsyncTonemapRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_triggerAsyncTonemapRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_triggerAsyncTonemap_, context, request, response);
}

void ApiRenderEngineService::Stub::async::triggerAsyncTonemap(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_triggerAsyncTonemapRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_triggerAsyncTonemapRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_triggerAsyncTonemap_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::triggerAsyncTonemap(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_triggerAsyncTonemapRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_triggerAsyncTonemap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsynctriggerAsyncTonemapRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_triggerAsyncTonemapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_triggerAsyncTonemapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_triggerAsyncTonemap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsynctriggerAsyncTonemapRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_triggerAsyncTonemapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctriggerAsyncTonemapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::setSharedSurfaceOutputType(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setSharedSurfaceOutputTypeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_setSharedSurfaceOutputTypeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setSharedSurfaceOutputType_, context, request, response);
}

void ApiRenderEngineService::Stub::async::setSharedSurfaceOutputType(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setSharedSurfaceOutputTypeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_setSharedSurfaceOutputTypeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setSharedSurfaceOutputType_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::setSharedSurfaceOutputType(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setSharedSurfaceOutputTypeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setSharedSurfaceOutputType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncsetSharedSurfaceOutputTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setSharedSurfaceOutputTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_setSharedSurfaceOutputTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setSharedSurfaceOutputType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncsetSharedSurfaceOutputTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_setSharedSurfaceOutputTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetSharedSurfaceOutputTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getSharedSurfaceOutputType(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeRequest& request, ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeRequest, ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getSharedSurfaceOutputType_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getSharedSurfaceOutputType(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeRequest* request, ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeRequest, ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSharedSurfaceOutputType_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getSharedSurfaceOutputType(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeRequest* request, ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSharedSurfaceOutputType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetSharedSurfaceOutputTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeResponse, ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getSharedSurfaceOutputType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeResponse>* ApiRenderEngineService::Stub::AsyncgetSharedSurfaceOutputTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetSharedSurfaceOutputTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getRealTime(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRealTimeRequest& request, ::octaneapi::ApiRenderEngine_getRealTimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getRealTimeRequest, ::octaneapi::ApiRenderEngine_getRealTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRealTime_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getRealTime(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRealTimeRequest* request, ::octaneapi::ApiRenderEngine_getRealTimeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getRealTimeRequest, ::octaneapi::ApiRenderEngine_getRealTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRealTime_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getRealTime(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRealTimeRequest* request, ::octaneapi::ApiRenderEngine_getRealTimeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRealTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRealTimeResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetRealTimeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRealTimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getRealTimeResponse, ::octaneapi::ApiRenderEngine_getRealTimeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRealTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getRealTimeResponse>* ApiRenderEngineService::Stub::AsyncgetRealTimeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getRealTimeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRealTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::pauseRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pauseRenderingRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_pauseRenderingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pauseRendering_, context, request, response);
}

void ApiRenderEngineService::Stub::async::pauseRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pauseRenderingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_pauseRenderingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pauseRendering_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::pauseRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pauseRenderingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pauseRendering_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncpauseRenderingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pauseRenderingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_pauseRenderingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pauseRendering_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncpauseRenderingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pauseRenderingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpauseRenderingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::continueRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_continueRenderingRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_continueRenderingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_continueRendering_, context, request, response);
}

void ApiRenderEngineService::Stub::async::continueRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_continueRenderingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_continueRenderingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_continueRendering_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::continueRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_continueRenderingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_continueRendering_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsynccontinueRenderingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_continueRenderingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_continueRenderingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_continueRendering_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsynccontinueRenderingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_continueRenderingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccontinueRenderingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::isRenderingPaused(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isRenderingPausedRequest& request, ::octaneapi::ApiRenderEngine_isRenderingPausedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_isRenderingPausedRequest, ::octaneapi::ApiRenderEngine_isRenderingPausedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isRenderingPaused_, context, request, response);
}

void ApiRenderEngineService::Stub::async::isRenderingPaused(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isRenderingPausedRequest* request, ::octaneapi::ApiRenderEngine_isRenderingPausedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_isRenderingPausedRequest, ::octaneapi::ApiRenderEngine_isRenderingPausedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isRenderingPaused_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::isRenderingPaused(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isRenderingPausedRequest* request, ::octaneapi::ApiRenderEngine_isRenderingPausedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isRenderingPaused_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isRenderingPausedResponse>* ApiRenderEngineService::Stub::PrepareAsyncisRenderingPausedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isRenderingPausedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_isRenderingPausedResponse, ::octaneapi::ApiRenderEngine_isRenderingPausedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isRenderingPaused_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isRenderingPausedResponse>* ApiRenderEngineService::Stub::AsyncisRenderingPausedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isRenderingPausedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisRenderingPausedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::restartRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_restartRenderingRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_restartRenderingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_restartRendering_, context, request, response);
}

void ApiRenderEngineService::Stub::async::restartRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_restartRenderingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_restartRenderingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_restartRendering_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::restartRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_restartRenderingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_restartRendering_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncrestartRenderingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_restartRenderingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_restartRenderingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_restartRendering_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncrestartRenderingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_restartRenderingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrestartRenderingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::stopRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_stopRenderingRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_stopRenderingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stopRendering_, context, request, response);
}

void ApiRenderEngineService::Stub::async::stopRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_stopRenderingRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_stopRenderingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stopRendering_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::stopRendering(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_stopRenderingRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stopRendering_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::PrepareAsyncstopRenderingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_stopRenderingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRenderEngine_stopRenderingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stopRendering_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRenderEngineService::Stub::AsyncstopRenderingRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_stopRenderingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopRenderingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::pick(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickRequest& request, ::octaneapi::ApiRenderEngine_pickResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_pickRequest, ::octaneapi::ApiRenderEngine_pickResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pick_, context, request, response);
}

void ApiRenderEngineService::Stub::async::pick(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickRequest* request, ::octaneapi::ApiRenderEngine_pickResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_pickRequest, ::octaneapi::ApiRenderEngine_pickResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pick_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::pick(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickRequest* request, ::octaneapi::ApiRenderEngine_pickResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pick_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_pickResponse>* ApiRenderEngineService::Stub::PrepareAsyncpickRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_pickResponse, ::octaneapi::ApiRenderEngine_pickRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pick_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_pickResponse>* ApiRenderEngineService::Stub::AsyncpickRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpickRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::pickWhitePoint(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickWhitePointRequest& request, ::octaneapi::ApiRenderEngine_pickWhitePointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_pickWhitePointRequest, ::octaneapi::ApiRenderEngine_pickWhitePointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pickWhitePoint_, context, request, response);
}

void ApiRenderEngineService::Stub::async::pickWhitePoint(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickWhitePointRequest* request, ::octaneapi::ApiRenderEngine_pickWhitePointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_pickWhitePointRequest, ::octaneapi::ApiRenderEngine_pickWhitePointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pickWhitePoint_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::pickWhitePoint(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickWhitePointRequest* request, ::octaneapi::ApiRenderEngine_pickWhitePointResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pickWhitePoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_pickWhitePointResponse>* ApiRenderEngineService::Stub::PrepareAsyncpickWhitePointRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickWhitePointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_pickWhitePointResponse, ::octaneapi::ApiRenderEngine_pickWhitePointRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pickWhitePoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_pickWhitePointResponse>* ApiRenderEngineService::Stub::AsyncpickWhitePointRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickWhitePointRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpickWhitePointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::pickImagerWhitePoint(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickImagerWhitePointRequest& request, ::octaneapi::ApiRenderEngine_pickImagerWhitePointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_pickImagerWhitePointRequest, ::octaneapi::ApiRenderEngine_pickImagerWhitePointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pickImagerWhitePoint_, context, request, response);
}

void ApiRenderEngineService::Stub::async::pickImagerWhitePoint(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickImagerWhitePointRequest* request, ::octaneapi::ApiRenderEngine_pickImagerWhitePointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_pickImagerWhitePointRequest, ::octaneapi::ApiRenderEngine_pickImagerWhitePointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pickImagerWhitePoint_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::pickImagerWhitePoint(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickImagerWhitePointRequest* request, ::octaneapi::ApiRenderEngine_pickImagerWhitePointResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pickImagerWhitePoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_pickImagerWhitePointResponse>* ApiRenderEngineService::Stub::PrepareAsyncpickImagerWhitePointRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickImagerWhitePointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_pickImagerWhitePointResponse, ::octaneapi::ApiRenderEngine_pickImagerWhitePointRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pickImagerWhitePoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_pickImagerWhitePointResponse>* ApiRenderEngineService::Stub::AsyncpickImagerWhitePointRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickImagerWhitePointRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpickImagerWhitePointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::isOutputAovWhitePointPickable(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableRequest& request, ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableRequest, ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isOutputAovWhitePointPickable_, context, request, response);
}

void ApiRenderEngineService::Stub::async::isOutputAovWhitePointPickable(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableRequest* request, ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableRequest, ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isOutputAovWhitePointPickable_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::isOutputAovWhitePointPickable(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableRequest* request, ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isOutputAovWhitePointPickable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableResponse>* ApiRenderEngineService::Stub::PrepareAsyncisOutputAovWhitePointPickableRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableResponse, ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isOutputAovWhitePointPickable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableResponse>* ApiRenderEngineService::Stub::AsyncisOutputAovWhitePointPickableRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisOutputAovWhitePointPickableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::pickOutputAovWhitePoint(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointRequest& request, ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointRequest, ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pickOutputAovWhitePoint_, context, request, response);
}

void ApiRenderEngineService::Stub::async::pickOutputAovWhitePoint(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointRequest* request, ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointRequest, ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pickOutputAovWhitePoint_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::pickOutputAovWhitePoint(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointRequest* request, ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pickOutputAovWhitePoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointResponse>* ApiRenderEngineService::Stub::PrepareAsyncpickOutputAovWhitePointRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointResponse, ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pickOutputAovWhitePoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointResponse>* ApiRenderEngineService::Stub::AsyncpickOutputAovWhitePointRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpickOutputAovWhitePointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::pickCryptomatteMatte(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickCryptomatteMatteRequest& request, ::octaneapi::ApiRenderEngine_pickCryptomatteMatteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_pickCryptomatteMatteRequest, ::octaneapi::ApiRenderEngine_pickCryptomatteMatteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pickCryptomatteMatte_, context, request, response);
}

void ApiRenderEngineService::Stub::async::pickCryptomatteMatte(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickCryptomatteMatteRequest* request, ::octaneapi::ApiRenderEngine_pickCryptomatteMatteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_pickCryptomatteMatteRequest, ::octaneapi::ApiRenderEngine_pickCryptomatteMatteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pickCryptomatteMatte_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::pickCryptomatteMatte(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickCryptomatteMatteRequest* request, ::octaneapi::ApiRenderEngine_pickCryptomatteMatteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pickCryptomatteMatte_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_pickCryptomatteMatteResponse>* ApiRenderEngineService::Stub::PrepareAsyncpickCryptomatteMatteRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickCryptomatteMatteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_pickCryptomatteMatteResponse, ::octaneapi::ApiRenderEngine_pickCryptomatteMatteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pickCryptomatteMatte_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_pickCryptomatteMatteResponse>* ApiRenderEngineService::Stub::AsyncpickCryptomatteMatteRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_pickCryptomatteMatteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpickCryptomatteMatteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::modifyCryptomatteMatteSelection(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionRequest& request, ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionRequest, ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_modifyCryptomatteMatteSelection_, context, request, response);
}

void ApiRenderEngineService::Stub::async::modifyCryptomatteMatteSelection(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionRequest* request, ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionRequest, ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyCryptomatteMatteSelection_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::modifyCryptomatteMatteSelection(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionRequest* request, ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyCryptomatteMatteSelection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionResponse>* ApiRenderEngineService::Stub::PrepareAsyncmodifyCryptomatteMatteSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionResponse, ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_modifyCryptomatteMatteSelection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionResponse>* ApiRenderEngineService::Stub::AsyncmodifyCryptomatteMatteSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmodifyCryptomatteMatteSelectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::toString(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_toStringRequest& request, ::octaneapi::ApiRenderEngine_toStringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_toStringRequest, ::octaneapi::ApiRenderEngine_toStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_toString_, context, request, response);
}

void ApiRenderEngineService::Stub::async::toString(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_toStringRequest* request, ::octaneapi::ApiRenderEngine_toStringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_toStringRequest, ::octaneapi::ApiRenderEngine_toStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_toString_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::toString(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_toStringRequest* request, ::octaneapi::ApiRenderEngine_toStringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_toString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_toStringResponse>* ApiRenderEngineService::Stub::PrepareAsynctoStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_toStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_toStringResponse, ::octaneapi::ApiRenderEngine_toStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_toString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_toStringResponse>* ApiRenderEngineService::Stub::AsynctoStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_toStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctoStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderEngineService::Stub::getDevicePciIds(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDevicePciIdsRequest& request, ::octaneapi::ApiRenderEngine_getDevicePciIdsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderEngine_getDevicePciIdsRequest, ::octaneapi::ApiRenderEngine_getDevicePciIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDevicePciIds_, context, request, response);
}

void ApiRenderEngineService::Stub::async::getDevicePciIds(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDevicePciIdsRequest* request, ::octaneapi::ApiRenderEngine_getDevicePciIdsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderEngine_getDevicePciIdsRequest, ::octaneapi::ApiRenderEngine_getDevicePciIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDevicePciIds_, context, request, response, std::move(f));
}

void ApiRenderEngineService::Stub::async::getDevicePciIds(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDevicePciIdsRequest* request, ::octaneapi::ApiRenderEngine_getDevicePciIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDevicePciIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getDevicePciIdsResponse>* ApiRenderEngineService::Stub::PrepareAsyncgetDevicePciIdsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDevicePciIdsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderEngine_getDevicePciIdsResponse, ::octaneapi::ApiRenderEngine_getDevicePciIdsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDevicePciIds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderEngine_getDevicePciIdsResponse>* ApiRenderEngineService::Stub::AsyncgetDevicePciIdsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderEngine_getDevicePciIdsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDevicePciIdsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiRenderEngineService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setRenderTargetNodeRequest, ::octaneapi::ApiRenderEngine_setRenderTargetNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setRenderTargetNodeRequest* req,
             ::octaneapi::ApiRenderEngine_setRenderTargetNodeResponse* resp) {
               return service->setRenderTargetNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getRenderTargetNodeRequest, ::octaneapi::ApiRenderEngine_getRenderTargetNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getRenderTargetNodeRequest* req,
             ::octaneapi::ApiRenderEngine_getRenderTargetNodeResponse* resp) {
               return service->getRenderTargetNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getRenderGeometryNodeRequest, ::octaneapi::ApiRenderEngine_getRenderGeometryNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getRenderGeometryNodeRequest* req,
             ::octaneapi::ApiRenderEngine_getRenderGeometryNodeResponse* resp) {
               return service->getRenderGeometryNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getRenderCameraNodeRequest, ::octaneapi::ApiRenderEngine_getRenderCameraNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getRenderCameraNodeRequest* req,
             ::octaneapi::ApiRenderEngine_getRenderCameraNodeResponse* resp) {
               return service->getRenderCameraNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setRenderRegionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setRenderRegionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setRenderRegion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getRenderRegionRequest, ::octaneapi::ApiRenderEngine_getRenderRegionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getRenderRegionRequest* req,
             ::octaneapi::ApiRenderEngine_getRenderRegionResponse* resp) {
               return service->getRenderRegion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setAsyncTonemapParamsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setAsyncTonemapParamsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setAsyncTonemapParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setAsyncTonemapParams1Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setAsyncTonemapParams1Request* req,
             ::google::protobuf::Empty* resp) {
               return service->setAsyncTonemapParams1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeRequest, ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeRequest* req,
             ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeResponse* resp) {
               return service->asyncTonemapBufferType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorRequest, ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorRequest* req,
             ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorResponse* resp) {
               return service->asyncTonemapCryptomatteFalseColor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoRequest, ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoRequest* req,
             ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoResponse* resp) {
               return service->asyncTonemapOutputColorSpaceInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceRequest, ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceRequest* req,
             ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceResponse* resp) {
               return service->asyncTonemapColorSpace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeRequest, ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeRequest* req,
             ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeResponse* resp) {
               return service->asyncTonemapPremultipliedAlphaType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesRequest, ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesRequest* req,
             ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesResponse* resp) {
               return service->setAsyncTonemapRenderPasses(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_asyncTonemapRenderPassesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_asyncTonemapRenderPassesRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->asyncTonemapRenderPasses(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getEnabledAovsRequest, ::octaneapi::ApiRenderEngine_getEnabledAovsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getEnabledAovsRequest* req,
             ::octaneapi::ApiRenderEngine_getEnabledAovsResponse* resp) {
               return service->getEnabledAovs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_freeTonemapPassesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_freeTonemapPassesRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->freeTonemapPasses(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_displayRenderPassIdRequest, ::octaneapi::ApiRenderEngine_displayRenderPassIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_displayRenderPassIdRequest* req,
             ::octaneapi::ApiRenderEngine_displayRenderPassIdResponse* resp) {
               return service->displayRenderPassId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setSubSampleModeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setSubSampleModeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setSubSampleMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getSubSampleModeRequest, ::octaneapi::ApiRenderEngine_getSubSampleModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getSubSampleModeRequest* req,
             ::octaneapi::ApiRenderEngine_getSubSampleModeResponse* resp) {
               return service->getSubSampleMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setClayModeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setClayModeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setClayMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_clayModeRequest, ::octaneapi::ApiRenderEngine_clayModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_clayModeRequest* req,
             ::octaneapi::ApiRenderEngine_clayModeResponse* resp) {
               return service->clayMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_fpsRequest, ::octaneapi::ApiRenderEngine_fpsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_fpsRequest* req,
             ::octaneapi::ApiRenderEngine_fpsResponse* resp) {
               return service->fps(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setFpsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setFpsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setFps(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_isCompilingRequest, ::octaneapi::ApiRenderEngine_isCompilingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_isCompilingRequest* req,
             ::octaneapi::ApiRenderEngine_isCompilingResponse* resp) {
               return service->isCompiling(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_isCompressingTexturesRequest, ::octaneapi::ApiRenderEngine_isCompressingTexturesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_isCompressingTexturesRequest* req,
             ::octaneapi::ApiRenderEngine_isCompressingTexturesResponse* resp) {
               return service->isCompressingTextures(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_hasPendingRenderDataRequest, ::octaneapi::ApiRenderEngine_hasPendingRenderDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_hasPendingRenderDataRequest* req,
             ::octaneapi::ApiRenderEngine_hasPendingRenderDataResponse* resp) {
               return service->hasPendingRenderData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getCurrentChangeLevelRequest, ::octaneapi::ApiRenderEngine_getCurrentChangeLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getCurrentChangeLevelRequest* req,
             ::octaneapi::ApiRenderEngine_getCurrentChangeLevelResponse* resp) {
               return service->getCurrentChangeLevel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelRequest, ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelRequest* req,
             ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelResponse* resp) {
               return service->getRenderImageChangeLevel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelRequest, ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelRequest* req,
             ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelResponse* resp) {
               return service->getRenderRestartedChangeLevel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackRequest, ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackRequest* req,
             ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackResponse* resp) {
               return service->setAsyncUpdateCallback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_updatesAreAsyncRequest, ::octaneapi::ApiRenderEngine_updatesAreAsyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_updatesAreAsyncRequest* req,
             ::octaneapi::ApiRenderEngine_updatesAreAsyncResponse* resp) {
               return service->updatesAreAsync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_isImageReadyRequest, ::octaneapi::ApiRenderEngine_isImageReadyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_isImageReadyRequest* req,
             ::octaneapi::ApiRenderEngine_isImageReadyResponse* resp) {
               return service->isImageReady(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_resetImageReadyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_resetImageReadyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->resetImageReady(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_isRenderFailureRequest, ::octaneapi::ApiRenderEngine_isRenderFailureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_isRenderFailureRequest* req,
             ::octaneapi::ApiRenderEngine_isRenderFailureResponse* resp) {
               return service->isRenderFailure(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_resetRenderFailureRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_resetRenderFailureRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->resetRenderFailure(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackRequest, ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackRequest* req,
             ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackResponse* resp) {
               return service->setOnTileBlendedCallback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackRequest, ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackRequest* req,
             ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackResponse* resp) {
               return service->setOnNewStatisticsCallback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setOnNewImageCallbackRequest, ::octaneapi::ApiRenderEngine_setOnNewImageCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setOnNewImageCallbackRequest* req,
             ::octaneapi::ApiRenderEngine_setOnNewImageCallbackResponse* resp) {
               return service->setOnNewImageCallback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackRequest, ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackRequest* req,
             ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackResponse* resp) {
               return service->setOnOcioErrorCallback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackRequest, ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackRequest* req,
             ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackResponse* resp) {
               return service->setOnRenderFailureCallback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setForceCallbacksInRenderThreadsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setForceCallbacksInRenderThreadsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setForceCallbacksInRenderThreads(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_grabRenderResultRequest, ::octaneapi::ApiRenderEngine_grabRenderResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_grabRenderResultRequest* req,
             ::octaneapi::ApiRenderEngine_grabRenderResultResponse* resp) {
               return service->grabRenderResult(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_releaseRenderResultRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_releaseRenderResultRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->releaseRenderResult(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_synchronousTonemapRequest, ::octaneapi::ApiRenderEngine_synchronousTonemapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_synchronousTonemapRequest* req,
             ::octaneapi::ApiRenderEngine_synchronousTonemapResponse* resp) {
               return service->synchronousTonemap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_synchronousTonemap1Request, ::octaneapi::ApiRenderEngine_synchronousTonemap1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_synchronousTonemap1Request* req,
             ::octaneapi::ApiRenderEngine_synchronousTonemap1Response* resp) {
               return service->synchronousTonemap1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesRequest, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesRequest* req,
             ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesResponse* resp) {
               return service->synchronousTonemapAllRenderPasses(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Request, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Request* req,
             ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Response* resp) {
               return service->synchronousTonemapAllRenderPasses1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getRenderStatisticsRequest, ::octaneapi::ApiRenderEngine_getRenderStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getRenderStatisticsRequest* req,
             ::octaneapi::ApiRenderEngine_getRenderStatisticsResponse* resp) {
               return service->getRenderStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getRenderResultStatisticsRequest, ::octaneapi::ApiRenderEngine_getRenderResultStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getRenderResultStatisticsRequest* req,
             ::octaneapi::ApiRenderEngine_getRenderResultStatisticsResponse* resp) {
               return service->getRenderResultStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_saveImageRequest, ::octaneapi::ApiRenderEngine_saveImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_saveImageRequest* req,
             ::octaneapi::ApiRenderEngine_saveImageResponse* resp) {
               return service->saveImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_saveImage1Request, ::octaneapi::ApiRenderEngine_saveImage1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_saveImage1Request* req,
             ::octaneapi::ApiRenderEngine_saveImage1Response* resp) {
               return service->saveImage1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_saveImage2Request, ::octaneapi::ApiRenderEngine_saveImage2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_saveImage2Request* req,
             ::octaneapi::ApiRenderEngine_saveImage2Response* resp) {
               return service->saveImage2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_saveRenderPassesRequest, ::octaneapi::ApiRenderEngine_saveRenderPassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_saveRenderPassesRequest* req,
             ::octaneapi::ApiRenderEngine_saveRenderPassesResponse* resp) {
               return service->saveRenderPasses(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_saveRenderPasses1Request, ::octaneapi::ApiRenderEngine_saveRenderPasses1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_saveRenderPasses1Request* req,
             ::octaneapi::ApiRenderEngine_saveRenderPasses1Response* resp) {
               return service->saveRenderPasses1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_saveRenderPasses2Request, ::octaneapi::ApiRenderEngine_saveRenderPasses2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_saveRenderPasses2Request* req,
             ::octaneapi::ApiRenderEngine_saveRenderPasses2Response* resp) {
               return service->saveRenderPasses2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrRequest, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrRequest* req,
             ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrResponse* resp) {
               return service->saveRenderPassesMultiExr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Request, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Request* req,
             ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Response* resp) {
               return service->saveRenderPassesMultiExr1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrRequest, ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrRequest* req,
             ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrResponse* resp) {
               return service->saveRenderPassesDeepExr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_deepImageEnabledRequest, ::octaneapi::ApiRenderEngine_deepImageEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_deepImageEnabledRequest* req,
             ::octaneapi::ApiRenderEngine_deepImageEnabledResponse* resp) {
               return service->deepImageEnabled(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[60],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_deepImageEnabled1Request, ::octaneapi::ApiRenderEngine_deepImageEnabled1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_deepImageEnabled1Request* req,
             ::octaneapi::ApiRenderEngine_deepImageEnabled1Response* resp) {
               return service->deepImageEnabled1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[61],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_deepPassesEnabledRequest, ::octaneapi::ApiRenderEngine_deepPassesEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_deepPassesEnabledRequest* req,
             ::octaneapi::ApiRenderEngine_deepPassesEnabledResponse* resp) {
               return service->deepPassesEnabled(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[62],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_canSaveDeepImageRequest, ::octaneapi::ApiRenderEngine_canSaveDeepImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_canSaveDeepImageRequest* req,
             ::octaneapi::ApiRenderEngine_canSaveDeepImageResponse* resp) {
               return service->canSaveDeepImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[63],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_saveDeepImageRequest, ::octaneapi::ApiRenderEngine_saveDeepImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_saveDeepImageRequest* req,
             ::octaneapi::ApiRenderEngine_saveDeepImageResponse* resp) {
               return service->saveDeepImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[64],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_saveRenderStateRequest, ::octaneapi::ApiRenderEngine_saveRenderStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_saveRenderStateRequest* req,
             ::octaneapi::ApiRenderEngine_saveRenderStateResponse* resp) {
               return service->saveRenderState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[65],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_loadRenderStateRequest, ::octaneapi::ApiRenderEngine_loadRenderStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_loadRenderStateRequest* req,
             ::octaneapi::ApiRenderEngine_loadRenderStateResponse* resp) {
               return service->loadRenderState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[66],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_previewMaterialRequest, ::octaneapi::ApiRenderEngine_previewMaterialResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_previewMaterialRequest* req,
             ::octaneapi::ApiRenderEngine_previewMaterialResponse* resp) {
               return service->previewMaterial(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[67],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_previewMaterialHdrRequest, ::octaneapi::ApiRenderEngine_previewMaterialHdrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_previewMaterialHdrRequest* req,
             ::octaneapi::ApiRenderEngine_previewMaterialHdrResponse* resp) {
               return service->previewMaterialHdr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[68],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_previewMaterial1Request, ::octaneapi::ApiRenderEngine_previewMaterial1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_previewMaterial1Request* req,
             ::octaneapi::ApiRenderEngine_previewMaterial1Response* resp) {
               return service->previewMaterial1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[69],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getMemoryUsageRequest, ::octaneapi::ApiRenderEngine_getMemoryUsageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getMemoryUsageRequest* req,
             ::octaneapi::ApiRenderEngine_getMemoryUsageResponse* resp) {
               return service->getMemoryUsage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[70],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getResourceStatisticsRequest, ::octaneapi::ApiRenderEngine_getResourceStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getResourceStatisticsRequest* req,
             ::octaneapi::ApiRenderEngine_getResourceStatisticsResponse* resp) {
               return service->getResourceStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[71],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getGeometryStatisticsRequest, ::octaneapi::ApiRenderEngine_getGeometryStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getGeometryStatisticsRequest* req,
             ::octaneapi::ApiRenderEngine_getGeometryStatisticsResponse* resp) {
               return service->getGeometryStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[72],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getTexturesStatisticsRequest, ::octaneapi::ApiRenderEngine_getTexturesStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getTexturesStatisticsRequest* req,
             ::octaneapi::ApiRenderEngine_getTexturesStatisticsResponse* resp) {
               return service->getTexturesStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[73],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getSceneBoundsRequest, ::octaneapi::ApiRenderEngine_getSceneBoundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getSceneBoundsRequest* req,
             ::octaneapi::ApiRenderEngine_getSceneBoundsResponse* resp) {
               return service->getSceneBounds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[74],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getDeviceCountRequest, ::octaneapi::ApiRenderEngine_getDeviceCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getDeviceCountRequest* req,
             ::octaneapi::ApiRenderEngine_getDeviceCountResponse* resp) {
               return service->getDeviceCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[75],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getDeviceComputeModelRequest, ::octaneapi::ApiRenderEngine_getDeviceComputeModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getDeviceComputeModelRequest* req,
             ::octaneapi::ApiRenderEngine_getDeviceComputeModelResponse* resp) {
               return service->getDeviceComputeModel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[76],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getDeviceNameRequest, ::octaneapi::ApiRenderEngine_getDeviceNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getDeviceNameRequest* req,
             ::octaneapi::ApiRenderEngine_getDeviceNameResponse* resp) {
               return service->getDeviceName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[77],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_isSupportedDeviceRequest, ::octaneapi::ApiRenderEngine_isSupportedDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_isSupportedDeviceRequest* req,
             ::octaneapi::ApiRenderEngine_isSupportedDeviceResponse* resp) {
               return service->isSupportedDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[78],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_deviceCanRenderRequest, ::octaneapi::ApiRenderEngine_deviceCanRenderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_deviceCanRenderRequest* req,
             ::octaneapi::ApiRenderEngine_deviceCanRenderResponse* resp) {
               return service->deviceCanRender(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[79],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_deviceCanDenoiseRequest, ::octaneapi::ApiRenderEngine_deviceCanDenoiseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_deviceCanDenoiseRequest* req,
             ::octaneapi::ApiRenderEngine_deviceCanDenoiseResponse* resp) {
               return service->deviceCanDenoise(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[80],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingRequest, ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingRequest* req,
             ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingResponse* resp) {
               return service->deviceSupportsHardwareRayTracing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[81],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoRequest, ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoRequest* req,
             ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoResponse* resp) {
               return service->deviceSharedSurfaceInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[82],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsRequest, ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsRequest* req,
             ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsResponse* resp) {
               return service->getAvailablePeerToPeerPairs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[83],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setDevicesActivityRequest, ::octaneapi::ApiRenderEngine_setDevicesActivityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setDevicesActivityRequest* req,
             ::octaneapi::ApiRenderEngine_setDevicesActivityResponse* resp) {
               return service->setDevicesActivity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[84],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingRequest, ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingRequest* req,
             ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingResponse* resp) {
               return service->isDeviceUsedForRendering(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[85],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_deviceUsesPriorityRequest, ::octaneapi::ApiRenderEngine_deviceUsesPriorityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_deviceUsesPriorityRequest* req,
             ::octaneapi::ApiRenderEngine_deviceUsesPriorityResponse* resp) {
               return service->deviceUsesPriority(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[86],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingRequest, ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingRequest* req,
             ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingResponse* resp) {
               return service->deviceUsesHardwareRayTracing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[87],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_imageDeviceIndexRequest, ::octaneapi::ApiRenderEngine_imageDeviceIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_imageDeviceIndexRequest* req,
             ::octaneapi::ApiRenderEngine_imageDeviceIndexResponse* resp) {
               return service->imageDeviceIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[88],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingRequest, ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingRequest* req,
             ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingResponse* resp) {
               return service->isDeviceUsedForDenoising(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[89],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_renderPriorityRequest, ::octaneapi::ApiRenderEngine_renderPriorityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_renderPriorityRequest* req,
             ::octaneapi::ApiRenderEngine_renderPriorityResponse* resp) {
               return service->renderPriority(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[90],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setRenderPriorityRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setRenderPriorityRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setRenderPriority(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[91],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsRequest, ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsRequest* req,
             ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsResponse* resp) {
               return service->currentPeerToPeerGroups(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[92],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledRequest, ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledRequest* req,
             ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledResponse* resp) {
               return service->hardwareRayTracingEnabled(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[93],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_openDeviceSettingsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_openDeviceSettingsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->openDeviceSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[94],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_renderDeviceStateRequest, ::octaneapi::ApiRenderEngine_renderDeviceStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_renderDeviceStateRequest* req,
             ::octaneapi::ApiRenderEngine_renderDeviceStateResponse* resp) {
               return service->renderDeviceState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[95],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeRequest, ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeRequest* req,
             ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeResponse* resp) {
               return service->renderDeviceErrorCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[96],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_errorcodeToStringRequest, ::octaneapi::ApiRenderEngine_errorcodeToStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_errorcodeToStringRequest* req,
             ::octaneapi::ApiRenderEngine_errorcodeToStringResponse* resp) {
               return service->errorcodeToString(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[97],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageRequest, ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageRequest* req,
             ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageResponse* resp) {
               return service->renderDeviceErrorMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[98],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_saveRenderDeviceConfigRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_saveRenderDeviceConfigRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->saveRenderDeviceConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[99],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_outOfCoreEnabledRequest, ::octaneapi::ApiRenderEngine_outOfCoreEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_outOfCoreEnabledRequest* req,
             ::octaneapi::ApiRenderEngine_outOfCoreEnabledResponse* resp) {
               return service->outOfCoreEnabled(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[100],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_enableOutOfCoreRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_enableOutOfCoreRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->enableOutOfCore(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[101],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_disableOutOfCoreRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_disableOutOfCoreRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->disableOutOfCore(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[102],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageRequest, ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageRequest* req,
             ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageResponse* resp) {
               return service->getOutOfCoreMemoryUsage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[103],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setGpuHeadroomRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setGpuHeadroomRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setGpuHeadroom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[104],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getGpuHeadroomRequest, ::octaneapi::ApiRenderEngine_getGpuHeadroomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getGpuHeadroomRequest* req,
             ::octaneapi::ApiRenderEngine_getGpuHeadroomResponse* resp) {
               return service->getGpuHeadroom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[105],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setCoreLimitRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setCoreLimitRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setCoreLimit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[106],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_disableCoreLimitRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_disableCoreLimitRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->disableCoreLimit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[107],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceRequest, ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceRequest* req,
             ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceResponse* resp) {
               return service->registerInputSharedSurface(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[108],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_unregisterInputSharedSurfaceRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_unregisterInputSharedSurfaceRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->unregisterInputSharedSurface(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[109],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_triggerAsyncTonemapRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_triggerAsyncTonemapRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->triggerAsyncTonemap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[110],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_setSharedSurfaceOutputTypeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_setSharedSurfaceOutputTypeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setSharedSurfaceOutputType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[111],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeRequest, ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeRequest* req,
             ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeResponse* resp) {
               return service->getSharedSurfaceOutputType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[112],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getRealTimeRequest, ::octaneapi::ApiRenderEngine_getRealTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getRealTimeRequest* req,
             ::octaneapi::ApiRenderEngine_getRealTimeResponse* resp) {
               return service->getRealTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[113],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_pauseRenderingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_pauseRenderingRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->pauseRendering(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[114],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_continueRenderingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_continueRenderingRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->continueRendering(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[115],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_isRenderingPausedRequest, ::octaneapi::ApiRenderEngine_isRenderingPausedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_isRenderingPausedRequest* req,
             ::octaneapi::ApiRenderEngine_isRenderingPausedResponse* resp) {
               return service->isRenderingPaused(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[116],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_restartRenderingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_restartRenderingRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->restartRendering(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[117],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_stopRenderingRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_stopRenderingRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->stopRendering(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[118],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_pickRequest, ::octaneapi::ApiRenderEngine_pickResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_pickRequest* req,
             ::octaneapi::ApiRenderEngine_pickResponse* resp) {
               return service->pick(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[119],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_pickWhitePointRequest, ::octaneapi::ApiRenderEngine_pickWhitePointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_pickWhitePointRequest* req,
             ::octaneapi::ApiRenderEngine_pickWhitePointResponse* resp) {
               return service->pickWhitePoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[120],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_pickImagerWhitePointRequest, ::octaneapi::ApiRenderEngine_pickImagerWhitePointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_pickImagerWhitePointRequest* req,
             ::octaneapi::ApiRenderEngine_pickImagerWhitePointResponse* resp) {
               return service->pickImagerWhitePoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[121],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableRequest, ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableRequest* req,
             ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableResponse* resp) {
               return service->isOutputAovWhitePointPickable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[122],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointRequest, ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointRequest* req,
             ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointResponse* resp) {
               return service->pickOutputAovWhitePoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[123],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_pickCryptomatteMatteRequest, ::octaneapi::ApiRenderEngine_pickCryptomatteMatteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_pickCryptomatteMatteRequest* req,
             ::octaneapi::ApiRenderEngine_pickCryptomatteMatteResponse* resp) {
               return service->pickCryptomatteMatte(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[124],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionRequest, ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionRequest* req,
             ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionResponse* resp) {
               return service->modifyCryptomatteMatteSelection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[125],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_toStringRequest, ::octaneapi::ApiRenderEngine_toStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_toStringRequest* req,
             ::octaneapi::ApiRenderEngine_toStringResponse* resp) {
               return service->toString(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderEngineService_method_names[126],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderEngineService::Service, ::octaneapi::ApiRenderEngine_getDevicePciIdsRequest, ::octaneapi::ApiRenderEngine_getDevicePciIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderEngine_getDevicePciIdsRequest* req,
             ::octaneapi::ApiRenderEngine_getDevicePciIdsResponse* resp) {
               return service->getDevicePciIds(ctx, req, resp);
             }, this)));
}

ApiRenderEngineService::Service::~Service() {
}

::grpc::Status ApiRenderEngineService::Service::setRenderTargetNode(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setRenderTargetNodeRequest* request, ::octaneapi::ApiRenderEngine_setRenderTargetNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getRenderTargetNode(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getRenderTargetNodeRequest* request, ::octaneapi::ApiRenderEngine_getRenderTargetNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getRenderGeometryNode(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getRenderGeometryNodeRequest* request, ::octaneapi::ApiRenderEngine_getRenderGeometryNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getRenderCameraNode(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getRenderCameraNodeRequest* request, ::octaneapi::ApiRenderEngine_getRenderCameraNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setRenderRegion(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setRenderRegionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getRenderRegion(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getRenderRegionRequest* request, ::octaneapi::ApiRenderEngine_getRenderRegionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setAsyncTonemapParams(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapParamsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setAsyncTonemapParams1(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapParams1Request* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::asyncTonemapBufferType(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapBufferTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::asyncTonemapCryptomatteFalseColor(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapCryptomatteFalseColorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::asyncTonemapOutputColorSpaceInfo(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapOutputColorSpaceInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::asyncTonemapColorSpace(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapColorSpaceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::asyncTonemapPremultipliedAlphaType(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeRequest* request, ::octaneapi::ApiRenderEngine_asyncTonemapPremultipliedAlphaTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setAsyncTonemapRenderPasses(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesRequest* request, ::octaneapi::ApiRenderEngine_setAsyncTonemapRenderPassesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::asyncTonemapRenderPasses(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_asyncTonemapRenderPassesRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getEnabledAovs(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getEnabledAovsRequest* request, ::octaneapi::ApiRenderEngine_getEnabledAovsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::freeTonemapPasses(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_freeTonemapPassesRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::displayRenderPassId(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_displayRenderPassIdRequest* request, ::octaneapi::ApiRenderEngine_displayRenderPassIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setSubSampleMode(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setSubSampleModeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getSubSampleMode(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getSubSampleModeRequest* request, ::octaneapi::ApiRenderEngine_getSubSampleModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setClayMode(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setClayModeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::clayMode(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_clayModeRequest* request, ::octaneapi::ApiRenderEngine_clayModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::fps(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_fpsRequest* request, ::octaneapi::ApiRenderEngine_fpsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setFps(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setFpsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::isCompiling(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_isCompilingRequest* request, ::octaneapi::ApiRenderEngine_isCompilingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::isCompressingTextures(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_isCompressingTexturesRequest* request, ::octaneapi::ApiRenderEngine_isCompressingTexturesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::hasPendingRenderData(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_hasPendingRenderDataRequest* request, ::octaneapi::ApiRenderEngine_hasPendingRenderDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getCurrentChangeLevel(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getCurrentChangeLevelRequest* request, ::octaneapi::ApiRenderEngine_getCurrentChangeLevelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getRenderImageChangeLevel(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelRequest* request, ::octaneapi::ApiRenderEngine_getRenderImageChangeLevelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getRenderRestartedChangeLevel(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelRequest* request, ::octaneapi::ApiRenderEngine_getRenderRestartedChangeLevelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setAsyncUpdateCallback(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackRequest* request, ::octaneapi::ApiRenderEngine_setAsyncUpdateCallbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::updatesAreAsync(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_updatesAreAsyncRequest* request, ::octaneapi::ApiRenderEngine_updatesAreAsyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::isImageReady(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_isImageReadyRequest* request, ::octaneapi::ApiRenderEngine_isImageReadyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::resetImageReady(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_resetImageReadyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::isRenderFailure(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_isRenderFailureRequest* request, ::octaneapi::ApiRenderEngine_isRenderFailureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::resetRenderFailure(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_resetRenderFailureRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setOnTileBlendedCallback(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnTileBlendedCallbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setOnNewStatisticsCallback(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnNewStatisticsCallbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setOnNewImageCallback(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setOnNewImageCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnNewImageCallbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setOnOcioErrorCallback(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnOcioErrorCallbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setOnRenderFailureCallback(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackRequest* request, ::octaneapi::ApiRenderEngine_setOnRenderFailureCallbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setForceCallbacksInRenderThreads(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setForceCallbacksInRenderThreadsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::grabRenderResult(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_grabRenderResultRequest* request, ::octaneapi::ApiRenderEngine_grabRenderResultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::releaseRenderResult(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_releaseRenderResultRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::synchronousTonemap(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapRequest* request, ::octaneapi::ApiRenderEngine_synchronousTonemapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::synchronousTonemap1(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemap1Request* request, ::octaneapi::ApiRenderEngine_synchronousTonemap1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::synchronousTonemapAllRenderPasses(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesRequest* request, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPassesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::synchronousTonemapAllRenderPasses1(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Request* request, ::octaneapi::ApiRenderEngine_synchronousTonemapAllRenderPasses1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getRenderStatistics(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getRenderStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getRenderStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getRenderResultStatistics(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getRenderResultStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getRenderResultStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::saveImage(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_saveImageRequest* request, ::octaneapi::ApiRenderEngine_saveImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::saveImage1(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_saveImage1Request* request, ::octaneapi::ApiRenderEngine_saveImage1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::saveImage2(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_saveImage2Request* request, ::octaneapi::ApiRenderEngine_saveImage2Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::saveRenderPasses(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesRequest* request, ::octaneapi::ApiRenderEngine_saveRenderPassesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::saveRenderPasses1(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPasses1Request* request, ::octaneapi::ApiRenderEngine_saveRenderPasses1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::saveRenderPasses2(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPasses2Request* request, ::octaneapi::ApiRenderEngine_saveRenderPasses2Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::saveRenderPassesMultiExr(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrRequest* request, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::saveRenderPassesMultiExr1(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Request* request, ::octaneapi::ApiRenderEngine_saveRenderPassesMultiExr1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::saveRenderPassesDeepExr(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrRequest* request, ::octaneapi::ApiRenderEngine_saveRenderPassesDeepExrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::deepImageEnabled(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_deepImageEnabledRequest* request, ::octaneapi::ApiRenderEngine_deepImageEnabledResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::deepImageEnabled1(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_deepImageEnabled1Request* request, ::octaneapi::ApiRenderEngine_deepImageEnabled1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::deepPassesEnabled(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_deepPassesEnabledRequest* request, ::octaneapi::ApiRenderEngine_deepPassesEnabledResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::canSaveDeepImage(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_canSaveDeepImageRequest* request, ::octaneapi::ApiRenderEngine_canSaveDeepImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::saveDeepImage(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_saveDeepImageRequest* request, ::octaneapi::ApiRenderEngine_saveDeepImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::saveRenderState(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_saveRenderStateRequest* request, ::octaneapi::ApiRenderEngine_saveRenderStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::loadRenderState(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_loadRenderStateRequest* request, ::octaneapi::ApiRenderEngine_loadRenderStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::previewMaterial(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_previewMaterialRequest* request, ::octaneapi::ApiRenderEngine_previewMaterialResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::previewMaterialHdr(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_previewMaterialHdrRequest* request, ::octaneapi::ApiRenderEngine_previewMaterialHdrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::previewMaterial1(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_previewMaterial1Request* request, ::octaneapi::ApiRenderEngine_previewMaterial1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getMemoryUsage(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getMemoryUsageRequest* request, ::octaneapi::ApiRenderEngine_getMemoryUsageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getResourceStatistics(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getResourceStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getResourceStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getGeometryStatistics(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getGeometryStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getGeometryStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getTexturesStatistics(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getTexturesStatisticsRequest* request, ::octaneapi::ApiRenderEngine_getTexturesStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getSceneBounds(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getSceneBoundsRequest* request, ::octaneapi::ApiRenderEngine_getSceneBoundsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getDeviceCount(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getDeviceCountRequest* request, ::octaneapi::ApiRenderEngine_getDeviceCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getDeviceComputeModel(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getDeviceComputeModelRequest* request, ::octaneapi::ApiRenderEngine_getDeviceComputeModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getDeviceName(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getDeviceNameRequest* request, ::octaneapi::ApiRenderEngine_getDeviceNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::isSupportedDevice(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_isSupportedDeviceRequest* request, ::octaneapi::ApiRenderEngine_isSupportedDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::deviceCanRender(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_deviceCanRenderRequest* request, ::octaneapi::ApiRenderEngine_deviceCanRenderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::deviceCanDenoise(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_deviceCanDenoiseRequest* request, ::octaneapi::ApiRenderEngine_deviceCanDenoiseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::deviceSupportsHardwareRayTracing(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingRequest* request, ::octaneapi::ApiRenderEngine_deviceSupportsHardwareRayTracingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::deviceSharedSurfaceInfo(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoRequest* request, ::octaneapi::ApiRenderEngine_deviceSharedSurfaceInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getAvailablePeerToPeerPairs(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsRequest* request, ::octaneapi::ApiRenderEngine_getAvailablePeerToPeerPairsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setDevicesActivity(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setDevicesActivityRequest* request, ::octaneapi::ApiRenderEngine_setDevicesActivityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::isDeviceUsedForRendering(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingRequest* request, ::octaneapi::ApiRenderEngine_isDeviceUsedForRenderingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::deviceUsesPriority(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_deviceUsesPriorityRequest* request, ::octaneapi::ApiRenderEngine_deviceUsesPriorityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::deviceUsesHardwareRayTracing(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingRequest* request, ::octaneapi::ApiRenderEngine_deviceUsesHardwareRayTracingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::imageDeviceIndex(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_imageDeviceIndexRequest* request, ::octaneapi::ApiRenderEngine_imageDeviceIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::isDeviceUsedForDenoising(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingRequest* request, ::octaneapi::ApiRenderEngine_isDeviceUsedForDenoisingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::renderPriority(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_renderPriorityRequest* request, ::octaneapi::ApiRenderEngine_renderPriorityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setRenderPriority(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setRenderPriorityRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::currentPeerToPeerGroups(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsRequest* request, ::octaneapi::ApiRenderEngine_currentPeerToPeerGroupsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::hardwareRayTracingEnabled(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledRequest* request, ::octaneapi::ApiRenderEngine_hardwareRayTracingEnabledResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::openDeviceSettings(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_openDeviceSettingsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::renderDeviceState(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceStateRequest* request, ::octaneapi::ApiRenderEngine_renderDeviceStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::renderDeviceErrorCode(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeRequest* request, ::octaneapi::ApiRenderEngine_renderDeviceErrorCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::errorcodeToString(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_errorcodeToStringRequest* request, ::octaneapi::ApiRenderEngine_errorcodeToStringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::renderDeviceErrorMessage(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageRequest* request, ::octaneapi::ApiRenderEngine_renderDeviceErrorMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::saveRenderDeviceConfig(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_saveRenderDeviceConfigRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::outOfCoreEnabled(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_outOfCoreEnabledRequest* request, ::octaneapi::ApiRenderEngine_outOfCoreEnabledResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::enableOutOfCore(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_enableOutOfCoreRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::disableOutOfCore(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_disableOutOfCoreRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getOutOfCoreMemoryUsage(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageRequest* request, ::octaneapi::ApiRenderEngine_getOutOfCoreMemoryUsageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setGpuHeadroom(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setGpuHeadroomRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getGpuHeadroom(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getGpuHeadroomRequest* request, ::octaneapi::ApiRenderEngine_getGpuHeadroomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setCoreLimit(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setCoreLimitRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::disableCoreLimit(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_disableCoreLimitRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::registerInputSharedSurface(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceRequest* request, ::octaneapi::ApiRenderEngine_registerInputSharedSurfaceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::unregisterInputSharedSurface(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_unregisterInputSharedSurfaceRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::triggerAsyncTonemap(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_triggerAsyncTonemapRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::setSharedSurfaceOutputType(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_setSharedSurfaceOutputTypeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getSharedSurfaceOutputType(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeRequest* request, ::octaneapi::ApiRenderEngine_getSharedSurfaceOutputTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getRealTime(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getRealTimeRequest* request, ::octaneapi::ApiRenderEngine_getRealTimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::pauseRendering(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_pauseRenderingRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::continueRendering(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_continueRenderingRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::isRenderingPaused(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_isRenderingPausedRequest* request, ::octaneapi::ApiRenderEngine_isRenderingPausedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::restartRendering(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_restartRenderingRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::stopRendering(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_stopRenderingRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::pick(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_pickRequest* request, ::octaneapi::ApiRenderEngine_pickResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::pickWhitePoint(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_pickWhitePointRequest* request, ::octaneapi::ApiRenderEngine_pickWhitePointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::pickImagerWhitePoint(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_pickImagerWhitePointRequest* request, ::octaneapi::ApiRenderEngine_pickImagerWhitePointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::isOutputAovWhitePointPickable(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableRequest* request, ::octaneapi::ApiRenderEngine_isOutputAovWhitePointPickableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::pickOutputAovWhitePoint(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointRequest* request, ::octaneapi::ApiRenderEngine_pickOutputAovWhitePointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::pickCryptomatteMatte(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_pickCryptomatteMatteRequest* request, ::octaneapi::ApiRenderEngine_pickCryptomatteMatteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::modifyCryptomatteMatteSelection(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionRequest* request, ::octaneapi::ApiRenderEngine_modifyCryptomatteMatteSelectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::toString(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_toStringRequest* request, ::octaneapi::ApiRenderEngine_toStringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderEngineService::Service::getDevicePciIds(::grpc::ServerContext* context, const ::octaneapi::ApiRenderEngine_getDevicePciIdsRequest* request, ::octaneapi::ApiRenderEngine_getDevicePciIdsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ApiRenderImageService_method_names[] = {
  "/octaneapi.ApiRenderImageService/isEmpty",
  "/octaneapi.ApiRenderImageService/isHdr",
};

std::unique_ptr< ApiRenderImageService::Stub> ApiRenderImageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiRenderImageService::Stub> stub(new ApiRenderImageService::Stub(channel, options));
  return stub;
}

ApiRenderImageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_isEmpty_(ApiRenderImageService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isHdr_(ApiRenderImageService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiRenderImageService::Stub::isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiRenderImage_isEmptyRequest& request, ::octaneapi::ApiRenderImage_isEmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderImage_isEmptyRequest, ::octaneapi::ApiRenderImage_isEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isEmpty_, context, request, response);
}

void ApiRenderImageService::Stub::async::isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiRenderImage_isEmptyRequest* request, ::octaneapi::ApiRenderImage_isEmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderImage_isEmptyRequest, ::octaneapi::ApiRenderImage_isEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isEmpty_, context, request, response, std::move(f));
}

void ApiRenderImageService::Stub::async::isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiRenderImage_isEmptyRequest* request, ::octaneapi::ApiRenderImage_isEmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isEmpty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderImage_isEmptyResponse>* ApiRenderImageService::Stub::PrepareAsyncisEmptyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderImage_isEmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderImage_isEmptyResponse, ::octaneapi::ApiRenderImage_isEmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isEmpty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderImage_isEmptyResponse>* ApiRenderImageService::Stub::AsyncisEmptyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderImage_isEmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisEmptyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRenderImageService::Stub::isHdr(::grpc::ClientContext* context, const ::octaneapi::ApiRenderImage_isHdrRequest& request, ::octaneapi::ApiRenderImage_isHdrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRenderImage_isHdrRequest, ::octaneapi::ApiRenderImage_isHdrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isHdr_, context, request, response);
}

void ApiRenderImageService::Stub::async::isHdr(::grpc::ClientContext* context, const ::octaneapi::ApiRenderImage_isHdrRequest* request, ::octaneapi::ApiRenderImage_isHdrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRenderImage_isHdrRequest, ::octaneapi::ApiRenderImage_isHdrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isHdr_, context, request, response, std::move(f));
}

void ApiRenderImageService::Stub::async::isHdr(::grpc::ClientContext* context, const ::octaneapi::ApiRenderImage_isHdrRequest* request, ::octaneapi::ApiRenderImage_isHdrResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isHdr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderImage_isHdrResponse>* ApiRenderImageService::Stub::PrepareAsyncisHdrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderImage_isHdrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRenderImage_isHdrResponse, ::octaneapi::ApiRenderImage_isHdrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isHdr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderImage_isHdrResponse>* ApiRenderImageService::Stub::AsyncisHdrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderImage_isHdrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisHdrRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiRenderImageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderImageService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderImageService::Service, ::octaneapi::ApiRenderImage_isEmptyRequest, ::octaneapi::ApiRenderImage_isEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderImage_isEmptyRequest* req,
             ::octaneapi::ApiRenderImage_isEmptyResponse* resp) {
               return service->isEmpty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRenderImageService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRenderImageService::Service, ::octaneapi::ApiRenderImage_isHdrRequest, ::octaneapi::ApiRenderImage_isHdrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRenderImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRenderImage_isHdrRequest* req,
             ::octaneapi::ApiRenderImage_isHdrResponse* resp) {
               return service->isHdr(ctx, req, resp);
             }, this)));
}

ApiRenderImageService::Service::~Service() {
}

::grpc::Status ApiRenderImageService::Service::isEmpty(::grpc::ServerContext* context, const ::octaneapi::ApiRenderImage_isEmptyRequest* request, ::octaneapi::ApiRenderImage_isEmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRenderImageService::Service::isHdr(::grpc::ServerContext* context, const ::octaneapi::ApiRenderImage_isHdrRequest* request, ::octaneapi::ApiRenderImage_isHdrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

