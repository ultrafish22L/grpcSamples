// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: octanetime.proto

#include "octanetime.pb.h"
#include "octanetime.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* FrameRangeTService_method_names[] = {
  "/octaneapi.FrameRangeTService/make",
  "/octaneapi.FrameRangeTService/count",
};

std::unique_ptr< FrameRangeTService::Stub> FrameRangeTService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FrameRangeTService::Stub> stub(new FrameRangeTService::Stub(channel, options));
  return stub;
}

FrameRangeTService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_make_(FrameRangeTService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_count_(FrameRangeTService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FrameRangeTService::Stub::make(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest& request, ::octaneapi::FrameRangeT_makeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::FrameRangeT_makeRequest, ::octaneapi::FrameRangeT_makeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_make_, context, request, response);
}

void FrameRangeTService::Stub::async::make(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest* request, ::octaneapi::FrameRangeT_makeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::FrameRangeT_makeRequest, ::octaneapi::FrameRangeT_makeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_make_, context, request, response, std::move(f));
}

void FrameRangeTService::Stub::async::make(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest* request, ::octaneapi::FrameRangeT_makeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_make_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_makeResponse>* FrameRangeTService::Stub::PrepareAsyncmakeRaw(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::FrameRangeT_makeResponse, ::octaneapi::FrameRangeT_makeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_make_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_makeResponse>* FrameRangeTService::Stub::AsyncmakeRaw(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmakeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrameRangeTService::Stub::count(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest& request, ::octaneapi::FrameRangeT_countResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::FrameRangeT_countRequest, ::octaneapi::FrameRangeT_countResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_count_, context, request, response);
}

void FrameRangeTService::Stub::async::count(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest* request, ::octaneapi::FrameRangeT_countResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::FrameRangeT_countRequest, ::octaneapi::FrameRangeT_countResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_count_, context, request, response, std::move(f));
}

void FrameRangeTService::Stub::async::count(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest* request, ::octaneapi::FrameRangeT_countResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_count_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_countResponse>* FrameRangeTService::Stub::PrepareAsynccountRaw(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::FrameRangeT_countResponse, ::octaneapi::FrameRangeT_countRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_count_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_countResponse>* FrameRangeTService::Stub::AsynccountRaw(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

FrameRangeTService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrameRangeTService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrameRangeTService::Service, ::octaneapi::FrameRangeT_makeRequest, ::octaneapi::FrameRangeT_makeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrameRangeTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::FrameRangeT_makeRequest* req,
             ::octaneapi::FrameRangeT_makeResponse* resp) {
               return service->make(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrameRangeTService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrameRangeTService::Service, ::octaneapi::FrameRangeT_countRequest, ::octaneapi::FrameRangeT_countResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrameRangeTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::FrameRangeT_countRequest* req,
             ::octaneapi::FrameRangeT_countResponse* resp) {
               return service->count(ctx, req, resp);
             }, this)));
}

FrameRangeTService::Service::~Service() {
}

::grpc::Status FrameRangeTService::Service::make(::grpc::ServerContext* context, const ::octaneapi::FrameRangeT_makeRequest* request, ::octaneapi::FrameRangeT_makeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrameRangeTService::Service::count(::grpc::ServerContext* context, const ::octaneapi::FrameRangeT_countRequest* request, ::octaneapi::FrameRangeT_countResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* TimeSpanTService_method_names[] = {
  "/octaneapi.TimeSpanTService/make1",
  "/octaneapi.TimeSpanTService/length",
  "/octaneapi.TimeSpanTService/empty",
  "/octaneapi.TimeSpanTService/shift",
  "/octaneapi.TimeSpanTService/contains",
};

std::unique_ptr< TimeSpanTService::Stub> TimeSpanTService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TimeSpanTService::Stub> stub(new TimeSpanTService::Stub(channel, options));
  return stub;
}

TimeSpanTService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_make1_(TimeSpanTService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_length_(TimeSpanTService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_empty_(TimeSpanTService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_shift_(TimeSpanTService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_contains_(TimeSpanTService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TimeSpanTService::Stub::make1(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest& request, ::octaneapi::TimeSpanT_makeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::TimeSpanT_makeRequest, ::octaneapi::TimeSpanT_makeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_make1_, context, request, response);
}

void TimeSpanTService::Stub::async::make1(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest* request, ::octaneapi::TimeSpanT_makeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::TimeSpanT_makeRequest, ::octaneapi::TimeSpanT_makeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_make1_, context, request, response, std::move(f));
}

void TimeSpanTService::Stub::async::make1(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest* request, ::octaneapi::TimeSpanT_makeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_make1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_makeResponse>* TimeSpanTService::Stub::PrepareAsyncmake1Raw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::TimeSpanT_makeResponse, ::octaneapi::TimeSpanT_makeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_make1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_makeResponse>* TimeSpanTService::Stub::Asyncmake1Raw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmake1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TimeSpanTService::Stub::length(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest& request, ::octaneapi::TimeSpanT_lengthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::TimeSpanT_lengthRequest, ::octaneapi::TimeSpanT_lengthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_length_, context, request, response);
}

void TimeSpanTService::Stub::async::length(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest* request, ::octaneapi::TimeSpanT_lengthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::TimeSpanT_lengthRequest, ::octaneapi::TimeSpanT_lengthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_length_, context, request, response, std::move(f));
}

void TimeSpanTService::Stub::async::length(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest* request, ::octaneapi::TimeSpanT_lengthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_length_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_lengthResponse>* TimeSpanTService::Stub::PrepareAsynclengthRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::TimeSpanT_lengthResponse, ::octaneapi::TimeSpanT_lengthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_length_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_lengthResponse>* TimeSpanTService::Stub::AsynclengthRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclengthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TimeSpanTService::Stub::empty(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest& request, ::octaneapi::TimeSpanT_emptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::TimeSpanT_emptyRequest, ::octaneapi::TimeSpanT_emptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_empty_, context, request, response);
}

void TimeSpanTService::Stub::async::empty(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest* request, ::octaneapi::TimeSpanT_emptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::TimeSpanT_emptyRequest, ::octaneapi::TimeSpanT_emptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_empty_, context, request, response, std::move(f));
}

void TimeSpanTService::Stub::async::empty(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest* request, ::octaneapi::TimeSpanT_emptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_empty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_emptyResponse>* TimeSpanTService::Stub::PrepareAsyncemptyRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::TimeSpanT_emptyResponse, ::octaneapi::TimeSpanT_emptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_empty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_emptyResponse>* TimeSpanTService::Stub::AsyncemptyRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncemptyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TimeSpanTService::Stub::shift(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::TimeSpanT_shiftRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_shift_, context, request, response);
}

void TimeSpanTService::Stub::async::shift(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::TimeSpanT_shiftRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_shift_, context, request, response, std::move(f));
}

void TimeSpanTService::Stub::async::shift(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_shift_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* TimeSpanTService::Stub::PrepareAsyncshiftRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::TimeSpanT_shiftRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_shift_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* TimeSpanTService::Stub::AsyncshiftRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncshiftRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TimeSpanTService::Stub::contains(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest& request, ::octaneapi::TimeSpanT_containsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::TimeSpanT_containsRequest, ::octaneapi::TimeSpanT_containsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_contains_, context, request, response);
}

void TimeSpanTService::Stub::async::contains(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest* request, ::octaneapi::TimeSpanT_containsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::TimeSpanT_containsRequest, ::octaneapi::TimeSpanT_containsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_contains_, context, request, response, std::move(f));
}

void TimeSpanTService::Stub::async::contains(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest* request, ::octaneapi::TimeSpanT_containsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_contains_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_containsResponse>* TimeSpanTService::Stub::PrepareAsynccontainsRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::TimeSpanT_containsResponse, ::octaneapi::TimeSpanT_containsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_contains_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_containsResponse>* TimeSpanTService::Stub::AsynccontainsRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccontainsRaw(context, request, cq);
  result->StartCall();
  return result;
}

TimeSpanTService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimeSpanTService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimeSpanTService::Service, ::octaneapi::TimeSpanT_makeRequest, ::octaneapi::TimeSpanT_makeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimeSpanTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::TimeSpanT_makeRequest* req,
             ::octaneapi::TimeSpanT_makeResponse* resp) {
               return service->make1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimeSpanTService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimeSpanTService::Service, ::octaneapi::TimeSpanT_lengthRequest, ::octaneapi::TimeSpanT_lengthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimeSpanTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::TimeSpanT_lengthRequest* req,
             ::octaneapi::TimeSpanT_lengthResponse* resp) {
               return service->length(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimeSpanTService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimeSpanTService::Service, ::octaneapi::TimeSpanT_emptyRequest, ::octaneapi::TimeSpanT_emptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimeSpanTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::TimeSpanT_emptyRequest* req,
             ::octaneapi::TimeSpanT_emptyResponse* resp) {
               return service->empty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimeSpanTService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimeSpanTService::Service, ::octaneapi::TimeSpanT_shiftRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimeSpanTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::TimeSpanT_shiftRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->shift(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TimeSpanTService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TimeSpanTService::Service, ::octaneapi::TimeSpanT_containsRequest, ::octaneapi::TimeSpanT_containsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TimeSpanTService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::TimeSpanT_containsRequest* req,
             ::octaneapi::TimeSpanT_containsResponse* resp) {
               return service->contains(ctx, req, resp);
             }, this)));
}

TimeSpanTService::Service::~Service() {
}

::grpc::Status TimeSpanTService::Service::make1(::grpc::ServerContext* context, const ::octaneapi::TimeSpanT_makeRequest* request, ::octaneapi::TimeSpanT_makeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimeSpanTService::Service::length(::grpc::ServerContext* context, const ::octaneapi::TimeSpanT_lengthRequest* request, ::octaneapi::TimeSpanT_lengthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimeSpanTService::Service::empty(::grpc::ServerContext* context, const ::octaneapi::TimeSpanT_emptyRequest* request, ::octaneapi::TimeSpanT_emptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimeSpanTService::Service::shift(::grpc::ServerContext* context, const ::octaneapi::TimeSpanT_shiftRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TimeSpanTService::Service::contains(::grpc::ServerContext* context, const ::octaneapi::TimeSpanT_containsRequest* request, ::octaneapi::TimeSpanT_containsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

