// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apiselectionmanager.proto

#include "apiselectionmanager.pb.h"
#include "apiselectionmanager.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiSelectionManagerService_method_names[] = {
  "/octaneapi.ApiSelectionManagerService/isItemSelected",
  "/octaneapi.ApiSelectionManagerService/isPinSelected",
  "/octaneapi.ApiSelectionManagerService/isPinSelected1",
  "/octaneapi.ApiSelectionManagerService/isPinSelectedIx",
  "/octaneapi.ApiSelectionManagerService/selectedItemCount",
  "/octaneapi.ApiSelectionManagerService/selectedPinCount",
  "/octaneapi.ApiSelectionManagerService/getSelection",
  "/octaneapi.ApiSelectionManagerService/getSelection1",
  "/octaneapi.ApiSelectionManagerService/clearSelection",
  "/octaneapi.ApiSelectionManagerService/setSelection",
  "/octaneapi.ApiSelectionManagerService/select",
  "/octaneapi.ApiSelectionManagerService/select1",
  "/octaneapi.ApiSelectionManagerService/deselect",
  "/octaneapi.ApiSelectionManagerService/deselect1",
  "/octaneapi.ApiSelectionManagerService/swapSelection",
  "/octaneapi.ApiSelectionManagerService/addSelectionObserver",
  "/octaneapi.ApiSelectionManagerService/removeSelectionObserver",
};

std::unique_ptr< ApiSelectionManagerService::Stub> ApiSelectionManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiSelectionManagerService::Stub> stub(new ApiSelectionManagerService::Stub(channel, options));
  return stub;
}

ApiSelectionManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_isItemSelected_(ApiSelectionManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isPinSelected_(ApiSelectionManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isPinSelected1_(ApiSelectionManagerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isPinSelectedIx_(ApiSelectionManagerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_selectedItemCount_(ApiSelectionManagerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_selectedPinCount_(ApiSelectionManagerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getSelection_(ApiSelectionManagerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getSelection1_(ApiSelectionManagerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clearSelection_(ApiSelectionManagerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setSelection_(ApiSelectionManagerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_select_(ApiSelectionManagerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_select1_(ApiSelectionManagerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deselect_(ApiSelectionManagerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deselect1_(ApiSelectionManagerService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_swapSelection_(ApiSelectionManagerService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addSelectionObserver_(ApiSelectionManagerService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_removeSelectionObserver_(ApiSelectionManagerService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiSelectionManagerService::Stub::isItemSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest& request, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_isItemSelectedRequest, ::octaneapi::ApiSelectionManager_isItemSelectedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isItemSelected_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::isItemSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* request, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_isItemSelectedRequest, ::octaneapi::ApiSelectionManager_isItemSelectedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isItemSelected_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::isItemSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* request, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isItemSelected_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>* ApiSelectionManagerService::Stub::PrepareAsyncisItemSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSelectionManager_isItemSelectedResponse, ::octaneapi::ApiSelectionManager_isItemSelectedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isItemSelected_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>* ApiSelectionManagerService::Stub::AsyncisItemSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisItemSelectedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::isPinSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest& request, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_isPinSelectedRequest, ::octaneapi::ApiSelectionManager_isPinSelectedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isPinSelected_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::isPinSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_isPinSelectedRequest, ::octaneapi::ApiSelectionManager_isPinSelectedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isPinSelected_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::isPinSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isPinSelected_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>* ApiSelectionManagerService::Stub::PrepareAsyncisPinSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSelectionManager_isPinSelectedResponse, ::octaneapi::ApiSelectionManager_isPinSelectedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isPinSelected_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>* ApiSelectionManagerService::Stub::AsyncisPinSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisPinSelectedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::isPinSelected1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request& request, ::octaneapi::ApiSelectionManager_isPinSelected1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_isPinSelected1Request, ::octaneapi::ApiSelectionManager_isPinSelected1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isPinSelected1_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::isPinSelected1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* request, ::octaneapi::ApiSelectionManager_isPinSelected1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_isPinSelected1Request, ::octaneapi::ApiSelectionManager_isPinSelected1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isPinSelected1_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::isPinSelected1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* request, ::octaneapi::ApiSelectionManager_isPinSelected1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isPinSelected1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelected1Response>* ApiSelectionManagerService::Stub::PrepareAsyncisPinSelected1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSelectionManager_isPinSelected1Response, ::octaneapi::ApiSelectionManager_isPinSelected1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isPinSelected1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelected1Response>* ApiSelectionManagerService::Stub::AsyncisPinSelected1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisPinSelected1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::isPinSelectedIx(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest& request, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isPinSelectedIx_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::isPinSelectedIx(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isPinSelectedIx_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::isPinSelectedIx(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isPinSelectedIx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>* ApiSelectionManagerService::Stub::PrepareAsyncisPinSelectedIxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse, ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isPinSelectedIx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>* ApiSelectionManagerService::Stub::AsyncisPinSelectedIxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisPinSelectedIxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::selectedItemCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest& request, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_selectedItemCountRequest, ::octaneapi::ApiSelectionManager_selectedItemCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_selectedItemCount_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::selectedItemCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* request, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_selectedItemCountRequest, ::octaneapi::ApiSelectionManager_selectedItemCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_selectedItemCount_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::selectedItemCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* request, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_selectedItemCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>* ApiSelectionManagerService::Stub::PrepareAsyncselectedItemCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSelectionManager_selectedItemCountResponse, ::octaneapi::ApiSelectionManager_selectedItemCountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_selectedItemCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>* ApiSelectionManagerService::Stub::AsyncselectedItemCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncselectedItemCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::selectedPinCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest& request, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_selectedPinCountRequest, ::octaneapi::ApiSelectionManager_selectedPinCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_selectedPinCount_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::selectedPinCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* request, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_selectedPinCountRequest, ::octaneapi::ApiSelectionManager_selectedPinCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_selectedPinCount_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::selectedPinCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* request, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_selectedPinCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>* ApiSelectionManagerService::Stub::PrepareAsyncselectedPinCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSelectionManager_selectedPinCountResponse, ::octaneapi::ApiSelectionManager_selectedPinCountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_selectedPinCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>* ApiSelectionManagerService::Stub::AsyncselectedPinCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncselectedPinCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::getSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest& request, ::octaneapi::ApiSelectionManager_getSelectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_getSelectionRequest, ::octaneapi::ApiSelectionManager_getSelectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getSelection_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::getSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest* request, ::octaneapi::ApiSelectionManager_getSelectionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_getSelectionRequest, ::octaneapi::ApiSelectionManager_getSelectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSelection_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::getSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest* request, ::octaneapi::ApiSelectionManager_getSelectionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSelection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelectionResponse>* ApiSelectionManagerService::Stub::PrepareAsyncgetSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSelectionManager_getSelectionResponse, ::octaneapi::ApiSelectionManager_getSelectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getSelection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelectionResponse>* ApiSelectionManagerService::Stub::AsyncgetSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetSelectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::getSelection1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request& request, ::octaneapi::ApiSelectionManager_getSelection1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_getSelection1Request, ::octaneapi::ApiSelectionManager_getSelection1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getSelection1_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::getSelection1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request* request, ::octaneapi::ApiSelectionManager_getSelection1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_getSelection1Request, ::octaneapi::ApiSelectionManager_getSelection1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSelection1_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::getSelection1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request* request, ::octaneapi::ApiSelectionManager_getSelection1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSelection1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelection1Response>* ApiSelectionManagerService::Stub::PrepareAsyncgetSelection1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSelectionManager_getSelection1Response, ::octaneapi::ApiSelectionManager_getSelection1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getSelection1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelection1Response>* ApiSelectionManagerService::Stub::AsyncgetSelection1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetSelection1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::clearSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_clearSelectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clearSelection_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::clearSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_clearSelectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearSelection_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::clearSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearSelection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::PrepareAsyncclearSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiSelectionManager_clearSelectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clearSelection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::AsyncclearSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearSelectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::setSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_setSelectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setSelection_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::setSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_setSelectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setSelection_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::setSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setSelection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::PrepareAsyncsetSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiSelectionManager_setSelectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setSelection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::AsyncsetSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetSelectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::select(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_selectRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_select_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::select(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_selectRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_select_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::select(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_select_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::PrepareAsyncselectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiSelectionManager_selectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_select_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::AsyncselectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncselectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::select1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_select1Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_select1_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::select1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_select1Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_select1_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::select1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_select1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::PrepareAsyncselect1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiSelectionManager_select1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_select1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::Asyncselect1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncselect1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::deselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_deselectRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deselect_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::deselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_deselectRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deselect_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::deselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deselect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::PrepareAsyncdeselectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiSelectionManager_deselectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deselect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::AsyncdeselectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeselectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::deselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_deselect1Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deselect1_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::deselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_deselect1Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deselect1_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::deselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deselect1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::PrepareAsyncdeselect1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiSelectionManager_deselect1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deselect1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::Asyncdeselect1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeselect1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::swapSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_swapSelectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_swapSelection_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::swapSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_swapSelectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_swapSelection_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::swapSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_swapSelection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::PrepareAsyncswapSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiSelectionManager_swapSelectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_swapSelection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::AsyncswapSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncswapSelectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::addSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest& request, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_addSelectionObserverRequest, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addSelectionObserver_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::addSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* request, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_addSelectionObserverRequest, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addSelectionObserver_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::addSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* request, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addSelectionObserver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>* ApiSelectionManagerService::Stub::PrepareAsyncaddSelectionObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse, ::octaneapi::ApiSelectionManager_addSelectionObserverRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addSelectionObserver_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>* ApiSelectionManagerService::Stub::AsyncaddSelectionObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddSelectionObserverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSelectionManagerService::Stub::removeSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_removeSelectionObserver_, context, request, response);
}

void ApiSelectionManagerService::Stub::async::removeSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeSelectionObserver_, context, request, response, std::move(f));
}

void ApiSelectionManagerService::Stub::async::removeSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeSelectionObserver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::PrepareAsyncremoveSelectionObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_removeSelectionObserver_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSelectionManagerService::Stub::AsyncremoveSelectionObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremoveSelectionObserverRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiSelectionManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_isItemSelectedRequest, ::octaneapi::ApiSelectionManager_isItemSelectedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* req,
             ::octaneapi::ApiSelectionManager_isItemSelectedResponse* resp) {
               return service->isItemSelected(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_isPinSelectedRequest, ::octaneapi::ApiSelectionManager_isPinSelectedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* req,
             ::octaneapi::ApiSelectionManager_isPinSelectedResponse* resp) {
               return service->isPinSelected(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_isPinSelected1Request, ::octaneapi::ApiSelectionManager_isPinSelected1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_isPinSelected1Request* req,
             ::octaneapi::ApiSelectionManager_isPinSelected1Response* resp) {
               return service->isPinSelected1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* req,
             ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* resp) {
               return service->isPinSelectedIx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_selectedItemCountRequest, ::octaneapi::ApiSelectionManager_selectedItemCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* req,
             ::octaneapi::ApiSelectionManager_selectedItemCountResponse* resp) {
               return service->selectedItemCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_selectedPinCountRequest, ::octaneapi::ApiSelectionManager_selectedPinCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* req,
             ::octaneapi::ApiSelectionManager_selectedPinCountResponse* resp) {
               return service->selectedPinCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_getSelectionRequest, ::octaneapi::ApiSelectionManager_getSelectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_getSelectionRequest* req,
             ::octaneapi::ApiSelectionManager_getSelectionResponse* resp) {
               return service->getSelection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_getSelection1Request, ::octaneapi::ApiSelectionManager_getSelection1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_getSelection1Request* req,
             ::octaneapi::ApiSelectionManager_getSelection1Response* resp) {
               return service->getSelection1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_clearSelectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_clearSelectionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->clearSelection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_setSelectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_setSelectionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setSelection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_selectRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_selectRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->select(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_select1Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_select1Request* req,
             ::google::protobuf::Empty* resp) {
               return service->select1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_deselectRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_deselectRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->deselect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_deselect1Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_deselect1Request* req,
             ::google::protobuf::Empty* resp) {
               return service->deselect1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_swapSelectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_swapSelectionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->swapSelection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_addSelectionObserverRequest, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* req,
             ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* resp) {
               return service->addSelectionObserver(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSelectionManagerService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSelectionManagerService::Service, ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSelectionManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->removeSelectionObserver(ctx, req, resp);
             }, this)));
}

ApiSelectionManagerService::Service::~Service() {
}

::grpc::Status ApiSelectionManagerService::Service::isItemSelected(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* request, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::isPinSelected(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::isPinSelected1(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* request, ::octaneapi::ApiSelectionManager_isPinSelected1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::isPinSelectedIx(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::selectedItemCount(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* request, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::selectedPinCount(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* request, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::getSelection(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest* request, ::octaneapi::ApiSelectionManager_getSelectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::getSelection1(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request* request, ::octaneapi::ApiSelectionManager_getSelection1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::clearSelection(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::setSelection(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::select(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_selectRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::select1(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_select1Request* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::deselect(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::deselect1(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::swapSelection(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::addSelectionObserver(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* request, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSelectionManagerService::Service::removeSelectionObserver(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

