// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apiinfo.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apiinfo_2eproto__INCLUDED
#define GRPC_apiinfo_2eproto__INCLUDED

#include "apiinfo.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiInfo' from 'apiinfo.h'
class ApiInfoService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiInfoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Returns the version of the Octane DLL
    virtual ::grpc::Status octaneVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest& request, ::octaneapi::ApiInfo_octaneVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_octaneVersionResponse>> AsyncoctaneVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_octaneVersionResponse>>(AsyncoctaneVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_octaneVersionResponse>> PrepareAsyncoctaneVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_octaneVersionResponse>>(PrepareAsyncoctaneVersionRaw(context, request, cq));
    }
    // / Returns the full name of the Octane DLL build
    virtual ::grpc::Status octaneName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest& request, ::octaneapi::ApiInfo_octaneNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_octaneNameResponse>> AsyncoctaneName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_octaneNameResponse>>(AsyncoctaneNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_octaneNameResponse>> PrepareAsyncoctaneName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_octaneNameResponse>>(PrepareAsyncoctaneNameRaw(context, request, cq));
    }
    // / Returns TRUE if the DLL is a demo version
    virtual ::grpc::Status isDemoVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest& request, ::octaneapi::ApiInfo_isDemoVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_isDemoVersionResponse>> AsyncisDemoVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_isDemoVersionResponse>>(AsyncisDemoVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_isDemoVersionResponse>> PrepareAsyncisDemoVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_isDemoVersionResponse>>(PrepareAsyncisDemoVersionRaw(context, request, cq));
    }
    // / Returns TRUE if the DLL is a subscription version
    virtual ::grpc::Status isSubscriptionVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest& request, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>> AsyncisSubscriptionVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>>(AsyncisSubscriptionVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>> PrepareAsyncisSubscriptionVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>>(PrepareAsyncisSubscriptionVersionRaw(context, request, cq));
    }
    // / Returns -1 for builds with no tiers or the build tier index (1-3)
    virtual ::grpc::Status tierIdx(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest& request, ::octaneapi::ApiInfo_tierIdxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_tierIdxResponse>> AsynctierIdx(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_tierIdxResponse>>(AsynctierIdxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_tierIdxResponse>> PrepareAsynctierIdx(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_tierIdxResponse>>(PrepareAsynctierIdxRaw(context, request, cq));
    }
    // / Returns a string describing the OS version
    virtual ::grpc::Status osVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest& request, ::octaneapi::ApiInfo_osVersionInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_osVersionInfoResponse>> AsyncosVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_osVersionInfoResponse>>(AsyncosVersionInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_osVersionInfoResponse>> PrepareAsyncosVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_osVersionInfoResponse>>(PrepareAsyncosVersionInfoRaw(context, request, cq));
    }
    // /  Returns the driver version string (NVIDIA only)
    virtual ::grpc::Status driverVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest& request, ::octaneapi::ApiInfo_driverVersionInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_driverVersionInfoResponse>> AsyncdriverVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_driverVersionInfoResponse>>(AsyncdriverVersionInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_driverVersionInfoResponse>> PrepareAsyncdriverVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_driverVersionInfoResponse>>(PrepareAsyncdriverVersionInfoRaw(context, request, cq));
    }
    // / Returns info about the cpu(s)
    virtual ::grpc::Status cpuInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest& request, ::octaneapi::ApiInfo_cpuInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_cpuInfoResponse>> AsynccpuInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_cpuInfoResponse>>(AsynccpuInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_cpuInfoResponse>> PrepareAsynccpuInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_cpuInfoResponse>>(PrepareAsynccpuInfoRaw(context, request, cq));
    }
    // / Returns the absolute path of the texture cache folder
    // /
    // / 
    virtual ::grpc::Status texCacheFolder(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest& request, ::octaneapi::ApiInfo_texCacheFolderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_texCacheFolderResponse>> AsynctexCacheFolder(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_texCacheFolderResponse>>(AsynctexCacheFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_texCacheFolderResponse>> PrepareAsynctexCacheFolder(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_texCacheFolderResponse>>(PrepareAsynctexCacheFolderRaw(context, request, cq));
    }
    // / Returns a sorted list of all attribute types
    virtual ::grpc::Status getAttributeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest& request, ::octaneapi::ApiInfo_getAttributeTypesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeTypesResponse>> AsyncgetAttributeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeTypesResponse>>(AsyncgetAttributeTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeTypesResponse>> PrepareAsyncgetAttributeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeTypesResponse>>(PrepareAsyncgetAttributeTypesRaw(context, request, cq));
    }
    // / Returns a sorted list of all pin types
    virtual ::grpc::Status getPinTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest& request, ::octaneapi::ApiInfo_getPinTypesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypesResponse>> AsyncgetPinTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypesResponse>>(AsyncgetPinTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypesResponse>> PrepareAsyncgetPinTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypesResponse>>(PrepareAsyncgetPinTypesRaw(context, request, cq));
    }
    // / Returns a sorted list of all graph types
    virtual ::grpc::Status getGraphTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest& request, ::octaneapi::ApiInfo_getGraphTypesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getGraphTypesResponse>> AsyncgetGraphTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getGraphTypesResponse>>(AsyncgetGraphTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getGraphTypesResponse>> PrepareAsyncgetGraphTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getGraphTypesResponse>>(PrepareAsyncgetGraphTypesRaw(context, request, cq));
    }
    // / Returns a sorted list of all node types
    virtual ::grpc::Status getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest& request, ::octaneapi::ApiInfo_getNodeTypesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getNodeTypesResponse>> AsyncgetNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getNodeTypesResponse>>(AsyncgetNodeTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getNodeTypesResponse>> PrepareAsyncgetNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getNodeTypesResponse>>(PrepareAsyncgetNodeTypesRaw(context, request, cq));
    }
    // / Returns info for this particular node type or NULL if no info is available
    virtual ::grpc::Status nodeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest& request, ::octaneapi::ApiInfo_nodeInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodeInfoResponse>> AsyncnodeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodeInfoResponse>>(AsyncnodeInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodeInfoResponse>> PrepareAsyncnodeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodeInfoResponse>>(PrepareAsyncnodeInfoRaw(context, request, cq));
    }
    // / Returns info for this particular graph type or NULL if no info is available
    virtual ::grpc::Status graphInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest& request, ::octaneapi::ApiInfo_graphInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_graphInfoResponse>> AsyncgraphInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_graphInfoResponse>>(AsyncgraphInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_graphInfoResponse>> PrepareAsyncgraphInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_graphInfoResponse>>(PrepareAsyncgraphInfoRaw(context, request, cq));
    }
    // / Returns an image containing the icon of a given node type
    // / Note: Octane is the owner of the returned image and 
    virtual ::grpc::Status nodeIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest& request, ::octaneapi::ApiInfo_nodeIconImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodeIconImageResponse>> AsyncnodeIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodeIconImageResponse>>(AsyncnodeIconImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodeIconImageResponse>> PrepareAsyncnodeIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodeIconImageResponse>>(PrepareAsyncnodeIconImageRaw(context, request, cq));
    }
    // / Returns an image containing the icon of a given graph type
    // / Note: Octane is the owner of the returned image and 
    virtual ::grpc::Status graphIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest& request, ::octaneapi::ApiInfo_graphIconImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_graphIconImageResponse>> AsyncgraphIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_graphIconImageResponse>>(AsyncgraphIconImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_graphIconImageResponse>> PrepareAsyncgraphIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_graphIconImageResponse>>(PrepareAsyncgraphIconImageRaw(context, request, cq));
    }
    // / Returns info for an attribute available on nodes of the given type or NULL if no info for the
    // / attribute is available
    virtual ::grpc::Status attributeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest& request, ::octaneapi::ApiInfo_attributeInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfoResponse>> AsyncattributeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfoResponse>>(AsyncattributeInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfoResponse>> PrepareAsyncattributeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfoResponse>>(PrepareAsyncattributeInfoRaw(context, request, cq));
    }
    // / Returns info for an attribute available on nodes of the given type or NULL
    // / if no info for the attribute is available
    virtual ::grpc::Status attributeInfo1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request& request, ::octaneapi::ApiInfo_attributeInfo1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfo1Response>> AsyncattributeInfo1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfo1Response>>(AsyncattributeInfo1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfo1Response>> PrepareAsyncattributeInfo1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfo1Response>>(PrepareAsyncattributeInfo1Raw(context, request, cq));
    }
    // / Returns info for an attribute available on graphs of the given type or NULL
    // / if no info for the attribute is available
    virtual ::grpc::Status attributeInfo2(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request& request, ::octaneapi::ApiInfo_attributeInfo2Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfo2Response>> AsyncattributeInfo2(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfo2Response>>(AsyncattributeInfo2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfo2Response>> PrepareAsyncattributeInfo2(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfo2Response>>(PrepareAsyncattributeInfo2Raw(context, request, cq));
    }
    // / Returns info for a pin available on a node or NULL if there's no such pin
    virtual ::grpc::Status nodePinInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest& request, ::octaneapi::ApiInfo_nodePinInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodePinInfoResponse>> AsyncnodePinInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodePinInfoResponse>>(AsyncnodePinInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodePinInfoResponse>> PrepareAsyncnodePinInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodePinInfoResponse>>(PrepareAsyncnodePinInfoRaw(context, request, cq));
    }
    // / Returns the name for an attribute type, e
    virtual ::grpc::Status getAttributeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest& request, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>> AsyncgetAttributeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>>(AsyncgetAttributeTypeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>> PrepareAsyncgetAttributeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>>(PrepareAsyncgetAttributeTypeNameRaw(context, request, cq));
    }
    // / Returns the name for a node pin type, e
    virtual ::grpc::Status getPinTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest& request, ::octaneapi::ApiInfo_getPinTypeNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypeNameResponse>> AsyncgetPinTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypeNameResponse>>(AsyncgetPinTypeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypeNameResponse>> PrepareAsyncgetPinTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypeNameResponse>>(PrepareAsyncgetPinTypeNameRaw(context, request, cq));
    }
    // / Returns the color for a node pin type (ARGB encoded)
    virtual ::grpc::Status getPinTypeColor(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest& request, ::octaneapi::ApiInfo_getPinTypeColorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypeColorResponse>> AsyncgetPinTypeColor(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypeColorResponse>>(AsyncgetPinTypeColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypeColorResponse>> PrepareAsyncgetPinTypeColor(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypeColorResponse>>(PrepareAsyncgetPinTypeColorRaw(context, request, cq));
    }
    // / Returns the name for a node graph type, e
    virtual ::grpc::Status getGraphTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest& request, ::octaneapi::ApiInfo_getGraphTypeNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getGraphTypeNameResponse>> AsyncgetGraphTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getGraphTypeNameResponse>>(AsyncgetGraphTypeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getGraphTypeNameResponse>> PrepareAsyncgetGraphTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getGraphTypeNameResponse>>(PrepareAsyncgetGraphTypeNameRaw(context, request, cq));
    }
    // / Returns the name for a node type, e
    virtual ::grpc::Status getNodeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest& request, ::octaneapi::ApiInfo_getNodeTypeNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getNodeTypeNameResponse>> AsyncgetNodeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getNodeTypeNameResponse>>(AsyncgetNodeTypeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getNodeTypeNameResponse>> PrepareAsyncgetNodeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getNodeTypeNameResponse>>(PrepareAsyncgetNodeTypeNameRaw(context, request, cq));
    }
    // / Returns the type name of an api item
    virtual ::grpc::Status getItemTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest& request, ::octaneapi::ApiInfo_getItemTypeNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getItemTypeNameResponse>> AsyncgetItemTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getItemTypeNameResponse>>(AsyncgetItemTypeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getItemTypeNameResponse>> PrepareAsyncgetItemTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getItemTypeNameResponse>>(PrepareAsyncgetItemTypeNameRaw(context, request, cq));
    }
    // / Returns the name for an attribute ID, e
    virtual ::grpc::Status getAttributeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest& request, ::octaneapi::ApiInfo_getAttributeNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeNameResponse>> AsyncgetAttributeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeNameResponse>>(AsyncgetAttributeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeNameResponse>> PrepareAsyncgetAttributeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeNameResponse>>(PrepareAsyncgetAttributeNameRaw(context, request, cq));
    }
    // / Returns the ID for an attribute name, e
    virtual ::grpc::Status getAttributeId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest& request, ::octaneapi::ApiInfo_getAttributeIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdResponse>> AsyncgetAttributeId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdResponse>>(AsyncgetAttributeIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdResponse>> PrepareAsyncgetAttributeId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdResponse>>(PrepareAsyncgetAttributeIdRaw(context, request, cq));
    }
    // / Returns the enum name for an attribute ID, e
    virtual ::grpc::Status getAttributeIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest& request, ::octaneapi::ApiInfo_getAttributeIdNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdNameResponse>> AsyncgetAttributeIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdNameResponse>>(AsyncgetAttributeIdNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdNameResponse>> PrepareAsyncgetAttributeIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdNameResponse>>(PrepareAsyncgetAttributeIdNameRaw(context, request, cq));
    }
    // / Returns the enum name for an attribute name, e
    virtual ::grpc::Status getAttributeIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request& request, ::octaneapi::ApiInfo_getAttributeIdName1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdName1Response>> AsyncgetAttributeIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdName1Response>>(AsyncgetAttributeIdName1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdName1Response>> PrepareAsyncgetAttributeIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdName1Response>>(PrepareAsyncgetAttributeIdName1Raw(context, request, cq));
    }
    // / Returns the name for a pin ID, e
    virtual ::grpc::Status getPinName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest& request, ::octaneapi::ApiInfo_getPinNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinNameResponse>> AsyncgetPinName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinNameResponse>>(AsyncgetPinNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinNameResponse>> PrepareAsyncgetPinName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinNameResponse>>(PrepareAsyncgetPinNameRaw(context, request, cq));
    }
    // / Returns the ID for a pin name, e
    virtual ::grpc::Status getPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest& request, ::octaneapi::ApiInfo_getPinIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdResponse>> AsyncgetPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdResponse>>(AsyncgetPinIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdResponse>> PrepareAsyncgetPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdResponse>>(PrepareAsyncgetPinIdRaw(context, request, cq));
    }
    // / Returns the enum name for a pin ID, e
    virtual ::grpc::Status getPinIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest& request, ::octaneapi::ApiInfo_getPinIdNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdNameResponse>> AsyncgetPinIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdNameResponse>>(AsyncgetPinIdNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdNameResponse>> PrepareAsyncgetPinIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdNameResponse>>(PrepareAsyncgetPinIdNameRaw(context, request, cq));
    }
    // / Returns the enum name for a pin name, e
    virtual ::grpc::Status getPinIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request& request, ::octaneapi::ApiInfo_getPinIdName1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdName1Response>> AsyncgetPinIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdName1Response>>(AsyncgetPinIdName1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdName1Response>> PrepareAsyncgetPinIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdName1Response>>(PrepareAsyncgetPinIdName1Raw(context, request, cq));
    }
    // / Get the string name of an OSL value type of a given texture value type enum
    virtual ::grpc::Status getTextureValueTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest& request, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>> AsyncgetTextureValueTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>>(AsyncgetTextureValueTypeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>> PrepareAsyncgetTextureValueTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>>(PrepareAsyncgetTextureValueTypeNameRaw(context, request, cq));
    }
    // / Get the OSL value type for a given OSL type name
    virtual ::grpc::Status getTextureValueTypeForOslType(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest& request, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>> AsyncgetTextureValueTypeForOslType(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>>(AsyncgetTextureValueTypeForOslTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>> PrepareAsyncgetTextureValueTypeForOslType(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>>(PrepareAsyncgetTextureValueTypeForOslTypeRaw(context, request, cq));
    }
    // / Returns a list of graphs compatible with the output type and a list
    // / of nodes compatible with the output type
    virtual ::grpc::Status getCompatibleTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest& request, ::octaneapi::ApiInfo_getCompatibleTypesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getCompatibleTypesResponse>> AsyncgetCompatibleTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getCompatibleTypesResponse>>(AsyncgetCompatibleTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getCompatibleTypesResponse>> PrepareAsyncgetCompatibleTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getCompatibleTypesResponse>>(PrepareAsyncgetCompatibleTypesRaw(context, request, cq));
    }
    // / Returns the information related to a render pass given its id
    virtual ::grpc::Status renderPassInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest& request, ::octaneapi::ApiInfo_renderPassInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassInfoResponse>> AsyncrenderPassInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassInfoResponse>>(AsyncrenderPassInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassInfoResponse>> PrepareAsyncrenderPassInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassInfoResponse>>(PrepareAsyncrenderPassInfoRaw(context, request, cq));
    }
    // / Returns an array with all the available render pass ids
    virtual ::grpc::Status getAllRenderPassIds(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest& request, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>> AsyncgetAllRenderPassIds(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>>(AsyncgetAllRenderPassIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>> PrepareAsyncgetAllRenderPassIds(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>>(PrepareAsyncgetAllRenderPassIdsRaw(context, request, cq));
    }
    // / Returns the 
    virtual ::grpc::Status getRenderPassIdFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest& request, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>> AsyncgetRenderPassIdFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>>(AsyncgetRenderPassIdFromRenderAovNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>> PrepareAsyncgetRenderPassIdFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>>(PrepareAsyncgetRenderPassIdFromRenderAovNodeRaw(context, request, cq));
    }
    // / Returns the 
    virtual ::grpc::Status getRenderAovInfoFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest& request, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>> AsyncgetRenderAovInfoFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>>(AsyncgetRenderAovInfoFromRenderAovNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>> PrepareAsyncgetRenderAovInfoFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>>(PrepareAsyncgetRenderAovInfoFromRenderAovNodeRaw(context, request, cq));
    }
    // / Returns the name of the render pass associated with the id
    virtual ::grpc::Status renderPassName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest& request, ::octaneapi::ApiInfo_renderPassNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassNameResponse>> AsyncrenderPassName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassNameResponse>>(AsyncrenderPassNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassNameResponse>> PrepareAsyncrenderPassName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassNameResponse>>(PrepareAsyncrenderPassNameRaw(context, request, cq));
    }
    // / Returns the short (~ abbreviated) name of a render pass
    virtual ::grpc::Status renderPassShortName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest& request, ::octaneapi::ApiInfo_renderPassShortNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassShortNameResponse>> AsyncrenderPassShortName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassShortNameResponse>>(AsyncrenderPassShortNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassShortNameResponse>> PrepareAsyncrenderPassShortName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassShortNameResponse>>(PrepareAsyncrenderPassShortNameRaw(context, request, cq));
    }
    // / Returns the pin id for a render pass
    virtual ::grpc::Status renderPassIdToPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest& request, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>> AsyncrenderPassIdToPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>>(AsyncrenderPassIdToPinIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>> PrepareAsyncrenderPassIdToPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>>(PrepareAsyncrenderPassIdToPinIdRaw(context, request, cq));
    }
    // / Returns the group name of a render pass
    // / 
    virtual ::grpc::Status renderPassGroupName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest& request, ::octaneapi::ApiInfo_renderPassGroupNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassGroupNameResponse>> AsyncrenderPassGroupName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassGroupNameResponse>>(AsyncrenderPassGroupNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassGroupNameResponse>> PrepareAsyncrenderPassGroupName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassGroupNameResponse>>(PrepareAsyncrenderPassGroupNameRaw(context, request, cq));
    }
    // / Returns the render pass id for a pin id
    virtual ::grpc::Status pinIdToRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest& request, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>> AsyncpinIdToRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>>(AsyncpinIdToRenderPassIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>> PrepareAsyncpinIdToRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>>(PrepareAsyncpinIdToRenderPassIdRaw(context, request, cq));
    }
    // / Finds the bool pin used to enable/disable the render pass
    virtual ::grpc::Status findPinIdForRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest& request, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>> AsyncfindPinIdForRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>>(AsyncfindPinIdForRenderPassIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>> PrepareAsyncfindPinIdForRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>>(PrepareAsyncfindPinIdForRenderPassIdRaw(context, request, cq));
    }
    // / Finds the render pass you can enable/disable with the passed in pin id
    virtual ::grpc::Status findRenderPassIdForPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest& request, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>> AsyncfindRenderPassIdForPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>>(AsyncfindRenderPassIdForPinIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>> PrepareAsyncfindRenderPassIdForPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>>(PrepareAsyncfindRenderPassIdForPinIdRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Returns the version of the Octane DLL
      virtual void octaneVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest* request, ::octaneapi::ApiInfo_octaneVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void octaneVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest* request, ::octaneapi::ApiInfo_octaneVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the full name of the Octane DLL build
      virtual void octaneName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest* request, ::octaneapi::ApiInfo_octaneNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void octaneName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest* request, ::octaneapi::ApiInfo_octaneNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if the DLL is a demo version
      virtual void isDemoVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest* request, ::octaneapi::ApiInfo_isDemoVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isDemoVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest* request, ::octaneapi::ApiInfo_isDemoVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if the DLL is a subscription version
      virtual void isSubscriptionVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* request, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isSubscriptionVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* request, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns -1 for builds with no tiers or the build tier index (1-3)
      virtual void tierIdx(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest* request, ::octaneapi::ApiInfo_tierIdxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void tierIdx(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest* request, ::octaneapi::ApiInfo_tierIdxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns a string describing the OS version
      virtual void osVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest* request, ::octaneapi::ApiInfo_osVersionInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void osVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest* request, ::octaneapi::ApiInfo_osVersionInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // /  Returns the driver version string (NVIDIA only)
      virtual void driverVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest* request, ::octaneapi::ApiInfo_driverVersionInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void driverVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest* request, ::octaneapi::ApiInfo_driverVersionInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns info about the cpu(s)
      virtual void cpuInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest* request, ::octaneapi::ApiInfo_cpuInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void cpuInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest* request, ::octaneapi::ApiInfo_cpuInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the absolute path of the texture cache folder
      // /
      // / 
      virtual void texCacheFolder(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest* request, ::octaneapi::ApiInfo_texCacheFolderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void texCacheFolder(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest* request, ::octaneapi::ApiInfo_texCacheFolderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns a sorted list of all attribute types
      virtual void getAttributeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest* request, ::octaneapi::ApiInfo_getAttributeTypesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getAttributeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest* request, ::octaneapi::ApiInfo_getAttributeTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns a sorted list of all pin types
      virtual void getPinTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest* request, ::octaneapi::ApiInfo_getPinTypesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPinTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest* request, ::octaneapi::ApiInfo_getPinTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns a sorted list of all graph types
      virtual void getGraphTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest* request, ::octaneapi::ApiInfo_getGraphTypesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getGraphTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest* request, ::octaneapi::ApiInfo_getGraphTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns a sorted list of all node types
      virtual void getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest* request, ::octaneapi::ApiInfo_getNodeTypesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest* request, ::octaneapi::ApiInfo_getNodeTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns info for this particular node type or NULL if no info is available
      virtual void nodeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest* request, ::octaneapi::ApiInfo_nodeInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nodeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest* request, ::octaneapi::ApiInfo_nodeInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns info for this particular graph type or NULL if no info is available
      virtual void graphInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest* request, ::octaneapi::ApiInfo_graphInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void graphInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest* request, ::octaneapi::ApiInfo_graphInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns an image containing the icon of a given node type
      // / Note: Octane is the owner of the returned image and 
      virtual void nodeIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest* request, ::octaneapi::ApiInfo_nodeIconImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nodeIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest* request, ::octaneapi::ApiInfo_nodeIconImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns an image containing the icon of a given graph type
      // / Note: Octane is the owner of the returned image and 
      virtual void graphIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest* request, ::octaneapi::ApiInfo_graphIconImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void graphIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest* request, ::octaneapi::ApiInfo_graphIconImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns info for an attribute available on nodes of the given type or NULL if no info for the
      // / attribute is available
      virtual void attributeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest* request, ::octaneapi::ApiInfo_attributeInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void attributeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest* request, ::octaneapi::ApiInfo_attributeInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns info for an attribute available on nodes of the given type or NULL
      // / if no info for the attribute is available
      virtual void attributeInfo1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request* request, ::octaneapi::ApiInfo_attributeInfo1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void attributeInfo1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request* request, ::octaneapi::ApiInfo_attributeInfo1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns info for an attribute available on graphs of the given type or NULL
      // / if no info for the attribute is available
      virtual void attributeInfo2(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request* request, ::octaneapi::ApiInfo_attributeInfo2Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void attributeInfo2(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request* request, ::octaneapi::ApiInfo_attributeInfo2Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns info for a pin available on a node or NULL if there's no such pin
      virtual void nodePinInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest* request, ::octaneapi::ApiInfo_nodePinInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nodePinInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest* request, ::octaneapi::ApiInfo_nodePinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the name for an attribute type, e
      virtual void getAttributeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* request, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getAttributeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* request, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the name for a node pin type, e
      virtual void getPinTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest* request, ::octaneapi::ApiInfo_getPinTypeNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPinTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest* request, ::octaneapi::ApiInfo_getPinTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the color for a node pin type (ARGB encoded)
      virtual void getPinTypeColor(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest* request, ::octaneapi::ApiInfo_getPinTypeColorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPinTypeColor(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest* request, ::octaneapi::ApiInfo_getPinTypeColorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the name for a node graph type, e
      virtual void getGraphTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* request, ::octaneapi::ApiInfo_getGraphTypeNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getGraphTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* request, ::octaneapi::ApiInfo_getGraphTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the name for a node type, e
      virtual void getNodeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* request, ::octaneapi::ApiInfo_getNodeTypeNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getNodeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* request, ::octaneapi::ApiInfo_getNodeTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the type name of an api item
      virtual void getItemTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest* request, ::octaneapi::ApiInfo_getItemTypeNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getItemTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest* request, ::octaneapi::ApiInfo_getItemTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the name for an attribute ID, e
      virtual void getAttributeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest* request, ::octaneapi::ApiInfo_getAttributeNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getAttributeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest* request, ::octaneapi::ApiInfo_getAttributeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the ID for an attribute name, e
      virtual void getAttributeId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest* request, ::octaneapi::ApiInfo_getAttributeIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getAttributeId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest* request, ::octaneapi::ApiInfo_getAttributeIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the enum name for an attribute ID, e
      virtual void getAttributeIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* request, ::octaneapi::ApiInfo_getAttributeIdNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getAttributeIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* request, ::octaneapi::ApiInfo_getAttributeIdNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the enum name for an attribute name, e
      virtual void getAttributeIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request* request, ::octaneapi::ApiInfo_getAttributeIdName1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getAttributeIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request* request, ::octaneapi::ApiInfo_getAttributeIdName1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the name for a pin ID, e
      virtual void getPinName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest* request, ::octaneapi::ApiInfo_getPinNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPinName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest* request, ::octaneapi::ApiInfo_getPinNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the ID for a pin name, e
      virtual void getPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest* request, ::octaneapi::ApiInfo_getPinIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest* request, ::octaneapi::ApiInfo_getPinIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the enum name for a pin ID, e
      virtual void getPinIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest* request, ::octaneapi::ApiInfo_getPinIdNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPinIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest* request, ::octaneapi::ApiInfo_getPinIdNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the enum name for a pin name, e
      virtual void getPinIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request* request, ::octaneapi::ApiInfo_getPinIdName1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPinIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request* request, ::octaneapi::ApiInfo_getPinIdName1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Get the string name of an OSL value type of a given texture value type enum
      virtual void getTextureValueTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getTextureValueTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Get the OSL value type for a given OSL type name
      virtual void getTextureValueTypeForOslType(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getTextureValueTypeForOslType(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns a list of graphs compatible with the output type and a list
      // / of nodes compatible with the output type
      virtual void getCompatibleTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* request, ::octaneapi::ApiInfo_getCompatibleTypesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getCompatibleTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* request, ::octaneapi::ApiInfo_getCompatibleTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the information related to a render pass given its id
      virtual void renderPassInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest* request, ::octaneapi::ApiInfo_renderPassInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void renderPassInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest* request, ::octaneapi::ApiInfo_renderPassInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns an array with all the available render pass ids
      virtual void getAllRenderPassIds(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* request, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getAllRenderPassIds(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* request, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the 
      virtual void getRenderPassIdFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getRenderPassIdFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the 
      virtual void getRenderAovInfoFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getRenderAovInfoFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the name of the render pass associated with the id
      virtual void renderPassName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest* request, ::octaneapi::ApiInfo_renderPassNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void renderPassName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest* request, ::octaneapi::ApiInfo_renderPassNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the short (~ abbreviated) name of a render pass
      virtual void renderPassShortName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest* request, ::octaneapi::ApiInfo_renderPassShortNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void renderPassShortName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest* request, ::octaneapi::ApiInfo_renderPassShortNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the pin id for a render pass
      virtual void renderPassIdToPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* request, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void renderPassIdToPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* request, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the group name of a render pass
      // / 
      virtual void renderPassGroupName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* request, ::octaneapi::ApiInfo_renderPassGroupNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void renderPassGroupName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* request, ::octaneapi::ApiInfo_renderPassGroupNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the render pass id for a pin id
      virtual void pinIdToRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* request, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void pinIdToRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* request, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Finds the bool pin used to enable/disable the render pass
      virtual void findPinIdForRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* request, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void findPinIdForRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* request, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Finds the render pass you can enable/disable with the passed in pin id
      virtual void findRenderPassIdForPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* request, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void findRenderPassIdForPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* request, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_octaneVersionResponse>* AsyncoctaneVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_octaneVersionResponse>* PrepareAsyncoctaneVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_octaneNameResponse>* AsyncoctaneNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_octaneNameResponse>* PrepareAsyncoctaneNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_isDemoVersionResponse>* AsyncisDemoVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_isDemoVersionResponse>* PrepareAsyncisDemoVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>* AsyncisSubscriptionVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>* PrepareAsyncisSubscriptionVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_tierIdxResponse>* AsynctierIdxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_tierIdxResponse>* PrepareAsynctierIdxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_osVersionInfoResponse>* AsyncosVersionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_osVersionInfoResponse>* PrepareAsyncosVersionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_driverVersionInfoResponse>* AsyncdriverVersionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_driverVersionInfoResponse>* PrepareAsyncdriverVersionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_cpuInfoResponse>* AsynccpuInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_cpuInfoResponse>* PrepareAsynccpuInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_texCacheFolderResponse>* AsynctexCacheFolderRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_texCacheFolderResponse>* PrepareAsynctexCacheFolderRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeTypesResponse>* AsyncgetAttributeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeTypesResponse>* PrepareAsyncgetAttributeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypesResponse>* AsyncgetPinTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypesResponse>* PrepareAsyncgetPinTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getGraphTypesResponse>* AsyncgetGraphTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getGraphTypesResponse>* PrepareAsyncgetGraphTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getNodeTypesResponse>* AsyncgetNodeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getNodeTypesResponse>* PrepareAsyncgetNodeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodeInfoResponse>* AsyncnodeInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodeInfoResponse>* PrepareAsyncnodeInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_graphInfoResponse>* AsyncgraphInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_graphInfoResponse>* PrepareAsyncgraphInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodeIconImageResponse>* AsyncnodeIconImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodeIconImageResponse>* PrepareAsyncnodeIconImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_graphIconImageResponse>* AsyncgraphIconImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_graphIconImageResponse>* PrepareAsyncgraphIconImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfoResponse>* AsyncattributeInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfoResponse>* PrepareAsyncattributeInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfo1Response>* AsyncattributeInfo1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfo1Response>* PrepareAsyncattributeInfo1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfo2Response>* AsyncattributeInfo2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_attributeInfo2Response>* PrepareAsyncattributeInfo2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodePinInfoResponse>* AsyncnodePinInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_nodePinInfoResponse>* PrepareAsyncnodePinInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>* AsyncgetAttributeTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>* PrepareAsyncgetAttributeTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypeNameResponse>* AsyncgetPinTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypeNameResponse>* PrepareAsyncgetPinTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypeColorResponse>* AsyncgetPinTypeColorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinTypeColorResponse>* PrepareAsyncgetPinTypeColorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getGraphTypeNameResponse>* AsyncgetGraphTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getGraphTypeNameResponse>* PrepareAsyncgetGraphTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getNodeTypeNameResponse>* AsyncgetNodeTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getNodeTypeNameResponse>* PrepareAsyncgetNodeTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getItemTypeNameResponse>* AsyncgetItemTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getItemTypeNameResponse>* PrepareAsyncgetItemTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeNameResponse>* AsyncgetAttributeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeNameResponse>* PrepareAsyncgetAttributeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdResponse>* AsyncgetAttributeIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdResponse>* PrepareAsyncgetAttributeIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdNameResponse>* AsyncgetAttributeIdNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdNameResponse>* PrepareAsyncgetAttributeIdNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdName1Response>* AsyncgetAttributeIdName1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAttributeIdName1Response>* PrepareAsyncgetAttributeIdName1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinNameResponse>* AsyncgetPinNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinNameResponse>* PrepareAsyncgetPinNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdResponse>* AsyncgetPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdResponse>* PrepareAsyncgetPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdNameResponse>* AsyncgetPinIdNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdNameResponse>* PrepareAsyncgetPinIdNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdName1Response>* AsyncgetPinIdName1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getPinIdName1Response>* PrepareAsyncgetPinIdName1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>* AsyncgetTextureValueTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>* PrepareAsyncgetTextureValueTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>* AsyncgetTextureValueTypeForOslTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>* PrepareAsyncgetTextureValueTypeForOslTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getCompatibleTypesResponse>* AsyncgetCompatibleTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getCompatibleTypesResponse>* PrepareAsyncgetCompatibleTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassInfoResponse>* AsyncrenderPassInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassInfoResponse>* PrepareAsyncrenderPassInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>* AsyncgetAllRenderPassIdsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>* PrepareAsyncgetAllRenderPassIdsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>* AsyncgetRenderPassIdFromRenderAovNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>* PrepareAsyncgetRenderPassIdFromRenderAovNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>* AsyncgetRenderAovInfoFromRenderAovNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>* PrepareAsyncgetRenderAovInfoFromRenderAovNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassNameResponse>* AsyncrenderPassNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassNameResponse>* PrepareAsyncrenderPassNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassShortNameResponse>* AsyncrenderPassShortNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassShortNameResponse>* PrepareAsyncrenderPassShortNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>* AsyncrenderPassIdToPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>* PrepareAsyncrenderPassIdToPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassGroupNameResponse>* AsyncrenderPassGroupNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_renderPassGroupNameResponse>* PrepareAsyncrenderPassGroupNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>* AsyncpinIdToRenderPassIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>* PrepareAsyncpinIdToRenderPassIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>* AsyncfindPinIdForRenderPassIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>* PrepareAsyncfindPinIdForRenderPassIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>* AsyncfindRenderPassIdForPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>* PrepareAsyncfindRenderPassIdForPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status octaneVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest& request, ::octaneapi::ApiInfo_octaneVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneVersionResponse>> AsyncoctaneVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneVersionResponse>>(AsyncoctaneVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneVersionResponse>> PrepareAsyncoctaneVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneVersionResponse>>(PrepareAsyncoctaneVersionRaw(context, request, cq));
    }
    ::grpc::Status octaneName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest& request, ::octaneapi::ApiInfo_octaneNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneNameResponse>> AsyncoctaneName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneNameResponse>>(AsyncoctaneNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneNameResponse>> PrepareAsyncoctaneName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneNameResponse>>(PrepareAsyncoctaneNameRaw(context, request, cq));
    }
    ::grpc::Status isDemoVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest& request, ::octaneapi::ApiInfo_isDemoVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isDemoVersionResponse>> AsyncisDemoVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isDemoVersionResponse>>(AsyncisDemoVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isDemoVersionResponse>> PrepareAsyncisDemoVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isDemoVersionResponse>>(PrepareAsyncisDemoVersionRaw(context, request, cq));
    }
    ::grpc::Status isSubscriptionVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest& request, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>> AsyncisSubscriptionVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>>(AsyncisSubscriptionVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>> PrepareAsyncisSubscriptionVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>>(PrepareAsyncisSubscriptionVersionRaw(context, request, cq));
    }
    ::grpc::Status tierIdx(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest& request, ::octaneapi::ApiInfo_tierIdxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_tierIdxResponse>> AsynctierIdx(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_tierIdxResponse>>(AsynctierIdxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_tierIdxResponse>> PrepareAsynctierIdx(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_tierIdxResponse>>(PrepareAsynctierIdxRaw(context, request, cq));
    }
    ::grpc::Status osVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest& request, ::octaneapi::ApiInfo_osVersionInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_osVersionInfoResponse>> AsyncosVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_osVersionInfoResponse>>(AsyncosVersionInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_osVersionInfoResponse>> PrepareAsyncosVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_osVersionInfoResponse>>(PrepareAsyncosVersionInfoRaw(context, request, cq));
    }
    ::grpc::Status driverVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest& request, ::octaneapi::ApiInfo_driverVersionInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_driverVersionInfoResponse>> AsyncdriverVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_driverVersionInfoResponse>>(AsyncdriverVersionInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_driverVersionInfoResponse>> PrepareAsyncdriverVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_driverVersionInfoResponse>>(PrepareAsyncdriverVersionInfoRaw(context, request, cq));
    }
    ::grpc::Status cpuInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest& request, ::octaneapi::ApiInfo_cpuInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_cpuInfoResponse>> AsynccpuInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_cpuInfoResponse>>(AsynccpuInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_cpuInfoResponse>> PrepareAsynccpuInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_cpuInfoResponse>>(PrepareAsynccpuInfoRaw(context, request, cq));
    }
    ::grpc::Status texCacheFolder(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest& request, ::octaneapi::ApiInfo_texCacheFolderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_texCacheFolderResponse>> AsynctexCacheFolder(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_texCacheFolderResponse>>(AsynctexCacheFolderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_texCacheFolderResponse>> PrepareAsynctexCacheFolder(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_texCacheFolderResponse>>(PrepareAsynctexCacheFolderRaw(context, request, cq));
    }
    ::grpc::Status getAttributeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest& request, ::octaneapi::ApiInfo_getAttributeTypesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypesResponse>> AsyncgetAttributeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypesResponse>>(AsyncgetAttributeTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypesResponse>> PrepareAsyncgetAttributeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypesResponse>>(PrepareAsyncgetAttributeTypesRaw(context, request, cq));
    }
    ::grpc::Status getPinTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest& request, ::octaneapi::ApiInfo_getPinTypesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypesResponse>> AsyncgetPinTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypesResponse>>(AsyncgetPinTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypesResponse>> PrepareAsyncgetPinTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypesResponse>>(PrepareAsyncgetPinTypesRaw(context, request, cq));
    }
    ::grpc::Status getGraphTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest& request, ::octaneapi::ApiInfo_getGraphTypesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypesResponse>> AsyncgetGraphTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypesResponse>>(AsyncgetGraphTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypesResponse>> PrepareAsyncgetGraphTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypesResponse>>(PrepareAsyncgetGraphTypesRaw(context, request, cq));
    }
    ::grpc::Status getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest& request, ::octaneapi::ApiInfo_getNodeTypesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypesResponse>> AsyncgetNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypesResponse>>(AsyncgetNodeTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypesResponse>> PrepareAsyncgetNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypesResponse>>(PrepareAsyncgetNodeTypesRaw(context, request, cq));
    }
    ::grpc::Status nodeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest& request, ::octaneapi::ApiInfo_nodeInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeInfoResponse>> AsyncnodeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeInfoResponse>>(AsyncnodeInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeInfoResponse>> PrepareAsyncnodeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeInfoResponse>>(PrepareAsyncnodeInfoRaw(context, request, cq));
    }
    ::grpc::Status graphInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest& request, ::octaneapi::ApiInfo_graphInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphInfoResponse>> AsyncgraphInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphInfoResponse>>(AsyncgraphInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphInfoResponse>> PrepareAsyncgraphInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphInfoResponse>>(PrepareAsyncgraphInfoRaw(context, request, cq));
    }
    ::grpc::Status nodeIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest& request, ::octaneapi::ApiInfo_nodeIconImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeIconImageResponse>> AsyncnodeIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeIconImageResponse>>(AsyncnodeIconImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeIconImageResponse>> PrepareAsyncnodeIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeIconImageResponse>>(PrepareAsyncnodeIconImageRaw(context, request, cq));
    }
    ::grpc::Status graphIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest& request, ::octaneapi::ApiInfo_graphIconImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphIconImageResponse>> AsyncgraphIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphIconImageResponse>>(AsyncgraphIconImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphIconImageResponse>> PrepareAsyncgraphIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphIconImageResponse>>(PrepareAsyncgraphIconImageRaw(context, request, cq));
    }
    ::grpc::Status attributeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest& request, ::octaneapi::ApiInfo_attributeInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfoResponse>> AsyncattributeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfoResponse>>(AsyncattributeInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfoResponse>> PrepareAsyncattributeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfoResponse>>(PrepareAsyncattributeInfoRaw(context, request, cq));
    }
    ::grpc::Status attributeInfo1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request& request, ::octaneapi::ApiInfo_attributeInfo1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo1Response>> AsyncattributeInfo1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo1Response>>(AsyncattributeInfo1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo1Response>> PrepareAsyncattributeInfo1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo1Response>>(PrepareAsyncattributeInfo1Raw(context, request, cq));
    }
    ::grpc::Status attributeInfo2(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request& request, ::octaneapi::ApiInfo_attributeInfo2Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo2Response>> AsyncattributeInfo2(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo2Response>>(AsyncattributeInfo2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo2Response>> PrepareAsyncattributeInfo2(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo2Response>>(PrepareAsyncattributeInfo2Raw(context, request, cq));
    }
    ::grpc::Status nodePinInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest& request, ::octaneapi::ApiInfo_nodePinInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodePinInfoResponse>> AsyncnodePinInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodePinInfoResponse>>(AsyncnodePinInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodePinInfoResponse>> PrepareAsyncnodePinInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodePinInfoResponse>>(PrepareAsyncnodePinInfoRaw(context, request, cq));
    }
    ::grpc::Status getAttributeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest& request, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>> AsyncgetAttributeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>>(AsyncgetAttributeTypeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>> PrepareAsyncgetAttributeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>>(PrepareAsyncgetAttributeTypeNameRaw(context, request, cq));
    }
    ::grpc::Status getPinTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest& request, ::octaneapi::ApiInfo_getPinTypeNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeNameResponse>> AsyncgetPinTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeNameResponse>>(AsyncgetPinTypeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeNameResponse>> PrepareAsyncgetPinTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeNameResponse>>(PrepareAsyncgetPinTypeNameRaw(context, request, cq));
    }
    ::grpc::Status getPinTypeColor(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest& request, ::octaneapi::ApiInfo_getPinTypeColorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeColorResponse>> AsyncgetPinTypeColor(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeColorResponse>>(AsyncgetPinTypeColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeColorResponse>> PrepareAsyncgetPinTypeColor(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeColorResponse>>(PrepareAsyncgetPinTypeColorRaw(context, request, cq));
    }
    ::grpc::Status getGraphTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest& request, ::octaneapi::ApiInfo_getGraphTypeNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypeNameResponse>> AsyncgetGraphTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypeNameResponse>>(AsyncgetGraphTypeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypeNameResponse>> PrepareAsyncgetGraphTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypeNameResponse>>(PrepareAsyncgetGraphTypeNameRaw(context, request, cq));
    }
    ::grpc::Status getNodeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest& request, ::octaneapi::ApiInfo_getNodeTypeNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypeNameResponse>> AsyncgetNodeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypeNameResponse>>(AsyncgetNodeTypeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypeNameResponse>> PrepareAsyncgetNodeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypeNameResponse>>(PrepareAsyncgetNodeTypeNameRaw(context, request, cq));
    }
    ::grpc::Status getItemTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest& request, ::octaneapi::ApiInfo_getItemTypeNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getItemTypeNameResponse>> AsyncgetItemTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getItemTypeNameResponse>>(AsyncgetItemTypeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getItemTypeNameResponse>> PrepareAsyncgetItemTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getItemTypeNameResponse>>(PrepareAsyncgetItemTypeNameRaw(context, request, cq));
    }
    ::grpc::Status getAttributeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest& request, ::octaneapi::ApiInfo_getAttributeNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeNameResponse>> AsyncgetAttributeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeNameResponse>>(AsyncgetAttributeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeNameResponse>> PrepareAsyncgetAttributeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeNameResponse>>(PrepareAsyncgetAttributeNameRaw(context, request, cq));
    }
    ::grpc::Status getAttributeId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest& request, ::octaneapi::ApiInfo_getAttributeIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdResponse>> AsyncgetAttributeId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdResponse>>(AsyncgetAttributeIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdResponse>> PrepareAsyncgetAttributeId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdResponse>>(PrepareAsyncgetAttributeIdRaw(context, request, cq));
    }
    ::grpc::Status getAttributeIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest& request, ::octaneapi::ApiInfo_getAttributeIdNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdNameResponse>> AsyncgetAttributeIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdNameResponse>>(AsyncgetAttributeIdNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdNameResponse>> PrepareAsyncgetAttributeIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdNameResponse>>(PrepareAsyncgetAttributeIdNameRaw(context, request, cq));
    }
    ::grpc::Status getAttributeIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request& request, ::octaneapi::ApiInfo_getAttributeIdName1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdName1Response>> AsyncgetAttributeIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdName1Response>>(AsyncgetAttributeIdName1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdName1Response>> PrepareAsyncgetAttributeIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdName1Response>>(PrepareAsyncgetAttributeIdName1Raw(context, request, cq));
    }
    ::grpc::Status getPinName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest& request, ::octaneapi::ApiInfo_getPinNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinNameResponse>> AsyncgetPinName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinNameResponse>>(AsyncgetPinNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinNameResponse>> PrepareAsyncgetPinName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinNameResponse>>(PrepareAsyncgetPinNameRaw(context, request, cq));
    }
    ::grpc::Status getPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest& request, ::octaneapi::ApiInfo_getPinIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdResponse>> AsyncgetPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdResponse>>(AsyncgetPinIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdResponse>> PrepareAsyncgetPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdResponse>>(PrepareAsyncgetPinIdRaw(context, request, cq));
    }
    ::grpc::Status getPinIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest& request, ::octaneapi::ApiInfo_getPinIdNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdNameResponse>> AsyncgetPinIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdNameResponse>>(AsyncgetPinIdNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdNameResponse>> PrepareAsyncgetPinIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdNameResponse>>(PrepareAsyncgetPinIdNameRaw(context, request, cq));
    }
    ::grpc::Status getPinIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request& request, ::octaneapi::ApiInfo_getPinIdName1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdName1Response>> AsyncgetPinIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdName1Response>>(AsyncgetPinIdName1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdName1Response>> PrepareAsyncgetPinIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdName1Response>>(PrepareAsyncgetPinIdName1Raw(context, request, cq));
    }
    ::grpc::Status getTextureValueTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest& request, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>> AsyncgetTextureValueTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>>(AsyncgetTextureValueTypeNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>> PrepareAsyncgetTextureValueTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>>(PrepareAsyncgetTextureValueTypeNameRaw(context, request, cq));
    }
    ::grpc::Status getTextureValueTypeForOslType(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest& request, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>> AsyncgetTextureValueTypeForOslType(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>>(AsyncgetTextureValueTypeForOslTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>> PrepareAsyncgetTextureValueTypeForOslType(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>>(PrepareAsyncgetTextureValueTypeForOslTypeRaw(context, request, cq));
    }
    ::grpc::Status getCompatibleTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest& request, ::octaneapi::ApiInfo_getCompatibleTypesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getCompatibleTypesResponse>> AsyncgetCompatibleTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getCompatibleTypesResponse>>(AsyncgetCompatibleTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getCompatibleTypesResponse>> PrepareAsyncgetCompatibleTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getCompatibleTypesResponse>>(PrepareAsyncgetCompatibleTypesRaw(context, request, cq));
    }
    ::grpc::Status renderPassInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest& request, ::octaneapi::ApiInfo_renderPassInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassInfoResponse>> AsyncrenderPassInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassInfoResponse>>(AsyncrenderPassInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassInfoResponse>> PrepareAsyncrenderPassInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassInfoResponse>>(PrepareAsyncrenderPassInfoRaw(context, request, cq));
    }
    ::grpc::Status getAllRenderPassIds(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest& request, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>> AsyncgetAllRenderPassIds(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>>(AsyncgetAllRenderPassIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>> PrepareAsyncgetAllRenderPassIds(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>>(PrepareAsyncgetAllRenderPassIdsRaw(context, request, cq));
    }
    ::grpc::Status getRenderPassIdFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest& request, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>> AsyncgetRenderPassIdFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>>(AsyncgetRenderPassIdFromRenderAovNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>> PrepareAsyncgetRenderPassIdFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>>(PrepareAsyncgetRenderPassIdFromRenderAovNodeRaw(context, request, cq));
    }
    ::grpc::Status getRenderAovInfoFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest& request, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>> AsyncgetRenderAovInfoFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>>(AsyncgetRenderAovInfoFromRenderAovNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>> PrepareAsyncgetRenderAovInfoFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>>(PrepareAsyncgetRenderAovInfoFromRenderAovNodeRaw(context, request, cq));
    }
    ::grpc::Status renderPassName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest& request, ::octaneapi::ApiInfo_renderPassNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassNameResponse>> AsyncrenderPassName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassNameResponse>>(AsyncrenderPassNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassNameResponse>> PrepareAsyncrenderPassName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassNameResponse>>(PrepareAsyncrenderPassNameRaw(context, request, cq));
    }
    ::grpc::Status renderPassShortName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest& request, ::octaneapi::ApiInfo_renderPassShortNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassShortNameResponse>> AsyncrenderPassShortName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassShortNameResponse>>(AsyncrenderPassShortNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassShortNameResponse>> PrepareAsyncrenderPassShortName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassShortNameResponse>>(PrepareAsyncrenderPassShortNameRaw(context, request, cq));
    }
    ::grpc::Status renderPassIdToPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest& request, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>> AsyncrenderPassIdToPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>>(AsyncrenderPassIdToPinIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>> PrepareAsyncrenderPassIdToPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>>(PrepareAsyncrenderPassIdToPinIdRaw(context, request, cq));
    }
    ::grpc::Status renderPassGroupName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest& request, ::octaneapi::ApiInfo_renderPassGroupNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassGroupNameResponse>> AsyncrenderPassGroupName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassGroupNameResponse>>(AsyncrenderPassGroupNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassGroupNameResponse>> PrepareAsyncrenderPassGroupName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassGroupNameResponse>>(PrepareAsyncrenderPassGroupNameRaw(context, request, cq));
    }
    ::grpc::Status pinIdToRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest& request, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>> AsyncpinIdToRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>>(AsyncpinIdToRenderPassIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>> PrepareAsyncpinIdToRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>>(PrepareAsyncpinIdToRenderPassIdRaw(context, request, cq));
    }
    ::grpc::Status findPinIdForRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest& request, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>> AsyncfindPinIdForRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>>(AsyncfindPinIdForRenderPassIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>> PrepareAsyncfindPinIdForRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>>(PrepareAsyncfindPinIdForRenderPassIdRaw(context, request, cq));
    }
    ::grpc::Status findRenderPassIdForPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest& request, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>> AsyncfindRenderPassIdForPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>>(AsyncfindRenderPassIdForPinIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>> PrepareAsyncfindRenderPassIdForPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>>(PrepareAsyncfindRenderPassIdForPinIdRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void octaneVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest* request, ::octaneapi::ApiInfo_octaneVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void octaneVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest* request, ::octaneapi::ApiInfo_octaneVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void octaneName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest* request, ::octaneapi::ApiInfo_octaneNameResponse* response, std::function<void(::grpc::Status)>) override;
      void octaneName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest* request, ::octaneapi::ApiInfo_octaneNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isDemoVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest* request, ::octaneapi::ApiInfo_isDemoVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void isDemoVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest* request, ::octaneapi::ApiInfo_isDemoVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isSubscriptionVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* request, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void isSubscriptionVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* request, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void tierIdx(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest* request, ::octaneapi::ApiInfo_tierIdxResponse* response, std::function<void(::grpc::Status)>) override;
      void tierIdx(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest* request, ::octaneapi::ApiInfo_tierIdxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void osVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest* request, ::octaneapi::ApiInfo_osVersionInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void osVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest* request, ::octaneapi::ApiInfo_osVersionInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void driverVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest* request, ::octaneapi::ApiInfo_driverVersionInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void driverVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest* request, ::octaneapi::ApiInfo_driverVersionInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void cpuInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest* request, ::octaneapi::ApiInfo_cpuInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void cpuInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest* request, ::octaneapi::ApiInfo_cpuInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void texCacheFolder(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest* request, ::octaneapi::ApiInfo_texCacheFolderResponse* response, std::function<void(::grpc::Status)>) override;
      void texCacheFolder(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest* request, ::octaneapi::ApiInfo_texCacheFolderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getAttributeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest* request, ::octaneapi::ApiInfo_getAttributeTypesResponse* response, std::function<void(::grpc::Status)>) override;
      void getAttributeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest* request, ::octaneapi::ApiInfo_getAttributeTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getPinTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest* request, ::octaneapi::ApiInfo_getPinTypesResponse* response, std::function<void(::grpc::Status)>) override;
      void getPinTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest* request, ::octaneapi::ApiInfo_getPinTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getGraphTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest* request, ::octaneapi::ApiInfo_getGraphTypesResponse* response, std::function<void(::grpc::Status)>) override;
      void getGraphTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest* request, ::octaneapi::ApiInfo_getGraphTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest* request, ::octaneapi::ApiInfo_getNodeTypesResponse* response, std::function<void(::grpc::Status)>) override;
      void getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest* request, ::octaneapi::ApiInfo_getNodeTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void nodeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest* request, ::octaneapi::ApiInfo_nodeInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void nodeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest* request, ::octaneapi::ApiInfo_nodeInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void graphInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest* request, ::octaneapi::ApiInfo_graphInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void graphInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest* request, ::octaneapi::ApiInfo_graphInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void nodeIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest* request, ::octaneapi::ApiInfo_nodeIconImageResponse* response, std::function<void(::grpc::Status)>) override;
      void nodeIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest* request, ::octaneapi::ApiInfo_nodeIconImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void graphIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest* request, ::octaneapi::ApiInfo_graphIconImageResponse* response, std::function<void(::grpc::Status)>) override;
      void graphIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest* request, ::octaneapi::ApiInfo_graphIconImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void attributeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest* request, ::octaneapi::ApiInfo_attributeInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void attributeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest* request, ::octaneapi::ApiInfo_attributeInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void attributeInfo1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request* request, ::octaneapi::ApiInfo_attributeInfo1Response* response, std::function<void(::grpc::Status)>) override;
      void attributeInfo1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request* request, ::octaneapi::ApiInfo_attributeInfo1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void attributeInfo2(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request* request, ::octaneapi::ApiInfo_attributeInfo2Response* response, std::function<void(::grpc::Status)>) override;
      void attributeInfo2(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request* request, ::octaneapi::ApiInfo_attributeInfo2Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void nodePinInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest* request, ::octaneapi::ApiInfo_nodePinInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void nodePinInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest* request, ::octaneapi::ApiInfo_nodePinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getAttributeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* request, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getAttributeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* request, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getPinTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest* request, ::octaneapi::ApiInfo_getPinTypeNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getPinTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest* request, ::octaneapi::ApiInfo_getPinTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getPinTypeColor(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest* request, ::octaneapi::ApiInfo_getPinTypeColorResponse* response, std::function<void(::grpc::Status)>) override;
      void getPinTypeColor(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest* request, ::octaneapi::ApiInfo_getPinTypeColorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getGraphTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* request, ::octaneapi::ApiInfo_getGraphTypeNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getGraphTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* request, ::octaneapi::ApiInfo_getGraphTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getNodeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* request, ::octaneapi::ApiInfo_getNodeTypeNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getNodeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* request, ::octaneapi::ApiInfo_getNodeTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getItemTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest* request, ::octaneapi::ApiInfo_getItemTypeNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getItemTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest* request, ::octaneapi::ApiInfo_getItemTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getAttributeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest* request, ::octaneapi::ApiInfo_getAttributeNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getAttributeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest* request, ::octaneapi::ApiInfo_getAttributeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getAttributeId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest* request, ::octaneapi::ApiInfo_getAttributeIdResponse* response, std::function<void(::grpc::Status)>) override;
      void getAttributeId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest* request, ::octaneapi::ApiInfo_getAttributeIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getAttributeIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* request, ::octaneapi::ApiInfo_getAttributeIdNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getAttributeIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* request, ::octaneapi::ApiInfo_getAttributeIdNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getAttributeIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request* request, ::octaneapi::ApiInfo_getAttributeIdName1Response* response, std::function<void(::grpc::Status)>) override;
      void getAttributeIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request* request, ::octaneapi::ApiInfo_getAttributeIdName1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getPinName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest* request, ::octaneapi::ApiInfo_getPinNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getPinName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest* request, ::octaneapi::ApiInfo_getPinNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest* request, ::octaneapi::ApiInfo_getPinIdResponse* response, std::function<void(::grpc::Status)>) override;
      void getPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest* request, ::octaneapi::ApiInfo_getPinIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getPinIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest* request, ::octaneapi::ApiInfo_getPinIdNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getPinIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest* request, ::octaneapi::ApiInfo_getPinIdNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getPinIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request* request, ::octaneapi::ApiInfo_getPinIdName1Response* response, std::function<void(::grpc::Status)>) override;
      void getPinIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request* request, ::octaneapi::ApiInfo_getPinIdName1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getTextureValueTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getTextureValueTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getTextureValueTypeForOslType(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void getTextureValueTypeForOslType(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getCompatibleTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* request, ::octaneapi::ApiInfo_getCompatibleTypesResponse* response, std::function<void(::grpc::Status)>) override;
      void getCompatibleTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* request, ::octaneapi::ApiInfo_getCompatibleTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void renderPassInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest* request, ::octaneapi::ApiInfo_renderPassInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void renderPassInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest* request, ::octaneapi::ApiInfo_renderPassInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getAllRenderPassIds(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* request, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void getAllRenderPassIds(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* request, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getRenderPassIdFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* response, std::function<void(::grpc::Status)>) override;
      void getRenderPassIdFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getRenderAovInfoFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* response, std::function<void(::grpc::Status)>) override;
      void getRenderAovInfoFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void renderPassName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest* request, ::octaneapi::ApiInfo_renderPassNameResponse* response, std::function<void(::grpc::Status)>) override;
      void renderPassName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest* request, ::octaneapi::ApiInfo_renderPassNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void renderPassShortName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest* request, ::octaneapi::ApiInfo_renderPassShortNameResponse* response, std::function<void(::grpc::Status)>) override;
      void renderPassShortName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest* request, ::octaneapi::ApiInfo_renderPassShortNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void renderPassIdToPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* request, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* response, std::function<void(::grpc::Status)>) override;
      void renderPassIdToPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* request, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void renderPassGroupName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* request, ::octaneapi::ApiInfo_renderPassGroupNameResponse* response, std::function<void(::grpc::Status)>) override;
      void renderPassGroupName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* request, ::octaneapi::ApiInfo_renderPassGroupNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void pinIdToRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* request, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* response, std::function<void(::grpc::Status)>) override;
      void pinIdToRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* request, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void findPinIdForRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* request, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* response, std::function<void(::grpc::Status)>) override;
      void findPinIdForRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* request, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void findRenderPassIdForPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* request, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* response, std::function<void(::grpc::Status)>) override;
      void findRenderPassIdForPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* request, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneVersionResponse>* AsyncoctaneVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneVersionResponse>* PrepareAsyncoctaneVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneNameResponse>* AsyncoctaneNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneNameResponse>* PrepareAsyncoctaneNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isDemoVersionResponse>* AsyncisDemoVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isDemoVersionResponse>* PrepareAsyncisDemoVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>* AsyncisSubscriptionVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>* PrepareAsyncisSubscriptionVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_tierIdxResponse>* AsynctierIdxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_tierIdxResponse>* PrepareAsynctierIdxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_osVersionInfoResponse>* AsyncosVersionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_osVersionInfoResponse>* PrepareAsyncosVersionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_driverVersionInfoResponse>* AsyncdriverVersionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_driverVersionInfoResponse>* PrepareAsyncdriverVersionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_cpuInfoResponse>* AsynccpuInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_cpuInfoResponse>* PrepareAsynccpuInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_texCacheFolderResponse>* AsynctexCacheFolderRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_texCacheFolderResponse>* PrepareAsynctexCacheFolderRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypesResponse>* AsyncgetAttributeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypesResponse>* PrepareAsyncgetAttributeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypesResponse>* AsyncgetPinTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypesResponse>* PrepareAsyncgetPinTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypesResponse>* AsyncgetGraphTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypesResponse>* PrepareAsyncgetGraphTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypesResponse>* AsyncgetNodeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypesResponse>* PrepareAsyncgetNodeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeInfoResponse>* AsyncnodeInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeInfoResponse>* PrepareAsyncnodeInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphInfoResponse>* AsyncgraphInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphInfoResponse>* PrepareAsyncgraphInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeIconImageResponse>* AsyncnodeIconImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeIconImageResponse>* PrepareAsyncnodeIconImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphIconImageResponse>* AsyncgraphIconImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphIconImageResponse>* PrepareAsyncgraphIconImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfoResponse>* AsyncattributeInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfoResponse>* PrepareAsyncattributeInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo1Response>* AsyncattributeInfo1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo1Response>* PrepareAsyncattributeInfo1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo2Response>* AsyncattributeInfo2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo2Response>* PrepareAsyncattributeInfo2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodePinInfoResponse>* AsyncnodePinInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodePinInfoResponse>* PrepareAsyncnodePinInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>* AsyncgetAttributeTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>* PrepareAsyncgetAttributeTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeNameResponse>* AsyncgetPinTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeNameResponse>* PrepareAsyncgetPinTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeColorResponse>* AsyncgetPinTypeColorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeColorResponse>* PrepareAsyncgetPinTypeColorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypeNameResponse>* AsyncgetGraphTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypeNameResponse>* PrepareAsyncgetGraphTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypeNameResponse>* AsyncgetNodeTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypeNameResponse>* PrepareAsyncgetNodeTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getItemTypeNameResponse>* AsyncgetItemTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getItemTypeNameResponse>* PrepareAsyncgetItemTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeNameResponse>* AsyncgetAttributeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeNameResponse>* PrepareAsyncgetAttributeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdResponse>* AsyncgetAttributeIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdResponse>* PrepareAsyncgetAttributeIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdNameResponse>* AsyncgetAttributeIdNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdNameResponse>* PrepareAsyncgetAttributeIdNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdName1Response>* AsyncgetAttributeIdName1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdName1Response>* PrepareAsyncgetAttributeIdName1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinNameResponse>* AsyncgetPinNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinNameResponse>* PrepareAsyncgetPinNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdResponse>* AsyncgetPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdResponse>* PrepareAsyncgetPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdNameResponse>* AsyncgetPinIdNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdNameResponse>* PrepareAsyncgetPinIdNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdName1Response>* AsyncgetPinIdName1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdName1Response>* PrepareAsyncgetPinIdName1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>* AsyncgetTextureValueTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>* PrepareAsyncgetTextureValueTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>* AsyncgetTextureValueTypeForOslTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>* PrepareAsyncgetTextureValueTypeForOslTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getCompatibleTypesResponse>* AsyncgetCompatibleTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getCompatibleTypesResponse>* PrepareAsyncgetCompatibleTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassInfoResponse>* AsyncrenderPassInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassInfoResponse>* PrepareAsyncrenderPassInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>* AsyncgetAllRenderPassIdsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>* PrepareAsyncgetAllRenderPassIdsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>* AsyncgetRenderPassIdFromRenderAovNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>* PrepareAsyncgetRenderPassIdFromRenderAovNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>* AsyncgetRenderAovInfoFromRenderAovNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>* PrepareAsyncgetRenderAovInfoFromRenderAovNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassNameResponse>* AsyncrenderPassNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassNameResponse>* PrepareAsyncrenderPassNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassShortNameResponse>* AsyncrenderPassShortNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassShortNameResponse>* PrepareAsyncrenderPassShortNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>* AsyncrenderPassIdToPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>* PrepareAsyncrenderPassIdToPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassGroupNameResponse>* AsyncrenderPassGroupNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassGroupNameResponse>* PrepareAsyncrenderPassGroupNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>* AsyncpinIdToRenderPassIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>* PrepareAsyncpinIdToRenderPassIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>* AsyncfindPinIdForRenderPassIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>* PrepareAsyncfindPinIdForRenderPassIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>* AsyncfindRenderPassIdForPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>* PrepareAsyncfindRenderPassIdForPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_octaneVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_octaneName_;
    const ::grpc::internal::RpcMethod rpcmethod_isDemoVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_isSubscriptionVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_tierIdx_;
    const ::grpc::internal::RpcMethod rpcmethod_osVersionInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_driverVersionInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_cpuInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_texCacheFolder_;
    const ::grpc::internal::RpcMethod rpcmethod_getAttributeTypes_;
    const ::grpc::internal::RpcMethod rpcmethod_getPinTypes_;
    const ::grpc::internal::RpcMethod rpcmethod_getGraphTypes_;
    const ::grpc::internal::RpcMethod rpcmethod_getNodeTypes_;
    const ::grpc::internal::RpcMethod rpcmethod_nodeInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_graphInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_nodeIconImage_;
    const ::grpc::internal::RpcMethod rpcmethod_graphIconImage_;
    const ::grpc::internal::RpcMethod rpcmethod_attributeInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_attributeInfo1_;
    const ::grpc::internal::RpcMethod rpcmethod_attributeInfo2_;
    const ::grpc::internal::RpcMethod rpcmethod_nodePinInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_getAttributeTypeName_;
    const ::grpc::internal::RpcMethod rpcmethod_getPinTypeName_;
    const ::grpc::internal::RpcMethod rpcmethod_getPinTypeColor_;
    const ::grpc::internal::RpcMethod rpcmethod_getGraphTypeName_;
    const ::grpc::internal::RpcMethod rpcmethod_getNodeTypeName_;
    const ::grpc::internal::RpcMethod rpcmethod_getItemTypeName_;
    const ::grpc::internal::RpcMethod rpcmethod_getAttributeName_;
    const ::grpc::internal::RpcMethod rpcmethod_getAttributeId_;
    const ::grpc::internal::RpcMethod rpcmethod_getAttributeIdName_;
    const ::grpc::internal::RpcMethod rpcmethod_getAttributeIdName1_;
    const ::grpc::internal::RpcMethod rpcmethod_getPinName_;
    const ::grpc::internal::RpcMethod rpcmethod_getPinId_;
    const ::grpc::internal::RpcMethod rpcmethod_getPinIdName_;
    const ::grpc::internal::RpcMethod rpcmethod_getPinIdName1_;
    const ::grpc::internal::RpcMethod rpcmethod_getTextureValueTypeName_;
    const ::grpc::internal::RpcMethod rpcmethod_getTextureValueTypeForOslType_;
    const ::grpc::internal::RpcMethod rpcmethod_getCompatibleTypes_;
    const ::grpc::internal::RpcMethod rpcmethod_renderPassInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_getAllRenderPassIds_;
    const ::grpc::internal::RpcMethod rpcmethod_getRenderPassIdFromRenderAovNode_;
    const ::grpc::internal::RpcMethod rpcmethod_getRenderAovInfoFromRenderAovNode_;
    const ::grpc::internal::RpcMethod rpcmethod_renderPassName_;
    const ::grpc::internal::RpcMethod rpcmethod_renderPassShortName_;
    const ::grpc::internal::RpcMethod rpcmethod_renderPassIdToPinId_;
    const ::grpc::internal::RpcMethod rpcmethod_renderPassGroupName_;
    const ::grpc::internal::RpcMethod rpcmethod_pinIdToRenderPassId_;
    const ::grpc::internal::RpcMethod rpcmethod_findPinIdForRenderPassId_;
    const ::grpc::internal::RpcMethod rpcmethod_findRenderPassIdForPinId_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Returns the version of the Octane DLL
    virtual ::grpc::Status octaneVersion(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest* request, ::octaneapi::ApiInfo_octaneVersionResponse* response);
    // / Returns the full name of the Octane DLL build
    virtual ::grpc::Status octaneName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_octaneNameRequest* request, ::octaneapi::ApiInfo_octaneNameResponse* response);
    // / Returns TRUE if the DLL is a demo version
    virtual ::grpc::Status isDemoVersion(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest* request, ::octaneapi::ApiInfo_isDemoVersionResponse* response);
    // / Returns TRUE if the DLL is a subscription version
    virtual ::grpc::Status isSubscriptionVersion(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* request, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* response);
    // / Returns -1 for builds with no tiers or the build tier index (1-3)
    virtual ::grpc::Status tierIdx(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_tierIdxRequest* request, ::octaneapi::ApiInfo_tierIdxResponse* response);
    // / Returns a string describing the OS version
    virtual ::grpc::Status osVersionInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest* request, ::octaneapi::ApiInfo_osVersionInfoResponse* response);
    // /  Returns the driver version string (NVIDIA only)
    virtual ::grpc::Status driverVersionInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest* request, ::octaneapi::ApiInfo_driverVersionInfoResponse* response);
    // / Returns info about the cpu(s)
    virtual ::grpc::Status cpuInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest* request, ::octaneapi::ApiInfo_cpuInfoResponse* response);
    // / Returns the absolute path of the texture cache folder
    // /
    // / 
    virtual ::grpc::Status texCacheFolder(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest* request, ::octaneapi::ApiInfo_texCacheFolderResponse* response);
    // / Returns a sorted list of all attribute types
    virtual ::grpc::Status getAttributeTypes(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest* request, ::octaneapi::ApiInfo_getAttributeTypesResponse* response);
    // / Returns a sorted list of all pin types
    virtual ::grpc::Status getPinTypes(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest* request, ::octaneapi::ApiInfo_getPinTypesResponse* response);
    // / Returns a sorted list of all graph types
    virtual ::grpc::Status getGraphTypes(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest* request, ::octaneapi::ApiInfo_getGraphTypesResponse* response);
    // / Returns a sorted list of all node types
    virtual ::grpc::Status getNodeTypes(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest* request, ::octaneapi::ApiInfo_getNodeTypesResponse* response);
    // / Returns info for this particular node type or NULL if no info is available
    virtual ::grpc::Status nodeInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest* request, ::octaneapi::ApiInfo_nodeInfoResponse* response);
    // / Returns info for this particular graph type or NULL if no info is available
    virtual ::grpc::Status graphInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_graphInfoRequest* request, ::octaneapi::ApiInfo_graphInfoResponse* response);
    // / Returns an image containing the icon of a given node type
    // / Note: Octane is the owner of the returned image and 
    virtual ::grpc::Status nodeIconImage(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest* request, ::octaneapi::ApiInfo_nodeIconImageResponse* response);
    // / Returns an image containing the icon of a given graph type
    // / Note: Octane is the owner of the returned image and 
    virtual ::grpc::Status graphIconImage(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest* request, ::octaneapi::ApiInfo_graphIconImageResponse* response);
    // / Returns info for an attribute available on nodes of the given type or NULL if no info for the
    // / attribute is available
    virtual ::grpc::Status attributeInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest* request, ::octaneapi::ApiInfo_attributeInfoResponse* response);
    // / Returns info for an attribute available on nodes of the given type or NULL
    // / if no info for the attribute is available
    virtual ::grpc::Status attributeInfo1(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request* request, ::octaneapi::ApiInfo_attributeInfo1Response* response);
    // / Returns info for an attribute available on graphs of the given type or NULL
    // / if no info for the attribute is available
    virtual ::grpc::Status attributeInfo2(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request* request, ::octaneapi::ApiInfo_attributeInfo2Response* response);
    // / Returns info for a pin available on a node or NULL if there's no such pin
    virtual ::grpc::Status nodePinInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest* request, ::octaneapi::ApiInfo_nodePinInfoResponse* response);
    // / Returns the name for an attribute type, e
    virtual ::grpc::Status getAttributeTypeName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* request, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* response);
    // / Returns the name for a node pin type, e
    virtual ::grpc::Status getPinTypeName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest* request, ::octaneapi::ApiInfo_getPinTypeNameResponse* response);
    // / Returns the color for a node pin type (ARGB encoded)
    virtual ::grpc::Status getPinTypeColor(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest* request, ::octaneapi::ApiInfo_getPinTypeColorResponse* response);
    // / Returns the name for a node graph type, e
    virtual ::grpc::Status getGraphTypeName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* request, ::octaneapi::ApiInfo_getGraphTypeNameResponse* response);
    // / Returns the name for a node type, e
    virtual ::grpc::Status getNodeTypeName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* request, ::octaneapi::ApiInfo_getNodeTypeNameResponse* response);
    // / Returns the type name of an api item
    virtual ::grpc::Status getItemTypeName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest* request, ::octaneapi::ApiInfo_getItemTypeNameResponse* response);
    // / Returns the name for an attribute ID, e
    virtual ::grpc::Status getAttributeName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest* request, ::octaneapi::ApiInfo_getAttributeNameResponse* response);
    // / Returns the ID for an attribute name, e
    virtual ::grpc::Status getAttributeId(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest* request, ::octaneapi::ApiInfo_getAttributeIdResponse* response);
    // / Returns the enum name for an attribute ID, e
    virtual ::grpc::Status getAttributeIdName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* request, ::octaneapi::ApiInfo_getAttributeIdNameResponse* response);
    // / Returns the enum name for an attribute name, e
    virtual ::grpc::Status getAttributeIdName1(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request* request, ::octaneapi::ApiInfo_getAttributeIdName1Response* response);
    // / Returns the name for a pin ID, e
    virtual ::grpc::Status getPinName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getPinNameRequest* request, ::octaneapi::ApiInfo_getPinNameResponse* response);
    // / Returns the ID for a pin name, e
    virtual ::grpc::Status getPinId(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getPinIdRequest* request, ::octaneapi::ApiInfo_getPinIdResponse* response);
    // / Returns the enum name for a pin ID, e
    virtual ::grpc::Status getPinIdName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest* request, ::octaneapi::ApiInfo_getPinIdNameResponse* response);
    // / Returns the enum name for a pin name, e
    virtual ::grpc::Status getPinIdName1(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request* request, ::octaneapi::ApiInfo_getPinIdName1Response* response);
    // / Get the string name of an OSL value type of a given texture value type enum
    virtual ::grpc::Status getTextureValueTypeName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* response);
    // / Get the OSL value type for a given OSL type name
    virtual ::grpc::Status getTextureValueTypeForOslType(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* response);
    // / Returns a list of graphs compatible with the output type and a list
    // / of nodes compatible with the output type
    virtual ::grpc::Status getCompatibleTypes(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* request, ::octaneapi::ApiInfo_getCompatibleTypesResponse* response);
    // / Returns the information related to a render pass given its id
    virtual ::grpc::Status renderPassInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest* request, ::octaneapi::ApiInfo_renderPassInfoResponse* response);
    // / Returns an array with all the available render pass ids
    virtual ::grpc::Status getAllRenderPassIds(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* request, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* response);
    // / Returns the 
    virtual ::grpc::Status getRenderPassIdFromRenderAovNode(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* response);
    // / Returns the 
    virtual ::grpc::Status getRenderAovInfoFromRenderAovNode(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* response);
    // / Returns the name of the render pass associated with the id
    virtual ::grpc::Status renderPassName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest* request, ::octaneapi::ApiInfo_renderPassNameResponse* response);
    // / Returns the short (~ abbreviated) name of a render pass
    virtual ::grpc::Status renderPassShortName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest* request, ::octaneapi::ApiInfo_renderPassShortNameResponse* response);
    // / Returns the pin id for a render pass
    virtual ::grpc::Status renderPassIdToPinId(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* request, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* response);
    // / Returns the group name of a render pass
    // / 
    virtual ::grpc::Status renderPassGroupName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* request, ::octaneapi::ApiInfo_renderPassGroupNameResponse* response);
    // / Returns the render pass id for a pin id
    virtual ::grpc::Status pinIdToRenderPassId(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* request, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* response);
    // / Finds the bool pin used to enable/disable the render pass
    virtual ::grpc::Status findPinIdForRenderPassId(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* request, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* response);
    // / Finds the render pass you can enable/disable with the passed in pin id
    virtual ::grpc::Status findRenderPassIdForPinId(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* request, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_octaneVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_octaneVersion() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_octaneVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status octaneVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_octaneVersionRequest* /*request*/, ::octaneapi::ApiInfo_octaneVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestoctaneVersion(::grpc::ServerContext* context, ::octaneapi::ApiInfo_octaneVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_octaneVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_octaneName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_octaneName() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_octaneName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status octaneName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_octaneNameRequest* /*request*/, ::octaneapi::ApiInfo_octaneNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestoctaneName(::grpc::ServerContext* context, ::octaneapi::ApiInfo_octaneNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_octaneNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isDemoVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isDemoVersion() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_isDemoVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isDemoVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_isDemoVersionRequest* /*request*/, ::octaneapi::ApiInfo_isDemoVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisDemoVersion(::grpc::ServerContext* context, ::octaneapi::ApiInfo_isDemoVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_isDemoVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isSubscriptionVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isSubscriptionVersion() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_isSubscriptionVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSubscriptionVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* /*request*/, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisSubscriptionVersion(::grpc::ServerContext* context, ::octaneapi::ApiInfo_isSubscriptionVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_tierIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_tierIdx() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_tierIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status tierIdx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_tierIdxRequest* /*request*/, ::octaneapi::ApiInfo_tierIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesttierIdx(::grpc::ServerContext* context, ::octaneapi::ApiInfo_tierIdxRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_tierIdxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_osVersionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_osVersionInfo() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_osVersionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status osVersionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_osVersionInfoRequest* /*request*/, ::octaneapi::ApiInfo_osVersionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestosVersionInfo(::grpc::ServerContext* context, ::octaneapi::ApiInfo_osVersionInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_osVersionInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_driverVersionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_driverVersionInfo() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_driverVersionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status driverVersionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_driverVersionInfoRequest* /*request*/, ::octaneapi::ApiInfo_driverVersionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdriverVersionInfo(::grpc::ServerContext* context, ::octaneapi::ApiInfo_driverVersionInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_driverVersionInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_cpuInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_cpuInfo() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_cpuInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cpuInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_cpuInfoRequest* /*request*/, ::octaneapi::ApiInfo_cpuInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcpuInfo(::grpc::ServerContext* context, ::octaneapi::ApiInfo_cpuInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_cpuInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_texCacheFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_texCacheFolder() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_texCacheFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status texCacheFolder(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_texCacheFolderRequest* /*request*/, ::octaneapi::ApiInfo_texCacheFolderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesttexCacheFolder(::grpc::ServerContext* context, ::octaneapi::ApiInfo_texCacheFolderRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_texCacheFolderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAttributeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAttributeTypes() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getAttributeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeTypesRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAttributeTypes(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getAttributeTypesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getAttributeTypesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPinTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPinTypes() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_getPinTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypesRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPinTypes(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getPinTypesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getPinTypesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGraphTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getGraphTypes() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_getGraphTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getGraphTypesRequest* /*request*/, ::octaneapi::ApiInfo_getGraphTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGraphTypes(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getGraphTypesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getGraphTypesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getNodeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getNodeTypes() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_getNodeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getNodeTypesRequest* /*request*/, ::octaneapi::ApiInfo_getNodeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNodeTypes(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getNodeTypesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getNodeTypesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_nodeInfo() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_nodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodeInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodeInfoRequest* /*request*/, ::octaneapi::ApiInfo_nodeInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnodeInfo(::grpc::ServerContext* context, ::octaneapi::ApiInfo_nodeInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_nodeInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_graphInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_graphInfo() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_graphInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status graphInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_graphInfoRequest* /*request*/, ::octaneapi::ApiInfo_graphInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgraphInfo(::grpc::ServerContext* context, ::octaneapi::ApiInfo_graphInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_graphInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nodeIconImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_nodeIconImage() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_nodeIconImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodeIconImage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodeIconImageRequest* /*request*/, ::octaneapi::ApiInfo_nodeIconImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnodeIconImage(::grpc::ServerContext* context, ::octaneapi::ApiInfo_nodeIconImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_nodeIconImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_graphIconImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_graphIconImage() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_graphIconImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status graphIconImage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_graphIconImageRequest* /*request*/, ::octaneapi::ApiInfo_graphIconImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgraphIconImage(::grpc::ServerContext* context, ::octaneapi::ApiInfo_graphIconImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_graphIconImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_attributeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_attributeInfo() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_attributeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfoRequest* /*request*/, ::octaneapi::ApiInfo_attributeInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestattributeInfo(::grpc::ServerContext* context, ::octaneapi::ApiInfo_attributeInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_attributeInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_attributeInfo1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_attributeInfo1() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_attributeInfo1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfo1Request* /*request*/, ::octaneapi::ApiInfo_attributeInfo1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestattributeInfo1(::grpc::ServerContext* context, ::octaneapi::ApiInfo_attributeInfo1Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_attributeInfo1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_attributeInfo2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_attributeInfo2() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_attributeInfo2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfo2Request* /*request*/, ::octaneapi::ApiInfo_attributeInfo2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestattributeInfo2(::grpc::ServerContext* context, ::octaneapi::ApiInfo_attributeInfo2Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_attributeInfo2Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nodePinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_nodePinInfo() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_nodePinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodePinInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodePinInfoRequest* /*request*/, ::octaneapi::ApiInfo_nodePinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnodePinInfo(::grpc::ServerContext* context, ::octaneapi::ApiInfo_nodePinInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_nodePinInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAttributeTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAttributeTypeName() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_getAttributeTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAttributeTypeName(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getAttributeTypeNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPinTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPinTypeName() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_getPinTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPinTypeName(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getPinTypeNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getPinTypeNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPinTypeColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPinTypeColor() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_getPinTypeColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypeColor(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypeColorRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypeColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPinTypeColor(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getPinTypeColorRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getPinTypeColorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGraphTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getGraphTypeName() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_getGraphTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getGraphTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGraphTypeName(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getGraphTypeNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getGraphTypeNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getNodeTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getNodeTypeName() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_getNodeTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getNodeTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNodeTypeName(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getNodeTypeNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getNodeTypeNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getItemTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getItemTypeName() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_getItemTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getItemTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getItemTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getItemTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetItemTypeName(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getItemTypeNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getItemTypeNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAttributeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAttributeName() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_getAttributeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAttributeName(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getAttributeNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getAttributeNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAttributeId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAttributeId() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_getAttributeId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAttributeId(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getAttributeIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getAttributeIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAttributeIdName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAttributeIdName() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_getAttributeIdName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeIdName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeIdNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAttributeIdName(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getAttributeIdNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getAttributeIdNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAttributeIdName1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAttributeIdName1() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_getAttributeIdName1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeIdName1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdName1Request* /*request*/, ::octaneapi::ApiInfo_getAttributeIdName1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAttributeIdName1(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getAttributeIdName1Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getAttributeIdName1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPinName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPinName() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_getPinName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPinName(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getPinNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getPinNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPinId() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_getPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdRequest* /*request*/, ::octaneapi::ApiInfo_getPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPinId(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getPinIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getPinIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPinIdName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPinIdName() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_getPinIdName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinIdName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinIdNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPinIdName(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getPinIdNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getPinIdNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPinIdName1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPinIdName1() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_getPinIdName1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinIdName1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdName1Request* /*request*/, ::octaneapi::ApiInfo_getPinIdName1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPinIdName1(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getPinIdName1Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getPinIdName1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getTextureValueTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getTextureValueTypeName() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_getTextureValueTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTextureValueTypeName(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getTextureValueTypeForOslType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getTextureValueTypeForOslType() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_getTextureValueTypeForOslType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueTypeForOslType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* /*request*/, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTextureValueTypeForOslType(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCompatibleTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getCompatibleTypes() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_getCompatibleTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCompatibleTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* /*request*/, ::octaneapi::ApiInfo_getCompatibleTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCompatibleTypes(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getCompatibleTypesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getCompatibleTypesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_renderPassInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_renderPassInfo() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_renderPassInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassInfoRequest* /*request*/, ::octaneapi::ApiInfo_renderPassInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrenderPassInfo(::grpc::ServerContext* context, ::octaneapi::ApiInfo_renderPassInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_renderPassInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAllRenderPassIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAllRenderPassIds() {
      ::grpc::Service::MarkMethodAsync(39);
    }
    ~WithAsyncMethod_getAllRenderPassIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllRenderPassIds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* /*request*/, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllRenderPassIds(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getRenderPassIdFromRenderAovNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getRenderPassIdFromRenderAovNode() {
      ::grpc::Service::MarkMethodAsync(40);
    }
    ~WithAsyncMethod_getRenderPassIdFromRenderAovNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRenderPassIdFromRenderAovNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* /*request*/, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRenderPassIdFromRenderAovNode(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getRenderAovInfoFromRenderAovNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getRenderAovInfoFromRenderAovNode() {
      ::grpc::Service::MarkMethodAsync(41);
    }
    ~WithAsyncMethod_getRenderAovInfoFromRenderAovNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRenderAovInfoFromRenderAovNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* /*request*/, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRenderAovInfoFromRenderAovNode(::grpc::ServerContext* context, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_renderPassName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_renderPassName() {
      ::grpc::Service::MarkMethodAsync(42);
    }
    ~WithAsyncMethod_renderPassName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrenderPassName(::grpc::ServerContext* context, ::octaneapi::ApiInfo_renderPassNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_renderPassNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_renderPassShortName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_renderPassShortName() {
      ::grpc::Service::MarkMethodAsync(43);
    }
    ~WithAsyncMethod_renderPassShortName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassShortName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassShortNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassShortNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrenderPassShortName(::grpc::ServerContext* context, ::octaneapi::ApiInfo_renderPassShortNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_renderPassShortNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_renderPassIdToPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_renderPassIdToPinId() {
      ::grpc::Service::MarkMethodAsync(44);
    }
    ~WithAsyncMethod_renderPassIdToPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassIdToPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* /*request*/, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrenderPassIdToPinId(::grpc::ServerContext* context, ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_renderPassGroupName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_renderPassGroupName() {
      ::grpc::Service::MarkMethodAsync(45);
    }
    ~WithAsyncMethod_renderPassGroupName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassGroupName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassGroupNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrenderPassGroupName(::grpc::ServerContext* context, ::octaneapi::ApiInfo_renderPassGroupNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_renderPassGroupNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_pinIdToRenderPassId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_pinIdToRenderPassId() {
      ::grpc::Service::MarkMethodAsync(46);
    }
    ~WithAsyncMethod_pinIdToRenderPassId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pinIdToRenderPassId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* /*request*/, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpinIdToRenderPassId(::grpc::ServerContext* context, ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_findPinIdForRenderPassId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_findPinIdForRenderPassId() {
      ::grpc::Service::MarkMethodAsync(47);
    }
    ~WithAsyncMethod_findPinIdForRenderPassId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findPinIdForRenderPassId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* /*request*/, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfindPinIdForRenderPassId(::grpc::ServerContext* context, ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_findRenderPassIdForPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_findRenderPassIdForPinId() {
      ::grpc::Service::MarkMethodAsync(48);
    }
    ~WithAsyncMethod_findRenderPassIdForPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findRenderPassIdForPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* /*request*/, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfindRenderPassIdForPinId(::grpc::ServerContext* context, ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_octaneVersion<WithAsyncMethod_octaneName<WithAsyncMethod_isDemoVersion<WithAsyncMethod_isSubscriptionVersion<WithAsyncMethod_tierIdx<WithAsyncMethod_osVersionInfo<WithAsyncMethod_driverVersionInfo<WithAsyncMethod_cpuInfo<WithAsyncMethod_texCacheFolder<WithAsyncMethod_getAttributeTypes<WithAsyncMethod_getPinTypes<WithAsyncMethod_getGraphTypes<WithAsyncMethod_getNodeTypes<WithAsyncMethod_nodeInfo<WithAsyncMethod_graphInfo<WithAsyncMethod_nodeIconImage<WithAsyncMethod_graphIconImage<WithAsyncMethod_attributeInfo<WithAsyncMethod_attributeInfo1<WithAsyncMethod_attributeInfo2<WithAsyncMethod_nodePinInfo<WithAsyncMethod_getAttributeTypeName<WithAsyncMethod_getPinTypeName<WithAsyncMethod_getPinTypeColor<WithAsyncMethod_getGraphTypeName<WithAsyncMethod_getNodeTypeName<WithAsyncMethod_getItemTypeName<WithAsyncMethod_getAttributeName<WithAsyncMethod_getAttributeId<WithAsyncMethod_getAttributeIdName<WithAsyncMethod_getAttributeIdName1<WithAsyncMethod_getPinName<WithAsyncMethod_getPinId<WithAsyncMethod_getPinIdName<WithAsyncMethod_getPinIdName1<WithAsyncMethod_getTextureValueTypeName<WithAsyncMethod_getTextureValueTypeForOslType<WithAsyncMethod_getCompatibleTypes<WithAsyncMethod_renderPassInfo<WithAsyncMethod_getAllRenderPassIds<WithAsyncMethod_getRenderPassIdFromRenderAovNode<WithAsyncMethod_getRenderAovInfoFromRenderAovNode<WithAsyncMethod_renderPassName<WithAsyncMethod_renderPassShortName<WithAsyncMethod_renderPassIdToPinId<WithAsyncMethod_renderPassGroupName<WithAsyncMethod_pinIdToRenderPassId<WithAsyncMethod_findPinIdForRenderPassId<WithAsyncMethod_findRenderPassIdForPinId<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_octaneVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_octaneVersion() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_octaneVersionRequest, ::octaneapi::ApiInfo_octaneVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest* request, ::octaneapi::ApiInfo_octaneVersionResponse* response) { return this->octaneVersion(context, request, response); }));}
    void SetMessageAllocatorFor_octaneVersion(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_octaneVersionRequest, ::octaneapi::ApiInfo_octaneVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_octaneVersionRequest, ::octaneapi::ApiInfo_octaneVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_octaneVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status octaneVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_octaneVersionRequest* /*request*/, ::octaneapi::ApiInfo_octaneVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* octaneVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_octaneVersionRequest* /*request*/, ::octaneapi::ApiInfo_octaneVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_octaneName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_octaneName() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_octaneNameRequest, ::octaneapi::ApiInfo_octaneNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_octaneNameRequest* request, ::octaneapi::ApiInfo_octaneNameResponse* response) { return this->octaneName(context, request, response); }));}
    void SetMessageAllocatorFor_octaneName(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_octaneNameRequest, ::octaneapi::ApiInfo_octaneNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_octaneNameRequest, ::octaneapi::ApiInfo_octaneNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_octaneName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status octaneName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_octaneNameRequest* /*request*/, ::octaneapi::ApiInfo_octaneNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* octaneName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_octaneNameRequest* /*request*/, ::octaneapi::ApiInfo_octaneNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isDemoVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isDemoVersion() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_isDemoVersionRequest, ::octaneapi::ApiInfo_isDemoVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest* request, ::octaneapi::ApiInfo_isDemoVersionResponse* response) { return this->isDemoVersion(context, request, response); }));}
    void SetMessageAllocatorFor_isDemoVersion(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_isDemoVersionRequest, ::octaneapi::ApiInfo_isDemoVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_isDemoVersionRequest, ::octaneapi::ApiInfo_isDemoVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isDemoVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isDemoVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_isDemoVersionRequest* /*request*/, ::octaneapi::ApiInfo_isDemoVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isDemoVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_isDemoVersionRequest* /*request*/, ::octaneapi::ApiInfo_isDemoVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isSubscriptionVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isSubscriptionVersion() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_isSubscriptionVersionRequest, ::octaneapi::ApiInfo_isSubscriptionVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* request, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* response) { return this->isSubscriptionVersion(context, request, response); }));}
    void SetMessageAllocatorFor_isSubscriptionVersion(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_isSubscriptionVersionRequest, ::octaneapi::ApiInfo_isSubscriptionVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_isSubscriptionVersionRequest, ::octaneapi::ApiInfo_isSubscriptionVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isSubscriptionVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSubscriptionVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* /*request*/, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isSubscriptionVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* /*request*/, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_tierIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_tierIdx() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_tierIdxRequest, ::octaneapi::ApiInfo_tierIdxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_tierIdxRequest* request, ::octaneapi::ApiInfo_tierIdxResponse* response) { return this->tierIdx(context, request, response); }));}
    void SetMessageAllocatorFor_tierIdx(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_tierIdxRequest, ::octaneapi::ApiInfo_tierIdxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_tierIdxRequest, ::octaneapi::ApiInfo_tierIdxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_tierIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status tierIdx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_tierIdxRequest* /*request*/, ::octaneapi::ApiInfo_tierIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* tierIdx(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_tierIdxRequest* /*request*/, ::octaneapi::ApiInfo_tierIdxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_osVersionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_osVersionInfo() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_osVersionInfoRequest, ::octaneapi::ApiInfo_osVersionInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest* request, ::octaneapi::ApiInfo_osVersionInfoResponse* response) { return this->osVersionInfo(context, request, response); }));}
    void SetMessageAllocatorFor_osVersionInfo(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_osVersionInfoRequest, ::octaneapi::ApiInfo_osVersionInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_osVersionInfoRequest, ::octaneapi::ApiInfo_osVersionInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_osVersionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status osVersionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_osVersionInfoRequest* /*request*/, ::octaneapi::ApiInfo_osVersionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* osVersionInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_osVersionInfoRequest* /*request*/, ::octaneapi::ApiInfo_osVersionInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_driverVersionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_driverVersionInfo() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_driverVersionInfoRequest, ::octaneapi::ApiInfo_driverVersionInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest* request, ::octaneapi::ApiInfo_driverVersionInfoResponse* response) { return this->driverVersionInfo(context, request, response); }));}
    void SetMessageAllocatorFor_driverVersionInfo(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_driverVersionInfoRequest, ::octaneapi::ApiInfo_driverVersionInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_driverVersionInfoRequest, ::octaneapi::ApiInfo_driverVersionInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_driverVersionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status driverVersionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_driverVersionInfoRequest* /*request*/, ::octaneapi::ApiInfo_driverVersionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* driverVersionInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_driverVersionInfoRequest* /*request*/, ::octaneapi::ApiInfo_driverVersionInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_cpuInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_cpuInfo() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_cpuInfoRequest, ::octaneapi::ApiInfo_cpuInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest* request, ::octaneapi::ApiInfo_cpuInfoResponse* response) { return this->cpuInfo(context, request, response); }));}
    void SetMessageAllocatorFor_cpuInfo(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_cpuInfoRequest, ::octaneapi::ApiInfo_cpuInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_cpuInfoRequest, ::octaneapi::ApiInfo_cpuInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_cpuInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cpuInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_cpuInfoRequest* /*request*/, ::octaneapi::ApiInfo_cpuInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* cpuInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_cpuInfoRequest* /*request*/, ::octaneapi::ApiInfo_cpuInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_texCacheFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_texCacheFolder() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_texCacheFolderRequest, ::octaneapi::ApiInfo_texCacheFolderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest* request, ::octaneapi::ApiInfo_texCacheFolderResponse* response) { return this->texCacheFolder(context, request, response); }));}
    void SetMessageAllocatorFor_texCacheFolder(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_texCacheFolderRequest, ::octaneapi::ApiInfo_texCacheFolderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_texCacheFolderRequest, ::octaneapi::ApiInfo_texCacheFolderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_texCacheFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status texCacheFolder(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_texCacheFolderRequest* /*request*/, ::octaneapi::ApiInfo_texCacheFolderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* texCacheFolder(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_texCacheFolderRequest* /*request*/, ::octaneapi::ApiInfo_texCacheFolderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getAttributeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getAttributeTypes() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getAttributeTypesRequest, ::octaneapi::ApiInfo_getAttributeTypesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest* request, ::octaneapi::ApiInfo_getAttributeTypesResponse* response) { return this->getAttributeTypes(context, request, response); }));}
    void SetMessageAllocatorFor_getAttributeTypes(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getAttributeTypesRequest, ::octaneapi::ApiInfo_getAttributeTypesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getAttributeTypesRequest, ::octaneapi::ApiInfo_getAttributeTypesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getAttributeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeTypesRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAttributeTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeTypesRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeTypesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPinTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPinTypes() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getPinTypesRequest, ::octaneapi::ApiInfo_getPinTypesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest* request, ::octaneapi::ApiInfo_getPinTypesResponse* response) { return this->getPinTypes(context, request, response); }));}
    void SetMessageAllocatorFor_getPinTypes(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getPinTypesRequest, ::octaneapi::ApiInfo_getPinTypesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getPinTypesRequest, ::octaneapi::ApiInfo_getPinTypesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPinTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypesRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPinTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypesRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getGraphTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getGraphTypes() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getGraphTypesRequest, ::octaneapi::ApiInfo_getGraphTypesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest* request, ::octaneapi::ApiInfo_getGraphTypesResponse* response) { return this->getGraphTypes(context, request, response); }));}
    void SetMessageAllocatorFor_getGraphTypes(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getGraphTypesRequest, ::octaneapi::ApiInfo_getGraphTypesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getGraphTypesRequest, ::octaneapi::ApiInfo_getGraphTypesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getGraphTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getGraphTypesRequest* /*request*/, ::octaneapi::ApiInfo_getGraphTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGraphTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getGraphTypesRequest* /*request*/, ::octaneapi::ApiInfo_getGraphTypesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getNodeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getNodeTypes() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getNodeTypesRequest, ::octaneapi::ApiInfo_getNodeTypesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest* request, ::octaneapi::ApiInfo_getNodeTypesResponse* response) { return this->getNodeTypes(context, request, response); }));}
    void SetMessageAllocatorFor_getNodeTypes(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getNodeTypesRequest, ::octaneapi::ApiInfo_getNodeTypesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getNodeTypesRequest, ::octaneapi::ApiInfo_getNodeTypesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getNodeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getNodeTypesRequest* /*request*/, ::octaneapi::ApiInfo_getNodeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getNodeTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getNodeTypesRequest* /*request*/, ::octaneapi::ApiInfo_getNodeTypesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_nodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_nodeInfo() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_nodeInfoRequest, ::octaneapi::ApiInfo_nodeInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest* request, ::octaneapi::ApiInfo_nodeInfoResponse* response) { return this->nodeInfo(context, request, response); }));}
    void SetMessageAllocatorFor_nodeInfo(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_nodeInfoRequest, ::octaneapi::ApiInfo_nodeInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_nodeInfoRequest, ::octaneapi::ApiInfo_nodeInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_nodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodeInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodeInfoRequest* /*request*/, ::octaneapi::ApiInfo_nodeInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* nodeInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_nodeInfoRequest* /*request*/, ::octaneapi::ApiInfo_nodeInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_graphInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_graphInfo() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_graphInfoRequest, ::octaneapi::ApiInfo_graphInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_graphInfoRequest* request, ::octaneapi::ApiInfo_graphInfoResponse* response) { return this->graphInfo(context, request, response); }));}
    void SetMessageAllocatorFor_graphInfo(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_graphInfoRequest, ::octaneapi::ApiInfo_graphInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_graphInfoRequest, ::octaneapi::ApiInfo_graphInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_graphInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status graphInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_graphInfoRequest* /*request*/, ::octaneapi::ApiInfo_graphInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* graphInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_graphInfoRequest* /*request*/, ::octaneapi::ApiInfo_graphInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_nodeIconImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_nodeIconImage() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_nodeIconImageRequest, ::octaneapi::ApiInfo_nodeIconImageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest* request, ::octaneapi::ApiInfo_nodeIconImageResponse* response) { return this->nodeIconImage(context, request, response); }));}
    void SetMessageAllocatorFor_nodeIconImage(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_nodeIconImageRequest, ::octaneapi::ApiInfo_nodeIconImageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_nodeIconImageRequest, ::octaneapi::ApiInfo_nodeIconImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_nodeIconImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodeIconImage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodeIconImageRequest* /*request*/, ::octaneapi::ApiInfo_nodeIconImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* nodeIconImage(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_nodeIconImageRequest* /*request*/, ::octaneapi::ApiInfo_nodeIconImageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_graphIconImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_graphIconImage() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_graphIconImageRequest, ::octaneapi::ApiInfo_graphIconImageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest* request, ::octaneapi::ApiInfo_graphIconImageResponse* response) { return this->graphIconImage(context, request, response); }));}
    void SetMessageAllocatorFor_graphIconImage(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_graphIconImageRequest, ::octaneapi::ApiInfo_graphIconImageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_graphIconImageRequest, ::octaneapi::ApiInfo_graphIconImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_graphIconImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status graphIconImage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_graphIconImageRequest* /*request*/, ::octaneapi::ApiInfo_graphIconImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* graphIconImage(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_graphIconImageRequest* /*request*/, ::octaneapi::ApiInfo_graphIconImageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_attributeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_attributeInfo() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_attributeInfoRequest, ::octaneapi::ApiInfo_attributeInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest* request, ::octaneapi::ApiInfo_attributeInfoResponse* response) { return this->attributeInfo(context, request, response); }));}
    void SetMessageAllocatorFor_attributeInfo(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_attributeInfoRequest, ::octaneapi::ApiInfo_attributeInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_attributeInfoRequest, ::octaneapi::ApiInfo_attributeInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_attributeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfoRequest* /*request*/, ::octaneapi::ApiInfo_attributeInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* attributeInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfoRequest* /*request*/, ::octaneapi::ApiInfo_attributeInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_attributeInfo1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_attributeInfo1() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_attributeInfo1Request, ::octaneapi::ApiInfo_attributeInfo1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request* request, ::octaneapi::ApiInfo_attributeInfo1Response* response) { return this->attributeInfo1(context, request, response); }));}
    void SetMessageAllocatorFor_attributeInfo1(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_attributeInfo1Request, ::octaneapi::ApiInfo_attributeInfo1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_attributeInfo1Request, ::octaneapi::ApiInfo_attributeInfo1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_attributeInfo1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfo1Request* /*request*/, ::octaneapi::ApiInfo_attributeInfo1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* attributeInfo1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfo1Request* /*request*/, ::octaneapi::ApiInfo_attributeInfo1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_attributeInfo2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_attributeInfo2() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_attributeInfo2Request, ::octaneapi::ApiInfo_attributeInfo2Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request* request, ::octaneapi::ApiInfo_attributeInfo2Response* response) { return this->attributeInfo2(context, request, response); }));}
    void SetMessageAllocatorFor_attributeInfo2(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_attributeInfo2Request, ::octaneapi::ApiInfo_attributeInfo2Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_attributeInfo2Request, ::octaneapi::ApiInfo_attributeInfo2Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_attributeInfo2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfo2Request* /*request*/, ::octaneapi::ApiInfo_attributeInfo2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* attributeInfo2(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfo2Request* /*request*/, ::octaneapi::ApiInfo_attributeInfo2Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_nodePinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_nodePinInfo() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_nodePinInfoRequest, ::octaneapi::ApiInfo_nodePinInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest* request, ::octaneapi::ApiInfo_nodePinInfoResponse* response) { return this->nodePinInfo(context, request, response); }));}
    void SetMessageAllocatorFor_nodePinInfo(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_nodePinInfoRequest, ::octaneapi::ApiInfo_nodePinInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_nodePinInfoRequest, ::octaneapi::ApiInfo_nodePinInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_nodePinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodePinInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodePinInfoRequest* /*request*/, ::octaneapi::ApiInfo_nodePinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* nodePinInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_nodePinInfoRequest* /*request*/, ::octaneapi::ApiInfo_nodePinInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getAttributeTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getAttributeTypeName() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getAttributeTypeNameRequest, ::octaneapi::ApiInfo_getAttributeTypeNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* request, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* response) { return this->getAttributeTypeName(context, request, response); }));}
    void SetMessageAllocatorFor_getAttributeTypeName(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getAttributeTypeNameRequest, ::octaneapi::ApiInfo_getAttributeTypeNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getAttributeTypeNameRequest, ::octaneapi::ApiInfo_getAttributeTypeNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getAttributeTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAttributeTypeName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPinTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPinTypeName() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getPinTypeNameRequest, ::octaneapi::ApiInfo_getPinTypeNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest* request, ::octaneapi::ApiInfo_getPinTypeNameResponse* response) { return this->getPinTypeName(context, request, response); }));}
    void SetMessageAllocatorFor_getPinTypeName(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getPinTypeNameRequest, ::octaneapi::ApiInfo_getPinTypeNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getPinTypeNameRequest, ::octaneapi::ApiInfo_getPinTypeNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPinTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPinTypeName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypeNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPinTypeColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPinTypeColor() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getPinTypeColorRequest, ::octaneapi::ApiInfo_getPinTypeColorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest* request, ::octaneapi::ApiInfo_getPinTypeColorResponse* response) { return this->getPinTypeColor(context, request, response); }));}
    void SetMessageAllocatorFor_getPinTypeColor(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getPinTypeColorRequest, ::octaneapi::ApiInfo_getPinTypeColorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getPinTypeColorRequest, ::octaneapi::ApiInfo_getPinTypeColorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPinTypeColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypeColor(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypeColorRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypeColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPinTypeColor(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypeColorRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypeColorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getGraphTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getGraphTypeName() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getGraphTypeNameRequest, ::octaneapi::ApiInfo_getGraphTypeNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* request, ::octaneapi::ApiInfo_getGraphTypeNameResponse* response) { return this->getGraphTypeName(context, request, response); }));}
    void SetMessageAllocatorFor_getGraphTypeName(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getGraphTypeNameRequest, ::octaneapi::ApiInfo_getGraphTypeNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getGraphTypeNameRequest, ::octaneapi::ApiInfo_getGraphTypeNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getGraphTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getGraphTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGraphTypeName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getGraphTypeNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getNodeTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getNodeTypeName() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getNodeTypeNameRequest, ::octaneapi::ApiInfo_getNodeTypeNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* request, ::octaneapi::ApiInfo_getNodeTypeNameResponse* response) { return this->getNodeTypeName(context, request, response); }));}
    void SetMessageAllocatorFor_getNodeTypeName(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getNodeTypeNameRequest, ::octaneapi::ApiInfo_getNodeTypeNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getNodeTypeNameRequest, ::octaneapi::ApiInfo_getNodeTypeNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getNodeTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getNodeTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getNodeTypeName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getNodeTypeNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getItemTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getItemTypeName() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getItemTypeNameRequest, ::octaneapi::ApiInfo_getItemTypeNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest* request, ::octaneapi::ApiInfo_getItemTypeNameResponse* response) { return this->getItemTypeName(context, request, response); }));}
    void SetMessageAllocatorFor_getItemTypeName(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getItemTypeNameRequest, ::octaneapi::ApiInfo_getItemTypeNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getItemTypeNameRequest, ::octaneapi::ApiInfo_getItemTypeNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getItemTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getItemTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getItemTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getItemTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getItemTypeName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getItemTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getItemTypeNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getAttributeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getAttributeName() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getAttributeNameRequest, ::octaneapi::ApiInfo_getAttributeNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest* request, ::octaneapi::ApiInfo_getAttributeNameResponse* response) { return this->getAttributeName(context, request, response); }));}
    void SetMessageAllocatorFor_getAttributeName(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getAttributeNameRequest, ::octaneapi::ApiInfo_getAttributeNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getAttributeNameRequest, ::octaneapi::ApiInfo_getAttributeNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getAttributeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAttributeName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getAttributeId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getAttributeId() {
      ::grpc::Service::MarkMethodCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getAttributeIdRequest, ::octaneapi::ApiInfo_getAttributeIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest* request, ::octaneapi::ApiInfo_getAttributeIdResponse* response) { return this->getAttributeId(context, request, response); }));}
    void SetMessageAllocatorFor_getAttributeId(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getAttributeIdRequest, ::octaneapi::ApiInfo_getAttributeIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getAttributeIdRequest, ::octaneapi::ApiInfo_getAttributeIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getAttributeId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAttributeId(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getAttributeIdName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getAttributeIdName() {
      ::grpc::Service::MarkMethodCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getAttributeIdNameRequest, ::octaneapi::ApiInfo_getAttributeIdNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* request, ::octaneapi::ApiInfo_getAttributeIdNameResponse* response) { return this->getAttributeIdName(context, request, response); }));}
    void SetMessageAllocatorFor_getAttributeIdName(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getAttributeIdNameRequest, ::octaneapi::ApiInfo_getAttributeIdNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getAttributeIdNameRequest, ::octaneapi::ApiInfo_getAttributeIdNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getAttributeIdName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeIdName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeIdNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAttributeIdName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeIdNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getAttributeIdName1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getAttributeIdName1() {
      ::grpc::Service::MarkMethodCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getAttributeIdName1Request, ::octaneapi::ApiInfo_getAttributeIdName1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request* request, ::octaneapi::ApiInfo_getAttributeIdName1Response* response) { return this->getAttributeIdName1(context, request, response); }));}
    void SetMessageAllocatorFor_getAttributeIdName1(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getAttributeIdName1Request, ::octaneapi::ApiInfo_getAttributeIdName1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getAttributeIdName1Request, ::octaneapi::ApiInfo_getAttributeIdName1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getAttributeIdName1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeIdName1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdName1Request* /*request*/, ::octaneapi::ApiInfo_getAttributeIdName1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAttributeIdName1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdName1Request* /*request*/, ::octaneapi::ApiInfo_getAttributeIdName1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPinName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPinName() {
      ::grpc::Service::MarkMethodCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getPinNameRequest, ::octaneapi::ApiInfo_getPinNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getPinNameRequest* request, ::octaneapi::ApiInfo_getPinNameResponse* response) { return this->getPinName(context, request, response); }));}
    void SetMessageAllocatorFor_getPinName(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getPinNameRequest, ::octaneapi::ApiInfo_getPinNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getPinNameRequest, ::octaneapi::ApiInfo_getPinNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPinName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPinName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPinId() {
      ::grpc::Service::MarkMethodCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getPinIdRequest, ::octaneapi::ApiInfo_getPinIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getPinIdRequest* request, ::octaneapi::ApiInfo_getPinIdResponse* response) { return this->getPinId(context, request, response); }));}
    void SetMessageAllocatorFor_getPinId(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getPinIdRequest, ::octaneapi::ApiInfo_getPinIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getPinIdRequest, ::octaneapi::ApiInfo_getPinIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdRequest* /*request*/, ::octaneapi::ApiInfo_getPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPinId(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdRequest* /*request*/, ::octaneapi::ApiInfo_getPinIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPinIdName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPinIdName() {
      ::grpc::Service::MarkMethodCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getPinIdNameRequest, ::octaneapi::ApiInfo_getPinIdNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest* request, ::octaneapi::ApiInfo_getPinIdNameResponse* response) { return this->getPinIdName(context, request, response); }));}
    void SetMessageAllocatorFor_getPinIdName(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getPinIdNameRequest, ::octaneapi::ApiInfo_getPinIdNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getPinIdNameRequest, ::octaneapi::ApiInfo_getPinIdNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPinIdName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinIdName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinIdNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPinIdName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinIdNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPinIdName1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPinIdName1() {
      ::grpc::Service::MarkMethodCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getPinIdName1Request, ::octaneapi::ApiInfo_getPinIdName1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request* request, ::octaneapi::ApiInfo_getPinIdName1Response* response) { return this->getPinIdName1(context, request, response); }));}
    void SetMessageAllocatorFor_getPinIdName1(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getPinIdName1Request, ::octaneapi::ApiInfo_getPinIdName1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(34);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getPinIdName1Request, ::octaneapi::ApiInfo_getPinIdName1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPinIdName1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinIdName1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdName1Request* /*request*/, ::octaneapi::ApiInfo_getPinIdName1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPinIdName1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdName1Request* /*request*/, ::octaneapi::ApiInfo_getPinIdName1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getTextureValueTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getTextureValueTypeName() {
      ::grpc::Service::MarkMethodCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getTextureValueTypeNameRequest, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* response) { return this->getTextureValueTypeName(context, request, response); }));}
    void SetMessageAllocatorFor_getTextureValueTypeName(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getTextureValueTypeNameRequest, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(35);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getTextureValueTypeNameRequest, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getTextureValueTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTextureValueTypeName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getTextureValueTypeForOslType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getTextureValueTypeForOslType() {
      ::grpc::Service::MarkMethodCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* response) { return this->getTextureValueTypeForOslType(context, request, response); }));}
    void SetMessageAllocatorFor_getTextureValueTypeForOslType(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(36);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getTextureValueTypeForOslType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueTypeForOslType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* /*request*/, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTextureValueTypeForOslType(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* /*request*/, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getCompatibleTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getCompatibleTypes() {
      ::grpc::Service::MarkMethodCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getCompatibleTypesRequest, ::octaneapi::ApiInfo_getCompatibleTypesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* request, ::octaneapi::ApiInfo_getCompatibleTypesResponse* response) { return this->getCompatibleTypes(context, request, response); }));}
    void SetMessageAllocatorFor_getCompatibleTypes(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getCompatibleTypesRequest, ::octaneapi::ApiInfo_getCompatibleTypesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(37);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getCompatibleTypesRequest, ::octaneapi::ApiInfo_getCompatibleTypesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getCompatibleTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCompatibleTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* /*request*/, ::octaneapi::ApiInfo_getCompatibleTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCompatibleTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* /*request*/, ::octaneapi::ApiInfo_getCompatibleTypesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_renderPassInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_renderPassInfo() {
      ::grpc::Service::MarkMethodCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_renderPassInfoRequest, ::octaneapi::ApiInfo_renderPassInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest* request, ::octaneapi::ApiInfo_renderPassInfoResponse* response) { return this->renderPassInfo(context, request, response); }));}
    void SetMessageAllocatorFor_renderPassInfo(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_renderPassInfoRequest, ::octaneapi::ApiInfo_renderPassInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(38);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_renderPassInfoRequest, ::octaneapi::ApiInfo_renderPassInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_renderPassInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassInfoRequest* /*request*/, ::octaneapi::ApiInfo_renderPassInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* renderPassInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassInfoRequest* /*request*/, ::octaneapi::ApiInfo_renderPassInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getAllRenderPassIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getAllRenderPassIds() {
      ::grpc::Service::MarkMethodCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getAllRenderPassIdsRequest, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* request, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* response) { return this->getAllRenderPassIds(context, request, response); }));}
    void SetMessageAllocatorFor_getAllRenderPassIds(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getAllRenderPassIdsRequest, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(39);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getAllRenderPassIdsRequest, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getAllRenderPassIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllRenderPassIds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* /*request*/, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAllRenderPassIds(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* /*request*/, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getRenderPassIdFromRenderAovNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getRenderPassIdFromRenderAovNode() {
      ::grpc::Service::MarkMethodCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* response) { return this->getRenderPassIdFromRenderAovNode(context, request, response); }));}
    void SetMessageAllocatorFor_getRenderPassIdFromRenderAovNode(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(40);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getRenderPassIdFromRenderAovNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRenderPassIdFromRenderAovNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* /*request*/, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getRenderPassIdFromRenderAovNode(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* /*request*/, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getRenderAovInfoFromRenderAovNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getRenderAovInfoFromRenderAovNode() {
      ::grpc::Service::MarkMethodCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* response) { return this->getRenderAovInfoFromRenderAovNode(context, request, response); }));}
    void SetMessageAllocatorFor_getRenderAovInfoFromRenderAovNode(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(41);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getRenderAovInfoFromRenderAovNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRenderAovInfoFromRenderAovNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* /*request*/, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getRenderAovInfoFromRenderAovNode(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* /*request*/, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_renderPassName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_renderPassName() {
      ::grpc::Service::MarkMethodCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_renderPassNameRequest, ::octaneapi::ApiInfo_renderPassNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest* request, ::octaneapi::ApiInfo_renderPassNameResponse* response) { return this->renderPassName(context, request, response); }));}
    void SetMessageAllocatorFor_renderPassName(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_renderPassNameRequest, ::octaneapi::ApiInfo_renderPassNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(42);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_renderPassNameRequest, ::octaneapi::ApiInfo_renderPassNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_renderPassName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* renderPassName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_renderPassShortName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_renderPassShortName() {
      ::grpc::Service::MarkMethodCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_renderPassShortNameRequest, ::octaneapi::ApiInfo_renderPassShortNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest* request, ::octaneapi::ApiInfo_renderPassShortNameResponse* response) { return this->renderPassShortName(context, request, response); }));}
    void SetMessageAllocatorFor_renderPassShortName(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_renderPassShortNameRequest, ::octaneapi::ApiInfo_renderPassShortNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(43);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_renderPassShortNameRequest, ::octaneapi::ApiInfo_renderPassShortNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_renderPassShortName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassShortName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassShortNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassShortNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* renderPassShortName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassShortNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassShortNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_renderPassIdToPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_renderPassIdToPinId() {
      ::grpc::Service::MarkMethodCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_renderPassIdToPinIdRequest, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* request, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* response) { return this->renderPassIdToPinId(context, request, response); }));}
    void SetMessageAllocatorFor_renderPassIdToPinId(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_renderPassIdToPinIdRequest, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(44);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_renderPassIdToPinIdRequest, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_renderPassIdToPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassIdToPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* /*request*/, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* renderPassIdToPinId(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* /*request*/, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_renderPassGroupName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_renderPassGroupName() {
      ::grpc::Service::MarkMethodCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_renderPassGroupNameRequest, ::octaneapi::ApiInfo_renderPassGroupNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* request, ::octaneapi::ApiInfo_renderPassGroupNameResponse* response) { return this->renderPassGroupName(context, request, response); }));}
    void SetMessageAllocatorFor_renderPassGroupName(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_renderPassGroupNameRequest, ::octaneapi::ApiInfo_renderPassGroupNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(45);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_renderPassGroupNameRequest, ::octaneapi::ApiInfo_renderPassGroupNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_renderPassGroupName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassGroupName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassGroupNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* renderPassGroupName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassGroupNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_pinIdToRenderPassId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_pinIdToRenderPassId() {
      ::grpc::Service::MarkMethodCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* request, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* response) { return this->pinIdToRenderPassId(context, request, response); }));}
    void SetMessageAllocatorFor_pinIdToRenderPassId(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(46);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_pinIdToRenderPassId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pinIdToRenderPassId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* /*request*/, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* pinIdToRenderPassId(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* /*request*/, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_findPinIdForRenderPassId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_findPinIdForRenderPassId() {
      ::grpc::Service::MarkMethodCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* request, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* response) { return this->findPinIdForRenderPassId(context, request, response); }));}
    void SetMessageAllocatorFor_findPinIdForRenderPassId(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(47);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_findPinIdForRenderPassId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findPinIdForRenderPassId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* /*request*/, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* findPinIdForRenderPassId(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* /*request*/, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_findRenderPassIdForPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_findRenderPassIdForPinId() {
      ::grpc::Service::MarkMethodCallback(48,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* request, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* response) { return this->findRenderPassIdForPinId(context, request, response); }));}
    void SetMessageAllocatorFor_findRenderPassIdForPinId(
        ::grpc::MessageAllocator< ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(48);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_findRenderPassIdForPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findRenderPassIdForPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* /*request*/, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* findRenderPassIdForPinId(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* /*request*/, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_octaneVersion<WithCallbackMethod_octaneName<WithCallbackMethod_isDemoVersion<WithCallbackMethod_isSubscriptionVersion<WithCallbackMethod_tierIdx<WithCallbackMethod_osVersionInfo<WithCallbackMethod_driverVersionInfo<WithCallbackMethod_cpuInfo<WithCallbackMethod_texCacheFolder<WithCallbackMethod_getAttributeTypes<WithCallbackMethod_getPinTypes<WithCallbackMethod_getGraphTypes<WithCallbackMethod_getNodeTypes<WithCallbackMethod_nodeInfo<WithCallbackMethod_graphInfo<WithCallbackMethod_nodeIconImage<WithCallbackMethod_graphIconImage<WithCallbackMethod_attributeInfo<WithCallbackMethod_attributeInfo1<WithCallbackMethod_attributeInfo2<WithCallbackMethod_nodePinInfo<WithCallbackMethod_getAttributeTypeName<WithCallbackMethod_getPinTypeName<WithCallbackMethod_getPinTypeColor<WithCallbackMethod_getGraphTypeName<WithCallbackMethod_getNodeTypeName<WithCallbackMethod_getItemTypeName<WithCallbackMethod_getAttributeName<WithCallbackMethod_getAttributeId<WithCallbackMethod_getAttributeIdName<WithCallbackMethod_getAttributeIdName1<WithCallbackMethod_getPinName<WithCallbackMethod_getPinId<WithCallbackMethod_getPinIdName<WithCallbackMethod_getPinIdName1<WithCallbackMethod_getTextureValueTypeName<WithCallbackMethod_getTextureValueTypeForOslType<WithCallbackMethod_getCompatibleTypes<WithCallbackMethod_renderPassInfo<WithCallbackMethod_getAllRenderPassIds<WithCallbackMethod_getRenderPassIdFromRenderAovNode<WithCallbackMethod_getRenderAovInfoFromRenderAovNode<WithCallbackMethod_renderPassName<WithCallbackMethod_renderPassShortName<WithCallbackMethod_renderPassIdToPinId<WithCallbackMethod_renderPassGroupName<WithCallbackMethod_pinIdToRenderPassId<WithCallbackMethod_findPinIdForRenderPassId<WithCallbackMethod_findRenderPassIdForPinId<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_octaneVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_octaneVersion() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_octaneVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status octaneVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_octaneVersionRequest* /*request*/, ::octaneapi::ApiInfo_octaneVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_octaneName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_octaneName() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_octaneName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status octaneName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_octaneNameRequest* /*request*/, ::octaneapi::ApiInfo_octaneNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isDemoVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isDemoVersion() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_isDemoVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isDemoVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_isDemoVersionRequest* /*request*/, ::octaneapi::ApiInfo_isDemoVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isSubscriptionVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isSubscriptionVersion() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_isSubscriptionVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSubscriptionVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* /*request*/, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_tierIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_tierIdx() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_tierIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status tierIdx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_tierIdxRequest* /*request*/, ::octaneapi::ApiInfo_tierIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_osVersionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_osVersionInfo() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_osVersionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status osVersionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_osVersionInfoRequest* /*request*/, ::octaneapi::ApiInfo_osVersionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_driverVersionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_driverVersionInfo() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_driverVersionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status driverVersionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_driverVersionInfoRequest* /*request*/, ::octaneapi::ApiInfo_driverVersionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_cpuInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_cpuInfo() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_cpuInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cpuInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_cpuInfoRequest* /*request*/, ::octaneapi::ApiInfo_cpuInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_texCacheFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_texCacheFolder() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_texCacheFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status texCacheFolder(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_texCacheFolderRequest* /*request*/, ::octaneapi::ApiInfo_texCacheFolderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAttributeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAttributeTypes() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getAttributeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeTypesRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPinTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPinTypes() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_getPinTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypesRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGraphTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getGraphTypes() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_getGraphTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getGraphTypesRequest* /*request*/, ::octaneapi::ApiInfo_getGraphTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getNodeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getNodeTypes() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_getNodeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getNodeTypesRequest* /*request*/, ::octaneapi::ApiInfo_getNodeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_nodeInfo() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_nodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodeInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodeInfoRequest* /*request*/, ::octaneapi::ApiInfo_nodeInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_graphInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_graphInfo() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_graphInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status graphInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_graphInfoRequest* /*request*/, ::octaneapi::ApiInfo_graphInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nodeIconImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_nodeIconImage() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_nodeIconImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodeIconImage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodeIconImageRequest* /*request*/, ::octaneapi::ApiInfo_nodeIconImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_graphIconImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_graphIconImage() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_graphIconImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status graphIconImage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_graphIconImageRequest* /*request*/, ::octaneapi::ApiInfo_graphIconImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_attributeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_attributeInfo() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_attributeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfoRequest* /*request*/, ::octaneapi::ApiInfo_attributeInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_attributeInfo1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_attributeInfo1() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_attributeInfo1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfo1Request* /*request*/, ::octaneapi::ApiInfo_attributeInfo1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_attributeInfo2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_attributeInfo2() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_attributeInfo2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfo2Request* /*request*/, ::octaneapi::ApiInfo_attributeInfo2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nodePinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_nodePinInfo() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_nodePinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodePinInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodePinInfoRequest* /*request*/, ::octaneapi::ApiInfo_nodePinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAttributeTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAttributeTypeName() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_getAttributeTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPinTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPinTypeName() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_getPinTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPinTypeColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPinTypeColor() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_getPinTypeColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypeColor(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypeColorRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypeColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGraphTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getGraphTypeName() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_getGraphTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getGraphTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getNodeTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getNodeTypeName() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_getNodeTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getNodeTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getItemTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getItemTypeName() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_getItemTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getItemTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getItemTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getItemTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAttributeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAttributeName() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_getAttributeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAttributeId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAttributeId() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_getAttributeId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAttributeIdName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAttributeIdName() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_getAttributeIdName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeIdName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeIdNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAttributeIdName1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAttributeIdName1() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_getAttributeIdName1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeIdName1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdName1Request* /*request*/, ::octaneapi::ApiInfo_getAttributeIdName1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPinName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPinName() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_getPinName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPinId() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_getPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdRequest* /*request*/, ::octaneapi::ApiInfo_getPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPinIdName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPinIdName() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_getPinIdName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinIdName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinIdNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPinIdName1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPinIdName1() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_getPinIdName1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinIdName1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdName1Request* /*request*/, ::octaneapi::ApiInfo_getPinIdName1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getTextureValueTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getTextureValueTypeName() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_getTextureValueTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getTextureValueTypeForOslType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getTextureValueTypeForOslType() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_getTextureValueTypeForOslType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueTypeForOslType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* /*request*/, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCompatibleTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getCompatibleTypes() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_getCompatibleTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCompatibleTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* /*request*/, ::octaneapi::ApiInfo_getCompatibleTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_renderPassInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_renderPassInfo() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_renderPassInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassInfoRequest* /*request*/, ::octaneapi::ApiInfo_renderPassInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAllRenderPassIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAllRenderPassIds() {
      ::grpc::Service::MarkMethodGeneric(39);
    }
    ~WithGenericMethod_getAllRenderPassIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllRenderPassIds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* /*request*/, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getRenderPassIdFromRenderAovNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getRenderPassIdFromRenderAovNode() {
      ::grpc::Service::MarkMethodGeneric(40);
    }
    ~WithGenericMethod_getRenderPassIdFromRenderAovNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRenderPassIdFromRenderAovNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* /*request*/, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getRenderAovInfoFromRenderAovNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getRenderAovInfoFromRenderAovNode() {
      ::grpc::Service::MarkMethodGeneric(41);
    }
    ~WithGenericMethod_getRenderAovInfoFromRenderAovNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRenderAovInfoFromRenderAovNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* /*request*/, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_renderPassName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_renderPassName() {
      ::grpc::Service::MarkMethodGeneric(42);
    }
    ~WithGenericMethod_renderPassName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_renderPassShortName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_renderPassShortName() {
      ::grpc::Service::MarkMethodGeneric(43);
    }
    ~WithGenericMethod_renderPassShortName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassShortName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassShortNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassShortNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_renderPassIdToPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_renderPassIdToPinId() {
      ::grpc::Service::MarkMethodGeneric(44);
    }
    ~WithGenericMethod_renderPassIdToPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassIdToPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* /*request*/, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_renderPassGroupName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_renderPassGroupName() {
      ::grpc::Service::MarkMethodGeneric(45);
    }
    ~WithGenericMethod_renderPassGroupName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassGroupName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassGroupNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_pinIdToRenderPassId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_pinIdToRenderPassId() {
      ::grpc::Service::MarkMethodGeneric(46);
    }
    ~WithGenericMethod_pinIdToRenderPassId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pinIdToRenderPassId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* /*request*/, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_findPinIdForRenderPassId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_findPinIdForRenderPassId() {
      ::grpc::Service::MarkMethodGeneric(47);
    }
    ~WithGenericMethod_findPinIdForRenderPassId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findPinIdForRenderPassId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* /*request*/, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_findRenderPassIdForPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_findRenderPassIdForPinId() {
      ::grpc::Service::MarkMethodGeneric(48);
    }
    ~WithGenericMethod_findRenderPassIdForPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findRenderPassIdForPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* /*request*/, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_octaneVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_octaneVersion() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_octaneVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status octaneVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_octaneVersionRequest* /*request*/, ::octaneapi::ApiInfo_octaneVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestoctaneVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_octaneName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_octaneName() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_octaneName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status octaneName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_octaneNameRequest* /*request*/, ::octaneapi::ApiInfo_octaneNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestoctaneName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isDemoVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isDemoVersion() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_isDemoVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isDemoVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_isDemoVersionRequest* /*request*/, ::octaneapi::ApiInfo_isDemoVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisDemoVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isSubscriptionVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isSubscriptionVersion() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_isSubscriptionVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSubscriptionVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* /*request*/, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisSubscriptionVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_tierIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_tierIdx() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_tierIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status tierIdx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_tierIdxRequest* /*request*/, ::octaneapi::ApiInfo_tierIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesttierIdx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_osVersionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_osVersionInfo() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_osVersionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status osVersionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_osVersionInfoRequest* /*request*/, ::octaneapi::ApiInfo_osVersionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestosVersionInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_driverVersionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_driverVersionInfo() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_driverVersionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status driverVersionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_driverVersionInfoRequest* /*request*/, ::octaneapi::ApiInfo_driverVersionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdriverVersionInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_cpuInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_cpuInfo() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_cpuInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cpuInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_cpuInfoRequest* /*request*/, ::octaneapi::ApiInfo_cpuInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcpuInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_texCacheFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_texCacheFolder() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_texCacheFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status texCacheFolder(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_texCacheFolderRequest* /*request*/, ::octaneapi::ApiInfo_texCacheFolderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesttexCacheFolder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAttributeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAttributeTypes() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getAttributeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeTypesRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAttributeTypes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPinTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPinTypes() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_getPinTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypesRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPinTypes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGraphTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getGraphTypes() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_getGraphTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getGraphTypesRequest* /*request*/, ::octaneapi::ApiInfo_getGraphTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGraphTypes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNodeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getNodeTypes() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_getNodeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getNodeTypesRequest* /*request*/, ::octaneapi::ApiInfo_getNodeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNodeTypes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_nodeInfo() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_nodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodeInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodeInfoRequest* /*request*/, ::octaneapi::ApiInfo_nodeInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnodeInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_graphInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_graphInfo() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_graphInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status graphInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_graphInfoRequest* /*request*/, ::octaneapi::ApiInfo_graphInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgraphInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nodeIconImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_nodeIconImage() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_nodeIconImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodeIconImage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodeIconImageRequest* /*request*/, ::octaneapi::ApiInfo_nodeIconImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnodeIconImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_graphIconImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_graphIconImage() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_graphIconImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status graphIconImage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_graphIconImageRequest* /*request*/, ::octaneapi::ApiInfo_graphIconImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgraphIconImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_attributeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_attributeInfo() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_attributeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfoRequest* /*request*/, ::octaneapi::ApiInfo_attributeInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestattributeInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_attributeInfo1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_attributeInfo1() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_attributeInfo1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfo1Request* /*request*/, ::octaneapi::ApiInfo_attributeInfo1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestattributeInfo1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_attributeInfo2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_attributeInfo2() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_attributeInfo2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfo2Request* /*request*/, ::octaneapi::ApiInfo_attributeInfo2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestattributeInfo2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nodePinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_nodePinInfo() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_nodePinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodePinInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodePinInfoRequest* /*request*/, ::octaneapi::ApiInfo_nodePinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnodePinInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAttributeTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAttributeTypeName() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_getAttributeTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAttributeTypeName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPinTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPinTypeName() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_getPinTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPinTypeName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPinTypeColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPinTypeColor() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_getPinTypeColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypeColor(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypeColorRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypeColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPinTypeColor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGraphTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getGraphTypeName() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_getGraphTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getGraphTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGraphTypeName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNodeTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getNodeTypeName() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_getNodeTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getNodeTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNodeTypeName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getItemTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getItemTypeName() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_getItemTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getItemTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getItemTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getItemTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetItemTypeName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAttributeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAttributeName() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_getAttributeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAttributeName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAttributeId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAttributeId() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_getAttributeId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAttributeId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAttributeIdName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAttributeIdName() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_getAttributeIdName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeIdName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeIdNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAttributeIdName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAttributeIdName1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAttributeIdName1() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_getAttributeIdName1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeIdName1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdName1Request* /*request*/, ::octaneapi::ApiInfo_getAttributeIdName1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAttributeIdName1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPinName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPinName() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_getPinName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPinName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPinId() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_getPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdRequest* /*request*/, ::octaneapi::ApiInfo_getPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPinId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPinIdName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPinIdName() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_getPinIdName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinIdName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinIdNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPinIdName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPinIdName1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPinIdName1() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_getPinIdName1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinIdName1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdName1Request* /*request*/, ::octaneapi::ApiInfo_getPinIdName1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPinIdName1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getTextureValueTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getTextureValueTypeName() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_getTextureValueTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTextureValueTypeName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getTextureValueTypeForOslType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getTextureValueTypeForOslType() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_getTextureValueTypeForOslType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueTypeForOslType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* /*request*/, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTextureValueTypeForOslType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCompatibleTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getCompatibleTypes() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_getCompatibleTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCompatibleTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* /*request*/, ::octaneapi::ApiInfo_getCompatibleTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCompatibleTypes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_renderPassInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_renderPassInfo() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_renderPassInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassInfoRequest* /*request*/, ::octaneapi::ApiInfo_renderPassInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrenderPassInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAllRenderPassIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAllRenderPassIds() {
      ::grpc::Service::MarkMethodRaw(39);
    }
    ~WithRawMethod_getAllRenderPassIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllRenderPassIds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* /*request*/, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllRenderPassIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getRenderPassIdFromRenderAovNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getRenderPassIdFromRenderAovNode() {
      ::grpc::Service::MarkMethodRaw(40);
    }
    ~WithRawMethod_getRenderPassIdFromRenderAovNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRenderPassIdFromRenderAovNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* /*request*/, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRenderPassIdFromRenderAovNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getRenderAovInfoFromRenderAovNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getRenderAovInfoFromRenderAovNode() {
      ::grpc::Service::MarkMethodRaw(41);
    }
    ~WithRawMethod_getRenderAovInfoFromRenderAovNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRenderAovInfoFromRenderAovNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* /*request*/, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRenderAovInfoFromRenderAovNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_renderPassName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_renderPassName() {
      ::grpc::Service::MarkMethodRaw(42);
    }
    ~WithRawMethod_renderPassName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrenderPassName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_renderPassShortName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_renderPassShortName() {
      ::grpc::Service::MarkMethodRaw(43);
    }
    ~WithRawMethod_renderPassShortName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassShortName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassShortNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassShortNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrenderPassShortName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_renderPassIdToPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_renderPassIdToPinId() {
      ::grpc::Service::MarkMethodRaw(44);
    }
    ~WithRawMethod_renderPassIdToPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassIdToPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* /*request*/, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrenderPassIdToPinId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_renderPassGroupName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_renderPassGroupName() {
      ::grpc::Service::MarkMethodRaw(45);
    }
    ~WithRawMethod_renderPassGroupName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassGroupName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassGroupNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrenderPassGroupName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_pinIdToRenderPassId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_pinIdToRenderPassId() {
      ::grpc::Service::MarkMethodRaw(46);
    }
    ~WithRawMethod_pinIdToRenderPassId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pinIdToRenderPassId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* /*request*/, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpinIdToRenderPassId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_findPinIdForRenderPassId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_findPinIdForRenderPassId() {
      ::grpc::Service::MarkMethodRaw(47);
    }
    ~WithRawMethod_findPinIdForRenderPassId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findPinIdForRenderPassId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* /*request*/, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfindPinIdForRenderPassId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_findRenderPassIdForPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_findRenderPassIdForPinId() {
      ::grpc::Service::MarkMethodRaw(48);
    }
    ~WithRawMethod_findRenderPassIdForPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findRenderPassIdForPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* /*request*/, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfindRenderPassIdForPinId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_octaneVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_octaneVersion() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->octaneVersion(context, request, response); }));
    }
    ~WithRawCallbackMethod_octaneVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status octaneVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_octaneVersionRequest* /*request*/, ::octaneapi::ApiInfo_octaneVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* octaneVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_octaneName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_octaneName() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->octaneName(context, request, response); }));
    }
    ~WithRawCallbackMethod_octaneName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status octaneName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_octaneNameRequest* /*request*/, ::octaneapi::ApiInfo_octaneNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* octaneName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isDemoVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isDemoVersion() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isDemoVersion(context, request, response); }));
    }
    ~WithRawCallbackMethod_isDemoVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isDemoVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_isDemoVersionRequest* /*request*/, ::octaneapi::ApiInfo_isDemoVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isDemoVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isSubscriptionVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isSubscriptionVersion() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isSubscriptionVersion(context, request, response); }));
    }
    ~WithRawCallbackMethod_isSubscriptionVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSubscriptionVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* /*request*/, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isSubscriptionVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_tierIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_tierIdx() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->tierIdx(context, request, response); }));
    }
    ~WithRawCallbackMethod_tierIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status tierIdx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_tierIdxRequest* /*request*/, ::octaneapi::ApiInfo_tierIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* tierIdx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_osVersionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_osVersionInfo() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->osVersionInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_osVersionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status osVersionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_osVersionInfoRequest* /*request*/, ::octaneapi::ApiInfo_osVersionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* osVersionInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_driverVersionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_driverVersionInfo() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->driverVersionInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_driverVersionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status driverVersionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_driverVersionInfoRequest* /*request*/, ::octaneapi::ApiInfo_driverVersionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* driverVersionInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_cpuInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_cpuInfo() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->cpuInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_cpuInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cpuInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_cpuInfoRequest* /*request*/, ::octaneapi::ApiInfo_cpuInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* cpuInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_texCacheFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_texCacheFolder() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->texCacheFolder(context, request, response); }));
    }
    ~WithRawCallbackMethod_texCacheFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status texCacheFolder(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_texCacheFolderRequest* /*request*/, ::octaneapi::ApiInfo_texCacheFolderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* texCacheFolder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getAttributeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getAttributeTypes() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAttributeTypes(context, request, response); }));
    }
    ~WithRawCallbackMethod_getAttributeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeTypesRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAttributeTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPinTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPinTypes() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPinTypes(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPinTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypesRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPinTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getGraphTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getGraphTypes() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getGraphTypes(context, request, response); }));
    }
    ~WithRawCallbackMethod_getGraphTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getGraphTypesRequest* /*request*/, ::octaneapi::ApiInfo_getGraphTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGraphTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getNodeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getNodeTypes() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getNodeTypes(context, request, response); }));
    }
    ~WithRawCallbackMethod_getNodeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getNodeTypesRequest* /*request*/, ::octaneapi::ApiInfo_getNodeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getNodeTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_nodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_nodeInfo() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->nodeInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_nodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodeInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodeInfoRequest* /*request*/, ::octaneapi::ApiInfo_nodeInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* nodeInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_graphInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_graphInfo() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->graphInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_graphInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status graphInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_graphInfoRequest* /*request*/, ::octaneapi::ApiInfo_graphInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* graphInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_nodeIconImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_nodeIconImage() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->nodeIconImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_nodeIconImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodeIconImage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodeIconImageRequest* /*request*/, ::octaneapi::ApiInfo_nodeIconImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* nodeIconImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_graphIconImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_graphIconImage() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->graphIconImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_graphIconImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status graphIconImage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_graphIconImageRequest* /*request*/, ::octaneapi::ApiInfo_graphIconImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* graphIconImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_attributeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_attributeInfo() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->attributeInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_attributeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfoRequest* /*request*/, ::octaneapi::ApiInfo_attributeInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* attributeInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_attributeInfo1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_attributeInfo1() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->attributeInfo1(context, request, response); }));
    }
    ~WithRawCallbackMethod_attributeInfo1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfo1Request* /*request*/, ::octaneapi::ApiInfo_attributeInfo1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* attributeInfo1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_attributeInfo2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_attributeInfo2() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->attributeInfo2(context, request, response); }));
    }
    ~WithRawCallbackMethod_attributeInfo2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status attributeInfo2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfo2Request* /*request*/, ::octaneapi::ApiInfo_attributeInfo2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* attributeInfo2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_nodePinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_nodePinInfo() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->nodePinInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_nodePinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nodePinInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodePinInfoRequest* /*request*/, ::octaneapi::ApiInfo_nodePinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* nodePinInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getAttributeTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getAttributeTypeName() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAttributeTypeName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getAttributeTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAttributeTypeName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPinTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPinTypeName() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPinTypeName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPinTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPinTypeName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPinTypeColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPinTypeColor() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPinTypeColor(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPinTypeColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinTypeColor(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypeColorRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypeColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPinTypeColor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getGraphTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getGraphTypeName() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getGraphTypeName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getGraphTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getGraphTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGraphTypeName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getNodeTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getNodeTypeName() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getNodeTypeName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getNodeTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getNodeTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getNodeTypeName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getItemTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getItemTypeName() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getItemTypeName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getItemTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getItemTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getItemTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getItemTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getItemTypeName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getAttributeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getAttributeName() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAttributeName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getAttributeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAttributeName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getAttributeId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getAttributeId() {
      ::grpc::Service::MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAttributeId(context, request, response); }));
    }
    ~WithRawCallbackMethod_getAttributeId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAttributeId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getAttributeIdName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getAttributeIdName() {
      ::grpc::Service::MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAttributeIdName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getAttributeIdName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeIdName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeIdNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAttributeIdName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getAttributeIdName1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getAttributeIdName1() {
      ::grpc::Service::MarkMethodRawCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAttributeIdName1(context, request, response); }));
    }
    ~WithRawCallbackMethod_getAttributeIdName1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAttributeIdName1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdName1Request* /*request*/, ::octaneapi::ApiInfo_getAttributeIdName1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAttributeIdName1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPinName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPinName() {
      ::grpc::Service::MarkMethodRawCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPinName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPinName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPinName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPinId() {
      ::grpc::Service::MarkMethodRawCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPinId(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdRequest* /*request*/, ::octaneapi::ApiInfo_getPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPinId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPinIdName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPinIdName() {
      ::grpc::Service::MarkMethodRawCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPinIdName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPinIdName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinIdName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinIdNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPinIdName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPinIdName1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPinIdName1() {
      ::grpc::Service::MarkMethodRawCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPinIdName1(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPinIdName1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPinIdName1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdName1Request* /*request*/, ::octaneapi::ApiInfo_getPinIdName1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPinIdName1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getTextureValueTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getTextureValueTypeName() {
      ::grpc::Service::MarkMethodRawCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getTextureValueTypeName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getTextureValueTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTextureValueTypeName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getTextureValueTypeForOslType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getTextureValueTypeForOslType() {
      ::grpc::Service::MarkMethodRawCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getTextureValueTypeForOslType(context, request, response); }));
    }
    ~WithRawCallbackMethod_getTextureValueTypeForOslType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueTypeForOslType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* /*request*/, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTextureValueTypeForOslType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getCompatibleTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getCompatibleTypes() {
      ::grpc::Service::MarkMethodRawCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getCompatibleTypes(context, request, response); }));
    }
    ~WithRawCallbackMethod_getCompatibleTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCompatibleTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* /*request*/, ::octaneapi::ApiInfo_getCompatibleTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCompatibleTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_renderPassInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_renderPassInfo() {
      ::grpc::Service::MarkMethodRawCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->renderPassInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_renderPassInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassInfoRequest* /*request*/, ::octaneapi::ApiInfo_renderPassInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* renderPassInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getAllRenderPassIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getAllRenderPassIds() {
      ::grpc::Service::MarkMethodRawCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAllRenderPassIds(context, request, response); }));
    }
    ~WithRawCallbackMethod_getAllRenderPassIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllRenderPassIds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* /*request*/, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAllRenderPassIds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getRenderPassIdFromRenderAovNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getRenderPassIdFromRenderAovNode() {
      ::grpc::Service::MarkMethodRawCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getRenderPassIdFromRenderAovNode(context, request, response); }));
    }
    ~WithRawCallbackMethod_getRenderPassIdFromRenderAovNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRenderPassIdFromRenderAovNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* /*request*/, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getRenderPassIdFromRenderAovNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getRenderAovInfoFromRenderAovNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getRenderAovInfoFromRenderAovNode() {
      ::grpc::Service::MarkMethodRawCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getRenderAovInfoFromRenderAovNode(context, request, response); }));
    }
    ~WithRawCallbackMethod_getRenderAovInfoFromRenderAovNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRenderAovInfoFromRenderAovNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* /*request*/, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getRenderAovInfoFromRenderAovNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_renderPassName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_renderPassName() {
      ::grpc::Service::MarkMethodRawCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->renderPassName(context, request, response); }));
    }
    ~WithRawCallbackMethod_renderPassName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* renderPassName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_renderPassShortName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_renderPassShortName() {
      ::grpc::Service::MarkMethodRawCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->renderPassShortName(context, request, response); }));
    }
    ~WithRawCallbackMethod_renderPassShortName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassShortName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassShortNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassShortNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* renderPassShortName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_renderPassIdToPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_renderPassIdToPinId() {
      ::grpc::Service::MarkMethodRawCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->renderPassIdToPinId(context, request, response); }));
    }
    ~WithRawCallbackMethod_renderPassIdToPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassIdToPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* /*request*/, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* renderPassIdToPinId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_renderPassGroupName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_renderPassGroupName() {
      ::grpc::Service::MarkMethodRawCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->renderPassGroupName(context, request, response); }));
    }
    ~WithRawCallbackMethod_renderPassGroupName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status renderPassGroupName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassGroupNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* renderPassGroupName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_pinIdToRenderPassId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_pinIdToRenderPassId() {
      ::grpc::Service::MarkMethodRawCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->pinIdToRenderPassId(context, request, response); }));
    }
    ~WithRawCallbackMethod_pinIdToRenderPassId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pinIdToRenderPassId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* /*request*/, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* pinIdToRenderPassId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_findPinIdForRenderPassId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_findPinIdForRenderPassId() {
      ::grpc::Service::MarkMethodRawCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->findPinIdForRenderPassId(context, request, response); }));
    }
    ~WithRawCallbackMethod_findPinIdForRenderPassId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findPinIdForRenderPassId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* /*request*/, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* findPinIdForRenderPassId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_findRenderPassIdForPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_findRenderPassIdForPinId() {
      ::grpc::Service::MarkMethodRawCallback(48,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->findRenderPassIdForPinId(context, request, response); }));
    }
    ~WithRawCallbackMethod_findRenderPassIdForPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findRenderPassIdForPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* /*request*/, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* findRenderPassIdForPinId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_octaneVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_octaneVersion() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_octaneVersionRequest, ::octaneapi::ApiInfo_octaneVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_octaneVersionRequest, ::octaneapi::ApiInfo_octaneVersionResponse>* streamer) {
                       return this->StreamedoctaneVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_octaneVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status octaneVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_octaneVersionRequest* /*request*/, ::octaneapi::ApiInfo_octaneVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedoctaneVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_octaneVersionRequest,::octaneapi::ApiInfo_octaneVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_octaneName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_octaneName() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_octaneNameRequest, ::octaneapi::ApiInfo_octaneNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_octaneNameRequest, ::octaneapi::ApiInfo_octaneNameResponse>* streamer) {
                       return this->StreamedoctaneName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_octaneName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status octaneName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_octaneNameRequest* /*request*/, ::octaneapi::ApiInfo_octaneNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedoctaneName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_octaneNameRequest,::octaneapi::ApiInfo_octaneNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isDemoVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isDemoVersion() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_isDemoVersionRequest, ::octaneapi::ApiInfo_isDemoVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_isDemoVersionRequest, ::octaneapi::ApiInfo_isDemoVersionResponse>* streamer) {
                       return this->StreamedisDemoVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isDemoVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isDemoVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_isDemoVersionRequest* /*request*/, ::octaneapi::ApiInfo_isDemoVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisDemoVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_isDemoVersionRequest,::octaneapi::ApiInfo_isDemoVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isSubscriptionVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isSubscriptionVersion() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_isSubscriptionVersionRequest, ::octaneapi::ApiInfo_isSubscriptionVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_isSubscriptionVersionRequest, ::octaneapi::ApiInfo_isSubscriptionVersionResponse>* streamer) {
                       return this->StreamedisSubscriptionVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isSubscriptionVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isSubscriptionVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* /*request*/, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisSubscriptionVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_isSubscriptionVersionRequest,::octaneapi::ApiInfo_isSubscriptionVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_tierIdx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_tierIdx() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_tierIdxRequest, ::octaneapi::ApiInfo_tierIdxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_tierIdxRequest, ::octaneapi::ApiInfo_tierIdxResponse>* streamer) {
                       return this->StreamedtierIdx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_tierIdx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status tierIdx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_tierIdxRequest* /*request*/, ::octaneapi::ApiInfo_tierIdxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedtierIdx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_tierIdxRequest,::octaneapi::ApiInfo_tierIdxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_osVersionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_osVersionInfo() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_osVersionInfoRequest, ::octaneapi::ApiInfo_osVersionInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_osVersionInfoRequest, ::octaneapi::ApiInfo_osVersionInfoResponse>* streamer) {
                       return this->StreamedosVersionInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_osVersionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status osVersionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_osVersionInfoRequest* /*request*/, ::octaneapi::ApiInfo_osVersionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedosVersionInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_osVersionInfoRequest,::octaneapi::ApiInfo_osVersionInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_driverVersionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_driverVersionInfo() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_driverVersionInfoRequest, ::octaneapi::ApiInfo_driverVersionInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_driverVersionInfoRequest, ::octaneapi::ApiInfo_driverVersionInfoResponse>* streamer) {
                       return this->StreameddriverVersionInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_driverVersionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status driverVersionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_driverVersionInfoRequest* /*request*/, ::octaneapi::ApiInfo_driverVersionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddriverVersionInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_driverVersionInfoRequest,::octaneapi::ApiInfo_driverVersionInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_cpuInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_cpuInfo() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_cpuInfoRequest, ::octaneapi::ApiInfo_cpuInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_cpuInfoRequest, ::octaneapi::ApiInfo_cpuInfoResponse>* streamer) {
                       return this->StreamedcpuInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_cpuInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status cpuInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_cpuInfoRequest* /*request*/, ::octaneapi::ApiInfo_cpuInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcpuInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_cpuInfoRequest,::octaneapi::ApiInfo_cpuInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_texCacheFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_texCacheFolder() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_texCacheFolderRequest, ::octaneapi::ApiInfo_texCacheFolderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_texCacheFolderRequest, ::octaneapi::ApiInfo_texCacheFolderResponse>* streamer) {
                       return this->StreamedtexCacheFolder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_texCacheFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status texCacheFolder(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_texCacheFolderRequest* /*request*/, ::octaneapi::ApiInfo_texCacheFolderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedtexCacheFolder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_texCacheFolderRequest,::octaneapi::ApiInfo_texCacheFolderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAttributeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAttributeTypes() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getAttributeTypesRequest, ::octaneapi::ApiInfo_getAttributeTypesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getAttributeTypesRequest, ::octaneapi::ApiInfo_getAttributeTypesResponse>* streamer) {
                       return this->StreamedgetAttributeTypes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAttributeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAttributeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeTypesRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAttributeTypes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getAttributeTypesRequest,::octaneapi::ApiInfo_getAttributeTypesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPinTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPinTypes() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getPinTypesRequest, ::octaneapi::ApiInfo_getPinTypesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getPinTypesRequest, ::octaneapi::ApiInfo_getPinTypesResponse>* streamer) {
                       return this->StreamedgetPinTypes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPinTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPinTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypesRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPinTypes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getPinTypesRequest,::octaneapi::ApiInfo_getPinTypesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGraphTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getGraphTypes() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getGraphTypesRequest, ::octaneapi::ApiInfo_getGraphTypesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getGraphTypesRequest, ::octaneapi::ApiInfo_getGraphTypesResponse>* streamer) {
                       return this->StreamedgetGraphTypes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getGraphTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGraphTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getGraphTypesRequest* /*request*/, ::octaneapi::ApiInfo_getGraphTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGraphTypes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getGraphTypesRequest,::octaneapi::ApiInfo_getGraphTypesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNodeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getNodeTypes() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getNodeTypesRequest, ::octaneapi::ApiInfo_getNodeTypesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getNodeTypesRequest, ::octaneapi::ApiInfo_getNodeTypesResponse>* streamer) {
                       return this->StreamedgetNodeTypes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getNodeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNodeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getNodeTypesRequest* /*request*/, ::octaneapi::ApiInfo_getNodeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNodeTypes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getNodeTypesRequest,::octaneapi::ApiInfo_getNodeTypesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_nodeInfo() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_nodeInfoRequest, ::octaneapi::ApiInfo_nodeInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_nodeInfoRequest, ::octaneapi::ApiInfo_nodeInfoResponse>* streamer) {
                       return this->StreamednodeInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_nodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nodeInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodeInfoRequest* /*request*/, ::octaneapi::ApiInfo_nodeInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamednodeInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_nodeInfoRequest,::octaneapi::ApiInfo_nodeInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_graphInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_graphInfo() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_graphInfoRequest, ::octaneapi::ApiInfo_graphInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_graphInfoRequest, ::octaneapi::ApiInfo_graphInfoResponse>* streamer) {
                       return this->StreamedgraphInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_graphInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status graphInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_graphInfoRequest* /*request*/, ::octaneapi::ApiInfo_graphInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgraphInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_graphInfoRequest,::octaneapi::ApiInfo_graphInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nodeIconImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_nodeIconImage() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_nodeIconImageRequest, ::octaneapi::ApiInfo_nodeIconImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_nodeIconImageRequest, ::octaneapi::ApiInfo_nodeIconImageResponse>* streamer) {
                       return this->StreamednodeIconImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_nodeIconImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nodeIconImage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodeIconImageRequest* /*request*/, ::octaneapi::ApiInfo_nodeIconImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamednodeIconImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_nodeIconImageRequest,::octaneapi::ApiInfo_nodeIconImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_graphIconImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_graphIconImage() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_graphIconImageRequest, ::octaneapi::ApiInfo_graphIconImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_graphIconImageRequest, ::octaneapi::ApiInfo_graphIconImageResponse>* streamer) {
                       return this->StreamedgraphIconImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_graphIconImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status graphIconImage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_graphIconImageRequest* /*request*/, ::octaneapi::ApiInfo_graphIconImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgraphIconImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_graphIconImageRequest,::octaneapi::ApiInfo_graphIconImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_attributeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_attributeInfo() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_attributeInfoRequest, ::octaneapi::ApiInfo_attributeInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_attributeInfoRequest, ::octaneapi::ApiInfo_attributeInfoResponse>* streamer) {
                       return this->StreamedattributeInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_attributeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status attributeInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfoRequest* /*request*/, ::octaneapi::ApiInfo_attributeInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedattributeInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_attributeInfoRequest,::octaneapi::ApiInfo_attributeInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_attributeInfo1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_attributeInfo1() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_attributeInfo1Request, ::octaneapi::ApiInfo_attributeInfo1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_attributeInfo1Request, ::octaneapi::ApiInfo_attributeInfo1Response>* streamer) {
                       return this->StreamedattributeInfo1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_attributeInfo1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status attributeInfo1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfo1Request* /*request*/, ::octaneapi::ApiInfo_attributeInfo1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedattributeInfo1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_attributeInfo1Request,::octaneapi::ApiInfo_attributeInfo1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_attributeInfo2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_attributeInfo2() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_attributeInfo2Request, ::octaneapi::ApiInfo_attributeInfo2Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_attributeInfo2Request, ::octaneapi::ApiInfo_attributeInfo2Response>* streamer) {
                       return this->StreamedattributeInfo2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_attributeInfo2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status attributeInfo2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_attributeInfo2Request* /*request*/, ::octaneapi::ApiInfo_attributeInfo2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedattributeInfo2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_attributeInfo2Request,::octaneapi::ApiInfo_attributeInfo2Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nodePinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_nodePinInfo() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_nodePinInfoRequest, ::octaneapi::ApiInfo_nodePinInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_nodePinInfoRequest, ::octaneapi::ApiInfo_nodePinInfoResponse>* streamer) {
                       return this->StreamednodePinInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_nodePinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nodePinInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_nodePinInfoRequest* /*request*/, ::octaneapi::ApiInfo_nodePinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamednodePinInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_nodePinInfoRequest,::octaneapi::ApiInfo_nodePinInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAttributeTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAttributeTypeName() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getAttributeTypeNameRequest, ::octaneapi::ApiInfo_getAttributeTypeNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getAttributeTypeNameRequest, ::octaneapi::ApiInfo_getAttributeTypeNameResponse>* streamer) {
                       return this->StreamedgetAttributeTypeName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAttributeTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAttributeTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAttributeTypeName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getAttributeTypeNameRequest,::octaneapi::ApiInfo_getAttributeTypeNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPinTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPinTypeName() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getPinTypeNameRequest, ::octaneapi::ApiInfo_getPinTypeNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getPinTypeNameRequest, ::octaneapi::ApiInfo_getPinTypeNameResponse>* streamer) {
                       return this->StreamedgetPinTypeName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPinTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPinTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPinTypeName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getPinTypeNameRequest,::octaneapi::ApiInfo_getPinTypeNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPinTypeColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPinTypeColor() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getPinTypeColorRequest, ::octaneapi::ApiInfo_getPinTypeColorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getPinTypeColorRequest, ::octaneapi::ApiInfo_getPinTypeColorResponse>* streamer) {
                       return this->StreamedgetPinTypeColor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPinTypeColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPinTypeColor(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinTypeColorRequest* /*request*/, ::octaneapi::ApiInfo_getPinTypeColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPinTypeColor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getPinTypeColorRequest,::octaneapi::ApiInfo_getPinTypeColorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGraphTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getGraphTypeName() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getGraphTypeNameRequest, ::octaneapi::ApiInfo_getGraphTypeNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getGraphTypeNameRequest, ::octaneapi::ApiInfo_getGraphTypeNameResponse>* streamer) {
                       return this->StreamedgetGraphTypeName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getGraphTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGraphTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getGraphTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGraphTypeName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getGraphTypeNameRequest,::octaneapi::ApiInfo_getGraphTypeNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNodeTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getNodeTypeName() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getNodeTypeNameRequest, ::octaneapi::ApiInfo_getNodeTypeNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getNodeTypeNameRequest, ::octaneapi::ApiInfo_getNodeTypeNameResponse>* streamer) {
                       return this->StreamedgetNodeTypeName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getNodeTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNodeTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getNodeTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNodeTypeName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getNodeTypeNameRequest,::octaneapi::ApiInfo_getNodeTypeNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getItemTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getItemTypeName() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getItemTypeNameRequest, ::octaneapi::ApiInfo_getItemTypeNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getItemTypeNameRequest, ::octaneapi::ApiInfo_getItemTypeNameResponse>* streamer) {
                       return this->StreamedgetItemTypeName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getItemTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getItemTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getItemTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getItemTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetItemTypeName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getItemTypeNameRequest,::octaneapi::ApiInfo_getItemTypeNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAttributeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAttributeName() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getAttributeNameRequest, ::octaneapi::ApiInfo_getAttributeNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getAttributeNameRequest, ::octaneapi::ApiInfo_getAttributeNameResponse>* streamer) {
                       return this->StreamedgetAttributeName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAttributeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAttributeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAttributeName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getAttributeNameRequest,::octaneapi::ApiInfo_getAttributeNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAttributeId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAttributeId() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getAttributeIdRequest, ::octaneapi::ApiInfo_getAttributeIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getAttributeIdRequest, ::octaneapi::ApiInfo_getAttributeIdResponse>* streamer) {
                       return this->StreamedgetAttributeId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAttributeId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAttributeId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAttributeId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getAttributeIdRequest,::octaneapi::ApiInfo_getAttributeIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAttributeIdName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAttributeIdName() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getAttributeIdNameRequest, ::octaneapi::ApiInfo_getAttributeIdNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getAttributeIdNameRequest, ::octaneapi::ApiInfo_getAttributeIdNameResponse>* streamer) {
                       return this->StreamedgetAttributeIdName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAttributeIdName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAttributeIdName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* /*request*/, ::octaneapi::ApiInfo_getAttributeIdNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAttributeIdName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getAttributeIdNameRequest,::octaneapi::ApiInfo_getAttributeIdNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAttributeIdName1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAttributeIdName1() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getAttributeIdName1Request, ::octaneapi::ApiInfo_getAttributeIdName1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getAttributeIdName1Request, ::octaneapi::ApiInfo_getAttributeIdName1Response>* streamer) {
                       return this->StreamedgetAttributeIdName1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAttributeIdName1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAttributeIdName1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAttributeIdName1Request* /*request*/, ::octaneapi::ApiInfo_getAttributeIdName1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAttributeIdName1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getAttributeIdName1Request,::octaneapi::ApiInfo_getAttributeIdName1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPinName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPinName() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getPinNameRequest, ::octaneapi::ApiInfo_getPinNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getPinNameRequest, ::octaneapi::ApiInfo_getPinNameResponse>* streamer) {
                       return this->StreamedgetPinName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPinName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPinName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPinName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getPinNameRequest,::octaneapi::ApiInfo_getPinNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPinId() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getPinIdRequest, ::octaneapi::ApiInfo_getPinIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getPinIdRequest, ::octaneapi::ApiInfo_getPinIdResponse>* streamer) {
                       return this->StreamedgetPinId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdRequest* /*request*/, ::octaneapi::ApiInfo_getPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPinId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getPinIdRequest,::octaneapi::ApiInfo_getPinIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPinIdName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPinIdName() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getPinIdNameRequest, ::octaneapi::ApiInfo_getPinIdNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getPinIdNameRequest, ::octaneapi::ApiInfo_getPinIdNameResponse>* streamer) {
                       return this->StreamedgetPinIdName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPinIdName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPinIdName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdNameRequest* /*request*/, ::octaneapi::ApiInfo_getPinIdNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPinIdName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getPinIdNameRequest,::octaneapi::ApiInfo_getPinIdNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPinIdName1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPinIdName1() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getPinIdName1Request, ::octaneapi::ApiInfo_getPinIdName1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getPinIdName1Request, ::octaneapi::ApiInfo_getPinIdName1Response>* streamer) {
                       return this->StreamedgetPinIdName1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPinIdName1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPinIdName1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getPinIdName1Request* /*request*/, ::octaneapi::ApiInfo_getPinIdName1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPinIdName1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getPinIdName1Request,::octaneapi::ApiInfo_getPinIdName1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getTextureValueTypeName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getTextureValueTypeName() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getTextureValueTypeNameRequest, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getTextureValueTypeNameRequest, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>* streamer) {
                       return this->StreamedgetTextureValueTypeName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getTextureValueTypeName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getTextureValueTypeName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* /*request*/, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetTextureValueTypeName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getTextureValueTypeNameRequest,::octaneapi::ApiInfo_getTextureValueTypeNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getTextureValueTypeForOslType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getTextureValueTypeForOslType() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>* streamer) {
                       return this->StreamedgetTextureValueTypeForOslType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getTextureValueTypeForOslType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getTextureValueTypeForOslType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* /*request*/, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetTextureValueTypeForOslType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest,::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCompatibleTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getCompatibleTypes() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getCompatibleTypesRequest, ::octaneapi::ApiInfo_getCompatibleTypesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getCompatibleTypesRequest, ::octaneapi::ApiInfo_getCompatibleTypesResponse>* streamer) {
                       return this->StreamedgetCompatibleTypes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getCompatibleTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCompatibleTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* /*request*/, ::octaneapi::ApiInfo_getCompatibleTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCompatibleTypes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getCompatibleTypesRequest,::octaneapi::ApiInfo_getCompatibleTypesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_renderPassInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_renderPassInfo() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_renderPassInfoRequest, ::octaneapi::ApiInfo_renderPassInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_renderPassInfoRequest, ::octaneapi::ApiInfo_renderPassInfoResponse>* streamer) {
                       return this->StreamedrenderPassInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_renderPassInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status renderPassInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassInfoRequest* /*request*/, ::octaneapi::ApiInfo_renderPassInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrenderPassInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_renderPassInfoRequest,::octaneapi::ApiInfo_renderPassInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAllRenderPassIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAllRenderPassIds() {
      ::grpc::Service::MarkMethodStreamed(39,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getAllRenderPassIdsRequest, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getAllRenderPassIdsRequest, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>* streamer) {
                       return this->StreamedgetAllRenderPassIds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAllRenderPassIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAllRenderPassIds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* /*request*/, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAllRenderPassIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getAllRenderPassIdsRequest,::octaneapi::ApiInfo_getAllRenderPassIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getRenderPassIdFromRenderAovNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getRenderPassIdFromRenderAovNode() {
      ::grpc::Service::MarkMethodStreamed(40,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>* streamer) {
                       return this->StreamedgetRenderPassIdFromRenderAovNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getRenderPassIdFromRenderAovNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRenderPassIdFromRenderAovNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* /*request*/, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetRenderPassIdFromRenderAovNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest,::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getRenderAovInfoFromRenderAovNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getRenderAovInfoFromRenderAovNode() {
      ::grpc::Service::MarkMethodStreamed(41,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>* streamer) {
                       return this->StreamedgetRenderAovInfoFromRenderAovNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getRenderAovInfoFromRenderAovNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRenderAovInfoFromRenderAovNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* /*request*/, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetRenderAovInfoFromRenderAovNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest,::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_renderPassName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_renderPassName() {
      ::grpc::Service::MarkMethodStreamed(42,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_renderPassNameRequest, ::octaneapi::ApiInfo_renderPassNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_renderPassNameRequest, ::octaneapi::ApiInfo_renderPassNameResponse>* streamer) {
                       return this->StreamedrenderPassName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_renderPassName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status renderPassName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrenderPassName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_renderPassNameRequest,::octaneapi::ApiInfo_renderPassNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_renderPassShortName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_renderPassShortName() {
      ::grpc::Service::MarkMethodStreamed(43,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_renderPassShortNameRequest, ::octaneapi::ApiInfo_renderPassShortNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_renderPassShortNameRequest, ::octaneapi::ApiInfo_renderPassShortNameResponse>* streamer) {
                       return this->StreamedrenderPassShortName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_renderPassShortName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status renderPassShortName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassShortNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassShortNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrenderPassShortName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_renderPassShortNameRequest,::octaneapi::ApiInfo_renderPassShortNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_renderPassIdToPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_renderPassIdToPinId() {
      ::grpc::Service::MarkMethodStreamed(44,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_renderPassIdToPinIdRequest, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_renderPassIdToPinIdRequest, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>* streamer) {
                       return this->StreamedrenderPassIdToPinId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_renderPassIdToPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status renderPassIdToPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* /*request*/, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrenderPassIdToPinId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_renderPassIdToPinIdRequest,::octaneapi::ApiInfo_renderPassIdToPinIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_renderPassGroupName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_renderPassGroupName() {
      ::grpc::Service::MarkMethodStreamed(45,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_renderPassGroupNameRequest, ::octaneapi::ApiInfo_renderPassGroupNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_renderPassGroupNameRequest, ::octaneapi::ApiInfo_renderPassGroupNameResponse>* streamer) {
                       return this->StreamedrenderPassGroupName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_renderPassGroupName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status renderPassGroupName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* /*request*/, ::octaneapi::ApiInfo_renderPassGroupNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrenderPassGroupName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_renderPassGroupNameRequest,::octaneapi::ApiInfo_renderPassGroupNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_pinIdToRenderPassId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_pinIdToRenderPassId() {
      ::grpc::Service::MarkMethodStreamed(46,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>* streamer) {
                       return this->StreamedpinIdToRenderPassId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_pinIdToRenderPassId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status pinIdToRenderPassId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* /*request*/, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpinIdToRenderPassId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest,::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_findPinIdForRenderPassId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_findPinIdForRenderPassId() {
      ::grpc::Service::MarkMethodStreamed(47,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>* streamer) {
                       return this->StreamedfindPinIdForRenderPassId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_findPinIdForRenderPassId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status findPinIdForRenderPassId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* /*request*/, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedfindPinIdForRenderPassId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest,::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_findRenderPassIdForPinId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_findRenderPassIdForPinId() {
      ::grpc::Service::MarkMethodStreamed(48,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>* streamer) {
                       return this->StreamedfindRenderPassIdForPinId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_findRenderPassIdForPinId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status findRenderPassIdForPinId(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* /*request*/, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedfindRenderPassIdForPinId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest,::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_octaneVersion<WithStreamedUnaryMethod_octaneName<WithStreamedUnaryMethod_isDemoVersion<WithStreamedUnaryMethod_isSubscriptionVersion<WithStreamedUnaryMethod_tierIdx<WithStreamedUnaryMethod_osVersionInfo<WithStreamedUnaryMethod_driverVersionInfo<WithStreamedUnaryMethod_cpuInfo<WithStreamedUnaryMethod_texCacheFolder<WithStreamedUnaryMethod_getAttributeTypes<WithStreamedUnaryMethod_getPinTypes<WithStreamedUnaryMethod_getGraphTypes<WithStreamedUnaryMethod_getNodeTypes<WithStreamedUnaryMethod_nodeInfo<WithStreamedUnaryMethod_graphInfo<WithStreamedUnaryMethod_nodeIconImage<WithStreamedUnaryMethod_graphIconImage<WithStreamedUnaryMethod_attributeInfo<WithStreamedUnaryMethod_attributeInfo1<WithStreamedUnaryMethod_attributeInfo2<WithStreamedUnaryMethod_nodePinInfo<WithStreamedUnaryMethod_getAttributeTypeName<WithStreamedUnaryMethod_getPinTypeName<WithStreamedUnaryMethod_getPinTypeColor<WithStreamedUnaryMethod_getGraphTypeName<WithStreamedUnaryMethod_getNodeTypeName<WithStreamedUnaryMethod_getItemTypeName<WithStreamedUnaryMethod_getAttributeName<WithStreamedUnaryMethod_getAttributeId<WithStreamedUnaryMethod_getAttributeIdName<WithStreamedUnaryMethod_getAttributeIdName1<WithStreamedUnaryMethod_getPinName<WithStreamedUnaryMethod_getPinId<WithStreamedUnaryMethod_getPinIdName<WithStreamedUnaryMethod_getPinIdName1<WithStreamedUnaryMethod_getTextureValueTypeName<WithStreamedUnaryMethod_getTextureValueTypeForOslType<WithStreamedUnaryMethod_getCompatibleTypes<WithStreamedUnaryMethod_renderPassInfo<WithStreamedUnaryMethod_getAllRenderPassIds<WithStreamedUnaryMethod_getRenderPassIdFromRenderAovNode<WithStreamedUnaryMethod_getRenderAovInfoFromRenderAovNode<WithStreamedUnaryMethod_renderPassName<WithStreamedUnaryMethod_renderPassShortName<WithStreamedUnaryMethod_renderPassIdToPinId<WithStreamedUnaryMethod_renderPassGroupName<WithStreamedUnaryMethod_pinIdToRenderPassId<WithStreamedUnaryMethod_findPinIdForRenderPassId<WithStreamedUnaryMethod_findRenderPassIdForPinId<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_octaneVersion<WithStreamedUnaryMethod_octaneName<WithStreamedUnaryMethod_isDemoVersion<WithStreamedUnaryMethod_isSubscriptionVersion<WithStreamedUnaryMethod_tierIdx<WithStreamedUnaryMethod_osVersionInfo<WithStreamedUnaryMethod_driverVersionInfo<WithStreamedUnaryMethod_cpuInfo<WithStreamedUnaryMethod_texCacheFolder<WithStreamedUnaryMethod_getAttributeTypes<WithStreamedUnaryMethod_getPinTypes<WithStreamedUnaryMethod_getGraphTypes<WithStreamedUnaryMethod_getNodeTypes<WithStreamedUnaryMethod_nodeInfo<WithStreamedUnaryMethod_graphInfo<WithStreamedUnaryMethod_nodeIconImage<WithStreamedUnaryMethod_graphIconImage<WithStreamedUnaryMethod_attributeInfo<WithStreamedUnaryMethod_attributeInfo1<WithStreamedUnaryMethod_attributeInfo2<WithStreamedUnaryMethod_nodePinInfo<WithStreamedUnaryMethod_getAttributeTypeName<WithStreamedUnaryMethod_getPinTypeName<WithStreamedUnaryMethod_getPinTypeColor<WithStreamedUnaryMethod_getGraphTypeName<WithStreamedUnaryMethod_getNodeTypeName<WithStreamedUnaryMethod_getItemTypeName<WithStreamedUnaryMethod_getAttributeName<WithStreamedUnaryMethod_getAttributeId<WithStreamedUnaryMethod_getAttributeIdName<WithStreamedUnaryMethod_getAttributeIdName1<WithStreamedUnaryMethod_getPinName<WithStreamedUnaryMethod_getPinId<WithStreamedUnaryMethod_getPinIdName<WithStreamedUnaryMethod_getPinIdName1<WithStreamedUnaryMethod_getTextureValueTypeName<WithStreamedUnaryMethod_getTextureValueTypeForOslType<WithStreamedUnaryMethod_getCompatibleTypes<WithStreamedUnaryMethod_renderPassInfo<WithStreamedUnaryMethod_getAllRenderPassIds<WithStreamedUnaryMethod_getRenderPassIdFromRenderAovNode<WithStreamedUnaryMethod_getRenderAovInfoFromRenderAovNode<WithStreamedUnaryMethod_renderPassName<WithStreamedUnaryMethod_renderPassShortName<WithStreamedUnaryMethod_renderPassIdToPinId<WithStreamedUnaryMethod_renderPassGroupName<WithStreamedUnaryMethod_pinIdToRenderPassId<WithStreamedUnaryMethod_findPinIdForRenderPassId<WithStreamedUnaryMethod_findRenderPassIdForPinId<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apiinfo_2eproto__INCLUDED
