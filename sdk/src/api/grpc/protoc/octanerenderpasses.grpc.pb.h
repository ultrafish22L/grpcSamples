// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: octanerenderpasses.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_octanerenderpasses_2eproto__INCLUDED
#define GRPC_octanerenderpasses_2eproto__INCLUDED

#include "octanerenderpasses.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiRenderPassInfo' from 'octanerenderpasses.h'
//
// GRPC interface definition for class 'RenderPassExport' from 'octanerenderpasses.h'
//
// GRPC interface definition for class 'RenderResultStatistics' from 'octanerenderpasses.h'
class RenderResultStatisticsService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.RenderResultStatisticsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Clears our members and sets the sub sample mode to SUBSAMPLE_NONE and the state to
    // / RSTATE_STOPPED
    virtual ::grpc::Status clear(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncclear(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncclearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncclear(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncclearRaw(context, request, cq));
    }
    // / Returns the internal film resolution which takes the upsampling into account
    virtual ::grpc::Status internalFilmResolution(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest& request, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>> AsyncinternalFilmResolution(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>>(AsyncinternalFilmResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>> PrepareAsyncinternalFilmResolution(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>>(PrepareAsyncinternalFilmResolutionRaw(context, request, cq));
    }
    // / Returns the type of the channels, this is either float or 8-bit unsigned int
    virtual ::grpc::Status channelType(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest& request, ::octaneapi::RenderResultStatistics_channelTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_channelTypeResponse>> AsyncchannelType(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_channelTypeResponse>>(AsyncchannelTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_channelTypeResponse>> PrepareAsyncchannelType(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_channelTypeResponse>>(PrepareAsyncchannelTypeRaw(context, request, cq));
    }
    // / Returns the samples per pixel of the specified render pass
    virtual ::grpc::Status samplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest& request, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>> AsyncsamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>>(AsyncsamplesPerPixelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>> PrepareAsyncsamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>>(PrepareAsyncsamplesPerPixelRaw(context, request, cq));
    }
    // / Returns the maximum samples per pixel of the specified render pass
    virtual ::grpc::Status maxSamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest& request, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>> AsyncmaxSamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>>(AsyncmaxSamplesPerPixelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>> PrepareAsyncmaxSamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>>(PrepareAsyncmaxSamplesPerPixelRaw(context, request, cq));
    }
    // / Returns the samples per second of the specified render pass
    virtual ::grpc::Status samplesPerSecond(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest& request, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>> AsyncsamplesPerSecond(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>>(AsyncsamplesPerSecondRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>> PrepareAsyncsamplesPerSecond(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>>(PrepareAsyncsamplesPerSecondRaw(context, request, cq));
    }
    // / Returns the render progress for the specified render pass
    virtual ::grpc::Status progress(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest& request, ::octaneapi::RenderResultStatistics_progressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_progressResponse>> Asyncprogress(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_progressResponse>>(AsyncprogressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_progressResponse>> PrepareAsyncprogress(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_progressResponse>>(PrepareAsyncprogressRaw(context, request, cq));
    }
    // / Returns TRUE if at least one sample per pixel has been calculated for the specified render
    // / pass
    virtual ::grpc::Status started(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest& request, ::octaneapi::RenderResultStatistics_startedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_startedResponse>> Asyncstarted(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_startedResponse>>(AsyncstartedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_startedResponse>> PrepareAsyncstarted(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_startedResponse>>(PrepareAsyncstartedRaw(context, request, cq));
    }
    // / Returns TRUE if all samples per pixel have been calculated for the specified render pass
    virtual ::grpc::Status finished(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest& request, ::octaneapi::RenderResultStatistics_finishedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_finishedResponse>> Asyncfinished(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_finishedResponse>>(AsyncfinishedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_finishedResponse>> PrepareAsyncfinished(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_finishedResponse>>(PrepareAsyncfinishedRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Clears our members and sets the sub sample mode to SUBSAMPLE_NONE and the state to
      // / RSTATE_STOPPED
      virtual void clear(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void clear(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the internal film resolution which takes the upsampling into account
      virtual void internalFilmResolution(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* request, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void internalFilmResolution(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* request, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the type of the channels, this is either float or 8-bit unsigned int
      virtual void channelType(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest* request, ::octaneapi::RenderResultStatistics_channelTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void channelType(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest* request, ::octaneapi::RenderResultStatistics_channelTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the samples per pixel of the specified render pass
      virtual void samplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void samplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the maximum samples per pixel of the specified render pass
      virtual void maxSamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void maxSamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the samples per second of the specified render pass
      virtual void samplesPerSecond(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* request, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void samplesPerSecond(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* request, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the render progress for the specified render pass
      virtual void progress(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest* request, ::octaneapi::RenderResultStatistics_progressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void progress(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest* request, ::octaneapi::RenderResultStatistics_progressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if at least one sample per pixel has been calculated for the specified render
      // / pass
      virtual void started(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest* request, ::octaneapi::RenderResultStatistics_startedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void started(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest* request, ::octaneapi::RenderResultStatistics_startedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if all samples per pixel have been calculated for the specified render pass
      virtual void finished(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest* request, ::octaneapi::RenderResultStatistics_finishedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void finished(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest* request, ::octaneapi::RenderResultStatistics_finishedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>* AsyncinternalFilmResolutionRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>* PrepareAsyncinternalFilmResolutionRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_channelTypeResponse>* AsyncchannelTypeRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_channelTypeResponse>* PrepareAsyncchannelTypeRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>* AsyncsamplesPerPixelRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>* PrepareAsyncsamplesPerPixelRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>* AsyncmaxSamplesPerPixelRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>* PrepareAsyncmaxSamplesPerPixelRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>* AsyncsamplesPerSecondRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>* PrepareAsyncsamplesPerSecondRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_progressResponse>* AsyncprogressRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_progressResponse>* PrepareAsyncprogressRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_startedResponse>* AsyncstartedRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_startedResponse>* PrepareAsyncstartedRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_finishedResponse>* AsyncfinishedRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::RenderResultStatistics_finishedResponse>* PrepareAsyncfinishedRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status clear(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncclear(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncclearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncclear(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncclearRaw(context, request, cq));
    }
    ::grpc::Status internalFilmResolution(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest& request, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>> AsyncinternalFilmResolution(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>>(AsyncinternalFilmResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>> PrepareAsyncinternalFilmResolution(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>>(PrepareAsyncinternalFilmResolutionRaw(context, request, cq));
    }
    ::grpc::Status channelType(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest& request, ::octaneapi::RenderResultStatistics_channelTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_channelTypeResponse>> AsyncchannelType(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_channelTypeResponse>>(AsyncchannelTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_channelTypeResponse>> PrepareAsyncchannelType(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_channelTypeResponse>>(PrepareAsyncchannelTypeRaw(context, request, cq));
    }
    ::grpc::Status samplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest& request, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>> AsyncsamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>>(AsyncsamplesPerPixelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>> PrepareAsyncsamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>>(PrepareAsyncsamplesPerPixelRaw(context, request, cq));
    }
    ::grpc::Status maxSamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest& request, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>> AsyncmaxSamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>>(AsyncmaxSamplesPerPixelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>> PrepareAsyncmaxSamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>>(PrepareAsyncmaxSamplesPerPixelRaw(context, request, cq));
    }
    ::grpc::Status samplesPerSecond(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest& request, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>> AsyncsamplesPerSecond(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>>(AsyncsamplesPerSecondRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>> PrepareAsyncsamplesPerSecond(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>>(PrepareAsyncsamplesPerSecondRaw(context, request, cq));
    }
    ::grpc::Status progress(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest& request, ::octaneapi::RenderResultStatistics_progressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_progressResponse>> Asyncprogress(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_progressResponse>>(AsyncprogressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_progressResponse>> PrepareAsyncprogress(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_progressResponse>>(PrepareAsyncprogressRaw(context, request, cq));
    }
    ::grpc::Status started(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest& request, ::octaneapi::RenderResultStatistics_startedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_startedResponse>> Asyncstarted(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_startedResponse>>(AsyncstartedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_startedResponse>> PrepareAsyncstarted(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_startedResponse>>(PrepareAsyncstartedRaw(context, request, cq));
    }
    ::grpc::Status finished(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest& request, ::octaneapi::RenderResultStatistics_finishedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_finishedResponse>> Asyncfinished(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_finishedResponse>>(AsyncfinishedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_finishedResponse>> PrepareAsyncfinished(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_finishedResponse>>(PrepareAsyncfinishedRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void clear(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void clear(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void internalFilmResolution(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* request, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* response, std::function<void(::grpc::Status)>) override;
      void internalFilmResolution(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* request, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void channelType(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest* request, ::octaneapi::RenderResultStatistics_channelTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void channelType(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest* request, ::octaneapi::RenderResultStatistics_channelTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void samplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* response, std::function<void(::grpc::Status)>) override;
      void samplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void maxSamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* response, std::function<void(::grpc::Status)>) override;
      void maxSamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void samplesPerSecond(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* request, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* response, std::function<void(::grpc::Status)>) override;
      void samplesPerSecond(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* request, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void progress(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest* request, ::octaneapi::RenderResultStatistics_progressResponse* response, std::function<void(::grpc::Status)>) override;
      void progress(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest* request, ::octaneapi::RenderResultStatistics_progressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void started(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest* request, ::octaneapi::RenderResultStatistics_startedResponse* response, std::function<void(::grpc::Status)>) override;
      void started(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest* request, ::octaneapi::RenderResultStatistics_startedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void finished(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest* request, ::octaneapi::RenderResultStatistics_finishedResponse* response, std::function<void(::grpc::Status)>) override;
      void finished(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest* request, ::octaneapi::RenderResultStatistics_finishedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>* AsyncinternalFilmResolutionRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>* PrepareAsyncinternalFilmResolutionRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_channelTypeResponse>* AsyncchannelTypeRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_channelTypeResponse>* PrepareAsyncchannelTypeRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>* AsyncsamplesPerPixelRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>* PrepareAsyncsamplesPerPixelRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>* AsyncmaxSamplesPerPixelRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>* PrepareAsyncmaxSamplesPerPixelRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>* AsyncsamplesPerSecondRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>* PrepareAsyncsamplesPerSecondRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_progressResponse>* AsyncprogressRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_progressResponse>* PrepareAsyncprogressRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_startedResponse>* AsyncstartedRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_startedResponse>* PrepareAsyncstartedRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_finishedResponse>* AsyncfinishedRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_finishedResponse>* PrepareAsyncfinishedRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_clear_;
    const ::grpc::internal::RpcMethod rpcmethod_internalFilmResolution_;
    const ::grpc::internal::RpcMethod rpcmethod_channelType_;
    const ::grpc::internal::RpcMethod rpcmethod_samplesPerPixel_;
    const ::grpc::internal::RpcMethod rpcmethod_maxSamplesPerPixel_;
    const ::grpc::internal::RpcMethod rpcmethod_samplesPerSecond_;
    const ::grpc::internal::RpcMethod rpcmethod_progress_;
    const ::grpc::internal::RpcMethod rpcmethod_started_;
    const ::grpc::internal::RpcMethod rpcmethod_finished_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Clears our members and sets the sub sample mode to SUBSAMPLE_NONE and the state to
    // / RSTATE_STOPPED
    virtual ::grpc::Status clear(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_clearRequest* request, ::google::protobuf::Empty* response);
    // / Returns the internal film resolution which takes the upsampling into account
    virtual ::grpc::Status internalFilmResolution(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* request, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* response);
    // / Returns the type of the channels, this is either float or 8-bit unsigned int
    virtual ::grpc::Status channelType(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest* request, ::octaneapi::RenderResultStatistics_channelTypeResponse* response);
    // / Returns the samples per pixel of the specified render pass
    virtual ::grpc::Status samplesPerPixel(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* response);
    // / Returns the maximum samples per pixel of the specified render pass
    virtual ::grpc::Status maxSamplesPerPixel(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* response);
    // / Returns the samples per second of the specified render pass
    virtual ::grpc::Status samplesPerSecond(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* request, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* response);
    // / Returns the render progress for the specified render pass
    virtual ::grpc::Status progress(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_progressRequest* request, ::octaneapi::RenderResultStatistics_progressResponse* response);
    // / Returns TRUE if at least one sample per pixel has been calculated for the specified render
    // / pass
    virtual ::grpc::Status started(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_startedRequest* request, ::octaneapi::RenderResultStatistics_startedResponse* response);
    // / Returns TRUE if all samples per pixel have been calculated for the specified render pass
    virtual ::grpc::Status finished(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest* request, ::octaneapi::RenderResultStatistics_finishedResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_clear() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclear(::grpc::ServerContext* context, ::octaneapi::RenderResultStatistics_clearRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_internalFilmResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_internalFilmResolution() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_internalFilmResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status internalFilmResolution(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* /*request*/, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestinternalFilmResolution(::grpc::ServerContext* context, ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_channelType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_channelType() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_channelType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status channelType(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_channelTypeRequest* /*request*/, ::octaneapi::RenderResultStatistics_channelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestchannelType(::grpc::ServerContext* context, ::octaneapi::RenderResultStatistics_channelTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::RenderResultStatistics_channelTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_samplesPerPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_samplesPerPixel() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_samplesPerPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status samplesPerPixel(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* /*request*/, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsamplesPerPixel(::grpc::ServerContext* context, ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_maxSamplesPerPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_maxSamplesPerPixel() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_maxSamplesPerPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status maxSamplesPerPixel(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* /*request*/, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmaxSamplesPerPixel(::grpc::ServerContext* context, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_samplesPerSecond : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_samplesPerSecond() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_samplesPerSecond() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status samplesPerSecond(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* /*request*/, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsamplesPerSecond(::grpc::ServerContext* context, ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_progress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_progress() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_progress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status progress(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_progressRequest* /*request*/, ::octaneapi::RenderResultStatistics_progressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestprogress(::grpc::ServerContext* context, ::octaneapi::RenderResultStatistics_progressRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::RenderResultStatistics_progressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_started : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_started() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_started() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status started(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_startedRequest* /*request*/, ::octaneapi::RenderResultStatistics_startedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststarted(::grpc::ServerContext* context, ::octaneapi::RenderResultStatistics_startedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::RenderResultStatistics_startedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_finished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_finished() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_finished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status finished(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_finishedRequest* /*request*/, ::octaneapi::RenderResultStatistics_finishedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfinished(::grpc::ServerContext* context, ::octaneapi::RenderResultStatistics_finishedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::RenderResultStatistics_finishedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_clear<WithAsyncMethod_internalFilmResolution<WithAsyncMethod_channelType<WithAsyncMethod_samplesPerPixel<WithAsyncMethod_maxSamplesPerPixel<WithAsyncMethod_samplesPerSecond<WithAsyncMethod_progress<WithAsyncMethod_started<WithAsyncMethod_finished<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_clear() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_clearRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::RenderResultStatistics_clearRequest* request, ::google::protobuf::Empty* response) { return this->clear(context, request, response); }));}
    void SetMessageAllocatorFor_clear(
        ::grpc::MessageAllocator< ::octaneapi::RenderResultStatistics_clearRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_clearRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clear(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_internalFilmResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_internalFilmResolution() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* request, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* response) { return this->internalFilmResolution(context, request, response); }));}
    void SetMessageAllocatorFor_internalFilmResolution(
        ::grpc::MessageAllocator< ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_internalFilmResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status internalFilmResolution(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* /*request*/, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* internalFilmResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* /*request*/, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_channelType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_channelType() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_channelTypeRequest, ::octaneapi::RenderResultStatistics_channelTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest* request, ::octaneapi::RenderResultStatistics_channelTypeResponse* response) { return this->channelType(context, request, response); }));}
    void SetMessageAllocatorFor_channelType(
        ::grpc::MessageAllocator< ::octaneapi::RenderResultStatistics_channelTypeRequest, ::octaneapi::RenderResultStatistics_channelTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_channelTypeRequest, ::octaneapi::RenderResultStatistics_channelTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_channelType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status channelType(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_channelTypeRequest* /*request*/, ::octaneapi::RenderResultStatistics_channelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* channelType(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_channelTypeRequest* /*request*/, ::octaneapi::RenderResultStatistics_channelTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_samplesPerPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_samplesPerPixel() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_samplesPerPixelRequest, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* response) { return this->samplesPerPixel(context, request, response); }));}
    void SetMessageAllocatorFor_samplesPerPixel(
        ::grpc::MessageAllocator< ::octaneapi::RenderResultStatistics_samplesPerPixelRequest, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_samplesPerPixelRequest, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_samplesPerPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status samplesPerPixel(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* /*request*/, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* samplesPerPixel(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* /*request*/, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_maxSamplesPerPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_maxSamplesPerPixel() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* response) { return this->maxSamplesPerPixel(context, request, response); }));}
    void SetMessageAllocatorFor_maxSamplesPerPixel(
        ::grpc::MessageAllocator< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_maxSamplesPerPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status maxSamplesPerPixel(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* /*request*/, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* maxSamplesPerPixel(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* /*request*/, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_samplesPerSecond : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_samplesPerSecond() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_samplesPerSecondRequest, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* request, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* response) { return this->samplesPerSecond(context, request, response); }));}
    void SetMessageAllocatorFor_samplesPerSecond(
        ::grpc::MessageAllocator< ::octaneapi::RenderResultStatistics_samplesPerSecondRequest, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_samplesPerSecondRequest, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_samplesPerSecond() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status samplesPerSecond(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* /*request*/, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* samplesPerSecond(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* /*request*/, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_progress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_progress() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_progressRequest, ::octaneapi::RenderResultStatistics_progressResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::RenderResultStatistics_progressRequest* request, ::octaneapi::RenderResultStatistics_progressResponse* response) { return this->progress(context, request, response); }));}
    void SetMessageAllocatorFor_progress(
        ::grpc::MessageAllocator< ::octaneapi::RenderResultStatistics_progressRequest, ::octaneapi::RenderResultStatistics_progressResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_progressRequest, ::octaneapi::RenderResultStatistics_progressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_progress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status progress(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_progressRequest* /*request*/, ::octaneapi::RenderResultStatistics_progressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* progress(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_progressRequest* /*request*/, ::octaneapi::RenderResultStatistics_progressResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_started : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_started() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_startedRequest, ::octaneapi::RenderResultStatistics_startedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::RenderResultStatistics_startedRequest* request, ::octaneapi::RenderResultStatistics_startedResponse* response) { return this->started(context, request, response); }));}
    void SetMessageAllocatorFor_started(
        ::grpc::MessageAllocator< ::octaneapi::RenderResultStatistics_startedRequest, ::octaneapi::RenderResultStatistics_startedResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_startedRequest, ::octaneapi::RenderResultStatistics_startedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_started() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status started(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_startedRequest* /*request*/, ::octaneapi::RenderResultStatistics_startedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* started(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_startedRequest* /*request*/, ::octaneapi::RenderResultStatistics_startedResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_finished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_finished() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_finishedRequest, ::octaneapi::RenderResultStatistics_finishedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest* request, ::octaneapi::RenderResultStatistics_finishedResponse* response) { return this->finished(context, request, response); }));}
    void SetMessageAllocatorFor_finished(
        ::grpc::MessageAllocator< ::octaneapi::RenderResultStatistics_finishedRequest, ::octaneapi::RenderResultStatistics_finishedResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::RenderResultStatistics_finishedRequest, ::octaneapi::RenderResultStatistics_finishedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_finished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status finished(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_finishedRequest* /*request*/, ::octaneapi::RenderResultStatistics_finishedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* finished(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_finishedRequest* /*request*/, ::octaneapi::RenderResultStatistics_finishedResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_clear<WithCallbackMethod_internalFilmResolution<WithCallbackMethod_channelType<WithCallbackMethod_samplesPerPixel<WithCallbackMethod_maxSamplesPerPixel<WithCallbackMethod_samplesPerSecond<WithCallbackMethod_progress<WithCallbackMethod_started<WithCallbackMethod_finished<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_clear() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_internalFilmResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_internalFilmResolution() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_internalFilmResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status internalFilmResolution(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* /*request*/, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_channelType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_channelType() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_channelType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status channelType(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_channelTypeRequest* /*request*/, ::octaneapi::RenderResultStatistics_channelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_samplesPerPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_samplesPerPixel() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_samplesPerPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status samplesPerPixel(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* /*request*/, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_maxSamplesPerPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_maxSamplesPerPixel() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_maxSamplesPerPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status maxSamplesPerPixel(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* /*request*/, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_samplesPerSecond : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_samplesPerSecond() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_samplesPerSecond() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status samplesPerSecond(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* /*request*/, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_progress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_progress() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_progress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status progress(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_progressRequest* /*request*/, ::octaneapi::RenderResultStatistics_progressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_started : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_started() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_started() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status started(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_startedRequest* /*request*/, ::octaneapi::RenderResultStatistics_startedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_finished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_finished() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_finished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status finished(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_finishedRequest* /*request*/, ::octaneapi::RenderResultStatistics_finishedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_clear() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclear(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_internalFilmResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_internalFilmResolution() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_internalFilmResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status internalFilmResolution(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* /*request*/, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestinternalFilmResolution(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_channelType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_channelType() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_channelType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status channelType(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_channelTypeRequest* /*request*/, ::octaneapi::RenderResultStatistics_channelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestchannelType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_samplesPerPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_samplesPerPixel() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_samplesPerPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status samplesPerPixel(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* /*request*/, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsamplesPerPixel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_maxSamplesPerPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_maxSamplesPerPixel() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_maxSamplesPerPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status maxSamplesPerPixel(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* /*request*/, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmaxSamplesPerPixel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_samplesPerSecond : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_samplesPerSecond() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_samplesPerSecond() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status samplesPerSecond(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* /*request*/, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsamplesPerSecond(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_progress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_progress() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_progress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status progress(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_progressRequest* /*request*/, ::octaneapi::RenderResultStatistics_progressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestprogress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_started : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_started() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_started() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status started(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_startedRequest* /*request*/, ::octaneapi::RenderResultStatistics_startedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststarted(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_finished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_finished() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_finished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status finished(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_finishedRequest* /*request*/, ::octaneapi::RenderResultStatistics_finishedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfinished(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_clear() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->clear(context, request, response); }));
    }
    ~WithRawCallbackMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clear(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_internalFilmResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_internalFilmResolution() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->internalFilmResolution(context, request, response); }));
    }
    ~WithRawCallbackMethod_internalFilmResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status internalFilmResolution(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* /*request*/, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* internalFilmResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_channelType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_channelType() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->channelType(context, request, response); }));
    }
    ~WithRawCallbackMethod_channelType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status channelType(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_channelTypeRequest* /*request*/, ::octaneapi::RenderResultStatistics_channelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* channelType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_samplesPerPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_samplesPerPixel() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->samplesPerPixel(context, request, response); }));
    }
    ~WithRawCallbackMethod_samplesPerPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status samplesPerPixel(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* /*request*/, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* samplesPerPixel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_maxSamplesPerPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_maxSamplesPerPixel() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->maxSamplesPerPixel(context, request, response); }));
    }
    ~WithRawCallbackMethod_maxSamplesPerPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status maxSamplesPerPixel(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* /*request*/, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* maxSamplesPerPixel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_samplesPerSecond : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_samplesPerSecond() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->samplesPerSecond(context, request, response); }));
    }
    ~WithRawCallbackMethod_samplesPerSecond() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status samplesPerSecond(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* /*request*/, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* samplesPerSecond(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_progress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_progress() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->progress(context, request, response); }));
    }
    ~WithRawCallbackMethod_progress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status progress(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_progressRequest* /*request*/, ::octaneapi::RenderResultStatistics_progressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* progress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_started : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_started() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->started(context, request, response); }));
    }
    ~WithRawCallbackMethod_started() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status started(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_startedRequest* /*request*/, ::octaneapi::RenderResultStatistics_startedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* started(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_finished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_finished() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->finished(context, request, response); }));
    }
    ~WithRawCallbackMethod_finished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status finished(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_finishedRequest* /*request*/, ::octaneapi::RenderResultStatistics_finishedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* finished(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_clear() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::RenderResultStatistics_clearRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::RenderResultStatistics_clearRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedclear(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclear(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::RenderResultStatistics_clearRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_internalFilmResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_internalFilmResolution() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>* streamer) {
                       return this->StreamedinternalFilmResolution(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_internalFilmResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status internalFilmResolution(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* /*request*/, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedinternalFilmResolution(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest,::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_channelType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_channelType() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::RenderResultStatistics_channelTypeRequest, ::octaneapi::RenderResultStatistics_channelTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::RenderResultStatistics_channelTypeRequest, ::octaneapi::RenderResultStatistics_channelTypeResponse>* streamer) {
                       return this->StreamedchannelType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_channelType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status channelType(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_channelTypeRequest* /*request*/, ::octaneapi::RenderResultStatistics_channelTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedchannelType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::RenderResultStatistics_channelTypeRequest,::octaneapi::RenderResultStatistics_channelTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_samplesPerPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_samplesPerPixel() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::RenderResultStatistics_samplesPerPixelRequest, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::RenderResultStatistics_samplesPerPixelRequest, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>* streamer) {
                       return this->StreamedsamplesPerPixel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_samplesPerPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status samplesPerPixel(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* /*request*/, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsamplesPerPixel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::RenderResultStatistics_samplesPerPixelRequest,::octaneapi::RenderResultStatistics_samplesPerPixelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_maxSamplesPerPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_maxSamplesPerPixel() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>* streamer) {
                       return this->StreamedmaxSamplesPerPixel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_maxSamplesPerPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status maxSamplesPerPixel(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* /*request*/, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedmaxSamplesPerPixel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest,::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_samplesPerSecond : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_samplesPerSecond() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::RenderResultStatistics_samplesPerSecondRequest, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::RenderResultStatistics_samplesPerSecondRequest, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>* streamer) {
                       return this->StreamedsamplesPerSecond(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_samplesPerSecond() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status samplesPerSecond(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* /*request*/, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsamplesPerSecond(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::RenderResultStatistics_samplesPerSecondRequest,::octaneapi::RenderResultStatistics_samplesPerSecondResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_progress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_progress() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::RenderResultStatistics_progressRequest, ::octaneapi::RenderResultStatistics_progressResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::RenderResultStatistics_progressRequest, ::octaneapi::RenderResultStatistics_progressResponse>* streamer) {
                       return this->Streamedprogress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_progress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status progress(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_progressRequest* /*request*/, ::octaneapi::RenderResultStatistics_progressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedprogress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::RenderResultStatistics_progressRequest,::octaneapi::RenderResultStatistics_progressResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_started : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_started() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::RenderResultStatistics_startedRequest, ::octaneapi::RenderResultStatistics_startedResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::RenderResultStatistics_startedRequest, ::octaneapi::RenderResultStatistics_startedResponse>* streamer) {
                       return this->Streamedstarted(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_started() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status started(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_startedRequest* /*request*/, ::octaneapi::RenderResultStatistics_startedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstarted(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::RenderResultStatistics_startedRequest,::octaneapi::RenderResultStatistics_startedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_finished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_finished() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::RenderResultStatistics_finishedRequest, ::octaneapi::RenderResultStatistics_finishedResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::RenderResultStatistics_finishedRequest, ::octaneapi::RenderResultStatistics_finishedResponse>* streamer) {
                       return this->Streamedfinished(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_finished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status finished(::grpc::ServerContext* /*context*/, const ::octaneapi::RenderResultStatistics_finishedRequest* /*request*/, ::octaneapi::RenderResultStatistics_finishedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedfinished(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::RenderResultStatistics_finishedRequest,::octaneapi::RenderResultStatistics_finishedResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_clear<WithStreamedUnaryMethod_internalFilmResolution<WithStreamedUnaryMethod_channelType<WithStreamedUnaryMethod_samplesPerPixel<WithStreamedUnaryMethod_maxSamplesPerPixel<WithStreamedUnaryMethod_samplesPerSecond<WithStreamedUnaryMethod_progress<WithStreamedUnaryMethod_started<WithStreamedUnaryMethod_finished<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_clear<WithStreamedUnaryMethod_internalFilmResolution<WithStreamedUnaryMethod_channelType<WithStreamedUnaryMethod_samplesPerPixel<WithStreamedUnaryMethod_maxSamplesPerPixel<WithStreamedUnaryMethod_samplesPerSecond<WithStreamedUnaryMethod_progress<WithStreamedUnaryMethod_started<WithStreamedUnaryMethod_finished<Service > > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_octanerenderpasses_2eproto__INCLUDED
