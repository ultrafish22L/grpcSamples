// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apisharedsurface.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apisharedsurface_2eproto__INCLUDED
#define GRPC_apisharedsurface_2eproto__INCLUDED

#include "apisharedsurface.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiSharedSurface' from 'apisharedsurface.h'
class ApiSharedSurfaceService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiSharedSurfaceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Creates a shared surface with a D3D11 texture
    virtual ::grpc::Status createD3D11(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request& request, ::octaneapi::ApiSharedSurface_createD3D11Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_createD3D11Response>> AsynccreateD3D11(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_createD3D11Response>>(AsynccreateD3D11Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_createD3D11Response>> PrepareAsynccreateD3D11(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_createD3D11Response>>(PrepareAsynccreateD3D11Raw(context, request, cq));
    }
    // / Returns whether two ApiSharedSurface pointers refer to the same underlying shared surface
    // / object
    virtual ::grpc::Status equals(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest& request, ::octaneapi::ApiSharedSurface_equalsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_equalsResponse>> Asyncequals(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_equalsResponse>>(AsyncequalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_equalsResponse>> PrepareAsyncequals(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_equalsResponse>>(PrepareAsyncequalsRaw(context, request, cq));
    }
    // / Defines a strict total order of ApiSharedSurface pointers based on the underlying shared
    // / surface object
    virtual ::grpc::Status isLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest& request, ::octaneapi::ApiSharedSurface_isLessThanResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_isLessThanResponse>> AsyncisLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_isLessThanResponse>>(AsyncisLessThanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_isLessThanResponse>> PrepareAsyncisLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_isLessThanResponse>>(PrepareAsyncisLessThanRaw(context, request, cq));
    }
    // / Returns a hash value that's the same for ApiSharedSurface instances that refer to the same
    // / underlying shared surface object
    virtual ::grpc::Status hash(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest& request, ::octaneapi::ApiSharedSurface_hashResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_hashResponse>> Asynchash(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_hashResponse>>(AsynchashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_hashResponse>> PrepareAsynchash(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_hashResponse>>(PrepareAsynchashRaw(context, request, cq));
    }
    // / Destroys this specific ApiSharedSurface instance, decrementing the reference count of the
    // / underlying shared surface object
    virtual ::grpc::Status release(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncrelease(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncreleaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncrelease(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncreleaseRaw(context, request, cq));
    }
    // / Creates a new ApiSharedSurface instance that refers to the same underlying shared surface
    // / object as this instance
    virtual ::grpc::Status clone(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest& request, ::octaneapi::ApiSharedSurface_cloneResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_cloneResponse>> Asyncclone(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_cloneResponse>>(AsynccloneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_cloneResponse>> PrepareAsyncclone(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_cloneResponse>>(PrepareAsynccloneRaw(context, request, cq));
    }
    // / Gets the type of the shared surface
    virtual ::grpc::Status getType(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest& request, ::octaneapi::ApiSharedSurface_getTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_getTypeResponse>> AsyncgetType(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_getTypeResponse>>(AsyncgetTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_getTypeResponse>> PrepareAsyncgetType(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_getTypeResponse>>(PrepareAsyncgetTypeRaw(context, request, cq));
    }
    // / Gets the LUID of the D3D11 adapter on which the shared texture exists
    virtual ::grpc::Status getD3D11AdapterLuid(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest& request, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>> AsyncgetD3D11AdapterLuid(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>>(AsyncgetD3D11AdapterLuidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>> PrepareAsyncgetD3D11AdapterLuid(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>>(PrepareAsyncgetD3D11AdapterLuidRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Creates a shared surface with a D3D11 texture
      virtual void createD3D11(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request* request, ::octaneapi::ApiSharedSurface_createD3D11Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createD3D11(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request* request, ::octaneapi::ApiSharedSurface_createD3D11Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns whether two ApiSharedSurface pointers refer to the same underlying shared surface
      // / object
      virtual void equals(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest* request, ::octaneapi::ApiSharedSurface_equalsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void equals(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest* request, ::octaneapi::ApiSharedSurface_equalsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Defines a strict total order of ApiSharedSurface pointers based on the underlying shared
      // / surface object
      virtual void isLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest* request, ::octaneapi::ApiSharedSurface_isLessThanResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest* request, ::octaneapi::ApiSharedSurface_isLessThanResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns a hash value that's the same for ApiSharedSurface instances that refer to the same
      // / underlying shared surface object
      virtual void hash(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest* request, ::octaneapi::ApiSharedSurface_hashResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void hash(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest* request, ::octaneapi::ApiSharedSurface_hashResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Destroys this specific ApiSharedSurface instance, decrementing the reference count of the
      // / underlying shared surface object
      virtual void release(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void release(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Creates a new ApiSharedSurface instance that refers to the same underlying shared surface
      // / object as this instance
      virtual void clone(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest* request, ::octaneapi::ApiSharedSurface_cloneResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void clone(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest* request, ::octaneapi::ApiSharedSurface_cloneResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets the type of the shared surface
      virtual void getType(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest* request, ::octaneapi::ApiSharedSurface_getTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getType(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest* request, ::octaneapi::ApiSharedSurface_getTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets the LUID of the D3D11 adapter on which the shared texture exists
      virtual void getD3D11AdapterLuid(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* request, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getD3D11AdapterLuid(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* request, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_createD3D11Response>* AsynccreateD3D11Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_createD3D11Response>* PrepareAsynccreateD3D11Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_equalsResponse>* AsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_equalsResponse>* PrepareAsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_isLessThanResponse>* AsyncisLessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_isLessThanResponse>* PrepareAsyncisLessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_hashResponse>* AsynchashRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_hashResponse>* PrepareAsynchashRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncreleaseRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncreleaseRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_cloneResponse>* AsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_cloneResponse>* PrepareAsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_getTypeResponse>* AsyncgetTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_getTypeResponse>* PrepareAsyncgetTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>* AsyncgetD3D11AdapterLuidRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>* PrepareAsyncgetD3D11AdapterLuidRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status createD3D11(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request& request, ::octaneapi::ApiSharedSurface_createD3D11Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_createD3D11Response>> AsynccreateD3D11(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_createD3D11Response>>(AsynccreateD3D11Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_createD3D11Response>> PrepareAsynccreateD3D11(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_createD3D11Response>>(PrepareAsynccreateD3D11Raw(context, request, cq));
    }
    ::grpc::Status equals(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest& request, ::octaneapi::ApiSharedSurface_equalsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_equalsResponse>> Asyncequals(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_equalsResponse>>(AsyncequalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_equalsResponse>> PrepareAsyncequals(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_equalsResponse>>(PrepareAsyncequalsRaw(context, request, cq));
    }
    ::grpc::Status isLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest& request, ::octaneapi::ApiSharedSurface_isLessThanResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_isLessThanResponse>> AsyncisLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_isLessThanResponse>>(AsyncisLessThanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_isLessThanResponse>> PrepareAsyncisLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_isLessThanResponse>>(PrepareAsyncisLessThanRaw(context, request, cq));
    }
    ::grpc::Status hash(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest& request, ::octaneapi::ApiSharedSurface_hashResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_hashResponse>> Asynchash(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_hashResponse>>(AsynchashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_hashResponse>> PrepareAsynchash(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_hashResponse>>(PrepareAsynchashRaw(context, request, cq));
    }
    ::grpc::Status release(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncrelease(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncreleaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncrelease(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncreleaseRaw(context, request, cq));
    }
    ::grpc::Status clone(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest& request, ::octaneapi::ApiSharedSurface_cloneResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_cloneResponse>> Asyncclone(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_cloneResponse>>(AsynccloneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_cloneResponse>> PrepareAsyncclone(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_cloneResponse>>(PrepareAsynccloneRaw(context, request, cq));
    }
    ::grpc::Status getType(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest& request, ::octaneapi::ApiSharedSurface_getTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getTypeResponse>> AsyncgetType(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getTypeResponse>>(AsyncgetTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getTypeResponse>> PrepareAsyncgetType(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getTypeResponse>>(PrepareAsyncgetTypeRaw(context, request, cq));
    }
    ::grpc::Status getD3D11AdapterLuid(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest& request, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>> AsyncgetD3D11AdapterLuid(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>>(AsyncgetD3D11AdapterLuidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>> PrepareAsyncgetD3D11AdapterLuid(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>>(PrepareAsyncgetD3D11AdapterLuidRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void createD3D11(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request* request, ::octaneapi::ApiSharedSurface_createD3D11Response* response, std::function<void(::grpc::Status)>) override;
      void createD3D11(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request* request, ::octaneapi::ApiSharedSurface_createD3D11Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void equals(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest* request, ::octaneapi::ApiSharedSurface_equalsResponse* response, std::function<void(::grpc::Status)>) override;
      void equals(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest* request, ::octaneapi::ApiSharedSurface_equalsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest* request, ::octaneapi::ApiSharedSurface_isLessThanResponse* response, std::function<void(::grpc::Status)>) override;
      void isLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest* request, ::octaneapi::ApiSharedSurface_isLessThanResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void hash(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest* request, ::octaneapi::ApiSharedSurface_hashResponse* response, std::function<void(::grpc::Status)>) override;
      void hash(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest* request, ::octaneapi::ApiSharedSurface_hashResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void release(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void release(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void clone(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest* request, ::octaneapi::ApiSharedSurface_cloneResponse* response, std::function<void(::grpc::Status)>) override;
      void clone(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest* request, ::octaneapi::ApiSharedSurface_cloneResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getType(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest* request, ::octaneapi::ApiSharedSurface_getTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void getType(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest* request, ::octaneapi::ApiSharedSurface_getTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getD3D11AdapterLuid(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* request, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* response, std::function<void(::grpc::Status)>) override;
      void getD3D11AdapterLuid(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* request, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_createD3D11Response>* AsynccreateD3D11Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_createD3D11Response>* PrepareAsynccreateD3D11Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_equalsResponse>* AsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_equalsResponse>* PrepareAsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_isLessThanResponse>* AsyncisLessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_isLessThanResponse>* PrepareAsyncisLessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_hashResponse>* AsynchashRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_hashResponse>* PrepareAsynchashRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncreleaseRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncreleaseRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_cloneResponse>* AsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_cloneResponse>* PrepareAsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getTypeResponse>* AsyncgetTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getTypeResponse>* PrepareAsyncgetTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>* AsyncgetD3D11AdapterLuidRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>* PrepareAsyncgetD3D11AdapterLuidRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_createD3D11_;
    const ::grpc::internal::RpcMethod rpcmethod_equals_;
    const ::grpc::internal::RpcMethod rpcmethod_isLessThan_;
    const ::grpc::internal::RpcMethod rpcmethod_hash_;
    const ::grpc::internal::RpcMethod rpcmethod_release_;
    const ::grpc::internal::RpcMethod rpcmethod_clone_;
    const ::grpc::internal::RpcMethod rpcmethod_getType_;
    const ::grpc::internal::RpcMethod rpcmethod_getD3D11AdapterLuid_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Creates a shared surface with a D3D11 texture
    virtual ::grpc::Status createD3D11(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request* request, ::octaneapi::ApiSharedSurface_createD3D11Response* response);
    // / Returns whether two ApiSharedSurface pointers refer to the same underlying shared surface
    // / object
    virtual ::grpc::Status equals(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest* request, ::octaneapi::ApiSharedSurface_equalsResponse* response);
    // / Defines a strict total order of ApiSharedSurface pointers based on the underlying shared
    // / surface object
    virtual ::grpc::Status isLessThan(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest* request, ::octaneapi::ApiSharedSurface_isLessThanResponse* response);
    // / Returns a hash value that's the same for ApiSharedSurface instances that refer to the same
    // / underlying shared surface object
    virtual ::grpc::Status hash(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_hashRequest* request, ::octaneapi::ApiSharedSurface_hashResponse* response);
    // / Destroys this specific ApiSharedSurface instance, decrementing the reference count of the
    // / underlying shared surface object
    virtual ::grpc::Status release(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest* request, ::google::protobuf::Empty* response);
    // / Creates a new ApiSharedSurface instance that refers to the same underlying shared surface
    // / object as this instance
    virtual ::grpc::Status clone(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest* request, ::octaneapi::ApiSharedSurface_cloneResponse* response);
    // / Gets the type of the shared surface
    virtual ::grpc::Status getType(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest* request, ::octaneapi::ApiSharedSurface_getTypeResponse* response);
    // / Gets the LUID of the D3D11 adapter on which the shared texture exists
    virtual ::grpc::Status getD3D11AdapterLuid(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* request, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_createD3D11 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createD3D11() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_createD3D11() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createD3D11(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_createD3D11Request* /*request*/, ::octaneapi::ApiSharedSurface_createD3D11Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateD3D11(::grpc::ServerContext* context, ::octaneapi::ApiSharedSurface_createD3D11Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSharedSurface_createD3D11Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_equals() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_equalsRequest* /*request*/, ::octaneapi::ApiSharedSurface_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestequals(::grpc::ServerContext* context, ::octaneapi::ApiSharedSurface_equalsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSharedSurface_equalsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isLessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isLessThan() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_isLessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isLessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_isLessThanRequest* /*request*/, ::octaneapi::ApiSharedSurface_isLessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisLessThan(::grpc::ServerContext* context, ::octaneapi::ApiSharedSurface_isLessThanRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSharedSurface_isLessThanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_hash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_hash() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_hash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hash(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_hashRequest* /*request*/, ::octaneapi::ApiSharedSurface_hashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesthash(::grpc::ServerContext* context, ::octaneapi::ApiSharedSurface_hashRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSharedSurface_hashResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_release() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status release(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_releaseRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrelease(::grpc::ServerContext* context, ::octaneapi::ApiSharedSurface_releaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_clone() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_cloneRequest* /*request*/, ::octaneapi::ApiSharedSurface_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclone(::grpc::ServerContext* context, ::octaneapi::ApiSharedSurface_cloneRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSharedSurface_cloneResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getType() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_getTypeRequest* /*request*/, ::octaneapi::ApiSharedSurface_getTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetType(::grpc::ServerContext* context, ::octaneapi::ApiSharedSurface_getTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSharedSurface_getTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getD3D11AdapterLuid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getD3D11AdapterLuid() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_getD3D11AdapterLuid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getD3D11AdapterLuid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* /*request*/, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetD3D11AdapterLuid(::grpc::ServerContext* context, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_createD3D11<WithAsyncMethod_equals<WithAsyncMethod_isLessThan<WithAsyncMethod_hash<WithAsyncMethod_release<WithAsyncMethod_clone<WithAsyncMethod_getType<WithAsyncMethod_getD3D11AdapterLuid<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_createD3D11 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createD3D11() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_createD3D11Request, ::octaneapi::ApiSharedSurface_createD3D11Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request* request, ::octaneapi::ApiSharedSurface_createD3D11Response* response) { return this->createD3D11(context, request, response); }));}
    void SetMessageAllocatorFor_createD3D11(
        ::grpc::MessageAllocator< ::octaneapi::ApiSharedSurface_createD3D11Request, ::octaneapi::ApiSharedSurface_createD3D11Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_createD3D11Request, ::octaneapi::ApiSharedSurface_createD3D11Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createD3D11() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createD3D11(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_createD3D11Request* /*request*/, ::octaneapi::ApiSharedSurface_createD3D11Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createD3D11(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_createD3D11Request* /*request*/, ::octaneapi::ApiSharedSurface_createD3D11Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_equals() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_equalsRequest, ::octaneapi::ApiSharedSurface_equalsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest* request, ::octaneapi::ApiSharedSurface_equalsResponse* response) { return this->equals(context, request, response); }));}
    void SetMessageAllocatorFor_equals(
        ::grpc::MessageAllocator< ::octaneapi::ApiSharedSurface_equalsRequest, ::octaneapi::ApiSharedSurface_equalsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_equalsRequest, ::octaneapi::ApiSharedSurface_equalsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_equalsRequest* /*request*/, ::octaneapi::ApiSharedSurface_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* equals(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_equalsRequest* /*request*/, ::octaneapi::ApiSharedSurface_equalsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isLessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isLessThan() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_isLessThanRequest, ::octaneapi::ApiSharedSurface_isLessThanResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest* request, ::octaneapi::ApiSharedSurface_isLessThanResponse* response) { return this->isLessThan(context, request, response); }));}
    void SetMessageAllocatorFor_isLessThan(
        ::grpc::MessageAllocator< ::octaneapi::ApiSharedSurface_isLessThanRequest, ::octaneapi::ApiSharedSurface_isLessThanResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_isLessThanRequest, ::octaneapi::ApiSharedSurface_isLessThanResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isLessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isLessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_isLessThanRequest* /*request*/, ::octaneapi::ApiSharedSurface_isLessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isLessThan(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_isLessThanRequest* /*request*/, ::octaneapi::ApiSharedSurface_isLessThanResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_hash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_hash() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_hashRequest, ::octaneapi::ApiSharedSurface_hashResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSharedSurface_hashRequest* request, ::octaneapi::ApiSharedSurface_hashResponse* response) { return this->hash(context, request, response); }));}
    void SetMessageAllocatorFor_hash(
        ::grpc::MessageAllocator< ::octaneapi::ApiSharedSurface_hashRequest, ::octaneapi::ApiSharedSurface_hashResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_hashRequest, ::octaneapi::ApiSharedSurface_hashResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_hash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hash(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_hashRequest* /*request*/, ::octaneapi::ApiSharedSurface_hashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hash(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_hashRequest* /*request*/, ::octaneapi::ApiSharedSurface_hashResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_release() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_releaseRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest* request, ::google::protobuf::Empty* response) { return this->release(context, request, response); }));}
    void SetMessageAllocatorFor_release(
        ::grpc::MessageAllocator< ::octaneapi::ApiSharedSurface_releaseRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_releaseRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status release(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_releaseRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* release(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_releaseRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_clone() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_cloneRequest, ::octaneapi::ApiSharedSurface_cloneResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest* request, ::octaneapi::ApiSharedSurface_cloneResponse* response) { return this->clone(context, request, response); }));}
    void SetMessageAllocatorFor_clone(
        ::grpc::MessageAllocator< ::octaneapi::ApiSharedSurface_cloneRequest, ::octaneapi::ApiSharedSurface_cloneResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_cloneRequest, ::octaneapi::ApiSharedSurface_cloneResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_cloneRequest* /*request*/, ::octaneapi::ApiSharedSurface_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clone(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_cloneRequest* /*request*/, ::octaneapi::ApiSharedSurface_cloneResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getType() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_getTypeRequest, ::octaneapi::ApiSharedSurface_getTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest* request, ::octaneapi::ApiSharedSurface_getTypeResponse* response) { return this->getType(context, request, response); }));}
    void SetMessageAllocatorFor_getType(
        ::grpc::MessageAllocator< ::octaneapi::ApiSharedSurface_getTypeRequest, ::octaneapi::ApiSharedSurface_getTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_getTypeRequest, ::octaneapi::ApiSharedSurface_getTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_getTypeRequest* /*request*/, ::octaneapi::ApiSharedSurface_getTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getType(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_getTypeRequest* /*request*/, ::octaneapi::ApiSharedSurface_getTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getD3D11AdapterLuid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getD3D11AdapterLuid() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* request, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* response) { return this->getD3D11AdapterLuid(context, request, response); }));}
    void SetMessageAllocatorFor_getD3D11AdapterLuid(
        ::grpc::MessageAllocator< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getD3D11AdapterLuid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getD3D11AdapterLuid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* /*request*/, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getD3D11AdapterLuid(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* /*request*/, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_createD3D11<WithCallbackMethod_equals<WithCallbackMethod_isLessThan<WithCallbackMethod_hash<WithCallbackMethod_release<WithCallbackMethod_clone<WithCallbackMethod_getType<WithCallbackMethod_getD3D11AdapterLuid<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_createD3D11 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createD3D11() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_createD3D11() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createD3D11(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_createD3D11Request* /*request*/, ::octaneapi::ApiSharedSurface_createD3D11Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_equals() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_equalsRequest* /*request*/, ::octaneapi::ApiSharedSurface_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isLessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isLessThan() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_isLessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isLessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_isLessThanRequest* /*request*/, ::octaneapi::ApiSharedSurface_isLessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_hash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_hash() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_hash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hash(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_hashRequest* /*request*/, ::octaneapi::ApiSharedSurface_hashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_release() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status release(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_releaseRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_clone() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_cloneRequest* /*request*/, ::octaneapi::ApiSharedSurface_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getType() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_getTypeRequest* /*request*/, ::octaneapi::ApiSharedSurface_getTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getD3D11AdapterLuid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getD3D11AdapterLuid() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_getD3D11AdapterLuid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getD3D11AdapterLuid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* /*request*/, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_createD3D11 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createD3D11() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_createD3D11() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createD3D11(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_createD3D11Request* /*request*/, ::octaneapi::ApiSharedSurface_createD3D11Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateD3D11(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_equals() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_equalsRequest* /*request*/, ::octaneapi::ApiSharedSurface_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestequals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isLessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isLessThan() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_isLessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isLessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_isLessThanRequest* /*request*/, ::octaneapi::ApiSharedSurface_isLessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisLessThan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_hash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_hash() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_hash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hash(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_hashRequest* /*request*/, ::octaneapi::ApiSharedSurface_hashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesthash(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_release() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status release(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_releaseRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrelease(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_clone() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_cloneRequest* /*request*/, ::octaneapi::ApiSharedSurface_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getType() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_getTypeRequest* /*request*/, ::octaneapi::ApiSharedSurface_getTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getD3D11AdapterLuid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getD3D11AdapterLuid() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_getD3D11AdapterLuid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getD3D11AdapterLuid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* /*request*/, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetD3D11AdapterLuid(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createD3D11 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createD3D11() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createD3D11(context, request, response); }));
    }
    ~WithRawCallbackMethod_createD3D11() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createD3D11(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_createD3D11Request* /*request*/, ::octaneapi::ApiSharedSurface_createD3D11Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createD3D11(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_equals() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->equals(context, request, response); }));
    }
    ~WithRawCallbackMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_equalsRequest* /*request*/, ::octaneapi::ApiSharedSurface_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* equals(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isLessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isLessThan() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isLessThan(context, request, response); }));
    }
    ~WithRawCallbackMethod_isLessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isLessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_isLessThanRequest* /*request*/, ::octaneapi::ApiSharedSurface_isLessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isLessThan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_hash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_hash() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->hash(context, request, response); }));
    }
    ~WithRawCallbackMethod_hash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hash(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_hashRequest* /*request*/, ::octaneapi::ApiSharedSurface_hashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hash(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_release() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->release(context, request, response); }));
    }
    ~WithRawCallbackMethod_release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status release(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_releaseRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* release(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_clone() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->clone(context, request, response); }));
    }
    ~WithRawCallbackMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_cloneRequest* /*request*/, ::octaneapi::ApiSharedSurface_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clone(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getType() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getType(context, request, response); }));
    }
    ~WithRawCallbackMethod_getType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_getTypeRequest* /*request*/, ::octaneapi::ApiSharedSurface_getTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getD3D11AdapterLuid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getD3D11AdapterLuid() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getD3D11AdapterLuid(context, request, response); }));
    }
    ~WithRawCallbackMethod_getD3D11AdapterLuid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getD3D11AdapterLuid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* /*request*/, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getD3D11AdapterLuid(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createD3D11 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createD3D11() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSharedSurface_createD3D11Request, ::octaneapi::ApiSharedSurface_createD3D11Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSharedSurface_createD3D11Request, ::octaneapi::ApiSharedSurface_createD3D11Response>* streamer) {
                       return this->StreamedcreateD3D11(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createD3D11() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createD3D11(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_createD3D11Request* /*request*/, ::octaneapi::ApiSharedSurface_createD3D11Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateD3D11(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSharedSurface_createD3D11Request,::octaneapi::ApiSharedSurface_createD3D11Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_equals() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSharedSurface_equalsRequest, ::octaneapi::ApiSharedSurface_equalsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSharedSurface_equalsRequest, ::octaneapi::ApiSharedSurface_equalsResponse>* streamer) {
                       return this->Streamedequals(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_equalsRequest* /*request*/, ::octaneapi::ApiSharedSurface_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedequals(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSharedSurface_equalsRequest,::octaneapi::ApiSharedSurface_equalsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isLessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isLessThan() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSharedSurface_isLessThanRequest, ::octaneapi::ApiSharedSurface_isLessThanResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSharedSurface_isLessThanRequest, ::octaneapi::ApiSharedSurface_isLessThanResponse>* streamer) {
                       return this->StreamedisLessThan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isLessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isLessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_isLessThanRequest* /*request*/, ::octaneapi::ApiSharedSurface_isLessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisLessThan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSharedSurface_isLessThanRequest,::octaneapi::ApiSharedSurface_isLessThanResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_hash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_hash() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSharedSurface_hashRequest, ::octaneapi::ApiSharedSurface_hashResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSharedSurface_hashRequest, ::octaneapi::ApiSharedSurface_hashResponse>* streamer) {
                       return this->Streamedhash(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_hash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status hash(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_hashRequest* /*request*/, ::octaneapi::ApiSharedSurface_hashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedhash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSharedSurface_hashRequest,::octaneapi::ApiSharedSurface_hashResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_release() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSharedSurface_releaseRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSharedSurface_releaseRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedrelease(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status release(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_releaseRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrelease(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSharedSurface_releaseRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_clone() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSharedSurface_cloneRequest, ::octaneapi::ApiSharedSurface_cloneResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSharedSurface_cloneRequest, ::octaneapi::ApiSharedSurface_cloneResponse>* streamer) {
                       return this->Streamedclone(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_cloneRequest* /*request*/, ::octaneapi::ApiSharedSurface_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSharedSurface_cloneRequest,::octaneapi::ApiSharedSurface_cloneResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getType() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSharedSurface_getTypeRequest, ::octaneapi::ApiSharedSurface_getTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSharedSurface_getTypeRequest, ::octaneapi::ApiSharedSurface_getTypeResponse>* streamer) {
                       return this->StreamedgetType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_getTypeRequest* /*request*/, ::octaneapi::ApiSharedSurface_getTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSharedSurface_getTypeRequest,::octaneapi::ApiSharedSurface_getTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getD3D11AdapterLuid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getD3D11AdapterLuid() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>* streamer) {
                       return this->StreamedgetD3D11AdapterLuid(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getD3D11AdapterLuid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getD3D11AdapterLuid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* /*request*/, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetD3D11AdapterLuid(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest,::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_createD3D11<WithStreamedUnaryMethod_equals<WithStreamedUnaryMethod_isLessThan<WithStreamedUnaryMethod_hash<WithStreamedUnaryMethod_release<WithStreamedUnaryMethod_clone<WithStreamedUnaryMethod_getType<WithStreamedUnaryMethod_getD3D11AdapterLuid<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_createD3D11<WithStreamedUnaryMethod_equals<WithStreamedUnaryMethod_isLessThan<WithStreamedUnaryMethod_hash<WithStreamedUnaryMethod_release<WithStreamedUnaryMethod_clone<WithStreamedUnaryMethod_getType<WithStreamedUnaryMethod_getD3D11AdapterLuid<Service > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apisharedsurface_2eproto__INCLUDED
