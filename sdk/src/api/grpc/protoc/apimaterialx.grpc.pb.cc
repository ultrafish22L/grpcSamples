// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apimaterialx.proto

#include "apimaterialx.pb.h"
#include "apimaterialx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiMaterialXGlobalService_method_names[] = {
  "/octaneapi.ApiMaterialXGlobalService/importMaterialXFile",
  "/octaneapi.ApiMaterialXGlobalService/getAllMxNodeCategories",
  "/octaneapi.ApiMaterialXGlobalService/getMxNodeCategory",
  "/octaneapi.ApiMaterialXGlobalService/getMxNodeCategory1",
  "/octaneapi.ApiMaterialXGlobalService/getMxValueType",
  "/octaneapi.ApiMaterialXGlobalService/getTextureValueType",
  "/octaneapi.ApiMaterialXGlobalService/getMxColorSpace",
  "/octaneapi.ApiMaterialXGlobalService/getNamedColorSpace",
  "/octaneapi.ApiMaterialXGlobalService/getNodeTypes",
  "/octaneapi.ApiMaterialXGlobalService/getGraphType",
  "/octaneapi.ApiMaterialXGlobalService/getMxInputNamesAndPinIds",
  "/octaneapi.ApiMaterialXGlobalService/getGraphMxInputNames",
  "/octaneapi.ApiMaterialXGlobalService/getGraphMxOutputNames",
  "/octaneapi.ApiMaterialXGlobalService/findConfiguration1",
};

std::unique_ptr< ApiMaterialXGlobalService::Stub> ApiMaterialXGlobalService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiMaterialXGlobalService::Stub> stub(new ApiMaterialXGlobalService::Stub(channel, options));
  return stub;
}

ApiMaterialXGlobalService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_importMaterialXFile_(ApiMaterialXGlobalService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAllMxNodeCategories_(ApiMaterialXGlobalService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMxNodeCategory_(ApiMaterialXGlobalService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMxNodeCategory1_(ApiMaterialXGlobalService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMxValueType_(ApiMaterialXGlobalService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTextureValueType_(ApiMaterialXGlobalService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMxColorSpace_(ApiMaterialXGlobalService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNamedColorSpace_(ApiMaterialXGlobalService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNodeTypes_(ApiMaterialXGlobalService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGraphType_(ApiMaterialXGlobalService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMxInputNamesAndPinIds_(ApiMaterialXGlobalService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGraphMxInputNames_(ApiMaterialXGlobalService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGraphMxOutputNames_(ApiMaterialXGlobalService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_findConfiguration1_(ApiMaterialXGlobalService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiMaterialXGlobalService::Stub::importMaterialXFile(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest& request, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_importMaterialXFile_, context, request, response);
}

void ApiMaterialXGlobalService::Stub::async::importMaterialXFile(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* request, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_importMaterialXFile_, context, request, response, std::move(f));
}

void ApiMaterialXGlobalService::Stub::async::importMaterialXFile(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* request, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_importMaterialXFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>* ApiMaterialXGlobalService::Stub::PrepareAsyncimportMaterialXFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_importMaterialXFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>* ApiMaterialXGlobalService::Stub::AsyncimportMaterialXFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncimportMaterialXFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMaterialXGlobalService::Stub::getAllMxNodeCategories(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest& request, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAllMxNodeCategories_, context, request, response);
}

void ApiMaterialXGlobalService::Stub::async::getAllMxNodeCategories(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* request, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllMxNodeCategories_, context, request, response, std::move(f));
}

void ApiMaterialXGlobalService::Stub::async::getAllMxNodeCategories(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* request, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllMxNodeCategories_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>* ApiMaterialXGlobalService::Stub::PrepareAsyncgetAllMxNodeCategoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAllMxNodeCategories_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>* ApiMaterialXGlobalService::Stub::AsyncgetAllMxNodeCategoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAllMxNodeCategoriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMaterialXGlobalService::Stub::getMxNodeCategory(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest& request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMxNodeCategory_, context, request, response);
}

void ApiMaterialXGlobalService::Stub::async::getMxNodeCategory(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMxNodeCategory_, context, request, response, std::move(f));
}

void ApiMaterialXGlobalService::Stub::async::getMxNodeCategory(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMxNodeCategory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>* ApiMaterialXGlobalService::Stub::PrepareAsyncgetMxNodeCategoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMxNodeCategory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>* ApiMaterialXGlobalService::Stub::AsyncgetMxNodeCategoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMxNodeCategoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMaterialXGlobalService::Stub::getMxNodeCategory1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request& request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMxNodeCategory1_, context, request, response);
}

void ApiMaterialXGlobalService::Stub::async::getMxNodeCategory1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMxNodeCategory1_, context, request, response, std::move(f));
}

void ApiMaterialXGlobalService::Stub::async::getMxNodeCategory1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMxNodeCategory1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>* ApiMaterialXGlobalService::Stub::PrepareAsyncgetMxNodeCategory1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMxNodeCategory1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>* ApiMaterialXGlobalService::Stub::AsyncgetMxNodeCategory1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMxNodeCategory1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMaterialXGlobalService::Stub::getMxValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest& request, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMxValueType_, context, request, response);
}

void ApiMaterialXGlobalService::Stub::async::getMxValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMxValueType_, context, request, response, std::move(f));
}

void ApiMaterialXGlobalService::Stub::async::getMxValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMxValueType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>* ApiMaterialXGlobalService::Stub::PrepareAsyncgetMxValueTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMxValueType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>* ApiMaterialXGlobalService::Stub::AsyncgetMxValueTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMxValueTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMaterialXGlobalService::Stub::getTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest& request, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getTextureValueType_, context, request, response);
}

void ApiMaterialXGlobalService::Stub::async::getTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTextureValueType_, context, request, response, std::move(f));
}

void ApiMaterialXGlobalService::Stub::async::getTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTextureValueType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>* ApiMaterialXGlobalService::Stub::PrepareAsyncgetTextureValueTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getTextureValueType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>* ApiMaterialXGlobalService::Stub::AsyncgetTextureValueTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTextureValueTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMaterialXGlobalService::Stub::getMxColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest& request, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMxColorSpace_, context, request, response);
}

void ApiMaterialXGlobalService::Stub::async::getMxColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMxColorSpace_, context, request, response, std::move(f));
}

void ApiMaterialXGlobalService::Stub::async::getMxColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMxColorSpace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>* ApiMaterialXGlobalService::Stub::PrepareAsyncgetMxColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMxColorSpace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>* ApiMaterialXGlobalService::Stub::AsyncgetMxColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMxColorSpaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMaterialXGlobalService::Stub::getNamedColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest& request, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNamedColorSpace_, context, request, response);
}

void ApiMaterialXGlobalService::Stub::async::getNamedColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNamedColorSpace_, context, request, response, std::move(f));
}

void ApiMaterialXGlobalService::Stub::async::getNamedColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNamedColorSpace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>* ApiMaterialXGlobalService::Stub::PrepareAsyncgetNamedColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNamedColorSpace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>* ApiMaterialXGlobalService::Stub::AsyncgetNamedColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNamedColorSpaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMaterialXGlobalService::Stub::getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest& request, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNodeTypes_, context, request, response);
}

void ApiMaterialXGlobalService::Stub::async::getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* request, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNodeTypes_, context, request, response, std::move(f));
}

void ApiMaterialXGlobalService::Stub::async::getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* request, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNodeTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>* ApiMaterialXGlobalService::Stub::PrepareAsyncgetNodeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse, ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNodeTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>* ApiMaterialXGlobalService::Stub::AsyncgetNodeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNodeTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMaterialXGlobalService::Stub::getGraphType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest& request, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getGraphType_, context, request, response);
}

void ApiMaterialXGlobalService::Stub::async::getGraphType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGraphType_, context, request, response, std::move(f));
}

void ApiMaterialXGlobalService::Stub::async::getGraphType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGraphType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>* ApiMaterialXGlobalService::Stub::PrepareAsyncgetGraphTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse, ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getGraphType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>* ApiMaterialXGlobalService::Stub::AsyncgetGraphTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetGraphTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMaterialXGlobalService::Stub::getMxInputNamesAndPinIds(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest& request, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMxInputNamesAndPinIds_, context, request, response);
}

void ApiMaterialXGlobalService::Stub::async::getMxInputNamesAndPinIds(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMxInputNamesAndPinIds_, context, request, response, std::move(f));
}

void ApiMaterialXGlobalService::Stub::async::getMxInputNamesAndPinIds(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMxInputNamesAndPinIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>* ApiMaterialXGlobalService::Stub::PrepareAsyncgetMxInputNamesAndPinIdsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMxInputNamesAndPinIds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>* ApiMaterialXGlobalService::Stub::AsyncgetMxInputNamesAndPinIdsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMxInputNamesAndPinIdsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMaterialXGlobalService::Stub::getGraphMxInputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest& request, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getGraphMxInputNames_, context, request, response);
}

void ApiMaterialXGlobalService::Stub::async::getGraphMxInputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGraphMxInputNames_, context, request, response, std::move(f));
}

void ApiMaterialXGlobalService::Stub::async::getGraphMxInputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGraphMxInputNames_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>* ApiMaterialXGlobalService::Stub::PrepareAsyncgetGraphMxInputNamesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getGraphMxInputNames_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>* ApiMaterialXGlobalService::Stub::AsyncgetGraphMxInputNamesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetGraphMxInputNamesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMaterialXGlobalService::Stub::getGraphMxOutputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest& request, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getGraphMxOutputNames_, context, request, response);
}

void ApiMaterialXGlobalService::Stub::async::getGraphMxOutputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGraphMxOutputNames_, context, request, response, std::move(f));
}

void ApiMaterialXGlobalService::Stub::async::getGraphMxOutputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGraphMxOutputNames_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>* ApiMaterialXGlobalService::Stub::PrepareAsyncgetGraphMxOutputNamesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getGraphMxOutputNames_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>* ApiMaterialXGlobalService::Stub::AsyncgetGraphMxOutputNamesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetGraphMxOutputNamesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMaterialXGlobalService::Stub::findConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request& request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_findConfiguration1_, context, request, response);
}

void ApiMaterialXGlobalService::Stub::async::findConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findConfiguration1_, context, request, response, std::move(f));
}

void ApiMaterialXGlobalService::Stub::async::findConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findConfiguration1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>* ApiMaterialXGlobalService::Stub::PrepareAsyncfindConfiguration1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_findConfiguration1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>* ApiMaterialXGlobalService::Stub::AsyncfindConfiguration1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfindConfiguration1Raw(context, request, cq);
  result->StartCall();
  return result;
}

ApiMaterialXGlobalService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMaterialXGlobalService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMaterialXGlobalService::Service, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMaterialXGlobalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* req,
             ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* resp) {
               return service->importMaterialXFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMaterialXGlobalService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMaterialXGlobalService::Service, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMaterialXGlobalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* req,
             ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* resp) {
               return service->getAllMxNodeCategories(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMaterialXGlobalService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMaterialXGlobalService::Service, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMaterialXGlobalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* req,
             ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* resp) {
               return service->getMxNodeCategory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMaterialXGlobalService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMaterialXGlobalService::Service, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMaterialXGlobalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* req,
             ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* resp) {
               return service->getMxNodeCategory1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMaterialXGlobalService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMaterialXGlobalService::Service, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMaterialXGlobalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* req,
             ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* resp) {
               return service->getMxValueType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMaterialXGlobalService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMaterialXGlobalService::Service, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMaterialXGlobalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* req,
             ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* resp) {
               return service->getTextureValueType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMaterialXGlobalService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMaterialXGlobalService::Service, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMaterialXGlobalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* req,
             ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* resp) {
               return service->getMxColorSpace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMaterialXGlobalService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMaterialXGlobalService::Service, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMaterialXGlobalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* req,
             ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* resp) {
               return service->getNamedColorSpace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMaterialXGlobalService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMaterialXGlobalService::Service, ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMaterialXGlobalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* req,
             ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* resp) {
               return service->getNodeTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMaterialXGlobalService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMaterialXGlobalService::Service, ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMaterialXGlobalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* req,
             ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* resp) {
               return service->getGraphType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMaterialXGlobalService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMaterialXGlobalService::Service, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMaterialXGlobalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* req,
             ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* resp) {
               return service->getMxInputNamesAndPinIds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMaterialXGlobalService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMaterialXGlobalService::Service, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMaterialXGlobalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* req,
             ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* resp) {
               return service->getGraphMxInputNames(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMaterialXGlobalService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMaterialXGlobalService::Service, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMaterialXGlobalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* req,
             ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* resp) {
               return service->getGraphMxOutputNames(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMaterialXGlobalService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMaterialXGlobalService::Service, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMaterialXGlobalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* req,
             ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* resp) {
               return service->findConfiguration1(ctx, req, resp);
             }, this)));
}

ApiMaterialXGlobalService::Service::~Service() {
}

::grpc::Status ApiMaterialXGlobalService::Service::importMaterialXFile(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* request, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMaterialXGlobalService::Service::getAllMxNodeCategories(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* request, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMaterialXGlobalService::Service::getMxNodeCategory(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMaterialXGlobalService::Service::getMxNodeCategory1(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMaterialXGlobalService::Service::getMxValueType(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMaterialXGlobalService::Service::getTextureValueType(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMaterialXGlobalService::Service::getMxColorSpace(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMaterialXGlobalService::Service::getNamedColorSpace(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMaterialXGlobalService::Service::getNodeTypes(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* request, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMaterialXGlobalService::Service::getGraphType(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMaterialXGlobalService::Service::getMxInputNamesAndPinIds(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMaterialXGlobalService::Service::getGraphMxInputNames(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMaterialXGlobalService::Service::getGraphMxOutputNames(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMaterialXGlobalService::Service::findConfiguration1(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

