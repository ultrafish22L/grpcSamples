// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apioutputcolorspaceinfo.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apioutputcolorspaceinfo_2eproto__INCLUDED
#define GRPC_apioutputcolorspaceinfo_2eproto__INCLUDED

#include "apioutputcolorspaceinfo.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiOutputColorSpaceInfo' from 'apioutputcolorspaceinfo.h'
class ApiOutputColorSpaceInfoService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiOutputColorSpaceInfoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Makes an info to produce output in a known color space
    virtual ::grpc::Status createKnownColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>> AsynccreateKnownColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>>(AsynccreateKnownColorSpaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>> PrepareAsynccreateKnownColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>>(PrepareAsynccreateKnownColorSpaceRaw(context, request, cq));
    }
    // / Makes an info to produce output in an OCIO color space
    virtual ::grpc::Status createOcioColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>> AsynccreateOcioColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>>(AsynccreateOcioColorSpaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>> PrepareAsynccreateOcioColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>>(PrepareAsynccreateOcioColorSpaceRaw(context, request, cq));
    }
    // / Makes an info to produce output using an OCIO view
    virtual ::grpc::Status createOcioView(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>> AsynccreateOcioView(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>>(AsynccreateOcioViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>> PrepareAsynccreateOcioView(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>>(PrepareAsynccreateOcioViewRaw(context, request, cq));
    }
    // / Makes an info to produce output in whatever is specified in the imager node of the render
    // / target being rendered
    virtual ::grpc::Status createUseImagerSettings(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>> AsynccreateUseImagerSettings(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>>(AsynccreateUseImagerSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>> PrepareAsynccreateUseImagerSettings(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>>(PrepareAsynccreateUseImagerSettingsRaw(context, request, cq));
    }
    virtual ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    // / 
    virtual ::grpc::Status clone(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>> Asyncclone(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>>(AsynccloneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>> PrepareAsyncclone(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>>(PrepareAsynccloneRaw(context, request, cq));
    }
    // / Returns whether two ApiOutputColorSpaceInfo instances are equivalent
    virtual ::grpc::Status equals(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>> Asyncequals(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>>(AsyncequalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>> PrepareAsyncequals(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>>(PrepareAsyncequalsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Makes an info to produce output in a known color space
      virtual void createKnownColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createKnownColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Makes an info to produce output in an OCIO color space
      virtual void createOcioColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createOcioColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Makes an info to produce output using an OCIO view
      virtual void createOcioView(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createOcioView(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Makes an info to produce output in whatever is specified in the imager node of the render
      // / target being rendered
      virtual void createUseImagerSettings(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createUseImagerSettings(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / 
      virtual void clone(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void clone(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns whether two ApiOutputColorSpaceInfo instances are equivalent
      virtual void equals(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void equals(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>* AsynccreateKnownColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>* PrepareAsynccreateKnownColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>* AsynccreateOcioColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>* PrepareAsynccreateOcioColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>* AsynccreateOcioViewRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>* PrepareAsynccreateOcioViewRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>* AsynccreateUseImagerSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>* PrepareAsynccreateUseImagerSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>* AsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>* PrepareAsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>* AsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>* PrepareAsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status createKnownColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>> AsynccreateKnownColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>>(AsynccreateKnownColorSpaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>> PrepareAsynccreateKnownColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>>(PrepareAsynccreateKnownColorSpaceRaw(context, request, cq));
    }
    ::grpc::Status createOcioColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>> AsynccreateOcioColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>>(AsynccreateOcioColorSpaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>> PrepareAsynccreateOcioColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>>(PrepareAsynccreateOcioColorSpaceRaw(context, request, cq));
    }
    ::grpc::Status createOcioView(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>> AsynccreateOcioView(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>>(AsynccreateOcioViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>> PrepareAsynccreateOcioView(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>>(PrepareAsynccreateOcioViewRaw(context, request, cq));
    }
    ::grpc::Status createUseImagerSettings(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>> AsynccreateUseImagerSettings(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>>(AsynccreateUseImagerSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>> PrepareAsynccreateUseImagerSettings(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>>(PrepareAsynccreateUseImagerSettingsRaw(context, request, cq));
    }
    ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    ::grpc::Status clone(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>> Asyncclone(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>>(AsynccloneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>> PrepareAsyncclone(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>>(PrepareAsynccloneRaw(context, request, cq));
    }
    ::grpc::Status equals(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>> Asyncequals(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>>(AsyncequalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>> PrepareAsyncequals(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>>(PrepareAsyncequalsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void createKnownColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* response, std::function<void(::grpc::Status)>) override;
      void createKnownColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void createOcioColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* response, std::function<void(::grpc::Status)>) override;
      void createOcioColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void createOcioView(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* response, std::function<void(::grpc::Status)>) override;
      void createOcioView(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void createUseImagerSettings(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* response, std::function<void(::grpc::Status)>) override;
      void createUseImagerSettings(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void clone(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* response, std::function<void(::grpc::Status)>) override;
      void clone(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void equals(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* response, std::function<void(::grpc::Status)>) override;
      void equals(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>* AsynccreateKnownColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>* PrepareAsynccreateKnownColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>* AsynccreateOcioColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>* PrepareAsynccreateOcioColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>* AsynccreateOcioViewRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>* PrepareAsynccreateOcioViewRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>* AsynccreateUseImagerSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>* PrepareAsynccreateUseImagerSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>* AsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>* PrepareAsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>* AsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>* PrepareAsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_createKnownColorSpace_;
    const ::grpc::internal::RpcMethod rpcmethod_createOcioColorSpace_;
    const ::grpc::internal::RpcMethod rpcmethod_createOcioView_;
    const ::grpc::internal::RpcMethod rpcmethod_createUseImagerSettings_;
    const ::grpc::internal::RpcMethod rpcmethod_destroy_;
    const ::grpc::internal::RpcMethod rpcmethod_clone_;
    const ::grpc::internal::RpcMethod rpcmethod_equals_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Makes an info to produce output in a known color space
    virtual ::grpc::Status createKnownColorSpace(::grpc::ServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* response);
    // / Makes an info to produce output in an OCIO color space
    virtual ::grpc::Status createOcioColorSpace(::grpc::ServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* response);
    // / Makes an info to produce output using an OCIO view
    virtual ::grpc::Status createOcioView(::grpc::ServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* response);
    // / Makes an info to produce output in whatever is specified in the imager node of the render
    // / target being rendered
    virtual ::grpc::Status createUseImagerSettings(::grpc::ServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* response);
    virtual ::grpc::Status destroy(::grpc::ServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* request, ::google::protobuf::Empty* response);
    // / 
    virtual ::grpc::Status clone(::grpc::ServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* response);
    // / Returns whether two ApiOutputColorSpaceInfo instances are equivalent
    virtual ::grpc::Status equals(::grpc::ServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_createKnownColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createKnownColorSpace() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_createKnownColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createKnownColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateKnownColorSpace(::grpc::ServerContext* context, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createOcioColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createOcioColorSpace() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_createOcioColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createOcioColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateOcioColorSpace(::grpc::ServerContext* context, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createOcioView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createOcioView() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_createOcioView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createOcioView(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateOcioView(::grpc::ServerContext* context, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createUseImagerSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createUseImagerSettings() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_createUseImagerSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createUseImagerSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateUseImagerSettings(::grpc::ServerContext* context, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_destroy() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_clone() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclone(::grpc::ServerContext* context, ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_equals() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestequals(::grpc::ServerContext* context, ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_createKnownColorSpace<WithAsyncMethod_createOcioColorSpace<WithAsyncMethod_createOcioView<WithAsyncMethod_createUseImagerSettings<WithAsyncMethod_destroy<WithAsyncMethod_clone<WithAsyncMethod_equals<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_createKnownColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createKnownColorSpace() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* response) { return this->createKnownColorSpace(context, request, response); }));}
    void SetMessageAllocatorFor_createKnownColorSpace(
        ::grpc::MessageAllocator< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createKnownColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createKnownColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createKnownColorSpace(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createOcioColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createOcioColorSpace() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* response) { return this->createOcioColorSpace(context, request, response); }));}
    void SetMessageAllocatorFor_createOcioColorSpace(
        ::grpc::MessageAllocator< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createOcioColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createOcioColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createOcioColorSpace(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createOcioView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createOcioView() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* response) { return this->createOcioView(context, request, response); }));}
    void SetMessageAllocatorFor_createOcioView(
        ::grpc::MessageAllocator< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createOcioView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createOcioView(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createOcioView(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createUseImagerSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createUseImagerSettings() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* response) { return this->createUseImagerSettings(context, request, response); }));}
    void SetMessageAllocatorFor_createUseImagerSettings(
        ::grpc::MessageAllocator< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createUseImagerSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createUseImagerSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createUseImagerSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* request, ::google::protobuf::Empty* response) { return this->destroy(context, request, response); }));}
    void SetMessageAllocatorFor_destroy(
        ::grpc::MessageAllocator< ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_clone() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* response) { return this->clone(context, request, response); }));}
    void SetMessageAllocatorFor_clone(
        ::grpc::MessageAllocator< ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clone(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_equals() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* response) { return this->equals(context, request, response); }));}
    void SetMessageAllocatorFor_equals(
        ::grpc::MessageAllocator< ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* equals(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_createKnownColorSpace<WithCallbackMethod_createOcioColorSpace<WithCallbackMethod_createOcioView<WithCallbackMethod_createUseImagerSettings<WithCallbackMethod_destroy<WithCallbackMethod_clone<WithCallbackMethod_equals<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_createKnownColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createKnownColorSpace() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_createKnownColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createKnownColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createOcioColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createOcioColorSpace() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_createOcioColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createOcioColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createOcioView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createOcioView() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_createOcioView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createOcioView(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createUseImagerSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createUseImagerSettings() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_createUseImagerSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createUseImagerSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_destroy() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_clone() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_equals() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_createKnownColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createKnownColorSpace() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_createKnownColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createKnownColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateKnownColorSpace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createOcioColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createOcioColorSpace() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_createOcioColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createOcioColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateOcioColorSpace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createOcioView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createOcioView() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_createOcioView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createOcioView(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateOcioView(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createUseImagerSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createUseImagerSettings() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_createUseImagerSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createUseImagerSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateUseImagerSettings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_destroy() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_clone() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_equals() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestequals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createKnownColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createKnownColorSpace() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createKnownColorSpace(context, request, response); }));
    }
    ~WithRawCallbackMethod_createKnownColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createKnownColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createKnownColorSpace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createOcioColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createOcioColorSpace() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createOcioColorSpace(context, request, response); }));
    }
    ~WithRawCallbackMethod_createOcioColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createOcioColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createOcioColorSpace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createOcioView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createOcioView() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createOcioView(context, request, response); }));
    }
    ~WithRawCallbackMethod_createOcioView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createOcioView(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createOcioView(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createUseImagerSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createUseImagerSettings() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createUseImagerSettings(context, request, response); }));
    }
    ~WithRawCallbackMethod_createUseImagerSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createUseImagerSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createUseImagerSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->destroy(context, request, response); }));
    }
    ~WithRawCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_clone() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->clone(context, request, response); }));
    }
    ~WithRawCallbackMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clone(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_equals() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->equals(context, request, response); }));
    }
    ~WithRawCallbackMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* equals(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createKnownColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createKnownColorSpace() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>* streamer) {
                       return this->StreamedcreateKnownColorSpace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createKnownColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createKnownColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateKnownColorSpace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest,::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createOcioColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createOcioColorSpace() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>* streamer) {
                       return this->StreamedcreateOcioColorSpace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createOcioColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createOcioColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateOcioColorSpace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest,::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createOcioView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createOcioView() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>* streamer) {
                       return this->StreamedcreateOcioView(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createOcioView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createOcioView(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateOcioView(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest,::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createUseImagerSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createUseImagerSettings() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>* streamer) {
                       return this->StreamedcreateUseImagerSettings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createUseImagerSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createUseImagerSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateUseImagerSettings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest,::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_destroy() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streameddestroy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddestroy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_clone() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>* streamer) {
                       return this->Streamedclone(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest,::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_equals() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>* streamer) {
                       return this->Streamedequals(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* /*request*/, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedequals(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest,::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_createKnownColorSpace<WithStreamedUnaryMethod_createOcioColorSpace<WithStreamedUnaryMethod_createOcioView<WithStreamedUnaryMethod_createUseImagerSettings<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_clone<WithStreamedUnaryMethod_equals<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_createKnownColorSpace<WithStreamedUnaryMethod_createOcioColorSpace<WithStreamedUnaryMethod_createOcioView<WithStreamedUnaryMethod_createUseImagerSettings<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_clone<WithStreamedUnaryMethod_equals<Service > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apioutputcolorspaceinfo_2eproto__INCLUDED
