// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apilogmanager.proto

#include "apilogmanager.pb.h"
#include "apilogmanager.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiLogManagerService_method_names[] = {
  "/octaneapi.ApiLogManagerService/registerLogCallbackProc",
  "/octaneapi.ApiLogManagerService/unregisterLogCallbackProc",
  "/octaneapi.ApiLogManagerService/openOctaneLogWindow",
  "/octaneapi.ApiLogManagerService/log",
  "/octaneapi.ApiLogManagerService/logError",
  "/octaneapi.ApiLogManagerService/logFmt",
  "/octaneapi.ApiLogManagerService/logErrorFmt",
  "/octaneapi.ApiLogManagerService/isFlagRegistered",
  "/octaneapi.ApiLogManagerService/setFlag",
  "/octaneapi.ApiLogManagerService/__registerLogFlag",
  "/octaneapi.ApiLogManagerService/__logFmtPrefix",
};

std::unique_ptr< ApiLogManagerService::Stub> ApiLogManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiLogManagerService::Stub> stub(new ApiLogManagerService::Stub(channel, options));
  return stub;
}

ApiLogManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_registerLogCallbackProc_(ApiLogManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unregisterLogCallbackProc_(ApiLogManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_openOctaneLogWindow_(ApiLogManagerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_log_(ApiLogManagerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_logError_(ApiLogManagerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_logFmt_(ApiLogManagerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_logErrorFmt_(ApiLogManagerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isFlagRegistered_(ApiLogManagerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setFlag_(ApiLogManagerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod___registerLogFlag_(ApiLogManagerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod___logFmtPrefix_(ApiLogManagerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiLogManagerService::Stub::registerLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest& request, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLogManager_registerLogCallbackProcRequest, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_registerLogCallbackProc_, context, request, response);
}

void ApiLogManagerService::Stub::async::registerLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLogManager_registerLogCallbackProcRequest, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerLogCallbackProc_, context, request, response, std::move(f));
}

void ApiLogManagerService::Stub::async::registerLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerLogCallbackProc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>* ApiLogManagerService::Stub::PrepareAsyncregisterLogCallbackProcRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse, ::octaneapi::ApiLogManager_registerLogCallbackProcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_registerLogCallbackProc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>* ApiLogManagerService::Stub::AsyncregisterLogCallbackProcRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncregisterLogCallbackProcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiLogManagerService::Stub::unregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest& request, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unregisterLogCallbackProc_, context, request, response);
}

void ApiLogManagerService::Stub::async::unregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregisterLogCallbackProc_, context, request, response, std::move(f));
}

void ApiLogManagerService::Stub::async::unregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregisterLogCallbackProc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>* ApiLogManagerService::Stub::PrepareAsyncunregisterLogCallbackProcRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse, ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unregisterLogCallbackProc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>* ApiLogManagerService::Stub::AsyncunregisterLogCallbackProcRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunregisterLogCallbackProcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiLogManagerService::Stub::openOctaneLogWindow(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLogManager_openOctaneLogWindowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_openOctaneLogWindow_, context, request, response);
}

void ApiLogManagerService::Stub::async::openOctaneLogWindow(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLogManager_openOctaneLogWindowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_openOctaneLogWindow_, context, request, response, std::move(f));
}

void ApiLogManagerService::Stub::async::openOctaneLogWindow(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_openOctaneLogWindow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiLogManagerService::Stub::PrepareAsyncopenOctaneLogWindowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiLogManager_openOctaneLogWindowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_openOctaneLogWindow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiLogManagerService::Stub::AsyncopenOctaneLogWindowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncopenOctaneLogWindowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiLogManagerService::Stub::log(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLogManager_logRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_log_, context, request, response);
}

void ApiLogManagerService::Stub::async::log(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLogManager_logRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_log_, context, request, response, std::move(f));
}

void ApiLogManagerService::Stub::async::log(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_log_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiLogManagerService::Stub::PrepareAsynclogRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiLogManager_logRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_log_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiLogManagerService::Stub::AsynclogRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclogRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiLogManagerService::Stub::logError(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLogManager_logErrorRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_logError_, context, request, response);
}

void ApiLogManagerService::Stub::async::logError(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLogManager_logErrorRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_logError_, context, request, response, std::move(f));
}

void ApiLogManagerService::Stub::async::logError(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_logError_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiLogManagerService::Stub::PrepareAsynclogErrorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiLogManager_logErrorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_logError_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiLogManagerService::Stub::AsynclogErrorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclogErrorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiLogManagerService::Stub::logFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLogManager_logFmtRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_logFmt_, context, request, response);
}

void ApiLogManagerService::Stub::async::logFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLogManager_logFmtRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_logFmt_, context, request, response, std::move(f));
}

void ApiLogManagerService::Stub::async::logFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_logFmt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiLogManagerService::Stub::PrepareAsynclogFmtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiLogManager_logFmtRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_logFmt_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiLogManagerService::Stub::AsynclogFmtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclogFmtRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiLogManagerService::Stub::logErrorFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLogManager_logErrorFmtRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_logErrorFmt_, context, request, response);
}

void ApiLogManagerService::Stub::async::logErrorFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLogManager_logErrorFmtRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_logErrorFmt_, context, request, response, std::move(f));
}

void ApiLogManagerService::Stub::async::logErrorFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_logErrorFmt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiLogManagerService::Stub::PrepareAsynclogErrorFmtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiLogManager_logErrorFmtRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_logErrorFmt_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiLogManagerService::Stub::AsynclogErrorFmtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclogErrorFmtRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiLogManagerService::Stub::isFlagRegistered(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest& request, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLogManager_isFlagRegisteredRequest, ::octaneapi::ApiLogManager_isFlagRegisteredResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isFlagRegistered_, context, request, response);
}

void ApiLogManagerService::Stub::async::isFlagRegistered(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* request, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLogManager_isFlagRegisteredRequest, ::octaneapi::ApiLogManager_isFlagRegisteredResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isFlagRegistered_, context, request, response, std::move(f));
}

void ApiLogManagerService::Stub::async::isFlagRegistered(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* request, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isFlagRegistered_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>* ApiLogManagerService::Stub::PrepareAsyncisFlagRegisteredRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiLogManager_isFlagRegisteredResponse, ::octaneapi::ApiLogManager_isFlagRegisteredRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isFlagRegistered_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>* ApiLogManagerService::Stub::AsyncisFlagRegisteredRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisFlagRegisteredRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiLogManagerService::Stub::setFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest& request, ::octaneapi::ApiLogManager_setFlagResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLogManager_setFlagRequest, ::octaneapi::ApiLogManager_setFlagResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setFlag_, context, request, response);
}

void ApiLogManagerService::Stub::async::setFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest* request, ::octaneapi::ApiLogManager_setFlagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLogManager_setFlagRequest, ::octaneapi::ApiLogManager_setFlagResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setFlag_, context, request, response, std::move(f));
}

void ApiLogManagerService::Stub::async::setFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest* request, ::octaneapi::ApiLogManager_setFlagResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setFlag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_setFlagResponse>* ApiLogManagerService::Stub::PrepareAsyncsetFlagRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiLogManager_setFlagResponse, ::octaneapi::ApiLogManager_setFlagRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setFlag_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_setFlagResponse>* ApiLogManagerService::Stub::AsyncsetFlagRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetFlagRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiLogManagerService::Stub::__registerLogFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest& request, ::octaneapi::ApiLogManager___registerLogFlagResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLogManager___registerLogFlagRequest, ::octaneapi::ApiLogManager___registerLogFlagResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod___registerLogFlag_, context, request, response);
}

void ApiLogManagerService::Stub::async::__registerLogFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest* request, ::octaneapi::ApiLogManager___registerLogFlagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLogManager___registerLogFlagRequest, ::octaneapi::ApiLogManager___registerLogFlagResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod___registerLogFlag_, context, request, response, std::move(f));
}

void ApiLogManagerService::Stub::async::__registerLogFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest* request, ::octaneapi::ApiLogManager___registerLogFlagResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod___registerLogFlag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager___registerLogFlagResponse>* ApiLogManagerService::Stub::PrepareAsync__registerLogFlagRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiLogManager___registerLogFlagResponse, ::octaneapi::ApiLogManager___registerLogFlagRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod___registerLogFlag_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager___registerLogFlagResponse>* ApiLogManagerService::Stub::Async__registerLogFlagRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsync__registerLogFlagRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiLogManagerService::Stub::__logFmtPrefix(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLogManager___logFmtPrefixRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod___logFmtPrefix_, context, request, response);
}

void ApiLogManagerService::Stub::async::__logFmtPrefix(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLogManager___logFmtPrefixRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod___logFmtPrefix_, context, request, response, std::move(f));
}

void ApiLogManagerService::Stub::async::__logFmtPrefix(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod___logFmtPrefix_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiLogManagerService::Stub::PrepareAsync__logFmtPrefixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiLogManager___logFmtPrefixRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod___logFmtPrefix_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiLogManagerService::Stub::Async__logFmtPrefixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsync__logFmtPrefixRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiLogManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLogManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLogManagerService::Service, ::octaneapi::ApiLogManager_registerLogCallbackProcRequest, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLogManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* req,
             ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* resp) {
               return service->registerLogCallbackProc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLogManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLogManagerService::Service, ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLogManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* req,
             ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* resp) {
               return service->unregisterLogCallbackProc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLogManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLogManagerService::Service, ::octaneapi::ApiLogManager_openOctaneLogWindowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLogManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->openOctaneLogWindow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLogManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLogManagerService::Service, ::octaneapi::ApiLogManager_logRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLogManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLogManager_logRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->log(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLogManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLogManagerService::Service, ::octaneapi::ApiLogManager_logErrorRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLogManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLogManager_logErrorRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->logError(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLogManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLogManagerService::Service, ::octaneapi::ApiLogManager_logFmtRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLogManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLogManager_logFmtRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->logFmt(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLogManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLogManagerService::Service, ::octaneapi::ApiLogManager_logErrorFmtRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLogManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLogManager_logErrorFmtRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->logErrorFmt(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLogManagerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLogManagerService::Service, ::octaneapi::ApiLogManager_isFlagRegisteredRequest, ::octaneapi::ApiLogManager_isFlagRegisteredResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLogManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* req,
             ::octaneapi::ApiLogManager_isFlagRegisteredResponse* resp) {
               return service->isFlagRegistered(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLogManagerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLogManagerService::Service, ::octaneapi::ApiLogManager_setFlagRequest, ::octaneapi::ApiLogManager_setFlagResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLogManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLogManager_setFlagRequest* req,
             ::octaneapi::ApiLogManager_setFlagResponse* resp) {
               return service->setFlag(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLogManagerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLogManagerService::Service, ::octaneapi::ApiLogManager___registerLogFlagRequest, ::octaneapi::ApiLogManager___registerLogFlagResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLogManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLogManager___registerLogFlagRequest* req,
             ::octaneapi::ApiLogManager___registerLogFlagResponse* resp) {
               return service->__registerLogFlag(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLogManagerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLogManagerService::Service, ::octaneapi::ApiLogManager___logFmtPrefixRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLogManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLogManager___logFmtPrefixRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->__logFmtPrefix(ctx, req, resp);
             }, this)));
}

ApiLogManagerService::Service::~Service() {
}

::grpc::Status ApiLogManagerService::Service::registerLogCallbackProc(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiLogManagerService::Service::unregisterLogCallbackProc(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiLogManagerService::Service::openOctaneLogWindow(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiLogManagerService::Service::log(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_logRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiLogManagerService::Service::logError(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_logErrorRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiLogManagerService::Service::logFmt(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_logFmtRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiLogManagerService::Service::logErrorFmt(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiLogManagerService::Service::isFlagRegistered(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* request, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiLogManagerService::Service::setFlag(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_setFlagRequest* request, ::octaneapi::ApiLogManager_setFlagResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiLogManagerService::Service::__registerLogFlag(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest* request, ::octaneapi::ApiLogManager___registerLogFlagResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiLogManagerService::Service::__logFmtPrefix(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

