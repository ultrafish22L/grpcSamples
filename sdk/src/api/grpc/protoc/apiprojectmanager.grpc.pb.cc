// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apiprojectmanager.proto

#include "apiprojectmanager.pb.h"
#include "apiprojectmanager.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiProjectManagerService_method_names[] = {
  "/octaneapi.ApiProjectManagerService/isValid",
  "/octaneapi.ApiProjectManagerService/rootNodeGraph",
  "/octaneapi.ApiProjectManagerService/applicationPreferences",
  "/octaneapi.ApiProjectManagerService/projectSettings",
  "/octaneapi.ApiProjectManagerService/projectMetadata",
  "/octaneapi.ApiProjectManagerService/previewRenderTarget",
  "/octaneapi.ApiProjectManagerService/materialBall",
  "/octaneapi.ApiProjectManagerService/getCurrentProject",
  "/octaneapi.ApiProjectManagerService/resetProject",
  "/octaneapi.ApiProjectManagerService/loadProject",
  "/octaneapi.ApiProjectManagerService/loadedFromPackage",
  "/octaneapi.ApiProjectManagerService/loadedOcsVersion",
  "/octaneapi.ApiProjectManagerService/saveProject",
  "/octaneapi.ApiProjectManagerService/saveProjectAs",
  "/octaneapi.ApiProjectManagerService/saveProjectAsReferencePackage",
  "/octaneapi.ApiProjectManagerService/unpackPackage",
  "/octaneapi.ApiProjectManagerService/addObserver",
  "/octaneapi.ApiProjectManagerService/removeObserver",
};

std::unique_ptr< ApiProjectManagerService::Stub> ApiProjectManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiProjectManagerService::Stub> stub(new ApiProjectManagerService::Stub(channel, options));
  return stub;
}

ApiProjectManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_isValid_(ApiProjectManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_rootNodeGraph_(ApiProjectManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_applicationPreferences_(ApiProjectManagerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_projectSettings_(ApiProjectManagerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_projectMetadata_(ApiProjectManagerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_previewRenderTarget_(ApiProjectManagerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_materialBall_(ApiProjectManagerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCurrentProject_(ApiProjectManagerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_resetProject_(ApiProjectManagerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadProject_(ApiProjectManagerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadedFromPackage_(ApiProjectManagerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadedOcsVersion_(ApiProjectManagerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveProject_(ApiProjectManagerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveProjectAs_(ApiProjectManagerService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveProjectAsReferencePackage_(ApiProjectManagerService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unpackPackage_(ApiProjectManagerService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addObserver_(ApiProjectManagerService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_removeObserver_(ApiProjectManagerService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiProjectManagerService::Stub::isValid(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest& request, ::octaneapi::ApiProjectManager_isValidResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_isValidRequest, ::octaneapi::ApiProjectManager_isValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isValid_, context, request, response);
}

void ApiProjectManagerService::Stub::async::isValid(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest* request, ::octaneapi::ApiProjectManager_isValidResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_isValidRequest, ::octaneapi::ApiProjectManager_isValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isValid_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::isValid(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest* request, ::octaneapi::ApiProjectManager_isValidResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isValid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_isValidResponse>* ApiProjectManagerService::Stub::PrepareAsyncisValidRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_isValidResponse, ::octaneapi::ApiProjectManager_isValidRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isValid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_isValidResponse>* ApiProjectManagerService::Stub::AsyncisValidRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisValidRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::rootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest& request, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_rootNodeGraphRequest, ::octaneapi::ApiProjectManager_rootNodeGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_rootNodeGraph_, context, request, response);
}

void ApiProjectManagerService::Stub::async::rootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* request, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_rootNodeGraphRequest, ::octaneapi::ApiProjectManager_rootNodeGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_rootNodeGraph_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::rootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* request, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_rootNodeGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>* ApiProjectManagerService::Stub::PrepareAsyncrootNodeGraphRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_rootNodeGraphResponse, ::octaneapi::ApiProjectManager_rootNodeGraphRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_rootNodeGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>* ApiProjectManagerService::Stub::AsyncrootNodeGraphRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrootNodeGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::applicationPreferences(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest& request, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_applicationPreferencesRequest, ::octaneapi::ApiProjectManager_applicationPreferencesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_applicationPreferences_, context, request, response);
}

void ApiProjectManagerService::Stub::async::applicationPreferences(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* request, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_applicationPreferencesRequest, ::octaneapi::ApiProjectManager_applicationPreferencesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_applicationPreferences_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::applicationPreferences(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* request, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_applicationPreferences_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>* ApiProjectManagerService::Stub::PrepareAsyncapplicationPreferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_applicationPreferencesResponse, ::octaneapi::ApiProjectManager_applicationPreferencesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_applicationPreferences_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>* ApiProjectManagerService::Stub::AsyncapplicationPreferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncapplicationPreferencesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::projectSettings(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest& request, ::octaneapi::ApiProjectManager_projectSettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_projectSettingsRequest, ::octaneapi::ApiProjectManager_projectSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_projectSettings_, context, request, response);
}

void ApiProjectManagerService::Stub::async::projectSettings(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest* request, ::octaneapi::ApiProjectManager_projectSettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_projectSettingsRequest, ::octaneapi::ApiProjectManager_projectSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_projectSettings_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::projectSettings(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest* request, ::octaneapi::ApiProjectManager_projectSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_projectSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectSettingsResponse>* ApiProjectManagerService::Stub::PrepareAsyncprojectSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_projectSettingsResponse, ::octaneapi::ApiProjectManager_projectSettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_projectSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectSettingsResponse>* ApiProjectManagerService::Stub::AsyncprojectSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncprojectSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::projectMetadata(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest& request, ::octaneapi::ApiProjectManager_projectMetadataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_projectMetadataRequest, ::octaneapi::ApiProjectManager_projectMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_projectMetadata_, context, request, response);
}

void ApiProjectManagerService::Stub::async::projectMetadata(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest* request, ::octaneapi::ApiProjectManager_projectMetadataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_projectMetadataRequest, ::octaneapi::ApiProjectManager_projectMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_projectMetadata_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::projectMetadata(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest* request, ::octaneapi::ApiProjectManager_projectMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_projectMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectMetadataResponse>* ApiProjectManagerService::Stub::PrepareAsyncprojectMetadataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_projectMetadataResponse, ::octaneapi::ApiProjectManager_projectMetadataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_projectMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectMetadataResponse>* ApiProjectManagerService::Stub::AsyncprojectMetadataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncprojectMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::previewRenderTarget(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest& request, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_previewRenderTargetRequest, ::octaneapi::ApiProjectManager_previewRenderTargetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_previewRenderTarget_, context, request, response);
}

void ApiProjectManagerService::Stub::async::previewRenderTarget(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* request, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_previewRenderTargetRequest, ::octaneapi::ApiProjectManager_previewRenderTargetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_previewRenderTarget_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::previewRenderTarget(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* request, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_previewRenderTarget_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>* ApiProjectManagerService::Stub::PrepareAsyncpreviewRenderTargetRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_previewRenderTargetResponse, ::octaneapi::ApiProjectManager_previewRenderTargetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_previewRenderTarget_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>* ApiProjectManagerService::Stub::AsyncpreviewRenderTargetRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpreviewRenderTargetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::materialBall(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest& request, ::octaneapi::ApiProjectManager_materialBallResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_materialBallRequest, ::octaneapi::ApiProjectManager_materialBallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_materialBall_, context, request, response);
}

void ApiProjectManagerService::Stub::async::materialBall(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest* request, ::octaneapi::ApiProjectManager_materialBallResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_materialBallRequest, ::octaneapi::ApiProjectManager_materialBallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_materialBall_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::materialBall(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest* request, ::octaneapi::ApiProjectManager_materialBallResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_materialBall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_materialBallResponse>* ApiProjectManagerService::Stub::PrepareAsyncmaterialBallRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_materialBallResponse, ::octaneapi::ApiProjectManager_materialBallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_materialBall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_materialBallResponse>* ApiProjectManagerService::Stub::AsyncmaterialBallRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmaterialBallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::getCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest& request, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_getCurrentProjectRequest, ::octaneapi::ApiProjectManager_getCurrentProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getCurrentProject_, context, request, response);
}

void ApiProjectManagerService::Stub::async::getCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* request, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_getCurrentProjectRequest, ::octaneapi::ApiProjectManager_getCurrentProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCurrentProject_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::getCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* request, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCurrentProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>* ApiProjectManagerService::Stub::PrepareAsyncgetCurrentProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_getCurrentProjectResponse, ::octaneapi::ApiProjectManager_getCurrentProjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getCurrentProject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>* ApiProjectManagerService::Stub::AsyncgetCurrentProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetCurrentProjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::resetProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest& request, ::octaneapi::ApiProjectManager_resetProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_resetProjectRequest, ::octaneapi::ApiProjectManager_resetProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_resetProject_, context, request, response);
}

void ApiProjectManagerService::Stub::async::resetProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest* request, ::octaneapi::ApiProjectManager_resetProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_resetProjectRequest, ::octaneapi::ApiProjectManager_resetProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resetProject_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::resetProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest* request, ::octaneapi::ApiProjectManager_resetProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resetProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_resetProjectResponse>* ApiProjectManagerService::Stub::PrepareAsyncresetProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_resetProjectResponse, ::octaneapi::ApiProjectManager_resetProjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_resetProject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_resetProjectResponse>* ApiProjectManagerService::Stub::AsyncresetProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncresetProjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::loadProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest& request, ::octaneapi::ApiProjectManager_loadProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_loadProjectRequest, ::octaneapi::ApiProjectManager_loadProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadProject_, context, request, response);
}

void ApiProjectManagerService::Stub::async::loadProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest* request, ::octaneapi::ApiProjectManager_loadProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_loadProjectRequest, ::octaneapi::ApiProjectManager_loadProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadProject_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::loadProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest* request, ::octaneapi::ApiProjectManager_loadProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadProjectResponse>* ApiProjectManagerService::Stub::PrepareAsyncloadProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_loadProjectResponse, ::octaneapi::ApiProjectManager_loadProjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadProject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadProjectResponse>* ApiProjectManagerService::Stub::AsyncloadProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadProjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::loadedFromPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest& request, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_loadedFromPackageRequest, ::octaneapi::ApiProjectManager_loadedFromPackageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadedFromPackage_, context, request, response);
}

void ApiProjectManagerService::Stub::async::loadedFromPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* request, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_loadedFromPackageRequest, ::octaneapi::ApiProjectManager_loadedFromPackageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadedFromPackage_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::loadedFromPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* request, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadedFromPackage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>* ApiProjectManagerService::Stub::PrepareAsyncloadedFromPackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_loadedFromPackageResponse, ::octaneapi::ApiProjectManager_loadedFromPackageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadedFromPackage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>* ApiProjectManagerService::Stub::AsyncloadedFromPackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadedFromPackageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::loadedOcsVersion(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest& request, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_loadedOcsVersionRequest, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadedOcsVersion_, context, request, response);
}

void ApiProjectManagerService::Stub::async::loadedOcsVersion(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* request, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_loadedOcsVersionRequest, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadedOcsVersion_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::loadedOcsVersion(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* request, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadedOcsVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>* ApiProjectManagerService::Stub::PrepareAsyncloadedOcsVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse, ::octaneapi::ApiProjectManager_loadedOcsVersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadedOcsVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>* ApiProjectManagerService::Stub::AsyncloadedOcsVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadedOcsVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::saveProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest& request, ::octaneapi::ApiProjectManager_saveProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_saveProjectRequest, ::octaneapi::ApiProjectManager_saveProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveProject_, context, request, response);
}

void ApiProjectManagerService::Stub::async::saveProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest* request, ::octaneapi::ApiProjectManager_saveProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_saveProjectRequest, ::octaneapi::ApiProjectManager_saveProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveProject_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::saveProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest* request, ::octaneapi::ApiProjectManager_saveProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectResponse>* ApiProjectManagerService::Stub::PrepareAsyncsaveProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_saveProjectResponse, ::octaneapi::ApiProjectManager_saveProjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveProject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectResponse>* ApiProjectManagerService::Stub::AsyncsaveProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveProjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::saveProjectAs(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest& request, ::octaneapi::ApiProjectManager_saveProjectAsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_saveProjectAsRequest, ::octaneapi::ApiProjectManager_saveProjectAsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveProjectAs_, context, request, response);
}

void ApiProjectManagerService::Stub::async::saveProjectAs(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_saveProjectAsRequest, ::octaneapi::ApiProjectManager_saveProjectAsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveProjectAs_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::saveProjectAs(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveProjectAs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsResponse>* ApiProjectManagerService::Stub::PrepareAsyncsaveProjectAsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_saveProjectAsResponse, ::octaneapi::ApiProjectManager_saveProjectAsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveProjectAs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsResponse>* ApiProjectManagerService::Stub::AsyncsaveProjectAsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveProjectAsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::saveProjectAsReferencePackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest& request, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveProjectAsReferencePackage_, context, request, response);
}

void ApiProjectManagerService::Stub::async::saveProjectAsReferencePackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveProjectAsReferencePackage_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::saveProjectAsReferencePackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveProjectAsReferencePackage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>* ApiProjectManagerService::Stub::PrepareAsyncsaveProjectAsReferencePackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveProjectAsReferencePackage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>* ApiProjectManagerService::Stub::AsyncsaveProjectAsReferencePackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveProjectAsReferencePackageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::unpackPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest& request, ::octaneapi::ApiProjectManager_unpackPackageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_unpackPackageRequest, ::octaneapi::ApiProjectManager_unpackPackageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unpackPackage_, context, request, response);
}

void ApiProjectManagerService::Stub::async::unpackPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest* request, ::octaneapi::ApiProjectManager_unpackPackageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_unpackPackageRequest, ::octaneapi::ApiProjectManager_unpackPackageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unpackPackage_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::unpackPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest* request, ::octaneapi::ApiProjectManager_unpackPackageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unpackPackage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_unpackPackageResponse>* ApiProjectManagerService::Stub::PrepareAsyncunpackPackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_unpackPackageResponse, ::octaneapi::ApiProjectManager_unpackPackageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unpackPackage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_unpackPackageResponse>* ApiProjectManagerService::Stub::AsyncunpackPackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunpackPackageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::addObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest& request, ::octaneapi::ApiProjectManager_addObserverResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_addObserverRequest, ::octaneapi::ApiProjectManager_addObserverResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addObserver_, context, request, response);
}

void ApiProjectManagerService::Stub::async::addObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest* request, ::octaneapi::ApiProjectManager_addObserverResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_addObserverRequest, ::octaneapi::ApiProjectManager_addObserverResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addObserver_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::addObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest* request, ::octaneapi::ApiProjectManager_addObserverResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addObserver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_addObserverResponse>* ApiProjectManagerService::Stub::PrepareAsyncaddObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProjectManager_addObserverResponse, ::octaneapi::ApiProjectManager_addObserverRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addObserver_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_addObserverResponse>* ApiProjectManagerService::Stub::AsyncaddObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddObserverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProjectManagerService::Stub::removeObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProjectManager_removeObserverRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_removeObserver_, context, request, response);
}

void ApiProjectManagerService::Stub::async::removeObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProjectManager_removeObserverRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeObserver_, context, request, response, std::move(f));
}

void ApiProjectManagerService::Stub::async::removeObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeObserver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiProjectManagerService::Stub::PrepareAsyncremoveObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiProjectManager_removeObserverRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_removeObserver_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiProjectManagerService::Stub::AsyncremoveObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremoveObserverRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiProjectManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_isValidRequest, ::octaneapi::ApiProjectManager_isValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_isValidRequest* req,
             ::octaneapi::ApiProjectManager_isValidResponse* resp) {
               return service->isValid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_rootNodeGraphRequest, ::octaneapi::ApiProjectManager_rootNodeGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* req,
             ::octaneapi::ApiProjectManager_rootNodeGraphResponse* resp) {
               return service->rootNodeGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_applicationPreferencesRequest, ::octaneapi::ApiProjectManager_applicationPreferencesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* req,
             ::octaneapi::ApiProjectManager_applicationPreferencesResponse* resp) {
               return service->applicationPreferences(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_projectSettingsRequest, ::octaneapi::ApiProjectManager_projectSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_projectSettingsRequest* req,
             ::octaneapi::ApiProjectManager_projectSettingsResponse* resp) {
               return service->projectSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_projectMetadataRequest, ::octaneapi::ApiProjectManager_projectMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_projectMetadataRequest* req,
             ::octaneapi::ApiProjectManager_projectMetadataResponse* resp) {
               return service->projectMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_previewRenderTargetRequest, ::octaneapi::ApiProjectManager_previewRenderTargetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* req,
             ::octaneapi::ApiProjectManager_previewRenderTargetResponse* resp) {
               return service->previewRenderTarget(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_materialBallRequest, ::octaneapi::ApiProjectManager_materialBallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_materialBallRequest* req,
             ::octaneapi::ApiProjectManager_materialBallResponse* resp) {
               return service->materialBall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_getCurrentProjectRequest, ::octaneapi::ApiProjectManager_getCurrentProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* req,
             ::octaneapi::ApiProjectManager_getCurrentProjectResponse* resp) {
               return service->getCurrentProject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_resetProjectRequest, ::octaneapi::ApiProjectManager_resetProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_resetProjectRequest* req,
             ::octaneapi::ApiProjectManager_resetProjectResponse* resp) {
               return service->resetProject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_loadProjectRequest, ::octaneapi::ApiProjectManager_loadProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_loadProjectRequest* req,
             ::octaneapi::ApiProjectManager_loadProjectResponse* resp) {
               return service->loadProject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_loadedFromPackageRequest, ::octaneapi::ApiProjectManager_loadedFromPackageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* req,
             ::octaneapi::ApiProjectManager_loadedFromPackageResponse* resp) {
               return service->loadedFromPackage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_loadedOcsVersionRequest, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* req,
             ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* resp) {
               return service->loadedOcsVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_saveProjectRequest, ::octaneapi::ApiProjectManager_saveProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_saveProjectRequest* req,
             ::octaneapi::ApiProjectManager_saveProjectResponse* resp) {
               return service->saveProject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_saveProjectAsRequest, ::octaneapi::ApiProjectManager_saveProjectAsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_saveProjectAsRequest* req,
             ::octaneapi::ApiProjectManager_saveProjectAsResponse* resp) {
               return service->saveProjectAs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* req,
             ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* resp) {
               return service->saveProjectAsReferencePackage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_unpackPackageRequest, ::octaneapi::ApiProjectManager_unpackPackageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_unpackPackageRequest* req,
             ::octaneapi::ApiProjectManager_unpackPackageResponse* resp) {
               return service->unpackPackage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_addObserverRequest, ::octaneapi::ApiProjectManager_addObserverResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_addObserverRequest* req,
             ::octaneapi::ApiProjectManager_addObserverResponse* resp) {
               return service->addObserver(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProjectManagerService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProjectManagerService::Service, ::octaneapi::ApiProjectManager_removeObserverRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProjectManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProjectManager_removeObserverRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->removeObserver(ctx, req, resp);
             }, this)));
}

ApiProjectManagerService::Service::~Service() {
}

::grpc::Status ApiProjectManagerService::Service::isValid(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_isValidRequest* request, ::octaneapi::ApiProjectManager_isValidResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::rootNodeGraph(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* request, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::applicationPreferences(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* request, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::projectSettings(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest* request, ::octaneapi::ApiProjectManager_projectSettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::projectMetadata(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest* request, ::octaneapi::ApiProjectManager_projectMetadataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::previewRenderTarget(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* request, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::materialBall(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest* request, ::octaneapi::ApiProjectManager_materialBallResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::getCurrentProject(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* request, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::resetProject(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest* request, ::octaneapi::ApiProjectManager_resetProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::loadProject(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest* request, ::octaneapi::ApiProjectManager_loadProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::loadedFromPackage(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* request, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::loadedOcsVersion(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* request, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::saveProject(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest* request, ::octaneapi::ApiProjectManager_saveProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::saveProjectAs(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::saveProjectAsReferencePackage(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::unpackPackage(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest* request, ::octaneapi::ApiProjectManager_unpackPackageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::addObserver(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest* request, ::octaneapi::ApiProjectManager_addObserverResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProjectManagerService::Service::removeObserver(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

