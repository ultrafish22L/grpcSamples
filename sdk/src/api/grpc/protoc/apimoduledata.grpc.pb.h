// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apimoduledata.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apimoduledata_2eproto__INCLUDED
#define GRPC_apimoduledata_2eproto__INCLUDED

#include "apimoduledata.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiModuleData' from 'apimoduledata.h'
class ApiModuleDataService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiModuleDataService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Loads application data stored for this module
    virtual ::grpc::Status loadApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest& request, ::octaneapi::ApiModuleData_loadApplicationDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiModuleData_loadApplicationDataResponse>> AsyncloadApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiModuleData_loadApplicationDataResponse>>(AsyncloadApplicationDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiModuleData_loadApplicationDataResponse>> PrepareAsyncloadApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiModuleData_loadApplicationDataResponse>>(PrepareAsyncloadApplicationDataRaw(context, request, cq));
    }
    // / Stores application data
    virtual ::grpc::Status storeApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest& request, ::octaneapi::ApiModuleData_storeApplicationDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiModuleData_storeApplicationDataResponse>> AsyncstoreApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiModuleData_storeApplicationDataResponse>>(AsyncstoreApplicationDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiModuleData_storeApplicationDataResponse>> PrepareAsyncstoreApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiModuleData_storeApplicationDataResponse>>(PrepareAsyncstoreApplicationDataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Loads application data stored for this module
      virtual void loadApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* request, ::octaneapi::ApiModuleData_loadApplicationDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void loadApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* request, ::octaneapi::ApiModuleData_loadApplicationDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Stores application data
      virtual void storeApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* request, ::octaneapi::ApiModuleData_storeApplicationDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void storeApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* request, ::octaneapi::ApiModuleData_storeApplicationDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiModuleData_loadApplicationDataResponse>* AsyncloadApplicationDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiModuleData_loadApplicationDataResponse>* PrepareAsyncloadApplicationDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiModuleData_storeApplicationDataResponse>* AsyncstoreApplicationDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiModuleData_storeApplicationDataResponse>* PrepareAsyncstoreApplicationDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status loadApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest& request, ::octaneapi::ApiModuleData_loadApplicationDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_loadApplicationDataResponse>> AsyncloadApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_loadApplicationDataResponse>>(AsyncloadApplicationDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_loadApplicationDataResponse>> PrepareAsyncloadApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_loadApplicationDataResponse>>(PrepareAsyncloadApplicationDataRaw(context, request, cq));
    }
    ::grpc::Status storeApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest& request, ::octaneapi::ApiModuleData_storeApplicationDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_storeApplicationDataResponse>> AsyncstoreApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_storeApplicationDataResponse>>(AsyncstoreApplicationDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_storeApplicationDataResponse>> PrepareAsyncstoreApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_storeApplicationDataResponse>>(PrepareAsyncstoreApplicationDataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void loadApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* request, ::octaneapi::ApiModuleData_loadApplicationDataResponse* response, std::function<void(::grpc::Status)>) override;
      void loadApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* request, ::octaneapi::ApiModuleData_loadApplicationDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void storeApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* request, ::octaneapi::ApiModuleData_storeApplicationDataResponse* response, std::function<void(::grpc::Status)>) override;
      void storeApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* request, ::octaneapi::ApiModuleData_storeApplicationDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_loadApplicationDataResponse>* AsyncloadApplicationDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_loadApplicationDataResponse>* PrepareAsyncloadApplicationDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_storeApplicationDataResponse>* AsyncstoreApplicationDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_storeApplicationDataResponse>* PrepareAsyncstoreApplicationDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_loadApplicationData_;
    const ::grpc::internal::RpcMethod rpcmethod_storeApplicationData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Loads application data stored for this module
    virtual ::grpc::Status loadApplicationData(::grpc::ServerContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* request, ::octaneapi::ApiModuleData_loadApplicationDataResponse* response);
    // / Stores application data
    virtual ::grpc::Status storeApplicationData(::grpc::ServerContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* request, ::octaneapi::ApiModuleData_storeApplicationDataResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_loadApplicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loadApplicationData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_loadApplicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadApplicationData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* /*request*/, ::octaneapi::ApiModuleData_loadApplicationDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadApplicationData(::grpc::ServerContext* context, ::octaneapi::ApiModuleData_loadApplicationDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiModuleData_loadApplicationDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_storeApplicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_storeApplicationData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_storeApplicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status storeApplicationData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* /*request*/, ::octaneapi::ApiModuleData_storeApplicationDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststoreApplicationData(::grpc::ServerContext* context, ::octaneapi::ApiModuleData_storeApplicationDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiModuleData_storeApplicationDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_loadApplicationData<WithAsyncMethod_storeApplicationData<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_loadApplicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_loadApplicationData() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiModuleData_loadApplicationDataRequest, ::octaneapi::ApiModuleData_loadApplicationDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* request, ::octaneapi::ApiModuleData_loadApplicationDataResponse* response) { return this->loadApplicationData(context, request, response); }));}
    void SetMessageAllocatorFor_loadApplicationData(
        ::grpc::MessageAllocator< ::octaneapi::ApiModuleData_loadApplicationDataRequest, ::octaneapi::ApiModuleData_loadApplicationDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiModuleData_loadApplicationDataRequest, ::octaneapi::ApiModuleData_loadApplicationDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_loadApplicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadApplicationData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* /*request*/, ::octaneapi::ApiModuleData_loadApplicationDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadApplicationData(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* /*request*/, ::octaneapi::ApiModuleData_loadApplicationDataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_storeApplicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_storeApplicationData() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiModuleData_storeApplicationDataRequest, ::octaneapi::ApiModuleData_storeApplicationDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* request, ::octaneapi::ApiModuleData_storeApplicationDataResponse* response) { return this->storeApplicationData(context, request, response); }));}
    void SetMessageAllocatorFor_storeApplicationData(
        ::grpc::MessageAllocator< ::octaneapi::ApiModuleData_storeApplicationDataRequest, ::octaneapi::ApiModuleData_storeApplicationDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiModuleData_storeApplicationDataRequest, ::octaneapi::ApiModuleData_storeApplicationDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_storeApplicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status storeApplicationData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* /*request*/, ::octaneapi::ApiModuleData_storeApplicationDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* storeApplicationData(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* /*request*/, ::octaneapi::ApiModuleData_storeApplicationDataResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_loadApplicationData<WithCallbackMethod_storeApplicationData<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_loadApplicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loadApplicationData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_loadApplicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadApplicationData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* /*request*/, ::octaneapi::ApiModuleData_loadApplicationDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_storeApplicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_storeApplicationData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_storeApplicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status storeApplicationData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* /*request*/, ::octaneapi::ApiModuleData_storeApplicationDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_loadApplicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loadApplicationData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_loadApplicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadApplicationData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* /*request*/, ::octaneapi::ApiModuleData_loadApplicationDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadApplicationData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_storeApplicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_storeApplicationData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_storeApplicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status storeApplicationData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* /*request*/, ::octaneapi::ApiModuleData_storeApplicationDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststoreApplicationData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_loadApplicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_loadApplicationData() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loadApplicationData(context, request, response); }));
    }
    ~WithRawCallbackMethod_loadApplicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadApplicationData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* /*request*/, ::octaneapi::ApiModuleData_loadApplicationDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadApplicationData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_storeApplicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_storeApplicationData() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->storeApplicationData(context, request, response); }));
    }
    ~WithRawCallbackMethod_storeApplicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status storeApplicationData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* /*request*/, ::octaneapi::ApiModuleData_storeApplicationDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* storeApplicationData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loadApplicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loadApplicationData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiModuleData_loadApplicationDataRequest, ::octaneapi::ApiModuleData_loadApplicationDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiModuleData_loadApplicationDataRequest, ::octaneapi::ApiModuleData_loadApplicationDataResponse>* streamer) {
                       return this->StreamedloadApplicationData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loadApplicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loadApplicationData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* /*request*/, ::octaneapi::ApiModuleData_loadApplicationDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloadApplicationData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiModuleData_loadApplicationDataRequest,::octaneapi::ApiModuleData_loadApplicationDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_storeApplicationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_storeApplicationData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiModuleData_storeApplicationDataRequest, ::octaneapi::ApiModuleData_storeApplicationDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiModuleData_storeApplicationDataRequest, ::octaneapi::ApiModuleData_storeApplicationDataResponse>* streamer) {
                       return this->StreamedstoreApplicationData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_storeApplicationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status storeApplicationData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* /*request*/, ::octaneapi::ApiModuleData_storeApplicationDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedstoreApplicationData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiModuleData_storeApplicationDataRequest,::octaneapi::ApiModuleData_storeApplicationDataResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_loadApplicationData<WithStreamedUnaryMethod_storeApplicationData<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_loadApplicationData<WithStreamedUnaryMethod_storeApplicationData<Service > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apimoduledata_2eproto__INCLUDED
