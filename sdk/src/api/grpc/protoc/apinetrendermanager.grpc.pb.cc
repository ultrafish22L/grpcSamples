// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apinetrendermanager.proto

#include "apinetrendermanager.pb.h"
#include "apinetrendermanager.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiNetRenderManagerService_method_names[] = {
  "/octaneapi.ApiNetRenderManagerService/configure",
  "/octaneapi.ApiNetRenderManagerService/configuration",
  "/octaneapi.ApiNetRenderManagerService/enable",
  "/octaneapi.ApiNetRenderManagerService/isSupported",
  "/octaneapi.ApiNetRenderManagerService/isEnabled",
  "/octaneapi.ApiNetRenderManagerService/saveConfiguration",
  "/octaneapi.ApiNetRenderManagerService/openOctanePreferences",
  "/octaneapi.ApiNetRenderManagerService/networkInterfaceCount",
  "/octaneapi.ApiNetRenderManagerService/networkInterface",
  "/octaneapi.ApiNetRenderManagerService/setNetStatusListener",
  "/octaneapi.ApiNetRenderManagerService/status",
  "/octaneapi.ApiNetRenderManagerService/setDaemonListener",
  "/octaneapi.ApiNetRenderManagerService/bindDaemon",
  "/octaneapi.ApiNetRenderManagerService/unbindDaemon",
  "/octaneapi.ApiNetRenderManagerService/stealDaemon",
};

std::unique_ptr< ApiNetRenderManagerService::Stub> ApiNetRenderManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiNetRenderManagerService::Stub> stub(new ApiNetRenderManagerService::Stub(channel, options));
  return stub;
}

ApiNetRenderManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_configure_(ApiNetRenderManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_configuration_(ApiNetRenderManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_enable_(ApiNetRenderManagerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isSupported_(ApiNetRenderManagerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isEnabled_(ApiNetRenderManagerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveConfiguration_(ApiNetRenderManagerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_openOctanePreferences_(ApiNetRenderManagerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_networkInterfaceCount_(ApiNetRenderManagerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_networkInterface_(ApiNetRenderManagerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setNetStatusListener_(ApiNetRenderManagerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_status_(ApiNetRenderManagerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setDaemonListener_(ApiNetRenderManagerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_bindDaemon_(ApiNetRenderManagerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unbindDaemon_(ApiNetRenderManagerService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stealDaemon_(ApiNetRenderManagerService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiNetRenderManagerService::Stub::configure(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest& request, ::octaneapi::ApiNetRenderManager_configureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_configureRequest, ::octaneapi::ApiNetRenderManager_configureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_configure_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::configure(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest* request, ::octaneapi::ApiNetRenderManager_configureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_configureRequest, ::octaneapi::ApiNetRenderManager_configureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_configure_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::configure(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest* request, ::octaneapi::ApiNetRenderManager_configureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_configure_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configureResponse>* ApiNetRenderManagerService::Stub::PrepareAsyncconfigureRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNetRenderManager_configureResponse, ::octaneapi::ApiNetRenderManager_configureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_configure_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configureResponse>* ApiNetRenderManagerService::Stub::AsyncconfigureRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconfigureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNetRenderManagerService::Stub::configuration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest& request, ::octaneapi::ApiNetRenderManager_configurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_configurationRequest, ::octaneapi::ApiNetRenderManager_configurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_configuration_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::configuration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest* request, ::octaneapi::ApiNetRenderManager_configurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_configurationRequest, ::octaneapi::ApiNetRenderManager_configurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_configuration_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::configuration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest* request, ::octaneapi::ApiNetRenderManager_configurationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_configuration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configurationResponse>* ApiNetRenderManagerService::Stub::PrepareAsyncconfigurationRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNetRenderManager_configurationResponse, ::octaneapi::ApiNetRenderManager_configurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_configuration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configurationResponse>* ApiNetRenderManagerService::Stub::AsyncconfigurationRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconfigurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNetRenderManagerService::Stub::enable(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_enableRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_enable_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::enable(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_enableRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_enable_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::enable(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_enable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNetRenderManagerService::Stub::PrepareAsyncenableRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiNetRenderManager_enableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_enable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNetRenderManagerService::Stub::AsyncenableRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncenableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNetRenderManagerService::Stub::isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest& request, ::octaneapi::ApiNetRenderManager_isSupportedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_isSupportedRequest, ::octaneapi::ApiNetRenderManager_isSupportedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isSupported_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* request, ::octaneapi::ApiNetRenderManager_isSupportedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_isSupportedRequest, ::octaneapi::ApiNetRenderManager_isSupportedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isSupported_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* request, ::octaneapi::ApiNetRenderManager_isSupportedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isSupported_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isSupportedResponse>* ApiNetRenderManagerService::Stub::PrepareAsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNetRenderManager_isSupportedResponse, ::octaneapi::ApiNetRenderManager_isSupportedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isSupported_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isSupportedResponse>* ApiNetRenderManagerService::Stub::AsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisSupportedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNetRenderManagerService::Stub::isEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest& request, ::octaneapi::ApiNetRenderManager_isEnabledResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_isEnabledRequest, ::octaneapi::ApiNetRenderManager_isEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isEnabled_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::isEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* request, ::octaneapi::ApiNetRenderManager_isEnabledResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_isEnabledRequest, ::octaneapi::ApiNetRenderManager_isEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isEnabled_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::isEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* request, ::octaneapi::ApiNetRenderManager_isEnabledResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isEnabled_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isEnabledResponse>* ApiNetRenderManagerService::Stub::PrepareAsyncisEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNetRenderManager_isEnabledResponse, ::octaneapi::ApiNetRenderManager_isEnabledRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isEnabled_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isEnabledResponse>* ApiNetRenderManagerService::Stub::AsyncisEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisEnabledRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNetRenderManagerService::Stub::saveConfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_saveConfigurationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveConfiguration_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::saveConfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_saveConfigurationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveConfiguration_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::saveConfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNetRenderManagerService::Stub::PrepareAsyncsaveConfigurationRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiNetRenderManager_saveConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveConfiguration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNetRenderManagerService::Stub::AsyncsaveConfigurationRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveConfigurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNetRenderManagerService::Stub::openOctanePreferences(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_openOctanePreferences_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::openOctanePreferences(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_openOctanePreferences_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::openOctanePreferences(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_openOctanePreferences_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNetRenderManagerService::Stub::PrepareAsyncopenOctanePreferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_openOctanePreferences_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNetRenderManagerService::Stub::AsyncopenOctanePreferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncopenOctanePreferencesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNetRenderManagerService::Stub::networkInterfaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest& request, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_networkInterfaceCount_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::networkInterfaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_networkInterfaceCount_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::networkInterfaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_networkInterfaceCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>* ApiNetRenderManagerService::Stub::PrepareAsyncnetworkInterfaceCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse, ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_networkInterfaceCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>* ApiNetRenderManagerService::Stub::AsyncnetworkInterfaceCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnetworkInterfaceCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNetRenderManagerService::Stub::networkInterface(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest& request, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_networkInterfaceRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_networkInterface_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::networkInterface(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_networkInterfaceRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_networkInterface_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::networkInterface(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_networkInterface_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>* ApiNetRenderManagerService::Stub::PrepareAsyncnetworkInterfaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse, ::octaneapi::ApiNetRenderManager_networkInterfaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_networkInterface_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>* ApiNetRenderManagerService::Stub::AsyncnetworkInterfaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnetworkInterfaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNetRenderManagerService::Stub::setNetStatusListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest& request, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setNetStatusListener_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::setNetStatusListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* request, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setNetStatusListener_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::setNetStatusListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* request, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setNetStatusListener_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>* ApiNetRenderManagerService::Stub::PrepareAsyncsetNetStatusListenerRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse, ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setNetStatusListener_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>* ApiNetRenderManagerService::Stub::AsyncsetNetStatusListenerRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetNetStatusListenerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNetRenderManagerService::Stub::status(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest& request, ::octaneapi::ApiNetRenderManager_statusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_statusRequest, ::octaneapi::ApiNetRenderManager_statusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_status_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::status(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest* request, ::octaneapi::ApiNetRenderManager_statusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_statusRequest, ::octaneapi::ApiNetRenderManager_statusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_status_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::status(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest* request, ::octaneapi::ApiNetRenderManager_statusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_statusResponse>* ApiNetRenderManagerService::Stub::PrepareAsyncstatusRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNetRenderManager_statusResponse, ::octaneapi::ApiNetRenderManager_statusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_statusResponse>* ApiNetRenderManagerService::Stub::AsyncstatusRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNetRenderManagerService::Stub::setDaemonListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest& request, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setDaemonListener_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::setDaemonListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* request, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDaemonListener_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::setDaemonListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* request, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDaemonListener_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>* ApiNetRenderManagerService::Stub::PrepareAsyncsetDaemonListenerRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse, ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setDaemonListener_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>* ApiNetRenderManagerService::Stub::AsyncsetDaemonListenerRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetDaemonListenerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNetRenderManagerService::Stub::bindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest& request, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_bindDaemonRequest, ::octaneapi::ApiNetRenderManager_bindDaemonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_bindDaemon_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::bindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* request, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_bindDaemonRequest, ::octaneapi::ApiNetRenderManager_bindDaemonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_bindDaemon_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::bindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* request, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_bindDaemon_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>* ApiNetRenderManagerService::Stub::PrepareAsyncbindDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNetRenderManager_bindDaemonResponse, ::octaneapi::ApiNetRenderManager_bindDaemonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_bindDaemon_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>* ApiNetRenderManagerService::Stub::AsyncbindDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbindDaemonRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNetRenderManagerService::Stub::unbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_unbindDaemonRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unbindDaemon_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::unbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_unbindDaemonRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unbindDaemon_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::unbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unbindDaemon_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNetRenderManagerService::Stub::PrepareAsyncunbindDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiNetRenderManager_unbindDaemonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unbindDaemon_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNetRenderManagerService::Stub::AsyncunbindDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunbindDaemonRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNetRenderManagerService::Stub::stealDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest& request, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNetRenderManager_stealDaemonRequest, ::octaneapi::ApiNetRenderManager_stealDaemonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stealDaemon_, context, request, response);
}

void ApiNetRenderManagerService::Stub::async::stealDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* request, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNetRenderManager_stealDaemonRequest, ::octaneapi::ApiNetRenderManager_stealDaemonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stealDaemon_, context, request, response, std::move(f));
}

void ApiNetRenderManagerService::Stub::async::stealDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* request, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stealDaemon_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>* ApiNetRenderManagerService::Stub::PrepareAsyncstealDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNetRenderManager_stealDaemonResponse, ::octaneapi::ApiNetRenderManager_stealDaemonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stealDaemon_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>* ApiNetRenderManagerService::Stub::AsyncstealDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstealDaemonRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiNetRenderManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_configureRequest, ::octaneapi::ApiNetRenderManager_configureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_configureRequest* req,
             ::octaneapi::ApiNetRenderManager_configureResponse* resp) {
               return service->configure(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_configurationRequest, ::octaneapi::ApiNetRenderManager_configurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_configurationRequest* req,
             ::octaneapi::ApiNetRenderManager_configurationResponse* resp) {
               return service->configuration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_enableRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_enableRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->enable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_isSupportedRequest, ::octaneapi::ApiNetRenderManager_isSupportedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_isSupportedRequest* req,
             ::octaneapi::ApiNetRenderManager_isSupportedResponse* resp) {
               return service->isSupported(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_isEnabledRequest, ::octaneapi::ApiNetRenderManager_isEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_isEnabledRequest* req,
             ::octaneapi::ApiNetRenderManager_isEnabledResponse* resp) {
               return service->isEnabled(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_saveConfigurationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->saveConfiguration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->openOctanePreferences(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* req,
             ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* resp) {
               return service->networkInterfaceCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_networkInterfaceRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* req,
             ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* resp) {
               return service->networkInterface(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* req,
             ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* resp) {
               return service->setNetStatusListener(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_statusRequest, ::octaneapi::ApiNetRenderManager_statusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_statusRequest* req,
             ::octaneapi::ApiNetRenderManager_statusResponse* resp) {
               return service->status(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* req,
             ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* resp) {
               return service->setDaemonListener(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_bindDaemonRequest, ::octaneapi::ApiNetRenderManager_bindDaemonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* req,
             ::octaneapi::ApiNetRenderManager_bindDaemonResponse* resp) {
               return service->bindDaemon(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_unbindDaemonRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->unbindDaemon(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNetRenderManagerService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNetRenderManagerService::Service, ::octaneapi::ApiNetRenderManager_stealDaemonRequest, ::octaneapi::ApiNetRenderManager_stealDaemonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNetRenderManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* req,
             ::octaneapi::ApiNetRenderManager_stealDaemonResponse* resp) {
               return service->stealDaemon(ctx, req, resp);
             }, this)));
}

ApiNetRenderManagerService::Service::~Service() {
}

::grpc::Status ApiNetRenderManagerService::Service::configure(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest* request, ::octaneapi::ApiNetRenderManager_configureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNetRenderManagerService::Service::configuration(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest* request, ::octaneapi::ApiNetRenderManager_configurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNetRenderManagerService::Service::enable(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNetRenderManagerService::Service::isSupported(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* request, ::octaneapi::ApiNetRenderManager_isSupportedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNetRenderManagerService::Service::isEnabled(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* request, ::octaneapi::ApiNetRenderManager_isEnabledResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNetRenderManagerService::Service::saveConfiguration(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNetRenderManagerService::Service::openOctanePreferences(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNetRenderManagerService::Service::networkInterfaceCount(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNetRenderManagerService::Service::networkInterface(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNetRenderManagerService::Service::setNetStatusListener(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* request, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNetRenderManagerService::Service::status(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest* request, ::octaneapi::ApiNetRenderManager_statusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNetRenderManagerService::Service::setDaemonListener(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* request, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNetRenderManagerService::Service::bindDaemon(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* request, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNetRenderManagerService::Service::unbindDaemon(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNetRenderManagerService::Service::stealDaemon(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* request, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

