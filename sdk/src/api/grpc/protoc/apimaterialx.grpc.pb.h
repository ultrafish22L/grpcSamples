// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apimaterialx.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apimaterialx_2eproto__INCLUDED
#define GRPC_apimaterialx_2eproto__INCLUDED

#include "apimaterialx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiMaterialXGlobal' from 'apimaterialx.h'
class ApiMaterialXGlobalService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiMaterialXGlobalService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status importMaterialXFile(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest& request, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>> AsyncimportMaterialXFile(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>>(AsyncimportMaterialXFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>> PrepareAsyncimportMaterialXFile(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>>(PrepareAsyncimportMaterialXFileRaw(context, request, cq));
    }
    virtual ::grpc::Status getAllMxNodeCategories(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest& request, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>> AsyncgetAllMxNodeCategories(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>>(AsyncgetAllMxNodeCategoriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>> PrepareAsyncgetAllMxNodeCategories(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>>(PrepareAsyncgetAllMxNodeCategoriesRaw(context, request, cq));
    }
    virtual ::grpc::Status getMxNodeCategory(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest& request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>> AsyncgetMxNodeCategory(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>>(AsyncgetMxNodeCategoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>> PrepareAsyncgetMxNodeCategory(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>>(PrepareAsyncgetMxNodeCategoryRaw(context, request, cq));
    }
    virtual ::grpc::Status getMxNodeCategory1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request& request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>> AsyncgetMxNodeCategory1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>>(AsyncgetMxNodeCategory1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>> PrepareAsyncgetMxNodeCategory1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>>(PrepareAsyncgetMxNodeCategory1Raw(context, request, cq));
    }
    virtual ::grpc::Status getMxValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest& request, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>> AsyncgetMxValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>>(AsyncgetMxValueTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>> PrepareAsyncgetMxValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>>(PrepareAsyncgetMxValueTypeRaw(context, request, cq));
    }
    virtual ::grpc::Status getTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest& request, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>> AsyncgetTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>>(AsyncgetTextureValueTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>> PrepareAsyncgetTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>>(PrepareAsyncgetTextureValueTypeRaw(context, request, cq));
    }
    virtual ::grpc::Status getMxColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest& request, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>> AsyncgetMxColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>>(AsyncgetMxColorSpaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>> PrepareAsyncgetMxColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>>(PrepareAsyncgetMxColorSpaceRaw(context, request, cq));
    }
    virtual ::grpc::Status getNamedColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest& request, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>> AsyncgetNamedColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>>(AsyncgetNamedColorSpaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>> PrepareAsyncgetNamedColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>>(PrepareAsyncgetNamedColorSpaceRaw(context, request, cq));
    }
    virtual ::grpc::Status getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest& request, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>> AsyncgetNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>>(AsyncgetNodeTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>> PrepareAsyncgetNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>>(PrepareAsyncgetNodeTypesRaw(context, request, cq));
    }
    virtual ::grpc::Status getGraphType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest& request, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>> AsyncgetGraphType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>>(AsyncgetGraphTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>> PrepareAsyncgetGraphType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>>(PrepareAsyncgetGraphTypeRaw(context, request, cq));
    }
    virtual ::grpc::Status getMxInputNamesAndPinIds(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest& request, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>> AsyncgetMxInputNamesAndPinIds(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>>(AsyncgetMxInputNamesAndPinIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>> PrepareAsyncgetMxInputNamesAndPinIds(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>>(PrepareAsyncgetMxInputNamesAndPinIdsRaw(context, request, cq));
    }
    virtual ::grpc::Status getGraphMxInputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest& request, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>> AsyncgetGraphMxInputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>>(AsyncgetGraphMxInputNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>> PrepareAsyncgetGraphMxInputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>>(PrepareAsyncgetGraphMxInputNamesRaw(context, request, cq));
    }
    virtual ::grpc::Status getGraphMxOutputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest& request, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>> AsyncgetGraphMxOutputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>>(AsyncgetGraphMxOutputNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>> PrepareAsyncgetGraphMxOutputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>>(PrepareAsyncgetGraphMxOutputNamesRaw(context, request, cq));
    }
    virtual ::grpc::Status findConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request& request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>> AsyncfindConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>>(AsyncfindConfiguration1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>> PrepareAsyncfindConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>>(PrepareAsyncfindConfiguration1Raw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void importMaterialXFile(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* request, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void importMaterialXFile(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* request, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getAllMxNodeCategories(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* request, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getAllMxNodeCategories(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* request, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getMxNodeCategory(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMxNodeCategory(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getMxNodeCategory1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMxNodeCategory1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getMxValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMxValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getMxColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMxColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getNamedColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getNamedColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* request, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* request, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getGraphType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getGraphType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getMxInputNamesAndPinIds(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMxInputNamesAndPinIds(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getGraphMxInputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getGraphMxInputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getGraphMxOutputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getGraphMxOutputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void findConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void findConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>* AsyncimportMaterialXFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>* PrepareAsyncimportMaterialXFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>* AsyncgetAllMxNodeCategoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>* PrepareAsyncgetAllMxNodeCategoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>* AsyncgetMxNodeCategoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>* PrepareAsyncgetMxNodeCategoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>* AsyncgetMxNodeCategory1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>* PrepareAsyncgetMxNodeCategory1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>* AsyncgetMxValueTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>* PrepareAsyncgetMxValueTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>* AsyncgetTextureValueTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>* PrepareAsyncgetTextureValueTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>* AsyncgetMxColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>* PrepareAsyncgetMxColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>* AsyncgetNamedColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>* PrepareAsyncgetNamedColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>* AsyncgetNodeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>* PrepareAsyncgetNodeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>* AsyncgetGraphTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>* PrepareAsyncgetGraphTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>* AsyncgetMxInputNamesAndPinIdsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>* PrepareAsyncgetMxInputNamesAndPinIdsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>* AsyncgetGraphMxInputNamesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>* PrepareAsyncgetGraphMxInputNamesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>* AsyncgetGraphMxOutputNamesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>* PrepareAsyncgetGraphMxOutputNamesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>* AsyncfindConfiguration1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>* PrepareAsyncfindConfiguration1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status importMaterialXFile(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest& request, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>> AsyncimportMaterialXFile(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>>(AsyncimportMaterialXFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>> PrepareAsyncimportMaterialXFile(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>>(PrepareAsyncimportMaterialXFileRaw(context, request, cq));
    }
    ::grpc::Status getAllMxNodeCategories(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest& request, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>> AsyncgetAllMxNodeCategories(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>>(AsyncgetAllMxNodeCategoriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>> PrepareAsyncgetAllMxNodeCategories(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>>(PrepareAsyncgetAllMxNodeCategoriesRaw(context, request, cq));
    }
    ::grpc::Status getMxNodeCategory(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest& request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>> AsyncgetMxNodeCategory(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>>(AsyncgetMxNodeCategoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>> PrepareAsyncgetMxNodeCategory(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>>(PrepareAsyncgetMxNodeCategoryRaw(context, request, cq));
    }
    ::grpc::Status getMxNodeCategory1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request& request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>> AsyncgetMxNodeCategory1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>>(AsyncgetMxNodeCategory1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>> PrepareAsyncgetMxNodeCategory1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>>(PrepareAsyncgetMxNodeCategory1Raw(context, request, cq));
    }
    ::grpc::Status getMxValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest& request, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>> AsyncgetMxValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>>(AsyncgetMxValueTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>> PrepareAsyncgetMxValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>>(PrepareAsyncgetMxValueTypeRaw(context, request, cq));
    }
    ::grpc::Status getTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest& request, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>> AsyncgetTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>>(AsyncgetTextureValueTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>> PrepareAsyncgetTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>>(PrepareAsyncgetTextureValueTypeRaw(context, request, cq));
    }
    ::grpc::Status getMxColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest& request, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>> AsyncgetMxColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>>(AsyncgetMxColorSpaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>> PrepareAsyncgetMxColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>>(PrepareAsyncgetMxColorSpaceRaw(context, request, cq));
    }
    ::grpc::Status getNamedColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest& request, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>> AsyncgetNamedColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>>(AsyncgetNamedColorSpaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>> PrepareAsyncgetNamedColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>>(PrepareAsyncgetNamedColorSpaceRaw(context, request, cq));
    }
    ::grpc::Status getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest& request, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>> AsyncgetNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>>(AsyncgetNodeTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>> PrepareAsyncgetNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>>(PrepareAsyncgetNodeTypesRaw(context, request, cq));
    }
    ::grpc::Status getGraphType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest& request, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>> AsyncgetGraphType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>>(AsyncgetGraphTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>> PrepareAsyncgetGraphType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>>(PrepareAsyncgetGraphTypeRaw(context, request, cq));
    }
    ::grpc::Status getMxInputNamesAndPinIds(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest& request, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>> AsyncgetMxInputNamesAndPinIds(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>>(AsyncgetMxInputNamesAndPinIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>> PrepareAsyncgetMxInputNamesAndPinIds(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>>(PrepareAsyncgetMxInputNamesAndPinIdsRaw(context, request, cq));
    }
    ::grpc::Status getGraphMxInputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest& request, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>> AsyncgetGraphMxInputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>>(AsyncgetGraphMxInputNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>> PrepareAsyncgetGraphMxInputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>>(PrepareAsyncgetGraphMxInputNamesRaw(context, request, cq));
    }
    ::grpc::Status getGraphMxOutputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest& request, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>> AsyncgetGraphMxOutputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>>(AsyncgetGraphMxOutputNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>> PrepareAsyncgetGraphMxOutputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>>(PrepareAsyncgetGraphMxOutputNamesRaw(context, request, cq));
    }
    ::grpc::Status findConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request& request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>> AsyncfindConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>>(AsyncfindConfiguration1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>> PrepareAsyncfindConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>>(PrepareAsyncfindConfiguration1Raw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void importMaterialXFile(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* request, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* response, std::function<void(::grpc::Status)>) override;
      void importMaterialXFile(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* request, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getAllMxNodeCategories(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* request, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* response, std::function<void(::grpc::Status)>) override;
      void getAllMxNodeCategories(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* request, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMxNodeCategory(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* response, std::function<void(::grpc::Status)>) override;
      void getMxNodeCategory(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMxNodeCategory1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* response, std::function<void(::grpc::Status)>) override;
      void getMxNodeCategory1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMxValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void getMxValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void getTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMxColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* response, std::function<void(::grpc::Status)>) override;
      void getMxColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getNamedColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* response, std::function<void(::grpc::Status)>) override;
      void getNamedColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* request, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* response, std::function<void(::grpc::Status)>) override;
      void getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* request, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getGraphType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void getGraphType(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMxInputNamesAndPinIds(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void getMxInputNamesAndPinIds(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getGraphMxInputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* response, std::function<void(::grpc::Status)>) override;
      void getGraphMxInputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getGraphMxOutputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* response, std::function<void(::grpc::Status)>) override;
      void getGraphMxOutputNames(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void findConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* response, std::function<void(::grpc::Status)>) override;
      void findConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>* AsyncimportMaterialXFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>* PrepareAsyncimportMaterialXFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>* AsyncgetAllMxNodeCategoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>* PrepareAsyncgetAllMxNodeCategoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>* AsyncgetMxNodeCategoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>* PrepareAsyncgetMxNodeCategoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>* AsyncgetMxNodeCategory1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>* PrepareAsyncgetMxNodeCategory1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>* AsyncgetMxValueTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>* PrepareAsyncgetMxValueTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>* AsyncgetTextureValueTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>* PrepareAsyncgetTextureValueTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>* AsyncgetMxColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>* PrepareAsyncgetMxColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>* AsyncgetNamedColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>* PrepareAsyncgetNamedColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>* AsyncgetNodeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>* PrepareAsyncgetNodeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>* AsyncgetGraphTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>* PrepareAsyncgetGraphTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>* AsyncgetMxInputNamesAndPinIdsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>* PrepareAsyncgetMxInputNamesAndPinIdsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>* AsyncgetGraphMxInputNamesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>* PrepareAsyncgetGraphMxInputNamesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>* AsyncgetGraphMxOutputNamesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>* PrepareAsyncgetGraphMxOutputNamesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>* AsyncfindConfiguration1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>* PrepareAsyncfindConfiguration1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_importMaterialXFile_;
    const ::grpc::internal::RpcMethod rpcmethod_getAllMxNodeCategories_;
    const ::grpc::internal::RpcMethod rpcmethod_getMxNodeCategory_;
    const ::grpc::internal::RpcMethod rpcmethod_getMxNodeCategory1_;
    const ::grpc::internal::RpcMethod rpcmethod_getMxValueType_;
    const ::grpc::internal::RpcMethod rpcmethod_getTextureValueType_;
    const ::grpc::internal::RpcMethod rpcmethod_getMxColorSpace_;
    const ::grpc::internal::RpcMethod rpcmethod_getNamedColorSpace_;
    const ::grpc::internal::RpcMethod rpcmethod_getNodeTypes_;
    const ::grpc::internal::RpcMethod rpcmethod_getGraphType_;
    const ::grpc::internal::RpcMethod rpcmethod_getMxInputNamesAndPinIds_;
    const ::grpc::internal::RpcMethod rpcmethod_getGraphMxInputNames_;
    const ::grpc::internal::RpcMethod rpcmethod_getGraphMxOutputNames_;
    const ::grpc::internal::RpcMethod rpcmethod_findConfiguration1_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status importMaterialXFile(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* request, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* response);
    virtual ::grpc::Status getAllMxNodeCategories(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* request, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* response);
    virtual ::grpc::Status getMxNodeCategory(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* response);
    virtual ::grpc::Status getMxNodeCategory1(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* response);
    virtual ::grpc::Status getMxValueType(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* response);
    virtual ::grpc::Status getTextureValueType(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* response);
    virtual ::grpc::Status getMxColorSpace(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* response);
    virtual ::grpc::Status getNamedColorSpace(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* response);
    virtual ::grpc::Status getNodeTypes(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* request, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* response);
    virtual ::grpc::Status getGraphType(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* response);
    virtual ::grpc::Status getMxInputNamesAndPinIds(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* response);
    virtual ::grpc::Status getGraphMxInputNames(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* response);
    virtual ::grpc::Status getGraphMxOutputNames(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* response);
    virtual ::grpc::Status findConfiguration1(::grpc::ServerContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_importMaterialXFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_importMaterialXFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_importMaterialXFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importMaterialXFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimportMaterialXFile(::grpc::ServerContext* context, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAllMxNodeCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAllMxNodeCategories() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getAllMxNodeCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMxNodeCategories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllMxNodeCategories(::grpc::ServerContext* context, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMxNodeCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMxNodeCategory() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getMxNodeCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxNodeCategory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMxNodeCategory(::grpc::ServerContext* context, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMxNodeCategory1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMxNodeCategory1() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getMxNodeCategory1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxNodeCategory1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMxNodeCategory1(::grpc::ServerContext* context, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMxValueType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMxValueType() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getMxValueType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxValueType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMxValueType(::grpc::ServerContext* context, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getTextureValueType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getTextureValueType() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_getTextureValueType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTextureValueType(::grpc::ServerContext* context, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMxColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMxColorSpace() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getMxColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMxColorSpace(::grpc::ServerContext* context, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getNamedColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getNamedColorSpace() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_getNamedColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNamedColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNamedColorSpace(::grpc::ServerContext* context, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getNodeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getNodeTypes() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getNodeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNodeTypes(::grpc::ServerContext* context, ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGraphType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getGraphType() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getGraphType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGraphType(::grpc::ServerContext* context, ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMxInputNamesAndPinIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMxInputNamesAndPinIds() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_getMxInputNamesAndPinIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxInputNamesAndPinIds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMxInputNamesAndPinIds(::grpc::ServerContext* context, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGraphMxInputNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getGraphMxInputNames() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_getGraphMxInputNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphMxInputNames(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGraphMxInputNames(::grpc::ServerContext* context, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGraphMxOutputNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getGraphMxOutputNames() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_getGraphMxOutputNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphMxOutputNames(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGraphMxOutputNames(::grpc::ServerContext* context, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_findConfiguration1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_findConfiguration1() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_findConfiguration1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findConfiguration1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* /*request*/, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfindConfiguration1(::grpc::ServerContext* context, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_importMaterialXFile<WithAsyncMethod_getAllMxNodeCategories<WithAsyncMethod_getMxNodeCategory<WithAsyncMethod_getMxNodeCategory1<WithAsyncMethod_getMxValueType<WithAsyncMethod_getTextureValueType<WithAsyncMethod_getMxColorSpace<WithAsyncMethod_getNamedColorSpace<WithAsyncMethod_getNodeTypes<WithAsyncMethod_getGraphType<WithAsyncMethod_getMxInputNamesAndPinIds<WithAsyncMethod_getGraphMxInputNames<WithAsyncMethod_getGraphMxOutputNames<WithAsyncMethod_findConfiguration1<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_importMaterialXFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_importMaterialXFile() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* request, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* response) { return this->importMaterialXFile(context, request, response); }));}
    void SetMessageAllocatorFor_importMaterialXFile(
        ::grpc::MessageAllocator< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_importMaterialXFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importMaterialXFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* importMaterialXFile(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getAllMxNodeCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getAllMxNodeCategories() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* request, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* response) { return this->getAllMxNodeCategories(context, request, response); }));}
    void SetMessageAllocatorFor_getAllMxNodeCategories(
        ::grpc::MessageAllocator< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getAllMxNodeCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMxNodeCategories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAllMxNodeCategories(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMxNodeCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMxNodeCategory() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* response) { return this->getMxNodeCategory(context, request, response); }));}
    void SetMessageAllocatorFor_getMxNodeCategory(
        ::grpc::MessageAllocator< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMxNodeCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxNodeCategory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMxNodeCategory(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMxNodeCategory1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMxNodeCategory1() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* response) { return this->getMxNodeCategory1(context, request, response); }));}
    void SetMessageAllocatorFor_getMxNodeCategory1(
        ::grpc::MessageAllocator< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMxNodeCategory1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxNodeCategory1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMxNodeCategory1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMxValueType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMxValueType() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* response) { return this->getMxValueType(context, request, response); }));}
    void SetMessageAllocatorFor_getMxValueType(
        ::grpc::MessageAllocator< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMxValueType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxValueType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMxValueType(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getTextureValueType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getTextureValueType() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* response) { return this->getTextureValueType(context, request, response); }));}
    void SetMessageAllocatorFor_getTextureValueType(
        ::grpc::MessageAllocator< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getTextureValueType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTextureValueType(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMxColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMxColorSpace() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* response) { return this->getMxColorSpace(context, request, response); }));}
    void SetMessageAllocatorFor_getMxColorSpace(
        ::grpc::MessageAllocator< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMxColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMxColorSpace(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getNamedColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getNamedColorSpace() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* request, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* response) { return this->getNamedColorSpace(context, request, response); }));}
    void SetMessageAllocatorFor_getNamedColorSpace(
        ::grpc::MessageAllocator< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getNamedColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNamedColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getNamedColorSpace(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getNodeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getNodeTypes() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* request, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* response) { return this->getNodeTypes(context, request, response); }));}
    void SetMessageAllocatorFor_getNodeTypes(
        ::grpc::MessageAllocator< ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getNodeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getNodeTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getGraphType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getGraphType() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* response) { return this->getGraphType(context, request, response); }));}
    void SetMessageAllocatorFor_getGraphType(
        ::grpc::MessageAllocator< ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getGraphType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGraphType(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMxInputNamesAndPinIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMxInputNamesAndPinIds() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* request, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* response) { return this->getMxInputNamesAndPinIds(context, request, response); }));}
    void SetMessageAllocatorFor_getMxInputNamesAndPinIds(
        ::grpc::MessageAllocator< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMxInputNamesAndPinIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxInputNamesAndPinIds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMxInputNamesAndPinIds(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getGraphMxInputNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getGraphMxInputNames() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* response) { return this->getGraphMxInputNames(context, request, response); }));}
    void SetMessageAllocatorFor_getGraphMxInputNames(
        ::grpc::MessageAllocator< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getGraphMxInputNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphMxInputNames(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGraphMxInputNames(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getGraphMxOutputNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getGraphMxOutputNames() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* request, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* response) { return this->getGraphMxOutputNames(context, request, response); }));}
    void SetMessageAllocatorFor_getGraphMxOutputNames(
        ::grpc::MessageAllocator< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getGraphMxOutputNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphMxOutputNames(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGraphMxOutputNames(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_findConfiguration1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_findConfiguration1() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* response) { return this->findConfiguration1(context, request, response); }));}
    void SetMessageAllocatorFor_findConfiguration1(
        ::grpc::MessageAllocator< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_findConfiguration1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findConfiguration1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* /*request*/, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* findConfiguration1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* /*request*/, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_importMaterialXFile<WithCallbackMethod_getAllMxNodeCategories<WithCallbackMethod_getMxNodeCategory<WithCallbackMethod_getMxNodeCategory1<WithCallbackMethod_getMxValueType<WithCallbackMethod_getTextureValueType<WithCallbackMethod_getMxColorSpace<WithCallbackMethod_getNamedColorSpace<WithCallbackMethod_getNodeTypes<WithCallbackMethod_getGraphType<WithCallbackMethod_getMxInputNamesAndPinIds<WithCallbackMethod_getGraphMxInputNames<WithCallbackMethod_getGraphMxOutputNames<WithCallbackMethod_findConfiguration1<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_importMaterialXFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_importMaterialXFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_importMaterialXFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importMaterialXFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAllMxNodeCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAllMxNodeCategories() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getAllMxNodeCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMxNodeCategories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMxNodeCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMxNodeCategory() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getMxNodeCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxNodeCategory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMxNodeCategory1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMxNodeCategory1() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getMxNodeCategory1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxNodeCategory1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMxValueType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMxValueType() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getMxValueType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxValueType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getTextureValueType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getTextureValueType() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_getTextureValueType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMxColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMxColorSpace() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getMxColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getNamedColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getNamedColorSpace() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_getNamedColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNamedColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getNodeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getNodeTypes() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getNodeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGraphType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getGraphType() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getGraphType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMxInputNamesAndPinIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMxInputNamesAndPinIds() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_getMxInputNamesAndPinIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxInputNamesAndPinIds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGraphMxInputNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getGraphMxInputNames() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_getGraphMxInputNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphMxInputNames(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGraphMxOutputNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getGraphMxOutputNames() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_getGraphMxOutputNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphMxOutputNames(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_findConfiguration1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_findConfiguration1() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_findConfiguration1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findConfiguration1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* /*request*/, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_importMaterialXFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_importMaterialXFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_importMaterialXFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importMaterialXFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimportMaterialXFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAllMxNodeCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAllMxNodeCategories() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getAllMxNodeCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMxNodeCategories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllMxNodeCategories(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMxNodeCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMxNodeCategory() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getMxNodeCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxNodeCategory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMxNodeCategory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMxNodeCategory1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMxNodeCategory1() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getMxNodeCategory1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxNodeCategory1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMxNodeCategory1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMxValueType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMxValueType() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getMxValueType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxValueType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMxValueType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getTextureValueType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getTextureValueType() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_getTextureValueType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTextureValueType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMxColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMxColorSpace() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getMxColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMxColorSpace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNamedColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getNamedColorSpace() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_getNamedColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNamedColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNamedColorSpace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNodeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getNodeTypes() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getNodeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNodeTypes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGraphType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getGraphType() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getGraphType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGraphType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMxInputNamesAndPinIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMxInputNamesAndPinIds() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_getMxInputNamesAndPinIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxInputNamesAndPinIds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMxInputNamesAndPinIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGraphMxInputNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getGraphMxInputNames() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_getGraphMxInputNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphMxInputNames(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGraphMxInputNames(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGraphMxOutputNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getGraphMxOutputNames() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_getGraphMxOutputNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphMxOutputNames(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGraphMxOutputNames(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_findConfiguration1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_findConfiguration1() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_findConfiguration1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findConfiguration1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* /*request*/, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfindConfiguration1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_importMaterialXFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_importMaterialXFile() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->importMaterialXFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_importMaterialXFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importMaterialXFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* importMaterialXFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getAllMxNodeCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getAllMxNodeCategories() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAllMxNodeCategories(context, request, response); }));
    }
    ~WithRawCallbackMethod_getAllMxNodeCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMxNodeCategories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAllMxNodeCategories(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMxNodeCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMxNodeCategory() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMxNodeCategory(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMxNodeCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxNodeCategory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMxNodeCategory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMxNodeCategory1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMxNodeCategory1() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMxNodeCategory1(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMxNodeCategory1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxNodeCategory1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMxNodeCategory1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMxValueType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMxValueType() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMxValueType(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMxValueType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxValueType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMxValueType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getTextureValueType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getTextureValueType() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getTextureValueType(context, request, response); }));
    }
    ~WithRawCallbackMethod_getTextureValueType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTextureValueType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTextureValueType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMxColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMxColorSpace() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMxColorSpace(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMxColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMxColorSpace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getNamedColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getNamedColorSpace() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getNamedColorSpace(context, request, response); }));
    }
    ~WithRawCallbackMethod_getNamedColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNamedColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getNamedColorSpace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getNodeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getNodeTypes() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getNodeTypes(context, request, response); }));
    }
    ~WithRawCallbackMethod_getNodeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getNodeTypes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getGraphType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getGraphType() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getGraphType(context, request, response); }));
    }
    ~WithRawCallbackMethod_getGraphType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGraphType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMxInputNamesAndPinIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMxInputNamesAndPinIds() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMxInputNamesAndPinIds(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMxInputNamesAndPinIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMxInputNamesAndPinIds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMxInputNamesAndPinIds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getGraphMxInputNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getGraphMxInputNames() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getGraphMxInputNames(context, request, response); }));
    }
    ~WithRawCallbackMethod_getGraphMxInputNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphMxInputNames(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGraphMxInputNames(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getGraphMxOutputNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getGraphMxOutputNames() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getGraphMxOutputNames(context, request, response); }));
    }
    ~WithRawCallbackMethod_getGraphMxOutputNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGraphMxOutputNames(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getGraphMxOutputNames(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_findConfiguration1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_findConfiguration1() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->findConfiguration1(context, request, response); }));
    }
    ~WithRawCallbackMethod_findConfiguration1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findConfiguration1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* /*request*/, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* findConfiguration1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_importMaterialXFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_importMaterialXFile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>* streamer) {
                       return this->StreamedimportMaterialXFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_importMaterialXFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status importMaterialXFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedimportMaterialXFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiMaterialXGlobal_importMaterialXFileRequest,::octaneapi::ApiMaterialXGlobal_importMaterialXFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAllMxNodeCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAllMxNodeCategories() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>* streamer) {
                       return this->StreamedgetAllMxNodeCategories(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAllMxNodeCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAllMxNodeCategories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAllMxNodeCategories(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesRequest,::octaneapi::ApiMaterialXGlobal_getAllMxNodeCategoriesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMxNodeCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMxNodeCategory() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>* streamer) {
                       return this->StreamedgetMxNodeCategory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMxNodeCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMxNodeCategory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMxNodeCategory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryRequest,::octaneapi::ApiMaterialXGlobal_getMxNodeCategoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMxNodeCategory1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMxNodeCategory1() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>* streamer) {
                       return this->StreamedgetMxNodeCategory1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMxNodeCategory1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMxNodeCategory1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMxNodeCategory1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Request,::octaneapi::ApiMaterialXGlobal_getMxNodeCategory1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMxValueType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMxValueType() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>* streamer) {
                       return this->StreamedgetMxValueType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMxValueType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMxValueType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMxValueType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiMaterialXGlobal_getMxValueTypeRequest,::octaneapi::ApiMaterialXGlobal_getMxValueTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getTextureValueType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getTextureValueType() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>* streamer) {
                       return this->StreamedgetTextureValueType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getTextureValueType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getTextureValueType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetTextureValueType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiMaterialXGlobal_getTextureValueTypeRequest,::octaneapi::ApiMaterialXGlobal_getTextureValueTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMxColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMxColorSpace() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>* streamer) {
                       return this->StreamedgetMxColorSpace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMxColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMxColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMxColorSpace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiMaterialXGlobal_getMxColorSpaceRequest,::octaneapi::ApiMaterialXGlobal_getMxColorSpaceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNamedColorSpace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getNamedColorSpace() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>* streamer) {
                       return this->StreamedgetNamedColorSpace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getNamedColorSpace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNamedColorSpace(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNamedColorSpace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceRequest,::octaneapi::ApiMaterialXGlobal_getNamedColorSpaceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNodeTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getNodeTypes() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>* streamer) {
                       return this->StreamedgetNodeTypes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getNodeTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNodeTypes(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNodeTypes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiMaterialXGlobal_getNodeTypesRequest,::octaneapi::ApiMaterialXGlobal_getNodeTypesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGraphType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getGraphType() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>* streamer) {
                       return this->StreamedgetGraphType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getGraphType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGraphType(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGraphType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiMaterialXGlobal_getGraphTypeRequest,::octaneapi::ApiMaterialXGlobal_getGraphTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMxInputNamesAndPinIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMxInputNamesAndPinIds() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>* streamer) {
                       return this->StreamedgetMxInputNamesAndPinIds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMxInputNamesAndPinIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMxInputNamesAndPinIds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMxInputNamesAndPinIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsRequest,::octaneapi::ApiMaterialXGlobal_getMxInputNamesAndPinIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGraphMxInputNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getGraphMxInputNames() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>* streamer) {
                       return this->StreamedgetGraphMxInputNames(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getGraphMxInputNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGraphMxInputNames(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGraphMxInputNames(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesRequest,::octaneapi::ApiMaterialXGlobal_getGraphMxInputNamesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGraphMxOutputNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getGraphMxOutputNames() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>* streamer) {
                       return this->StreamedgetGraphMxOutputNames(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getGraphMxOutputNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGraphMxOutputNames(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest* /*request*/, ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGraphMxOutputNames(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesRequest,::octaneapi::ApiMaterialXGlobal_getGraphMxOutputNamesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_findConfiguration1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_findConfiguration1() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>* streamer) {
                       return this->StreamedfindConfiguration1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_findConfiguration1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status findConfiguration1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request* /*request*/, ::octaneapi::ApiMaterialXGlobal_findConfiguration1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedfindConfiguration1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiMaterialXGlobal_findConfiguration1Request,::octaneapi::ApiMaterialXGlobal_findConfiguration1Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_importMaterialXFile<WithStreamedUnaryMethod_getAllMxNodeCategories<WithStreamedUnaryMethod_getMxNodeCategory<WithStreamedUnaryMethod_getMxNodeCategory1<WithStreamedUnaryMethod_getMxValueType<WithStreamedUnaryMethod_getTextureValueType<WithStreamedUnaryMethod_getMxColorSpace<WithStreamedUnaryMethod_getNamedColorSpace<WithStreamedUnaryMethod_getNodeTypes<WithStreamedUnaryMethod_getGraphType<WithStreamedUnaryMethod_getMxInputNamesAndPinIds<WithStreamedUnaryMethod_getGraphMxInputNames<WithStreamedUnaryMethod_getGraphMxOutputNames<WithStreamedUnaryMethod_findConfiguration1<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_importMaterialXFile<WithStreamedUnaryMethod_getAllMxNodeCategories<WithStreamedUnaryMethod_getMxNodeCategory<WithStreamedUnaryMethod_getMxNodeCategory1<WithStreamedUnaryMethod_getMxValueType<WithStreamedUnaryMethod_getTextureValueType<WithStreamedUnaryMethod_getMxColorSpace<WithStreamedUnaryMethod_getNamedColorSpace<WithStreamedUnaryMethod_getNodeTypes<WithStreamedUnaryMethod_getGraphType<WithStreamedUnaryMethod_getMxInputNamesAndPinIds<WithStreamedUnaryMethod_getGraphMxInputNames<WithStreamedUnaryMethod_getGraphMxOutputNames<WithStreamedUnaryMethod_findConfiguration1<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apimaterialx_2eproto__INCLUDED
