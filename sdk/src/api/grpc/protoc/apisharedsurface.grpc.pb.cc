// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apisharedsurface.proto

#include "apisharedsurface.pb.h"
#include "apisharedsurface.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiSharedSurfaceService_method_names[] = {
  "/octaneapi.ApiSharedSurfaceService/createD3D11",
  "/octaneapi.ApiSharedSurfaceService/equals",
  "/octaneapi.ApiSharedSurfaceService/isLessThan",
  "/octaneapi.ApiSharedSurfaceService/hash",
  "/octaneapi.ApiSharedSurfaceService/release",
  "/octaneapi.ApiSharedSurfaceService/clone",
  "/octaneapi.ApiSharedSurfaceService/getType",
  "/octaneapi.ApiSharedSurfaceService/getD3D11AdapterLuid",
};

std::unique_ptr< ApiSharedSurfaceService::Stub> ApiSharedSurfaceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiSharedSurfaceService::Stub> stub(new ApiSharedSurfaceService::Stub(channel, options));
  return stub;
}

ApiSharedSurfaceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_createD3D11_(ApiSharedSurfaceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_equals_(ApiSharedSurfaceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isLessThan_(ApiSharedSurfaceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hash_(ApiSharedSurfaceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_release_(ApiSharedSurfaceService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clone_(ApiSharedSurfaceService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getType_(ApiSharedSurfaceService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getD3D11AdapterLuid_(ApiSharedSurfaceService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiSharedSurfaceService::Stub::createD3D11(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request& request, ::octaneapi::ApiSharedSurface_createD3D11Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSharedSurface_createD3D11Request, ::octaneapi::ApiSharedSurface_createD3D11Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createD3D11_, context, request, response);
}

void ApiSharedSurfaceService::Stub::async::createD3D11(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request* request, ::octaneapi::ApiSharedSurface_createD3D11Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSharedSurface_createD3D11Request, ::octaneapi::ApiSharedSurface_createD3D11Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createD3D11_, context, request, response, std::move(f));
}

void ApiSharedSurfaceService::Stub::async::createD3D11(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request* request, ::octaneapi::ApiSharedSurface_createD3D11Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createD3D11_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_createD3D11Response>* ApiSharedSurfaceService::Stub::PrepareAsynccreateD3D11Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSharedSurface_createD3D11Response, ::octaneapi::ApiSharedSurface_createD3D11Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createD3D11_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_createD3D11Response>* ApiSharedSurfaceService::Stub::AsynccreateD3D11Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateD3D11Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSharedSurfaceService::Stub::equals(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest& request, ::octaneapi::ApiSharedSurface_equalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSharedSurface_equalsRequest, ::octaneapi::ApiSharedSurface_equalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_equals_, context, request, response);
}

void ApiSharedSurfaceService::Stub::async::equals(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest* request, ::octaneapi::ApiSharedSurface_equalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSharedSurface_equalsRequest, ::octaneapi::ApiSharedSurface_equalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_equals_, context, request, response, std::move(f));
}

void ApiSharedSurfaceService::Stub::async::equals(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest* request, ::octaneapi::ApiSharedSurface_equalsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_equals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_equalsResponse>* ApiSharedSurfaceService::Stub::PrepareAsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSharedSurface_equalsResponse, ::octaneapi::ApiSharedSurface_equalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_equals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_equalsResponse>* ApiSharedSurfaceService::Stub::AsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncequalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSharedSurfaceService::Stub::isLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest& request, ::octaneapi::ApiSharedSurface_isLessThanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSharedSurface_isLessThanRequest, ::octaneapi::ApiSharedSurface_isLessThanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isLessThan_, context, request, response);
}

void ApiSharedSurfaceService::Stub::async::isLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest* request, ::octaneapi::ApiSharedSurface_isLessThanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSharedSurface_isLessThanRequest, ::octaneapi::ApiSharedSurface_isLessThanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isLessThan_, context, request, response, std::move(f));
}

void ApiSharedSurfaceService::Stub::async::isLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest* request, ::octaneapi::ApiSharedSurface_isLessThanResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isLessThan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_isLessThanResponse>* ApiSharedSurfaceService::Stub::PrepareAsyncisLessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSharedSurface_isLessThanResponse, ::octaneapi::ApiSharedSurface_isLessThanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isLessThan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_isLessThanResponse>* ApiSharedSurfaceService::Stub::AsyncisLessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisLessThanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSharedSurfaceService::Stub::hash(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest& request, ::octaneapi::ApiSharedSurface_hashResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSharedSurface_hashRequest, ::octaneapi::ApiSharedSurface_hashResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hash_, context, request, response);
}

void ApiSharedSurfaceService::Stub::async::hash(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest* request, ::octaneapi::ApiSharedSurface_hashResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSharedSurface_hashRequest, ::octaneapi::ApiSharedSurface_hashResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hash_, context, request, response, std::move(f));
}

void ApiSharedSurfaceService::Stub::async::hash(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest* request, ::octaneapi::ApiSharedSurface_hashResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_hashResponse>* ApiSharedSurfaceService::Stub::PrepareAsynchashRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSharedSurface_hashResponse, ::octaneapi::ApiSharedSurface_hashRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hash_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_hashResponse>* ApiSharedSurfaceService::Stub::AsynchashRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_hashRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchashRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSharedSurfaceService::Stub::release(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSharedSurface_releaseRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_release_, context, request, response);
}

void ApiSharedSurfaceService::Stub::async::release(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSharedSurface_releaseRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_release_, context, request, response, std::move(f));
}

void ApiSharedSurfaceService::Stub::async::release(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_release_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSharedSurfaceService::Stub::PrepareAsyncreleaseRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiSharedSurface_releaseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_release_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSharedSurfaceService::Stub::AsyncreleaseRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreleaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSharedSurfaceService::Stub::clone(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest& request, ::octaneapi::ApiSharedSurface_cloneResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSharedSurface_cloneRequest, ::octaneapi::ApiSharedSurface_cloneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clone_, context, request, response);
}

void ApiSharedSurfaceService::Stub::async::clone(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest* request, ::octaneapi::ApiSharedSurface_cloneResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSharedSurface_cloneRequest, ::octaneapi::ApiSharedSurface_cloneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clone_, context, request, response, std::move(f));
}

void ApiSharedSurfaceService::Stub::async::clone(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest* request, ::octaneapi::ApiSharedSurface_cloneResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_cloneResponse>* ApiSharedSurfaceService::Stub::PrepareAsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSharedSurface_cloneResponse, ::octaneapi::ApiSharedSurface_cloneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clone_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_cloneResponse>* ApiSharedSurfaceService::Stub::AsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccloneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSharedSurfaceService::Stub::getType(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest& request, ::octaneapi::ApiSharedSurface_getTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSharedSurface_getTypeRequest, ::octaneapi::ApiSharedSurface_getTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getType_, context, request, response);
}

void ApiSharedSurfaceService::Stub::async::getType(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest* request, ::octaneapi::ApiSharedSurface_getTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSharedSurface_getTypeRequest, ::octaneapi::ApiSharedSurface_getTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getType_, context, request, response, std::move(f));
}

void ApiSharedSurfaceService::Stub::async::getType(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest* request, ::octaneapi::ApiSharedSurface_getTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getTypeResponse>* ApiSharedSurfaceService::Stub::PrepareAsyncgetTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSharedSurface_getTypeResponse, ::octaneapi::ApiSharedSurface_getTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getTypeResponse>* ApiSharedSurfaceService::Stub::AsyncgetTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSharedSurfaceService::Stub::getD3D11AdapterLuid(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest& request, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getD3D11AdapterLuid_, context, request, response);
}

void ApiSharedSurfaceService::Stub::async::getD3D11AdapterLuid(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* request, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getD3D11AdapterLuid_, context, request, response, std::move(f));
}

void ApiSharedSurfaceService::Stub::async::getD3D11AdapterLuid(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* request, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getD3D11AdapterLuid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>* ApiSharedSurfaceService::Stub::PrepareAsyncgetD3D11AdapterLuidRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getD3D11AdapterLuid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse>* ApiSharedSurfaceService::Stub::AsyncgetD3D11AdapterLuidRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetD3D11AdapterLuidRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiSharedSurfaceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSharedSurfaceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSharedSurfaceService::Service, ::octaneapi::ApiSharedSurface_createD3D11Request, ::octaneapi::ApiSharedSurface_createD3D11Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSharedSurfaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSharedSurface_createD3D11Request* req,
             ::octaneapi::ApiSharedSurface_createD3D11Response* resp) {
               return service->createD3D11(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSharedSurfaceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSharedSurfaceService::Service, ::octaneapi::ApiSharedSurface_equalsRequest, ::octaneapi::ApiSharedSurface_equalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSharedSurfaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSharedSurface_equalsRequest* req,
             ::octaneapi::ApiSharedSurface_equalsResponse* resp) {
               return service->equals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSharedSurfaceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSharedSurfaceService::Service, ::octaneapi::ApiSharedSurface_isLessThanRequest, ::octaneapi::ApiSharedSurface_isLessThanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSharedSurfaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSharedSurface_isLessThanRequest* req,
             ::octaneapi::ApiSharedSurface_isLessThanResponse* resp) {
               return service->isLessThan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSharedSurfaceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSharedSurfaceService::Service, ::octaneapi::ApiSharedSurface_hashRequest, ::octaneapi::ApiSharedSurface_hashResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSharedSurfaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSharedSurface_hashRequest* req,
             ::octaneapi::ApiSharedSurface_hashResponse* resp) {
               return service->hash(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSharedSurfaceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSharedSurfaceService::Service, ::octaneapi::ApiSharedSurface_releaseRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSharedSurfaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSharedSurface_releaseRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->release(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSharedSurfaceService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSharedSurfaceService::Service, ::octaneapi::ApiSharedSurface_cloneRequest, ::octaneapi::ApiSharedSurface_cloneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSharedSurfaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSharedSurface_cloneRequest* req,
             ::octaneapi::ApiSharedSurface_cloneResponse* resp) {
               return service->clone(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSharedSurfaceService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSharedSurfaceService::Service, ::octaneapi::ApiSharedSurface_getTypeRequest, ::octaneapi::ApiSharedSurface_getTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSharedSurfaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSharedSurface_getTypeRequest* req,
             ::octaneapi::ApiSharedSurface_getTypeResponse* resp) {
               return service->getType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSharedSurfaceService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSharedSurfaceService::Service, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSharedSurfaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* req,
             ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* resp) {
               return service->getD3D11AdapterLuid(ctx, req, resp);
             }, this)));
}

ApiSharedSurfaceService::Service::~Service() {
}

::grpc::Status ApiSharedSurfaceService::Service::createD3D11(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_createD3D11Request* request, ::octaneapi::ApiSharedSurface_createD3D11Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSharedSurfaceService::Service::equals(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_equalsRequest* request, ::octaneapi::ApiSharedSurface_equalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSharedSurfaceService::Service::isLessThan(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_isLessThanRequest* request, ::octaneapi::ApiSharedSurface_isLessThanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSharedSurfaceService::Service::hash(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_hashRequest* request, ::octaneapi::ApiSharedSurface_hashResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSharedSurfaceService::Service::release(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_releaseRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSharedSurfaceService::Service::clone(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_cloneRequest* request, ::octaneapi::ApiSharedSurface_cloneResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSharedSurfaceService::Service::getType(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_getTypeRequest* request, ::octaneapi::ApiSharedSurface_getTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSharedSurfaceService::Service::getD3D11AdapterLuid(::grpc::ServerContext* context, const ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidRequest* request, ::octaneapi::ApiSharedSurface_getD3D11AdapterLuidResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

