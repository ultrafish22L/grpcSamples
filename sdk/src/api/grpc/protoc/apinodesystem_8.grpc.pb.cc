// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apinodesystem_8.proto

#include "apinodesystem_8.pb.h"
#include "apinodesystem_8.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiRootNodeGraphService_method_names[] = {
  "/octaneapi.ApiRootNodeGraphService/create2",
  "/octaneapi.ApiRootNodeGraphService/init2",
  "/octaneapi.ApiRootNodeGraphService/convertAndEvaluate",
  "/octaneapi.ApiRootNodeGraphService/animationTimeSpan",
  "/octaneapi.ApiRootNodeGraphService/updateTime",
  "/octaneapi.ApiRootNodeGraphService/importFromFile",
  "/octaneapi.ApiRootNodeGraphService/importOcsFromMemory",
  "/octaneapi.ApiRootNodeGraphService/importOrbxFromCallback",
  "/octaneapi.ApiRootNodeGraphService/importOrbxFromMemory",
  "/octaneapi.ApiRootNodeGraphService/exportToFile",
  "/octaneapi.ApiRootNodeGraphService/exportToString",
  "/octaneapi.ApiRootNodeGraphService/referenceGraphCount",
  "/octaneapi.ApiRootNodeGraphService/loadAllReferences",
  "/octaneapi.ApiRootNodeGraphService/unloadAllReferences",
};

std::unique_ptr< ApiRootNodeGraphService::Stub> ApiRootNodeGraphService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiRootNodeGraphService::Stub> stub(new ApiRootNodeGraphService::Stub(channel, options));
  return stub;
}

ApiRootNodeGraphService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create2_(ApiRootNodeGraphService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_init2_(ApiRootNodeGraphService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_convertAndEvaluate_(ApiRootNodeGraphService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_animationTimeSpan_(ApiRootNodeGraphService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_updateTime_(ApiRootNodeGraphService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_importFromFile_(ApiRootNodeGraphService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_importOcsFromMemory_(ApiRootNodeGraphService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_importOrbxFromCallback_(ApiRootNodeGraphService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_importOrbxFromMemory_(ApiRootNodeGraphService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_exportToFile_(ApiRootNodeGraphService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_exportToString_(ApiRootNodeGraphService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_referenceGraphCount_(ApiRootNodeGraphService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadAllReferences_(ApiRootNodeGraphService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unloadAllReferences_(ApiRootNodeGraphService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiRootNodeGraphService::Stub::create2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest& request, ::octaneapi::ApiRootNodeGraph_createResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRootNodeGraph_createRequest, ::octaneapi::ApiRootNodeGraph_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create2_, context, request, response);
}

void ApiRootNodeGraphService::Stub::async::create2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest* request, ::octaneapi::ApiRootNodeGraph_createResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRootNodeGraph_createRequest, ::octaneapi::ApiRootNodeGraph_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create2_, context, request, response, std::move(f));
}

void ApiRootNodeGraphService::Stub::async::create2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest* request, ::octaneapi::ApiRootNodeGraph_createResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_createResponse>* ApiRootNodeGraphService::Stub::PrepareAsynccreate2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRootNodeGraph_createResponse, ::octaneapi::ApiRootNodeGraph_createRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_createResponse>* ApiRootNodeGraphService::Stub::Asynccreate2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreate2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRootNodeGraphService::Stub::init2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRootNodeGraph_initRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init2_, context, request, response);
}

void ApiRootNodeGraphService::Stub::async::init2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRootNodeGraph_initRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init2_, context, request, response, std::move(f));
}

void ApiRootNodeGraphService::Stub::async::init2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRootNodeGraphService::Stub::PrepareAsyncinit2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRootNodeGraph_initRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRootNodeGraphService::Stub::Asyncinit2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinit2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRootNodeGraphService::Stub::convertAndEvaluate(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_convertAndEvaluate_, context, request, response);
}

void ApiRootNodeGraphService::Stub::async::convertAndEvaluate(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_convertAndEvaluate_, context, request, response, std::move(f));
}

void ApiRootNodeGraphService::Stub::async::convertAndEvaluate(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_convertAndEvaluate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRootNodeGraphService::Stub::PrepareAsyncconvertAndEvaluateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_convertAndEvaluate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRootNodeGraphService::Stub::AsyncconvertAndEvaluateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconvertAndEvaluateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRootNodeGraphService::Stub::animationTimeSpan(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest& request, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_animationTimeSpan_, context, request, response);
}

void ApiRootNodeGraphService::Stub::async::animationTimeSpan(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* request, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_animationTimeSpan_, context, request, response, std::move(f));
}

void ApiRootNodeGraphService::Stub::async::animationTimeSpan(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* request, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_animationTimeSpan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>* ApiRootNodeGraphService::Stub::PrepareAsyncanimationTimeSpanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse, ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_animationTimeSpan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>* ApiRootNodeGraphService::Stub::AsyncanimationTimeSpanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncanimationTimeSpanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRootNodeGraphService::Stub::updateTime(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRootNodeGraph_updateTimeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_updateTime_, context, request, response);
}

void ApiRootNodeGraphService::Stub::async::updateTime(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRootNodeGraph_updateTimeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updateTime_, context, request, response, std::move(f));
}

void ApiRootNodeGraphService::Stub::async::updateTime(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updateTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRootNodeGraphService::Stub::PrepareAsyncupdateTimeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRootNodeGraph_updateTimeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_updateTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRootNodeGraphService::Stub::AsyncupdateTimeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncupdateTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRootNodeGraphService::Stub::importFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest& request, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRootNodeGraph_importFromFileRequest, ::octaneapi::ApiRootNodeGraph_importFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_importFromFile_, context, request, response);
}

void ApiRootNodeGraphService::Stub::async::importFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* request, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRootNodeGraph_importFromFileRequest, ::octaneapi::ApiRootNodeGraph_importFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_importFromFile_, context, request, response, std::move(f));
}

void ApiRootNodeGraphService::Stub::async::importFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* request, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_importFromFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>* ApiRootNodeGraphService::Stub::PrepareAsyncimportFromFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRootNodeGraph_importFromFileResponse, ::octaneapi::ApiRootNodeGraph_importFromFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_importFromFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>* ApiRootNodeGraphService::Stub::AsyncimportFromFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncimportFromFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRootNodeGraphService::Stub::importOcsFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest& request, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_importOcsFromMemory_, context, request, response);
}

void ApiRootNodeGraphService::Stub::async::importOcsFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_importOcsFromMemory_, context, request, response, std::move(f));
}

void ApiRootNodeGraphService::Stub::async::importOcsFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_importOcsFromMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>* ApiRootNodeGraphService::Stub::PrepareAsyncimportOcsFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_importOcsFromMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>* ApiRootNodeGraphService::Stub::AsyncimportOcsFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncimportOcsFromMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRootNodeGraphService::Stub::importOrbxFromCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest& request, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_importOrbxFromCallback_, context, request, response);
}

void ApiRootNodeGraphService::Stub::async::importOrbxFromCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_importOrbxFromCallback_, context, request, response, std::move(f));
}

void ApiRootNodeGraphService::Stub::async::importOrbxFromCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_importOrbxFromCallback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>* ApiRootNodeGraphService::Stub::PrepareAsyncimportOrbxFromCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_importOrbxFromCallback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>* ApiRootNodeGraphService::Stub::AsyncimportOrbxFromCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncimportOrbxFromCallbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRootNodeGraphService::Stub::importOrbxFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest& request, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_importOrbxFromMemory_, context, request, response);
}

void ApiRootNodeGraphService::Stub::async::importOrbxFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_importOrbxFromMemory_, context, request, response, std::move(f));
}

void ApiRootNodeGraphService::Stub::async::importOrbxFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_importOrbxFromMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>* ApiRootNodeGraphService::Stub::PrepareAsyncimportOrbxFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_importOrbxFromMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>* ApiRootNodeGraphService::Stub::AsyncimportOrbxFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncimportOrbxFromMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRootNodeGraphService::Stub::exportToFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest& request, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRootNodeGraph_exportToFileRequest, ::octaneapi::ApiRootNodeGraph_exportToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_exportToFile_, context, request, response);
}

void ApiRootNodeGraphService::Stub::async::exportToFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* request, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRootNodeGraph_exportToFileRequest, ::octaneapi::ApiRootNodeGraph_exportToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exportToFile_, context, request, response, std::move(f));
}

void ApiRootNodeGraphService::Stub::async::exportToFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* request, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exportToFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>* ApiRootNodeGraphService::Stub::PrepareAsyncexportToFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRootNodeGraph_exportToFileResponse, ::octaneapi::ApiRootNodeGraph_exportToFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_exportToFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>* ApiRootNodeGraphService::Stub::AsyncexportToFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncexportToFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRootNodeGraphService::Stub::exportToString(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest& request, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRootNodeGraph_exportToStringRequest, ::octaneapi::ApiRootNodeGraph_exportToStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_exportToString_, context, request, response);
}

void ApiRootNodeGraphService::Stub::async::exportToString(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* request, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRootNodeGraph_exportToStringRequest, ::octaneapi::ApiRootNodeGraph_exportToStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exportToString_, context, request, response, std::move(f));
}

void ApiRootNodeGraphService::Stub::async::exportToString(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* request, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exportToString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>* ApiRootNodeGraphService::Stub::PrepareAsyncexportToStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRootNodeGraph_exportToStringResponse, ::octaneapi::ApiRootNodeGraph_exportToStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_exportToString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>* ApiRootNodeGraphService::Stub::AsyncexportToStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncexportToStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRootNodeGraphService::Stub::referenceGraphCount(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest& request, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_referenceGraphCount_, context, request, response);
}

void ApiRootNodeGraphService::Stub::async::referenceGraphCount(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* request, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_referenceGraphCount_, context, request, response, std::move(f));
}

void ApiRootNodeGraphService::Stub::async::referenceGraphCount(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* request, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_referenceGraphCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>* ApiRootNodeGraphService::Stub::PrepareAsyncreferenceGraphCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse, ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_referenceGraphCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>* ApiRootNodeGraphService::Stub::AsyncreferenceGraphCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreferenceGraphCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRootNodeGraphService::Stub::loadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadAllReferences_, context, request, response);
}

void ApiRootNodeGraphService::Stub::async::loadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadAllReferences_, context, request, response, std::move(f));
}

void ApiRootNodeGraphService::Stub::async::loadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadAllReferences_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRootNodeGraphService::Stub::PrepareAsyncloadAllReferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadAllReferences_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRootNodeGraphService::Stub::AsyncloadAllReferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadAllReferencesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiRootNodeGraphService::Stub::unloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unloadAllReferences_, context, request, response);
}

void ApiRootNodeGraphService::Stub::async::unloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unloadAllReferences_, context, request, response, std::move(f));
}

void ApiRootNodeGraphService::Stub::async::unloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unloadAllReferences_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRootNodeGraphService::Stub::PrepareAsyncunloadAllReferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unloadAllReferences_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiRootNodeGraphService::Stub::AsyncunloadAllReferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunloadAllReferencesRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiRootNodeGraphService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRootNodeGraphService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRootNodeGraphService::Service, ::octaneapi::ApiRootNodeGraph_createRequest, ::octaneapi::ApiRootNodeGraph_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRootNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRootNodeGraph_createRequest* req,
             ::octaneapi::ApiRootNodeGraph_createResponse* resp) {
               return service->create2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRootNodeGraphService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRootNodeGraphService::Service, ::octaneapi::ApiRootNodeGraph_initRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRootNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRootNodeGraph_initRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->init2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRootNodeGraphService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRootNodeGraphService::Service, ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRootNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->convertAndEvaluate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRootNodeGraphService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRootNodeGraphService::Service, ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRootNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* req,
             ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* resp) {
               return service->animationTimeSpan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRootNodeGraphService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRootNodeGraphService::Service, ::octaneapi::ApiRootNodeGraph_updateTimeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRootNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->updateTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRootNodeGraphService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRootNodeGraphService::Service, ::octaneapi::ApiRootNodeGraph_importFromFileRequest, ::octaneapi::ApiRootNodeGraph_importFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRootNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* req,
             ::octaneapi::ApiRootNodeGraph_importFromFileResponse* resp) {
               return service->importFromFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRootNodeGraphService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRootNodeGraphService::Service, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRootNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* req,
             ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* resp) {
               return service->importOcsFromMemory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRootNodeGraphService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRootNodeGraphService::Service, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRootNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* req,
             ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* resp) {
               return service->importOrbxFromCallback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRootNodeGraphService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRootNodeGraphService::Service, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRootNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* req,
             ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* resp) {
               return service->importOrbxFromMemory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRootNodeGraphService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRootNodeGraphService::Service, ::octaneapi::ApiRootNodeGraph_exportToFileRequest, ::octaneapi::ApiRootNodeGraph_exportToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRootNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* req,
             ::octaneapi::ApiRootNodeGraph_exportToFileResponse* resp) {
               return service->exportToFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRootNodeGraphService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRootNodeGraphService::Service, ::octaneapi::ApiRootNodeGraph_exportToStringRequest, ::octaneapi::ApiRootNodeGraph_exportToStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRootNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* req,
             ::octaneapi::ApiRootNodeGraph_exportToStringResponse* resp) {
               return service->exportToString(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRootNodeGraphService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRootNodeGraphService::Service, ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRootNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* req,
             ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* resp) {
               return service->referenceGraphCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRootNodeGraphService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRootNodeGraphService::Service, ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRootNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->loadAllReferences(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiRootNodeGraphService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiRootNodeGraphService::Service, ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiRootNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->unloadAllReferences(ctx, req, resp);
             }, this)));
}

ApiRootNodeGraphService::Service::~Service() {
}

::grpc::Status ApiRootNodeGraphService::Service::create2(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest* request, ::octaneapi::ApiRootNodeGraph_createResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRootNodeGraphService::Service::init2(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRootNodeGraphService::Service::convertAndEvaluate(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRootNodeGraphService::Service::animationTimeSpan(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* request, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRootNodeGraphService::Service::updateTime(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRootNodeGraphService::Service::importFromFile(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* request, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRootNodeGraphService::Service::importOcsFromMemory(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRootNodeGraphService::Service::importOrbxFromCallback(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRootNodeGraphService::Service::importOrbxFromMemory(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRootNodeGraphService::Service::exportToFile(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* request, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRootNodeGraphService::Service::exportToString(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* request, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRootNodeGraphService::Service::referenceGraphCount(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* request, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRootNodeGraphService::Service::loadAllReferences(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiRootNodeGraphService::Service::unloadAllReferences(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

