// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apimoduledata.proto

#include "apimoduledata.pb.h"
#include "apimoduledata.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiModuleDataService_method_names[] = {
  "/octaneapi.ApiModuleDataService/loadApplicationData",
  "/octaneapi.ApiModuleDataService/storeApplicationData",
};

std::unique_ptr< ApiModuleDataService::Stub> ApiModuleDataService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiModuleDataService::Stub> stub(new ApiModuleDataService::Stub(channel, options));
  return stub;
}

ApiModuleDataService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_loadApplicationData_(ApiModuleDataService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_storeApplicationData_(ApiModuleDataService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiModuleDataService::Stub::loadApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest& request, ::octaneapi::ApiModuleData_loadApplicationDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiModuleData_loadApplicationDataRequest, ::octaneapi::ApiModuleData_loadApplicationDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadApplicationData_, context, request, response);
}

void ApiModuleDataService::Stub::async::loadApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* request, ::octaneapi::ApiModuleData_loadApplicationDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiModuleData_loadApplicationDataRequest, ::octaneapi::ApiModuleData_loadApplicationDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadApplicationData_, context, request, response, std::move(f));
}

void ApiModuleDataService::Stub::async::loadApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* request, ::octaneapi::ApiModuleData_loadApplicationDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadApplicationData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_loadApplicationDataResponse>* ApiModuleDataService::Stub::PrepareAsyncloadApplicationDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiModuleData_loadApplicationDataResponse, ::octaneapi::ApiModuleData_loadApplicationDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadApplicationData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_loadApplicationDataResponse>* ApiModuleDataService::Stub::AsyncloadApplicationDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadApplicationDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiModuleDataService::Stub::storeApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest& request, ::octaneapi::ApiModuleData_storeApplicationDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiModuleData_storeApplicationDataRequest, ::octaneapi::ApiModuleData_storeApplicationDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_storeApplicationData_, context, request, response);
}

void ApiModuleDataService::Stub::async::storeApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* request, ::octaneapi::ApiModuleData_storeApplicationDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiModuleData_storeApplicationDataRequest, ::octaneapi::ApiModuleData_storeApplicationDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_storeApplicationData_, context, request, response, std::move(f));
}

void ApiModuleDataService::Stub::async::storeApplicationData(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* request, ::octaneapi::ApiModuleData_storeApplicationDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_storeApplicationData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_storeApplicationDataResponse>* ApiModuleDataService::Stub::PrepareAsyncstoreApplicationDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiModuleData_storeApplicationDataResponse, ::octaneapi::ApiModuleData_storeApplicationDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_storeApplicationData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiModuleData_storeApplicationDataResponse>* ApiModuleDataService::Stub::AsyncstoreApplicationDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstoreApplicationDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiModuleDataService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiModuleDataService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiModuleDataService::Service, ::octaneapi::ApiModuleData_loadApplicationDataRequest, ::octaneapi::ApiModuleData_loadApplicationDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiModuleDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiModuleData_loadApplicationDataRequest* req,
             ::octaneapi::ApiModuleData_loadApplicationDataResponse* resp) {
               return service->loadApplicationData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiModuleDataService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiModuleDataService::Service, ::octaneapi::ApiModuleData_storeApplicationDataRequest, ::octaneapi::ApiModuleData_storeApplicationDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiModuleDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiModuleData_storeApplicationDataRequest* req,
             ::octaneapi::ApiModuleData_storeApplicationDataResponse* resp) {
               return service->storeApplicationData(ctx, req, resp);
             }, this)));
}

ApiModuleDataService::Service::~Service() {
}

::grpc::Status ApiModuleDataService::Service::loadApplicationData(::grpc::ServerContext* context, const ::octaneapi::ApiModuleData_loadApplicationDataRequest* request, ::octaneapi::ApiModuleData_loadApplicationDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiModuleDataService::Service::storeApplicationData(::grpc::ServerContext* context, const ::octaneapi::ApiModuleData_storeApplicationDataRequest* request, ::octaneapi::ApiModuleData_storeApplicationDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

