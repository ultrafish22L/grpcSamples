// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apifilechooser.proto

#include "apifilechooser.pb.h"
#include "apifilechooser.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiFileChooserService_method_names[] = {
  "/octaneapi.ApiFileChooserService/create",
  "/octaneapi.ApiFileChooserService/destroy",
  "/octaneapi.ApiFileChooserService/browseForFileToOpen",
  "/octaneapi.ApiFileChooserService/browseForMultipleFilesToOpen",
  "/octaneapi.ApiFileChooserService/browseForFileToSave",
  "/octaneapi.ApiFileChooserService/browseForDirectory",
  "/octaneapi.ApiFileChooserService/browseForMultipleFilesOrDirectories",
  "/octaneapi.ApiFileChooserService/result",
  "/octaneapi.ApiFileChooserService/results",
};

std::unique_ptr< ApiFileChooserService::Stub> ApiFileChooserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiFileChooserService::Stub> stub(new ApiFileChooserService::Stub(channel, options));
  return stub;
}

ApiFileChooserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create_(ApiFileChooserService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(ApiFileChooserService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_browseForFileToOpen_(ApiFileChooserService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_browseForMultipleFilesToOpen_(ApiFileChooserService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_browseForFileToSave_(ApiFileChooserService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_browseForDirectory_(ApiFileChooserService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_browseForMultipleFilesOrDirectories_(ApiFileChooserService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_result_(ApiFileChooserService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_results_(ApiFileChooserService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiFileChooserService::Stub::create(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest& request, ::octaneapi::ApiFileChooser_createResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileChooser_createRequest, ::octaneapi::ApiFileChooser_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_, context, request, response);
}

void ApiFileChooserService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest* request, ::octaneapi::ApiFileChooser_createResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileChooser_createRequest, ::octaneapi::ApiFileChooser_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void ApiFileChooserService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest* request, ::octaneapi::ApiFileChooser_createResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_createResponse>* ApiFileChooserService::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileChooser_createResponse, ::octaneapi::ApiFileChooser_createRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_createResponse>* ApiFileChooserService::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileChooserService::Stub::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileChooser_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void ApiFileChooserService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileChooser_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void ApiFileChooserService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiFileChooserService::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiFileChooser_destroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiFileChooserService::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileChooserService::Stub::browseForFileToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest& request, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileChooser_browseForFileToOpenRequest, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_browseForFileToOpen_, context, request, response);
}

void ApiFileChooserService::Stub::async::browseForFileToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileChooser_browseForFileToOpenRequest, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_browseForFileToOpen_, context, request, response, std::move(f));
}

void ApiFileChooserService::Stub::async::browseForFileToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_browseForFileToOpen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>* ApiFileChooserService::Stub::PrepareAsyncbrowseForFileToOpenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse, ::octaneapi::ApiFileChooser_browseForFileToOpenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_browseForFileToOpen_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>* ApiFileChooserService::Stub::AsyncbrowseForFileToOpenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbrowseForFileToOpenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileChooserService::Stub::browseForMultipleFilesToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest& request, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_browseForMultipleFilesToOpen_, context, request, response);
}

void ApiFileChooserService::Stub::async::browseForMultipleFilesToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_browseForMultipleFilesToOpen_, context, request, response, std::move(f));
}

void ApiFileChooserService::Stub::async::browseForMultipleFilesToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_browseForMultipleFilesToOpen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>* ApiFileChooserService::Stub::PrepareAsyncbrowseForMultipleFilesToOpenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_browseForMultipleFilesToOpen_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>* ApiFileChooserService::Stub::AsyncbrowseForMultipleFilesToOpenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbrowseForMultipleFilesToOpenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileChooserService::Stub::browseForFileToSave(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest& request, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileChooser_browseForFileToSaveRequest, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_browseForFileToSave_, context, request, response);
}

void ApiFileChooserService::Stub::async::browseForFileToSave(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* request, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileChooser_browseForFileToSaveRequest, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_browseForFileToSave_, context, request, response, std::move(f));
}

void ApiFileChooserService::Stub::async::browseForFileToSave(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* request, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_browseForFileToSave_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>* ApiFileChooserService::Stub::PrepareAsyncbrowseForFileToSaveRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse, ::octaneapi::ApiFileChooser_browseForFileToSaveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_browseForFileToSave_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>* ApiFileChooserService::Stub::AsyncbrowseForFileToSaveRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbrowseForFileToSaveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileChooserService::Stub::browseForDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest& request, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileChooser_browseForDirectoryRequest, ::octaneapi::ApiFileChooser_browseForDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_browseForDirectory_, context, request, response);
}

void ApiFileChooserService::Stub::async::browseForDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* request, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileChooser_browseForDirectoryRequest, ::octaneapi::ApiFileChooser_browseForDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_browseForDirectory_, context, request, response, std::move(f));
}

void ApiFileChooserService::Stub::async::browseForDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* request, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_browseForDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>* ApiFileChooserService::Stub::PrepareAsyncbrowseForDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileChooser_browseForDirectoryResponse, ::octaneapi::ApiFileChooser_browseForDirectoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_browseForDirectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>* ApiFileChooserService::Stub::AsyncbrowseForDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbrowseForDirectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileChooserService::Stub::browseForMultipleFilesOrDirectories(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest& request, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_browseForMultipleFilesOrDirectories_, context, request, response);
}

void ApiFileChooserService::Stub::async::browseForMultipleFilesOrDirectories(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_browseForMultipleFilesOrDirectories_, context, request, response, std::move(f));
}

void ApiFileChooserService::Stub::async::browseForMultipleFilesOrDirectories(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_browseForMultipleFilesOrDirectories_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>* ApiFileChooserService::Stub::PrepareAsyncbrowseForMultipleFilesOrDirectoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_browseForMultipleFilesOrDirectories_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>* ApiFileChooserService::Stub::AsyncbrowseForMultipleFilesOrDirectoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbrowseForMultipleFilesOrDirectoriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileChooserService::Stub::result(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest& request, ::octaneapi::ApiFileChooser_resultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileChooser_resultRequest, ::octaneapi::ApiFileChooser_resultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_result_, context, request, response);
}

void ApiFileChooserService::Stub::async::result(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest* request, ::octaneapi::ApiFileChooser_resultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileChooser_resultRequest, ::octaneapi::ApiFileChooser_resultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_result_, context, request, response, std::move(f));
}

void ApiFileChooserService::Stub::async::result(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest* request, ::octaneapi::ApiFileChooser_resultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_result_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultResponse>* ApiFileChooserService::Stub::PrepareAsyncresultRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileChooser_resultResponse, ::octaneapi::ApiFileChooser_resultRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_result_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultResponse>* ApiFileChooserService::Stub::AsyncresultRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncresultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileChooserService::Stub::results(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest& request, ::octaneapi::ApiFileChooser_resultsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileChooser_resultsRequest, ::octaneapi::ApiFileChooser_resultsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_results_, context, request, response);
}

void ApiFileChooserService::Stub::async::results(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest* request, ::octaneapi::ApiFileChooser_resultsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileChooser_resultsRequest, ::octaneapi::ApiFileChooser_resultsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_results_, context, request, response, std::move(f));
}

void ApiFileChooserService::Stub::async::results(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest* request, ::octaneapi::ApiFileChooser_resultsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_results_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultsResponse>* ApiFileChooserService::Stub::PrepareAsyncresultsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileChooser_resultsResponse, ::octaneapi::ApiFileChooser_resultsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_results_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultsResponse>* ApiFileChooserService::Stub::AsyncresultsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncresultsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiFileChooserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileChooserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileChooserService::Service, ::octaneapi::ApiFileChooser_createRequest, ::octaneapi::ApiFileChooser_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileChooserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileChooser_createRequest* req,
             ::octaneapi::ApiFileChooser_createResponse* resp) {
               return service->create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileChooserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileChooserService::Service, ::octaneapi::ApiFileChooser_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileChooserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileChooser_destroyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileChooserService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileChooserService::Service, ::octaneapi::ApiFileChooser_browseForFileToOpenRequest, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileChooserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* req,
             ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* resp) {
               return service->browseForFileToOpen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileChooserService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileChooserService::Service, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileChooserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* req,
             ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* resp) {
               return service->browseForMultipleFilesToOpen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileChooserService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileChooserService::Service, ::octaneapi::ApiFileChooser_browseForFileToSaveRequest, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileChooserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* req,
             ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* resp) {
               return service->browseForFileToSave(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileChooserService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileChooserService::Service, ::octaneapi::ApiFileChooser_browseForDirectoryRequest, ::octaneapi::ApiFileChooser_browseForDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileChooserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* req,
             ::octaneapi::ApiFileChooser_browseForDirectoryResponse* resp) {
               return service->browseForDirectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileChooserService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileChooserService::Service, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileChooserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* req,
             ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* resp) {
               return service->browseForMultipleFilesOrDirectories(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileChooserService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileChooserService::Service, ::octaneapi::ApiFileChooser_resultRequest, ::octaneapi::ApiFileChooser_resultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileChooserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileChooser_resultRequest* req,
             ::octaneapi::ApiFileChooser_resultResponse* resp) {
               return service->result(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileChooserService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileChooserService::Service, ::octaneapi::ApiFileChooser_resultsRequest, ::octaneapi::ApiFileChooser_resultsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileChooserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileChooser_resultsRequest* req,
             ::octaneapi::ApiFileChooser_resultsResponse* resp) {
               return service->results(ctx, req, resp);
             }, this)));
}

ApiFileChooserService::Service::~Service() {
}

::grpc::Status ApiFileChooserService::Service::create(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_createRequest* request, ::octaneapi::ApiFileChooser_createResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileChooserService::Service::destroy(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_destroyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileChooserService::Service::browseForFileToOpen(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileChooserService::Service::browseForMultipleFilesToOpen(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileChooserService::Service::browseForFileToSave(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* request, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileChooserService::Service::browseForDirectory(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* request, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileChooserService::Service::browseForMultipleFilesOrDirectories(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileChooserService::Service::result(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_resultRequest* request, ::octaneapi::ApiFileChooser_resultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileChooserService::Service::results(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_resultsRequest* request, ::octaneapi::ApiFileChooser_resultsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

