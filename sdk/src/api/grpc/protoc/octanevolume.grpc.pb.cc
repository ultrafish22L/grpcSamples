// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: octanevolume.proto

#include "octanevolume.pb.h"
#include "octanevolume.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* VdbGridInfoService_method_names[] = {
  "/octaneapi.VdbGridInfoService/name",
  "/octaneapi.VdbGridInfoService/type",
  "/octaneapi.VdbGridInfoService/resolution",
  "/octaneapi.VdbGridInfoService/minBound",
  "/octaneapi.VdbGridInfoService/maxBound",
  "/octaneapi.VdbGridInfoService/transform",
};

std::unique_ptr< VdbGridInfoService::Stub> VdbGridInfoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VdbGridInfoService::Stub> stub(new VdbGridInfoService::Stub(channel, options));
  return stub;
}

VdbGridInfoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_name_(VdbGridInfoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_type_(VdbGridInfoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_resolution_(VdbGridInfoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_minBound_(VdbGridInfoService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_maxBound_(VdbGridInfoService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_transform_(VdbGridInfoService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VdbGridInfoService::Stub::name(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_nameRequest& request, ::octaneapi::VdbGridInfo_nameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::VdbGridInfo_nameRequest, ::octaneapi::VdbGridInfo_nameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_name_, context, request, response);
}

void VdbGridInfoService::Stub::async::name(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_nameRequest* request, ::octaneapi::VdbGridInfo_nameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::VdbGridInfo_nameRequest, ::octaneapi::VdbGridInfo_nameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_name_, context, request, response, std::move(f));
}

void VdbGridInfoService::Stub::async::name(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_nameRequest* request, ::octaneapi::VdbGridInfo_nameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_name_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbGridInfo_nameResponse>* VdbGridInfoService::Stub::PrepareAsyncnameRaw(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_nameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::VdbGridInfo_nameResponse, ::octaneapi::VdbGridInfo_nameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_name_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbGridInfo_nameResponse>* VdbGridInfoService::Stub::AsyncnameRaw(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_nameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VdbGridInfoService::Stub::type(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_typeRequest& request, ::octaneapi::VdbGridInfo_typeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::VdbGridInfo_typeRequest, ::octaneapi::VdbGridInfo_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_type_, context, request, response);
}

void VdbGridInfoService::Stub::async::type(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_typeRequest* request, ::octaneapi::VdbGridInfo_typeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::VdbGridInfo_typeRequest, ::octaneapi::VdbGridInfo_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_type_, context, request, response, std::move(f));
}

void VdbGridInfoService::Stub::async::type(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_typeRequest* request, ::octaneapi::VdbGridInfo_typeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_type_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbGridInfo_typeResponse>* VdbGridInfoService::Stub::PrepareAsynctypeRaw(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_typeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::VdbGridInfo_typeResponse, ::octaneapi::VdbGridInfo_typeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_type_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbGridInfo_typeResponse>* VdbGridInfoService::Stub::AsynctypeRaw(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_typeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VdbGridInfoService::Stub::resolution(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_resolutionRequest& request, ::octaneapi::VdbGridInfo_resolutionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::VdbGridInfo_resolutionRequest, ::octaneapi::VdbGridInfo_resolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_resolution_, context, request, response);
}

void VdbGridInfoService::Stub::async::resolution(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_resolutionRequest* request, ::octaneapi::VdbGridInfo_resolutionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::VdbGridInfo_resolutionRequest, ::octaneapi::VdbGridInfo_resolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resolution_, context, request, response, std::move(f));
}

void VdbGridInfoService::Stub::async::resolution(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_resolutionRequest* request, ::octaneapi::VdbGridInfo_resolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resolution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbGridInfo_resolutionResponse>* VdbGridInfoService::Stub::PrepareAsyncresolutionRaw(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_resolutionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::VdbGridInfo_resolutionResponse, ::octaneapi::VdbGridInfo_resolutionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_resolution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbGridInfo_resolutionResponse>* VdbGridInfoService::Stub::AsyncresolutionRaw(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_resolutionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncresolutionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VdbGridInfoService::Stub::minBound(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_minBoundRequest& request, ::octaneapi::VdbGridInfo_minBoundResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::VdbGridInfo_minBoundRequest, ::octaneapi::VdbGridInfo_minBoundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_minBound_, context, request, response);
}

void VdbGridInfoService::Stub::async::minBound(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_minBoundRequest* request, ::octaneapi::VdbGridInfo_minBoundResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::VdbGridInfo_minBoundRequest, ::octaneapi::VdbGridInfo_minBoundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_minBound_, context, request, response, std::move(f));
}

void VdbGridInfoService::Stub::async::minBound(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_minBoundRequest* request, ::octaneapi::VdbGridInfo_minBoundResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_minBound_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbGridInfo_minBoundResponse>* VdbGridInfoService::Stub::PrepareAsyncminBoundRaw(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_minBoundRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::VdbGridInfo_minBoundResponse, ::octaneapi::VdbGridInfo_minBoundRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_minBound_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbGridInfo_minBoundResponse>* VdbGridInfoService::Stub::AsyncminBoundRaw(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_minBoundRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncminBoundRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VdbGridInfoService::Stub::maxBound(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_maxBoundRequest& request, ::octaneapi::VdbGridInfo_maxBoundResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::VdbGridInfo_maxBoundRequest, ::octaneapi::VdbGridInfo_maxBoundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_maxBound_, context, request, response);
}

void VdbGridInfoService::Stub::async::maxBound(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_maxBoundRequest* request, ::octaneapi::VdbGridInfo_maxBoundResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::VdbGridInfo_maxBoundRequest, ::octaneapi::VdbGridInfo_maxBoundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_maxBound_, context, request, response, std::move(f));
}

void VdbGridInfoService::Stub::async::maxBound(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_maxBoundRequest* request, ::octaneapi::VdbGridInfo_maxBoundResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_maxBound_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbGridInfo_maxBoundResponse>* VdbGridInfoService::Stub::PrepareAsyncmaxBoundRaw(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_maxBoundRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::VdbGridInfo_maxBoundResponse, ::octaneapi::VdbGridInfo_maxBoundRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_maxBound_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbGridInfo_maxBoundResponse>* VdbGridInfoService::Stub::AsyncmaxBoundRaw(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_maxBoundRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmaxBoundRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VdbGridInfoService::Stub::transform(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_transformRequest& request, ::octaneapi::VdbGridInfo_transformResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::VdbGridInfo_transformRequest, ::octaneapi::VdbGridInfo_transformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_transform_, context, request, response);
}

void VdbGridInfoService::Stub::async::transform(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_transformRequest* request, ::octaneapi::VdbGridInfo_transformResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::VdbGridInfo_transformRequest, ::octaneapi::VdbGridInfo_transformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_transform_, context, request, response, std::move(f));
}

void VdbGridInfoService::Stub::async::transform(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_transformRequest* request, ::octaneapi::VdbGridInfo_transformResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_transform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbGridInfo_transformResponse>* VdbGridInfoService::Stub::PrepareAsynctransformRaw(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_transformRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::VdbGridInfo_transformResponse, ::octaneapi::VdbGridInfo_transformRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_transform_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbGridInfo_transformResponse>* VdbGridInfoService::Stub::AsynctransformRaw(::grpc::ClientContext* context, const ::octaneapi::VdbGridInfo_transformRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctransformRaw(context, request, cq);
  result->StartCall();
  return result;
}

VdbGridInfoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VdbGridInfoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VdbGridInfoService::Service, ::octaneapi::VdbGridInfo_nameRequest, ::octaneapi::VdbGridInfo_nameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VdbGridInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::VdbGridInfo_nameRequest* req,
             ::octaneapi::VdbGridInfo_nameResponse* resp) {
               return service->name(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VdbGridInfoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VdbGridInfoService::Service, ::octaneapi::VdbGridInfo_typeRequest, ::octaneapi::VdbGridInfo_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VdbGridInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::VdbGridInfo_typeRequest* req,
             ::octaneapi::VdbGridInfo_typeResponse* resp) {
               return service->type(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VdbGridInfoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VdbGridInfoService::Service, ::octaneapi::VdbGridInfo_resolutionRequest, ::octaneapi::VdbGridInfo_resolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VdbGridInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::VdbGridInfo_resolutionRequest* req,
             ::octaneapi::VdbGridInfo_resolutionResponse* resp) {
               return service->resolution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VdbGridInfoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VdbGridInfoService::Service, ::octaneapi::VdbGridInfo_minBoundRequest, ::octaneapi::VdbGridInfo_minBoundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VdbGridInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::VdbGridInfo_minBoundRequest* req,
             ::octaneapi::VdbGridInfo_minBoundResponse* resp) {
               return service->minBound(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VdbGridInfoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VdbGridInfoService::Service, ::octaneapi::VdbGridInfo_maxBoundRequest, ::octaneapi::VdbGridInfo_maxBoundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VdbGridInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::VdbGridInfo_maxBoundRequest* req,
             ::octaneapi::VdbGridInfo_maxBoundResponse* resp) {
               return service->maxBound(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VdbGridInfoService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VdbGridInfoService::Service, ::octaneapi::VdbGridInfo_transformRequest, ::octaneapi::VdbGridInfo_transformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VdbGridInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::VdbGridInfo_transformRequest* req,
             ::octaneapi::VdbGridInfo_transformResponse* resp) {
               return service->transform(ctx, req, resp);
             }, this)));
}

VdbGridInfoService::Service::~Service() {
}

::grpc::Status VdbGridInfoService::Service::name(::grpc::ServerContext* context, const ::octaneapi::VdbGridInfo_nameRequest* request, ::octaneapi::VdbGridInfo_nameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VdbGridInfoService::Service::type(::grpc::ServerContext* context, const ::octaneapi::VdbGridInfo_typeRequest* request, ::octaneapi::VdbGridInfo_typeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VdbGridInfoService::Service::resolution(::grpc::ServerContext* context, const ::octaneapi::VdbGridInfo_resolutionRequest* request, ::octaneapi::VdbGridInfo_resolutionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VdbGridInfoService::Service::minBound(::grpc::ServerContext* context, const ::octaneapi::VdbGridInfo_minBoundRequest* request, ::octaneapi::VdbGridInfo_minBoundResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VdbGridInfoService::Service::maxBound(::grpc::ServerContext* context, const ::octaneapi::VdbGridInfo_maxBoundRequest* request, ::octaneapi::VdbGridInfo_maxBoundResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VdbGridInfoService::Service::transform(::grpc::ServerContext* context, const ::octaneapi::VdbGridInfo_transformRequest* request, ::octaneapi::VdbGridInfo_transformResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* VdbGridSamplerService_method_names[] = {
  "/octaneapi.VdbGridSamplerService/getValue",
};

std::unique_ptr< VdbGridSamplerService::Stub> VdbGridSamplerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VdbGridSamplerService::Stub> stub(new VdbGridSamplerService::Stub(channel, options));
  return stub;
}

VdbGridSamplerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_getValue_(VdbGridSamplerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VdbGridSamplerService::Stub::getValue(::grpc::ClientContext* context, const ::octaneapi::VdbGridSampler_getValueRequest& request, ::octaneapi::VdbGridSampler_getValueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::VdbGridSampler_getValueRequest, ::octaneapi::VdbGridSampler_getValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getValue_, context, request, response);
}

void VdbGridSamplerService::Stub::async::getValue(::grpc::ClientContext* context, const ::octaneapi::VdbGridSampler_getValueRequest* request, ::octaneapi::VdbGridSampler_getValueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::VdbGridSampler_getValueRequest, ::octaneapi::VdbGridSampler_getValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getValue_, context, request, response, std::move(f));
}

void VdbGridSamplerService::Stub::async::getValue(::grpc::ClientContext* context, const ::octaneapi::VdbGridSampler_getValueRequest* request, ::octaneapi::VdbGridSampler_getValueResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getValue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbGridSampler_getValueResponse>* VdbGridSamplerService::Stub::PrepareAsyncgetValueRaw(::grpc::ClientContext* context, const ::octaneapi::VdbGridSampler_getValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::VdbGridSampler_getValueResponse, ::octaneapi::VdbGridSampler_getValueRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getValue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbGridSampler_getValueResponse>* VdbGridSamplerService::Stub::AsyncgetValueRaw(::grpc::ClientContext* context, const ::octaneapi::VdbGridSampler_getValueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetValueRaw(context, request, cq);
  result->StartCall();
  return result;
}

VdbGridSamplerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VdbGridSamplerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VdbGridSamplerService::Service, ::octaneapi::VdbGridSampler_getValueRequest, ::octaneapi::VdbGridSampler_getValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VdbGridSamplerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::VdbGridSampler_getValueRequest* req,
             ::octaneapi::VdbGridSampler_getValueResponse* resp) {
               return service->getValue(ctx, req, resp);
             }, this)));
}

VdbGridSamplerService::Service::~Service() {
}

::grpc::Status VdbGridSamplerService::Service::getValue(::grpc::ServerContext* context, const ::octaneapi::VdbGridSampler_getValueRequest* request, ::octaneapi::VdbGridSampler_getValueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* VdbInfoService_method_names[] = {
  "/octaneapi.VdbInfoService/valid",
  "/octaneapi.VdbInfoService/gridCount",
  "/octaneapi.VdbInfoService/grid",
  "/octaneapi.VdbInfoService/sampler",
  "/octaneapi.VdbInfoService/destroySampler",
  "/octaneapi.VdbInfoService/findGrid",
};

std::unique_ptr< VdbInfoService::Stub> VdbInfoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VdbInfoService::Stub> stub(new VdbInfoService::Stub(channel, options));
  return stub;
}

VdbInfoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_valid_(VdbInfoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_gridCount_(VdbInfoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_grid_(VdbInfoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sampler_(VdbInfoService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroySampler_(VdbInfoService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_findGrid_(VdbInfoService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VdbInfoService::Stub::valid(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_validRequest& request, ::octaneapi::VdbInfo_validResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::VdbInfo_validRequest, ::octaneapi::VdbInfo_validResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_valid_, context, request, response);
}

void VdbInfoService::Stub::async::valid(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_validRequest* request, ::octaneapi::VdbInfo_validResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::VdbInfo_validRequest, ::octaneapi::VdbInfo_validResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_valid_, context, request, response, std::move(f));
}

void VdbInfoService::Stub::async::valid(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_validRequest* request, ::octaneapi::VdbInfo_validResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_valid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbInfo_validResponse>* VdbInfoService::Stub::PrepareAsyncvalidRaw(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_validRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::VdbInfo_validResponse, ::octaneapi::VdbInfo_validRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_valid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbInfo_validResponse>* VdbInfoService::Stub::AsyncvalidRaw(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_validRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncvalidRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VdbInfoService::Stub::gridCount(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_gridCountRequest& request, ::octaneapi::VdbInfo_gridCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::VdbInfo_gridCountRequest, ::octaneapi::VdbInfo_gridCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_gridCount_, context, request, response);
}

void VdbInfoService::Stub::async::gridCount(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_gridCountRequest* request, ::octaneapi::VdbInfo_gridCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::VdbInfo_gridCountRequest, ::octaneapi::VdbInfo_gridCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_gridCount_, context, request, response, std::move(f));
}

void VdbInfoService::Stub::async::gridCount(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_gridCountRequest* request, ::octaneapi::VdbInfo_gridCountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_gridCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbInfo_gridCountResponse>* VdbInfoService::Stub::PrepareAsyncgridCountRaw(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_gridCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::VdbInfo_gridCountResponse, ::octaneapi::VdbInfo_gridCountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_gridCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbInfo_gridCountResponse>* VdbInfoService::Stub::AsyncgridCountRaw(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_gridCountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgridCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VdbInfoService::Stub::grid(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_gridRequest& request, ::octaneapi::VdbInfo_gridResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::VdbInfo_gridRequest, ::octaneapi::VdbInfo_gridResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_grid_, context, request, response);
}

void VdbInfoService::Stub::async::grid(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_gridRequest* request, ::octaneapi::VdbInfo_gridResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::VdbInfo_gridRequest, ::octaneapi::VdbInfo_gridResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_grid_, context, request, response, std::move(f));
}

void VdbInfoService::Stub::async::grid(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_gridRequest* request, ::octaneapi::VdbInfo_gridResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_grid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbInfo_gridResponse>* VdbInfoService::Stub::PrepareAsyncgridRaw(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_gridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::VdbInfo_gridResponse, ::octaneapi::VdbInfo_gridRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_grid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbInfo_gridResponse>* VdbInfoService::Stub::AsyncgridRaw(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_gridRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgridRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VdbInfoService::Stub::sampler(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_samplerRequest& request, ::octaneapi::VdbInfo_samplerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::VdbInfo_samplerRequest, ::octaneapi::VdbInfo_samplerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sampler_, context, request, response);
}

void VdbInfoService::Stub::async::sampler(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_samplerRequest* request, ::octaneapi::VdbInfo_samplerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::VdbInfo_samplerRequest, ::octaneapi::VdbInfo_samplerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sampler_, context, request, response, std::move(f));
}

void VdbInfoService::Stub::async::sampler(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_samplerRequest* request, ::octaneapi::VdbInfo_samplerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sampler_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbInfo_samplerResponse>* VdbInfoService::Stub::PrepareAsyncsamplerRaw(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_samplerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::VdbInfo_samplerResponse, ::octaneapi::VdbInfo_samplerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sampler_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbInfo_samplerResponse>* VdbInfoService::Stub::AsyncsamplerRaw(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_samplerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsamplerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VdbInfoService::Stub::destroySampler(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_destroySamplerRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::VdbInfo_destroySamplerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroySampler_, context, request, response);
}

void VdbInfoService::Stub::async::destroySampler(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_destroySamplerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::VdbInfo_destroySamplerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroySampler_, context, request, response, std::move(f));
}

void VdbInfoService::Stub::async::destroySampler(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_destroySamplerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroySampler_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* VdbInfoService::Stub::PrepareAsyncdestroySamplerRaw(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_destroySamplerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::VdbInfo_destroySamplerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroySampler_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* VdbInfoService::Stub::AsyncdestroySamplerRaw(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_destroySamplerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroySamplerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VdbInfoService::Stub::findGrid(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_findGridRequest& request, ::octaneapi::VdbInfo_findGridResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::VdbInfo_findGridRequest, ::octaneapi::VdbInfo_findGridResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_findGrid_, context, request, response);
}

void VdbInfoService::Stub::async::findGrid(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_findGridRequest* request, ::octaneapi::VdbInfo_findGridResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::VdbInfo_findGridRequest, ::octaneapi::VdbInfo_findGridResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findGrid_, context, request, response, std::move(f));
}

void VdbInfoService::Stub::async::findGrid(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_findGridRequest* request, ::octaneapi::VdbInfo_findGridResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findGrid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbInfo_findGridResponse>* VdbInfoService::Stub::PrepareAsyncfindGridRaw(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_findGridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::VdbInfo_findGridResponse, ::octaneapi::VdbInfo_findGridRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_findGrid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::VdbInfo_findGridResponse>* VdbInfoService::Stub::AsyncfindGridRaw(::grpc::ClientContext* context, const ::octaneapi::VdbInfo_findGridRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfindGridRaw(context, request, cq);
  result->StartCall();
  return result;
}

VdbInfoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VdbInfoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VdbInfoService::Service, ::octaneapi::VdbInfo_validRequest, ::octaneapi::VdbInfo_validResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VdbInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::VdbInfo_validRequest* req,
             ::octaneapi::VdbInfo_validResponse* resp) {
               return service->valid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VdbInfoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VdbInfoService::Service, ::octaneapi::VdbInfo_gridCountRequest, ::octaneapi::VdbInfo_gridCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VdbInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::VdbInfo_gridCountRequest* req,
             ::octaneapi::VdbInfo_gridCountResponse* resp) {
               return service->gridCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VdbInfoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VdbInfoService::Service, ::octaneapi::VdbInfo_gridRequest, ::octaneapi::VdbInfo_gridResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VdbInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::VdbInfo_gridRequest* req,
             ::octaneapi::VdbInfo_gridResponse* resp) {
               return service->grid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VdbInfoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VdbInfoService::Service, ::octaneapi::VdbInfo_samplerRequest, ::octaneapi::VdbInfo_samplerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VdbInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::VdbInfo_samplerRequest* req,
             ::octaneapi::VdbInfo_samplerResponse* resp) {
               return service->sampler(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VdbInfoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VdbInfoService::Service, ::octaneapi::VdbInfo_destroySamplerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VdbInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::VdbInfo_destroySamplerRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->destroySampler(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VdbInfoService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VdbInfoService::Service, ::octaneapi::VdbInfo_findGridRequest, ::octaneapi::VdbInfo_findGridResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VdbInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::VdbInfo_findGridRequest* req,
             ::octaneapi::VdbInfo_findGridResponse* resp) {
               return service->findGrid(ctx, req, resp);
             }, this)));
}

VdbInfoService::Service::~Service() {
}

::grpc::Status VdbInfoService::Service::valid(::grpc::ServerContext* context, const ::octaneapi::VdbInfo_validRequest* request, ::octaneapi::VdbInfo_validResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VdbInfoService::Service::gridCount(::grpc::ServerContext* context, const ::octaneapi::VdbInfo_gridCountRequest* request, ::octaneapi::VdbInfo_gridCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VdbInfoService::Service::grid(::grpc::ServerContext* context, const ::octaneapi::VdbInfo_gridRequest* request, ::octaneapi::VdbInfo_gridResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VdbInfoService::Service::sampler(::grpc::ServerContext* context, const ::octaneapi::VdbInfo_samplerRequest* request, ::octaneapi::VdbInfo_samplerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VdbInfoService::Service::destroySampler(::grpc::ServerContext* context, const ::octaneapi::VdbInfo_destroySamplerRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VdbInfoService::Service::findGrid(::grpc::ServerContext* context, const ::octaneapi::VdbInfo_findGridRequest* request, ::octaneapi::VdbInfo_findGridResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

