// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apigridlayout.proto

#include "apigridlayout.pb.h"
#include "apigridlayout.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiGridLayoutService_method_names[] = {
  "/octaneapi.ApiGridLayoutService/create",
  "/octaneapi.ApiGridLayoutService/destroy",
  "/octaneapi.ApiGridLayoutService/startSetup",
  "/octaneapi.ApiGridLayoutService/endSetup",
  "/octaneapi.ApiGridLayoutService/add",
  "/octaneapi.ApiGridLayoutService/addEmpty",
  "/octaneapi.ApiGridLayoutService/addSpan",
  "/octaneapi.ApiGridLayoutService/setStartSize",
  "/octaneapi.ApiGridLayoutService/setRowElasticity",
  "/octaneapi.ApiGridLayoutService/setColElasticity",
  "/octaneapi.ApiGridLayoutService/setElasticityForAllRows",
  "/octaneapi.ApiGridLayoutService/setElasticityForAllCols",
  "/octaneapi.ApiGridLayoutService/startNestedGrid",
  "/octaneapi.ApiGridLayoutService/endNestedGrid",
  "/octaneapi.ApiGridLayoutService/width",
  "/octaneapi.ApiGridLayoutService/height",
};

std::unique_ptr< ApiGridLayoutService::Stub> ApiGridLayoutService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiGridLayoutService::Stub> stub(new ApiGridLayoutService::Stub(channel, options));
  return stub;
}

ApiGridLayoutService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create_(ApiGridLayoutService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(ApiGridLayoutService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_startSetup_(ApiGridLayoutService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_endSetup_(ApiGridLayoutService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_add_(ApiGridLayoutService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addEmpty_(ApiGridLayoutService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addSpan_(ApiGridLayoutService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setStartSize_(ApiGridLayoutService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setRowElasticity_(ApiGridLayoutService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setColElasticity_(ApiGridLayoutService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setElasticityForAllRows_(ApiGridLayoutService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setElasticityForAllCols_(ApiGridLayoutService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_startNestedGrid_(ApiGridLayoutService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_endNestedGrid_(ApiGridLayoutService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_width_(ApiGridLayoutService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_height_(ApiGridLayoutService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiGridLayoutService::Stub::create(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_createRequest& request, ::octaneapi::ApiGridLayout_createResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_createRequest, ::octaneapi::ApiGridLayout_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_, context, request, response);
}

void ApiGridLayoutService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_createRequest* request, ::octaneapi::ApiGridLayout_createResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_createRequest, ::octaneapi::ApiGridLayout_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_createRequest* request, ::octaneapi::ApiGridLayout_createResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGridLayout_createResponse>* ApiGridLayoutService::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_createRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiGridLayout_createResponse, ::octaneapi::ApiGridLayout_createRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGridLayout_createResponse>* ApiGridLayoutService::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_createRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_destroyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void ApiGridLayoutService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiGridLayout_destroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::startSetup(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_startSetupRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_startSetupRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_startSetup_, context, request, response);
}

void ApiGridLayoutService::Stub::async::startSetup(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_startSetupRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_startSetupRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_startSetup_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::startSetup(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_startSetupRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_startSetup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::PrepareAsyncstartSetupRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_startSetupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiGridLayout_startSetupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_startSetup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::AsyncstartSetupRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_startSetupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartSetupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::endSetup(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_endSetupRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_endSetupRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_endSetup_, context, request, response);
}

void ApiGridLayoutService::Stub::async::endSetup(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_endSetupRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_endSetupRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_endSetup_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::endSetup(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_endSetupRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_endSetup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::PrepareAsyncendSetupRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_endSetupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiGridLayout_endSetupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_endSetup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::AsyncendSetupRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_endSetupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncendSetupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::add(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_addRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_add_, context, request, response);
}

void ApiGridLayoutService::Stub::async::add(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_addRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_add_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::add(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_add_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::PrepareAsyncaddRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiGridLayout_addRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_add_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::AsyncaddRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::addEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addEmptyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_addEmptyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addEmpty_, context, request, response);
}

void ApiGridLayoutService::Stub::async::addEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addEmptyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_addEmptyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addEmpty_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::addEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addEmptyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addEmpty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::PrepareAsyncaddEmptyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addEmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiGridLayout_addEmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addEmpty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::AsyncaddEmptyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addEmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddEmptyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::addSpan(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addSpanRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_addSpanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addSpan_, context, request, response);
}

void ApiGridLayoutService::Stub::async::addSpan(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addSpanRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_addSpanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addSpan_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::addSpan(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addSpanRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addSpan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::PrepareAsyncaddSpanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addSpanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiGridLayout_addSpanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addSpan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::AsyncaddSpanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_addSpanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddSpanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::setStartSize(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setStartSizeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_setStartSizeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setStartSize_, context, request, response);
}

void ApiGridLayoutService::Stub::async::setStartSize(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setStartSizeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_setStartSizeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setStartSize_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::setStartSize(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setStartSizeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setStartSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::PrepareAsyncsetStartSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setStartSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiGridLayout_setStartSizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setStartSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::AsyncsetStartSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setStartSizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetStartSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::setRowElasticity(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setRowElasticityRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_setRowElasticityRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setRowElasticity_, context, request, response);
}

void ApiGridLayoutService::Stub::async::setRowElasticity(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setRowElasticityRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_setRowElasticityRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setRowElasticity_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::setRowElasticity(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setRowElasticityRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setRowElasticity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::PrepareAsyncsetRowElasticityRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setRowElasticityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiGridLayout_setRowElasticityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setRowElasticity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::AsyncsetRowElasticityRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setRowElasticityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetRowElasticityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::setColElasticity(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setColElasticityRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_setColElasticityRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setColElasticity_, context, request, response);
}

void ApiGridLayoutService::Stub::async::setColElasticity(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setColElasticityRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_setColElasticityRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setColElasticity_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::setColElasticity(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setColElasticityRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setColElasticity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::PrepareAsyncsetColElasticityRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setColElasticityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiGridLayout_setColElasticityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setColElasticity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::AsyncsetColElasticityRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setColElasticityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetColElasticityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::setElasticityForAllRows(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setElasticityForAllRowsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_setElasticityForAllRowsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setElasticityForAllRows_, context, request, response);
}

void ApiGridLayoutService::Stub::async::setElasticityForAllRows(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setElasticityForAllRowsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_setElasticityForAllRowsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setElasticityForAllRows_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::setElasticityForAllRows(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setElasticityForAllRowsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setElasticityForAllRows_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::PrepareAsyncsetElasticityForAllRowsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setElasticityForAllRowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiGridLayout_setElasticityForAllRowsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setElasticityForAllRows_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::AsyncsetElasticityForAllRowsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setElasticityForAllRowsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetElasticityForAllRowsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::setElasticityForAllCols(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setElasticityForAllColsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_setElasticityForAllColsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setElasticityForAllCols_, context, request, response);
}

void ApiGridLayoutService::Stub::async::setElasticityForAllCols(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setElasticityForAllColsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_setElasticityForAllColsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setElasticityForAllCols_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::setElasticityForAllCols(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setElasticityForAllColsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setElasticityForAllCols_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::PrepareAsyncsetElasticityForAllColsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setElasticityForAllColsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiGridLayout_setElasticityForAllColsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setElasticityForAllCols_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::AsyncsetElasticityForAllColsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_setElasticityForAllColsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetElasticityForAllColsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::startNestedGrid(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_startNestedGridRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_startNestedGridRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_startNestedGrid_, context, request, response);
}

void ApiGridLayoutService::Stub::async::startNestedGrid(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_startNestedGridRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_startNestedGridRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_startNestedGrid_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::startNestedGrid(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_startNestedGridRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_startNestedGrid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::PrepareAsyncstartNestedGridRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_startNestedGridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiGridLayout_startNestedGridRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_startNestedGrid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::AsyncstartNestedGridRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_startNestedGridRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartNestedGridRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::endNestedGrid(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_endNestedGridRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_endNestedGridRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_endNestedGrid_, context, request, response);
}

void ApiGridLayoutService::Stub::async::endNestedGrid(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_endNestedGridRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_endNestedGridRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_endNestedGrid_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::endNestedGrid(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_endNestedGridRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_endNestedGrid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::PrepareAsyncendNestedGridRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_endNestedGridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiGridLayout_endNestedGridRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_endNestedGrid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiGridLayoutService::Stub::AsyncendNestedGridRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_endNestedGridRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncendNestedGridRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::width(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_widthRequest& request, ::octaneapi::ApiGridLayout_widthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_widthRequest, ::octaneapi::ApiGridLayout_widthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_width_, context, request, response);
}

void ApiGridLayoutService::Stub::async::width(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_widthRequest* request, ::octaneapi::ApiGridLayout_widthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_widthRequest, ::octaneapi::ApiGridLayout_widthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_width_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::width(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_widthRequest* request, ::octaneapi::ApiGridLayout_widthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_width_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGridLayout_widthResponse>* ApiGridLayoutService::Stub::PrepareAsyncwidthRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_widthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiGridLayout_widthResponse, ::octaneapi::ApiGridLayout_widthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_width_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGridLayout_widthResponse>* ApiGridLayoutService::Stub::AsyncwidthRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_widthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwidthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGridLayoutService::Stub::height(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_heightRequest& request, ::octaneapi::ApiGridLayout_heightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGridLayout_heightRequest, ::octaneapi::ApiGridLayout_heightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_height_, context, request, response);
}

void ApiGridLayoutService::Stub::async::height(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_heightRequest* request, ::octaneapi::ApiGridLayout_heightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGridLayout_heightRequest, ::octaneapi::ApiGridLayout_heightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_height_, context, request, response, std::move(f));
}

void ApiGridLayoutService::Stub::async::height(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_heightRequest* request, ::octaneapi::ApiGridLayout_heightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_height_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGridLayout_heightResponse>* ApiGridLayoutService::Stub::PrepareAsyncheightRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_heightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiGridLayout_heightResponse, ::octaneapi::ApiGridLayout_heightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_height_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGridLayout_heightResponse>* ApiGridLayoutService::Stub::AsyncheightRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGridLayout_heightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncheightRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiGridLayoutService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_createRequest, ::octaneapi::ApiGridLayout_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_createRequest* req,
             ::octaneapi::ApiGridLayout_createResponse* resp) {
               return service->create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_destroyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_startSetupRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_startSetupRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->startSetup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_endSetupRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_endSetupRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->endSetup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_addRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_addRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->add(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_addEmptyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_addEmptyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->addEmpty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_addSpanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_addSpanRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->addSpan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_setStartSizeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_setStartSizeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setStartSize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_setRowElasticityRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_setRowElasticityRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setRowElasticity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_setColElasticityRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_setColElasticityRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setColElasticity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_setElasticityForAllRowsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_setElasticityForAllRowsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setElasticityForAllRows(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_setElasticityForAllColsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_setElasticityForAllColsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setElasticityForAllCols(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_startNestedGridRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_startNestedGridRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->startNestedGrid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_endNestedGridRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_endNestedGridRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->endNestedGrid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_widthRequest, ::octaneapi::ApiGridLayout_widthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_widthRequest* req,
             ::octaneapi::ApiGridLayout_widthResponse* resp) {
               return service->width(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGridLayoutService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGridLayoutService::Service, ::octaneapi::ApiGridLayout_heightRequest, ::octaneapi::ApiGridLayout_heightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGridLayoutService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGridLayout_heightRequest* req,
             ::octaneapi::ApiGridLayout_heightResponse* resp) {
               return service->height(ctx, req, resp);
             }, this)));
}

ApiGridLayoutService::Service::~Service() {
}

::grpc::Status ApiGridLayoutService::Service::create(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_createRequest* request, ::octaneapi::ApiGridLayout_createResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::destroy(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_destroyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::startSetup(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_startSetupRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::endSetup(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_endSetupRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::add(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_addRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::addEmpty(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_addEmptyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::addSpan(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_addSpanRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::setStartSize(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_setStartSizeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::setRowElasticity(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_setRowElasticityRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::setColElasticity(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_setColElasticityRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::setElasticityForAllRows(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_setElasticityForAllRowsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::setElasticityForAllCols(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_setElasticityForAllColsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::startNestedGrid(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_startNestedGridRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::endNestedGrid(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_endNestedGridRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::width(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_widthRequest* request, ::octaneapi::ApiGridLayout_widthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGridLayoutService::Service::height(::grpc::ServerContext* context, const ::octaneapi::ApiGridLayout_heightRequest* request, ::octaneapi::ApiGridLayout_heightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

