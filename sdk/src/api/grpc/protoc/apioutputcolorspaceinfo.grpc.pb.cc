// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apioutputcolorspaceinfo.proto

#include "apioutputcolorspaceinfo.pb.h"
#include "apioutputcolorspaceinfo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiOutputColorSpaceInfoService_method_names[] = {
  "/octaneapi.ApiOutputColorSpaceInfoService/createKnownColorSpace",
  "/octaneapi.ApiOutputColorSpaceInfoService/createOcioColorSpace",
  "/octaneapi.ApiOutputColorSpaceInfoService/createOcioView",
  "/octaneapi.ApiOutputColorSpaceInfoService/createUseImagerSettings",
  "/octaneapi.ApiOutputColorSpaceInfoService/destroy",
  "/octaneapi.ApiOutputColorSpaceInfoService/clone",
  "/octaneapi.ApiOutputColorSpaceInfoService/equals",
};

std::unique_ptr< ApiOutputColorSpaceInfoService::Stub> ApiOutputColorSpaceInfoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiOutputColorSpaceInfoService::Stub> stub(new ApiOutputColorSpaceInfoService::Stub(channel, options));
  return stub;
}

ApiOutputColorSpaceInfoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_createKnownColorSpace_(ApiOutputColorSpaceInfoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_createOcioColorSpace_(ApiOutputColorSpaceInfoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_createOcioView_(ApiOutputColorSpaceInfoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_createUseImagerSettings_(ApiOutputColorSpaceInfoService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(ApiOutputColorSpaceInfoService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clone_(ApiOutputColorSpaceInfoService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_equals_(ApiOutputColorSpaceInfoService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiOutputColorSpaceInfoService::Stub::createKnownColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createKnownColorSpace_, context, request, response);
}

void ApiOutputColorSpaceInfoService::Stub::async::createKnownColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createKnownColorSpace_, context, request, response, std::move(f));
}

void ApiOutputColorSpaceInfoService::Stub::async::createKnownColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createKnownColorSpace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>* ApiOutputColorSpaceInfoService::Stub::PrepareAsynccreateKnownColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createKnownColorSpace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse>* ApiOutputColorSpaceInfoService::Stub::AsynccreateKnownColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateKnownColorSpaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiOutputColorSpaceInfoService::Stub::createOcioColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createOcioColorSpace_, context, request, response);
}

void ApiOutputColorSpaceInfoService::Stub::async::createOcioColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createOcioColorSpace_, context, request, response, std::move(f));
}

void ApiOutputColorSpaceInfoService::Stub::async::createOcioColorSpace(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createOcioColorSpace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>* ApiOutputColorSpaceInfoService::Stub::PrepareAsynccreateOcioColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createOcioColorSpace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse>* ApiOutputColorSpaceInfoService::Stub::AsynccreateOcioColorSpaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateOcioColorSpaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiOutputColorSpaceInfoService::Stub::createOcioView(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createOcioView_, context, request, response);
}

void ApiOutputColorSpaceInfoService::Stub::async::createOcioView(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createOcioView_, context, request, response, std::move(f));
}

void ApiOutputColorSpaceInfoService::Stub::async::createOcioView(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createOcioView_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>* ApiOutputColorSpaceInfoService::Stub::PrepareAsynccreateOcioViewRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createOcioView_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse>* ApiOutputColorSpaceInfoService::Stub::AsynccreateOcioViewRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateOcioViewRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiOutputColorSpaceInfoService::Stub::createUseImagerSettings(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createUseImagerSettings_, context, request, response);
}

void ApiOutputColorSpaceInfoService::Stub::async::createUseImagerSettings(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createUseImagerSettings_, context, request, response, std::move(f));
}

void ApiOutputColorSpaceInfoService::Stub::async::createUseImagerSettings(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createUseImagerSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>* ApiOutputColorSpaceInfoService::Stub::PrepareAsynccreateUseImagerSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createUseImagerSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse>* ApiOutputColorSpaceInfoService::Stub::AsynccreateUseImagerSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateUseImagerSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiOutputColorSpaceInfoService::Stub::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void ApiOutputColorSpaceInfoService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void ApiOutputColorSpaceInfoService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiOutputColorSpaceInfoService::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiOutputColorSpaceInfoService::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiOutputColorSpaceInfoService::Stub::clone(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clone_, context, request, response);
}

void ApiOutputColorSpaceInfoService::Stub::async::clone(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clone_, context, request, response, std::move(f));
}

void ApiOutputColorSpaceInfoService::Stub::async::clone(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>* ApiOutputColorSpaceInfoService::Stub::PrepareAsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse, ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clone_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse>* ApiOutputColorSpaceInfoService::Stub::AsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccloneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiOutputColorSpaceInfoService::Stub::equals(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest& request, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_equals_, context, request, response);
}

void ApiOutputColorSpaceInfoService::Stub::async::equals(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_equals_, context, request, response, std::move(f));
}

void ApiOutputColorSpaceInfoService::Stub::async::equals(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_equals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>* ApiOutputColorSpaceInfoService::Stub::PrepareAsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse, ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_equals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse>* ApiOutputColorSpaceInfoService::Stub::AsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncequalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiOutputColorSpaceInfoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiOutputColorSpaceInfoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiOutputColorSpaceInfoService::Service, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiOutputColorSpaceInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* req,
             ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* resp) {
               return service->createKnownColorSpace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiOutputColorSpaceInfoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiOutputColorSpaceInfoService::Service, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiOutputColorSpaceInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* req,
             ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* resp) {
               return service->createOcioColorSpace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiOutputColorSpaceInfoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiOutputColorSpaceInfoService::Service, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiOutputColorSpaceInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* req,
             ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* resp) {
               return service->createOcioView(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiOutputColorSpaceInfoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiOutputColorSpaceInfoService::Service, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiOutputColorSpaceInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* req,
             ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* resp) {
               return service->createUseImagerSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiOutputColorSpaceInfoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiOutputColorSpaceInfoService::Service, ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiOutputColorSpaceInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiOutputColorSpaceInfoService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiOutputColorSpaceInfoService::Service, ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiOutputColorSpaceInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* req,
             ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* resp) {
               return service->clone(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiOutputColorSpaceInfoService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiOutputColorSpaceInfoService::Service, ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiOutputColorSpaceInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* req,
             ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* resp) {
               return service->equals(ctx, req, resp);
             }, this)));
}

ApiOutputColorSpaceInfoService::Service::~Service() {
}

::grpc::Status ApiOutputColorSpaceInfoService::Service::createKnownColorSpace(::grpc::ServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createKnownColorSpaceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiOutputColorSpaceInfoService::Service::createOcioColorSpace(::grpc::ServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioColorSpaceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiOutputColorSpaceInfoService::Service::createOcioView(::grpc::ServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createOcioViewResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiOutputColorSpaceInfoService::Service::createUseImagerSettings(::grpc::ServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_createUseImagerSettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiOutputColorSpaceInfoService::Service::destroy(::grpc::ServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_destroyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiOutputColorSpaceInfoService::Service::clone(::grpc::ServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_cloneRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_cloneResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiOutputColorSpaceInfoService::Service::equals(::grpc::ServerContext* context, const ::octaneapi::ApiOutputColorSpaceInfo_equalsRequest* request, ::octaneapi::ApiOutputColorSpaceInfo_equalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

