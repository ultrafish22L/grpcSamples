// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apianimationtimetransform.proto

#include "apianimationtimetransform.pb.h"
#include "apianimationtimetransform.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiAnimationTimeTransformService_method_names[] = {
  "/octaneapi.ApiAnimationTimeTransformService/type",
};

std::unique_ptr< ApiAnimationTimeTransformService::Stub> ApiAnimationTimeTransformService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiAnimationTimeTransformService::Stub> stub(new ApiAnimationTimeTransformService::Stub(channel, options));
  return stub;
}

ApiAnimationTimeTransformService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_type_(ApiAnimationTimeTransformService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiAnimationTimeTransformService::Stub::type(::grpc::ClientContext* context, const ::octaneapi::ApiAnimationTimeTransform_typeRequest& request, ::octaneapi::ApiAnimationTimeTransform_typeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiAnimationTimeTransform_typeRequest, ::octaneapi::ApiAnimationTimeTransform_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_type_, context, request, response);
}

void ApiAnimationTimeTransformService::Stub::async::type(::grpc::ClientContext* context, const ::octaneapi::ApiAnimationTimeTransform_typeRequest* request, ::octaneapi::ApiAnimationTimeTransform_typeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiAnimationTimeTransform_typeRequest, ::octaneapi::ApiAnimationTimeTransform_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_type_, context, request, response, std::move(f));
}

void ApiAnimationTimeTransformService::Stub::async::type(::grpc::ClientContext* context, const ::octaneapi::ApiAnimationTimeTransform_typeRequest* request, ::octaneapi::ApiAnimationTimeTransform_typeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_type_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiAnimationTimeTransform_typeResponse>* ApiAnimationTimeTransformService::Stub::PrepareAsynctypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiAnimationTimeTransform_typeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiAnimationTimeTransform_typeResponse, ::octaneapi::ApiAnimationTimeTransform_typeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_type_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiAnimationTimeTransform_typeResponse>* ApiAnimationTimeTransformService::Stub::AsynctypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiAnimationTimeTransform_typeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiAnimationTimeTransformService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiAnimationTimeTransformService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiAnimationTimeTransformService::Service, ::octaneapi::ApiAnimationTimeTransform_typeRequest, ::octaneapi::ApiAnimationTimeTransform_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiAnimationTimeTransformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiAnimationTimeTransform_typeRequest* req,
             ::octaneapi::ApiAnimationTimeTransform_typeResponse* resp) {
               return service->type(ctx, req, resp);
             }, this)));
}

ApiAnimationTimeTransformService::Service::~Service() {
}

::grpc::Status ApiAnimationTimeTransformService::Service::type(::grpc::ServerContext* context, const ::octaneapi::ApiAnimationTimeTransform_typeRequest* request, ::octaneapi::ApiAnimationTimeTransform_typeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ApiLinearTimeTransformService_method_names[] = {
  "/octaneapi.ApiLinearTimeTransformService/delay",
  "/octaneapi.ApiLinearTimeTransformService/speedUp",
  "/octaneapi.ApiLinearTimeTransformService/customIntervalEnabled",
  "/octaneapi.ApiLinearTimeTransformService/customInterval",
};

std::unique_ptr< ApiLinearTimeTransformService::Stub> ApiLinearTimeTransformService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiLinearTimeTransformService::Stub> stub(new ApiLinearTimeTransformService::Stub(channel, options));
  return stub;
}

ApiLinearTimeTransformService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_delay_(ApiLinearTimeTransformService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_speedUp_(ApiLinearTimeTransformService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_customIntervalEnabled_(ApiLinearTimeTransformService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_customInterval_(ApiLinearTimeTransformService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiLinearTimeTransformService::Stub::delay(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_delayRequest& request, ::octaneapi::ApiLinearTimeTransform_delayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLinearTimeTransform_delayRequest, ::octaneapi::ApiLinearTimeTransform_delayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_delay_, context, request, response);
}

void ApiLinearTimeTransformService::Stub::async::delay(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_delayRequest* request, ::octaneapi::ApiLinearTimeTransform_delayResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLinearTimeTransform_delayRequest, ::octaneapi::ApiLinearTimeTransform_delayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delay_, context, request, response, std::move(f));
}

void ApiLinearTimeTransformService::Stub::async::delay(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_delayRequest* request, ::octaneapi::ApiLinearTimeTransform_delayResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delay_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLinearTimeTransform_delayResponse>* ApiLinearTimeTransformService::Stub::PrepareAsyncdelayRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_delayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiLinearTimeTransform_delayResponse, ::octaneapi::ApiLinearTimeTransform_delayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_delay_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLinearTimeTransform_delayResponse>* ApiLinearTimeTransformService::Stub::AsyncdelayRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_delayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdelayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiLinearTimeTransformService::Stub::speedUp(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_speedUpRequest& request, ::octaneapi::ApiLinearTimeTransform_speedUpResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLinearTimeTransform_speedUpRequest, ::octaneapi::ApiLinearTimeTransform_speedUpResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_speedUp_, context, request, response);
}

void ApiLinearTimeTransformService::Stub::async::speedUp(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_speedUpRequest* request, ::octaneapi::ApiLinearTimeTransform_speedUpResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLinearTimeTransform_speedUpRequest, ::octaneapi::ApiLinearTimeTransform_speedUpResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_speedUp_, context, request, response, std::move(f));
}

void ApiLinearTimeTransformService::Stub::async::speedUp(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_speedUpRequest* request, ::octaneapi::ApiLinearTimeTransform_speedUpResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_speedUp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLinearTimeTransform_speedUpResponse>* ApiLinearTimeTransformService::Stub::PrepareAsyncspeedUpRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_speedUpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiLinearTimeTransform_speedUpResponse, ::octaneapi::ApiLinearTimeTransform_speedUpRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_speedUp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLinearTimeTransform_speedUpResponse>* ApiLinearTimeTransformService::Stub::AsyncspeedUpRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_speedUpRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncspeedUpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiLinearTimeTransformService::Stub::customIntervalEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledRequest& request, ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledRequest, ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_customIntervalEnabled_, context, request, response);
}

void ApiLinearTimeTransformService::Stub::async::customIntervalEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledRequest* request, ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledRequest, ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_customIntervalEnabled_, context, request, response, std::move(f));
}

void ApiLinearTimeTransformService::Stub::async::customIntervalEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledRequest* request, ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_customIntervalEnabled_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledResponse>* ApiLinearTimeTransformService::Stub::PrepareAsynccustomIntervalEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledResponse, ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_customIntervalEnabled_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledResponse>* ApiLinearTimeTransformService::Stub::AsynccustomIntervalEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccustomIntervalEnabledRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiLinearTimeTransformService::Stub::customInterval(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_customIntervalRequest& request, ::octaneapi::ApiLinearTimeTransform_customIntervalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLinearTimeTransform_customIntervalRequest, ::octaneapi::ApiLinearTimeTransform_customIntervalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_customInterval_, context, request, response);
}

void ApiLinearTimeTransformService::Stub::async::customInterval(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_customIntervalRequest* request, ::octaneapi::ApiLinearTimeTransform_customIntervalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLinearTimeTransform_customIntervalRequest, ::octaneapi::ApiLinearTimeTransform_customIntervalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_customInterval_, context, request, response, std::move(f));
}

void ApiLinearTimeTransformService::Stub::async::customInterval(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_customIntervalRequest* request, ::octaneapi::ApiLinearTimeTransform_customIntervalResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_customInterval_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLinearTimeTransform_customIntervalResponse>* ApiLinearTimeTransformService::Stub::PrepareAsynccustomIntervalRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_customIntervalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiLinearTimeTransform_customIntervalResponse, ::octaneapi::ApiLinearTimeTransform_customIntervalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_customInterval_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLinearTimeTransform_customIntervalResponse>* ApiLinearTimeTransformService::Stub::AsynccustomIntervalRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLinearTimeTransform_customIntervalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccustomIntervalRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiLinearTimeTransformService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLinearTimeTransformService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLinearTimeTransformService::Service, ::octaneapi::ApiLinearTimeTransform_delayRequest, ::octaneapi::ApiLinearTimeTransform_delayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLinearTimeTransformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLinearTimeTransform_delayRequest* req,
             ::octaneapi::ApiLinearTimeTransform_delayResponse* resp) {
               return service->delay(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLinearTimeTransformService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLinearTimeTransformService::Service, ::octaneapi::ApiLinearTimeTransform_speedUpRequest, ::octaneapi::ApiLinearTimeTransform_speedUpResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLinearTimeTransformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLinearTimeTransform_speedUpRequest* req,
             ::octaneapi::ApiLinearTimeTransform_speedUpResponse* resp) {
               return service->speedUp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLinearTimeTransformService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLinearTimeTransformService::Service, ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledRequest, ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLinearTimeTransformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledRequest* req,
             ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledResponse* resp) {
               return service->customIntervalEnabled(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiLinearTimeTransformService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiLinearTimeTransformService::Service, ::octaneapi::ApiLinearTimeTransform_customIntervalRequest, ::octaneapi::ApiLinearTimeTransform_customIntervalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiLinearTimeTransformService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLinearTimeTransform_customIntervalRequest* req,
             ::octaneapi::ApiLinearTimeTransform_customIntervalResponse* resp) {
               return service->customInterval(ctx, req, resp);
             }, this)));
}

ApiLinearTimeTransformService::Service::~Service() {
}

::grpc::Status ApiLinearTimeTransformService::Service::delay(::grpc::ServerContext* context, const ::octaneapi::ApiLinearTimeTransform_delayRequest* request, ::octaneapi::ApiLinearTimeTransform_delayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiLinearTimeTransformService::Service::speedUp(::grpc::ServerContext* context, const ::octaneapi::ApiLinearTimeTransform_speedUpRequest* request, ::octaneapi::ApiLinearTimeTransform_speedUpResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiLinearTimeTransformService::Service::customIntervalEnabled(::grpc::ServerContext* context, const ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledRequest* request, ::octaneapi::ApiLinearTimeTransform_customIntervalEnabledResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiLinearTimeTransformService::Service::customInterval(::grpc::ServerContext* context, const ::octaneapi::ApiLinearTimeTransform_customIntervalRequest* request, ::octaneapi::ApiLinearTimeTransform_customIntervalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

