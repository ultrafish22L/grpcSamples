// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: octanenet.proto

#include "octanenet.pb.h"
#include "octanenet.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* NetRenderStatusService_method_names[] = {
  "/octaneapi.NetRenderStatusService/clear",
};

std::unique_ptr< NetRenderStatusService::Stub> NetRenderStatusService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetRenderStatusService::Stub> stub(new NetRenderStatusService::Stub(channel, options));
  return stub;
}

NetRenderStatusService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_clear_(NetRenderStatusService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NetRenderStatusService::Stub::clear(::grpc::ClientContext* context, const ::octaneapi::NetRenderStatus_clearRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::NetRenderStatus_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clear_, context, request, response);
}

void NetRenderStatusService::Stub::async::clear(::grpc::ClientContext* context, const ::octaneapi::NetRenderStatus_clearRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::NetRenderStatus_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_, context, request, response, std::move(f));
}

void NetRenderStatusService::Stub::async::clear(::grpc::ClientContext* context, const ::octaneapi::NetRenderStatus_clearRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NetRenderStatusService::Stub::PrepareAsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::NetRenderStatus_clearRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::NetRenderStatus_clearRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clear_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* NetRenderStatusService::Stub::AsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::NetRenderStatus_clearRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearRaw(context, request, cq);
  result->StartCall();
  return result;
}

NetRenderStatusService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetRenderStatusService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetRenderStatusService::Service, ::octaneapi::NetRenderStatus_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetRenderStatusService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::NetRenderStatus_clearRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->clear(ctx, req, resp);
             }, this)));
}

NetRenderStatusService::Service::~Service() {
}

::grpc::Status NetRenderStatusService::Service::clear(::grpc::ServerContext* context, const ::octaneapi::NetRenderStatus_clearRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SocketAddressService_method_names[] = {
  "/octaneapi.SocketAddressService/isValid",
};

std::unique_ptr< SocketAddressService::Stub> SocketAddressService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SocketAddressService::Stub> stub(new SocketAddressService::Stub(channel, options));
  return stub;
}

SocketAddressService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_isValid_(SocketAddressService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SocketAddressService::Stub::isValid(::grpc::ClientContext* context, const ::octaneapi::SocketAddress_isValidRequest& request, ::octaneapi::SocketAddress_isValidResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::SocketAddress_isValidRequest, ::octaneapi::SocketAddress_isValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isValid_, context, request, response);
}

void SocketAddressService::Stub::async::isValid(::grpc::ClientContext* context, const ::octaneapi::SocketAddress_isValidRequest* request, ::octaneapi::SocketAddress_isValidResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::SocketAddress_isValidRequest, ::octaneapi::SocketAddress_isValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isValid_, context, request, response, std::move(f));
}

void SocketAddressService::Stub::async::isValid(::grpc::ClientContext* context, const ::octaneapi::SocketAddress_isValidRequest* request, ::octaneapi::SocketAddress_isValidResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isValid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::SocketAddress_isValidResponse>* SocketAddressService::Stub::PrepareAsyncisValidRaw(::grpc::ClientContext* context, const ::octaneapi::SocketAddress_isValidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::SocketAddress_isValidResponse, ::octaneapi::SocketAddress_isValidRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isValid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::SocketAddress_isValidResponse>* SocketAddressService::Stub::AsyncisValidRaw(::grpc::ClientContext* context, const ::octaneapi::SocketAddress_isValidRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisValidRaw(context, request, cq);
  result->StartCall();
  return result;
}

SocketAddressService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SocketAddressService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SocketAddressService::Service, ::octaneapi::SocketAddress_isValidRequest, ::octaneapi::SocketAddress_isValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SocketAddressService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::SocketAddress_isValidRequest* req,
             ::octaneapi::SocketAddress_isValidResponse* resp) {
               return service->isValid(ctx, req, resp);
             }, this)));
}

SocketAddressService::Service::~Service() {
}

::grpc::Status SocketAddressService::Service::isValid(::grpc::ServerContext* context, const ::octaneapi::SocketAddress_isValidRequest* request, ::octaneapi::SocketAddress_isValidResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

