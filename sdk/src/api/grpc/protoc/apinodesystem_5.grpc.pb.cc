// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apinodesystem_5.proto

#include "apinodesystem_5.pb.h"
#include "apinodesystem_5.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiNodeArrayService_method_names[] = {
  "/octaneapi.ApiNodeArrayService/size1",
  "/octaneapi.ApiNodeArrayService/get1",
  "/octaneapi.ApiNodeArrayService/items1",
  "/octaneapi.ApiNodeArrayService/begin11",
  "/octaneapi.ApiNodeArrayService/end11",
  "/octaneapi.ApiNodeArrayService/init1",
};

std::unique_ptr< ApiNodeArrayService::Stub> ApiNodeArrayService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiNodeArrayService::Stub> stub(new ApiNodeArrayService::Stub(channel, options));
  return stub;
}

ApiNodeArrayService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_size1_(ApiNodeArrayService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get1_(ApiNodeArrayService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_items1_(ApiNodeArrayService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_begin11_(ApiNodeArrayService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_end11_(ApiNodeArrayService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_init1_(ApiNodeArrayService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiNodeArrayService::Stub::size1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_sizeRequest& request, ::octaneapi::ApiNodeArray_sizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeArray_sizeRequest, ::octaneapi::ApiNodeArray_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_size1_, context, request, response);
}

void ApiNodeArrayService::Stub::async::size1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_sizeRequest* request, ::octaneapi::ApiNodeArray_sizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeArray_sizeRequest, ::octaneapi::ApiNodeArray_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_size1_, context, request, response, std::move(f));
}

void ApiNodeArrayService::Stub::async::size1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_sizeRequest* request, ::octaneapi::ApiNodeArray_sizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_size1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeArray_sizeResponse>* ApiNodeArrayService::Stub::PrepareAsyncsize1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_sizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeArray_sizeResponse, ::octaneapi::ApiNodeArray_sizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_size1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeArray_sizeResponse>* ApiNodeArrayService::Stub::Asyncsize1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_sizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsize1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeArrayService::Stub::get1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_getRequest& request, ::octaneapi::ApiNodeArray_getResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeArray_getRequest, ::octaneapi::ApiNodeArray_getResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get1_, context, request, response);
}

void ApiNodeArrayService::Stub::async::get1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_getRequest* request, ::octaneapi::ApiNodeArray_getResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeArray_getRequest, ::octaneapi::ApiNodeArray_getResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get1_, context, request, response, std::move(f));
}

void ApiNodeArrayService::Stub::async::get1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_getRequest* request, ::octaneapi::ApiNodeArray_getResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeArray_getResponse>* ApiNodeArrayService::Stub::PrepareAsyncget1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_getRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeArray_getResponse, ::octaneapi::ApiNodeArray_getRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeArray_getResponse>* ApiNodeArrayService::Stub::Asyncget1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_getRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeArrayService::Stub::items1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_itemsRequest& request, ::octaneapi::ApiNodeArray_itemsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeArray_itemsRequest, ::octaneapi::ApiNodeArray_itemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_items1_, context, request, response);
}

void ApiNodeArrayService::Stub::async::items1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_itemsRequest* request, ::octaneapi::ApiNodeArray_itemsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeArray_itemsRequest, ::octaneapi::ApiNodeArray_itemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_items1_, context, request, response, std::move(f));
}

void ApiNodeArrayService::Stub::async::items1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_itemsRequest* request, ::octaneapi::ApiNodeArray_itemsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_items1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeArray_itemsResponse>* ApiNodeArrayService::Stub::PrepareAsyncitems1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_itemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeArray_itemsResponse, ::octaneapi::ApiNodeArray_itemsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_items1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeArray_itemsResponse>* ApiNodeArrayService::Stub::Asyncitems1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_itemsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncitems1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeArrayService::Stub::begin11(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_begin1Request& request, ::octaneapi::ApiNodeArray_begin1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeArray_begin1Request, ::octaneapi::ApiNodeArray_begin1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_begin11_, context, request, response);
}

void ApiNodeArrayService::Stub::async::begin11(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_begin1Request* request, ::octaneapi::ApiNodeArray_begin1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeArray_begin1Request, ::octaneapi::ApiNodeArray_begin1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_begin11_, context, request, response, std::move(f));
}

void ApiNodeArrayService::Stub::async::begin11(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_begin1Request* request, ::octaneapi::ApiNodeArray_begin1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_begin11_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeArray_begin1Response>* ApiNodeArrayService::Stub::PrepareAsyncbegin11Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_begin1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeArray_begin1Response, ::octaneapi::ApiNodeArray_begin1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_begin11_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeArray_begin1Response>* ApiNodeArrayService::Stub::Asyncbegin11Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_begin1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbegin11Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeArrayService::Stub::end11(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_end1Request& request, ::octaneapi::ApiNodeArray_end1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeArray_end1Request, ::octaneapi::ApiNodeArray_end1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_end11_, context, request, response);
}

void ApiNodeArrayService::Stub::async::end11(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_end1Request* request, ::octaneapi::ApiNodeArray_end1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeArray_end1Request, ::octaneapi::ApiNodeArray_end1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_end11_, context, request, response, std::move(f));
}

void ApiNodeArrayService::Stub::async::end11(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_end1Request* request, ::octaneapi::ApiNodeArray_end1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_end11_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeArray_end1Response>* ApiNodeArrayService::Stub::PrepareAsyncend11Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_end1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeArray_end1Response, ::octaneapi::ApiNodeArray_end1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_end11_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeArray_end1Response>* ApiNodeArrayService::Stub::Asyncend11Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_end1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncend11Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeArrayService::Stub::init1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_initRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeArray_initRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init1_, context, request, response);
}

void ApiNodeArrayService::Stub::async::init1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_initRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeArray_initRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init1_, context, request, response, std::move(f));
}

void ApiNodeArrayService::Stub::async::init1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_initRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeArrayService::Stub::PrepareAsyncinit1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_initRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiNodeArray_initRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeArrayService::Stub::Asyncinit1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeArray_initRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinit1Raw(context, request, cq);
  result->StartCall();
  return result;
}

ApiNodeArrayService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeArrayService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeArrayService::Service, ::octaneapi::ApiNodeArray_sizeRequest, ::octaneapi::ApiNodeArray_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeArrayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeArray_sizeRequest* req,
             ::octaneapi::ApiNodeArray_sizeResponse* resp) {
               return service->size1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeArrayService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeArrayService::Service, ::octaneapi::ApiNodeArray_getRequest, ::octaneapi::ApiNodeArray_getResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeArrayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeArray_getRequest* req,
             ::octaneapi::ApiNodeArray_getResponse* resp) {
               return service->get1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeArrayService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeArrayService::Service, ::octaneapi::ApiNodeArray_itemsRequest, ::octaneapi::ApiNodeArray_itemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeArrayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeArray_itemsRequest* req,
             ::octaneapi::ApiNodeArray_itemsResponse* resp) {
               return service->items1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeArrayService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeArrayService::Service, ::octaneapi::ApiNodeArray_begin1Request, ::octaneapi::ApiNodeArray_begin1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeArrayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeArray_begin1Request* req,
             ::octaneapi::ApiNodeArray_begin1Response* resp) {
               return service->begin11(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeArrayService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeArrayService::Service, ::octaneapi::ApiNodeArray_end1Request, ::octaneapi::ApiNodeArray_end1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeArrayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeArray_end1Request* req,
             ::octaneapi::ApiNodeArray_end1Response* resp) {
               return service->end11(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeArrayService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeArrayService::Service, ::octaneapi::ApiNodeArray_initRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeArrayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeArray_initRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->init1(ctx, req, resp);
             }, this)));
}

ApiNodeArrayService::Service::~Service() {
}

::grpc::Status ApiNodeArrayService::Service::size1(::grpc::ServerContext* context, const ::octaneapi::ApiNodeArray_sizeRequest* request, ::octaneapi::ApiNodeArray_sizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeArrayService::Service::get1(::grpc::ServerContext* context, const ::octaneapi::ApiNodeArray_getRequest* request, ::octaneapi::ApiNodeArray_getResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeArrayService::Service::items1(::grpc::ServerContext* context, const ::octaneapi::ApiNodeArray_itemsRequest* request, ::octaneapi::ApiNodeArray_itemsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeArrayService::Service::begin11(::grpc::ServerContext* context, const ::octaneapi::ApiNodeArray_begin1Request* request, ::octaneapi::ApiNodeArray_begin1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeArrayService::Service::end11(::grpc::ServerContext* context, const ::octaneapi::ApiNodeArray_end1Request* request, ::octaneapi::ApiNodeArray_end1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeArrayService::Service::init1(::grpc::ServerContext* context, const ::octaneapi::ApiNodeArray_initRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

