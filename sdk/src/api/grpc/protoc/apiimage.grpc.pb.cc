// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apiimage.proto

#include "apiimage.pb.h"
#include "apiimage.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiImageService_method_names[] = {
  "/octaneapi.ApiImageService/create",
  "/octaneapi.ApiImageService/create1",
  "/octaneapi.ApiImageService/saveToFile",
  "/octaneapi.ApiImageService/loadFromFile",
  "/octaneapi.ApiImageService/loadFromMemory",
  "/octaneapi.ApiImageService/destroy",
  "/octaneapi.ApiImageService/width",
  "/octaneapi.ApiImageService/height",
  "/octaneapi.ApiImageService/pixelFormat",
  "/octaneapi.ApiImageService/isARGB",
  "/octaneapi.ApiImageService/isRGB",
  "/octaneapi.ApiImageService/isSingleChannel",
  "/octaneapi.ApiImageService/hasAlphaChannel",
  "/octaneapi.ApiImageService/clear",
  "/octaneapi.ApiImageService/updateTo",
  "/octaneapi.ApiImageService/pixelAt",
  "/octaneapi.ApiImageService/setPixelAt",
  "/octaneapi.ApiImageService/multiplyAlphaAt",
  "/octaneapi.ApiImageService/multiplyAllAlphas",
  "/octaneapi.ApiImageService/desaturate",
  "/octaneapi.ApiImageService/resize",
};

std::unique_ptr< ApiImageService::Stub> ApiImageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiImageService::Stub> stub(new ApiImageService::Stub(channel, options));
  return stub;
}

ApiImageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create_(ApiImageService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_create1_(ApiImageService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveToFile_(ApiImageService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadFromFile_(ApiImageService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadFromMemory_(ApiImageService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(ApiImageService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_width_(ApiImageService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_height_(ApiImageService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pixelFormat_(ApiImageService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isARGB_(ApiImageService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isRGB_(ApiImageService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isSingleChannel_(ApiImageService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hasAlphaChannel_(ApiImageService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clear_(ApiImageService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_updateTo_(ApiImageService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pixelAt_(ApiImageService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setPixelAt_(ApiImageService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_multiplyAlphaAt_(ApiImageService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_multiplyAllAlphas_(ApiImageService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_desaturate_(ApiImageService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_resize_(ApiImageService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiImageService::Stub::create(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest& request, ::octaneapi::ApiImage_createResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_createRequest, ::octaneapi::ApiImage_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_, context, request, response);
}

void ApiImageService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest* request, ::octaneapi::ApiImage_createResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_createRequest, ::octaneapi::ApiImage_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest* request, ::octaneapi::ApiImage_createResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_createResponse>* ApiImageService::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImage_createResponse, ::octaneapi::ApiImage_createRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_createResponse>* ApiImageService::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::create1(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request& request, ::octaneapi::ApiImage_create1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_create1Request, ::octaneapi::ApiImage_create1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create1_, context, request, response);
}

void ApiImageService::Stub::async::create1(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request* request, ::octaneapi::ApiImage_create1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_create1Request, ::octaneapi::ApiImage_create1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create1_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::create1(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request* request, ::octaneapi::ApiImage_create1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_create1Response>* ApiImageService::Stub::PrepareAsynccreate1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImage_create1Response, ::octaneapi::ApiImage_create1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_create1Response>* ApiImageService::Stub::Asynccreate1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreate1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::saveToFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest& request, ::octaneapi::ApiImage_saveToFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_saveToFileRequest, ::octaneapi::ApiImage_saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveToFile_, context, request, response);
}

void ApiImageService::Stub::async::saveToFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest* request, ::octaneapi::ApiImage_saveToFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_saveToFileRequest, ::octaneapi::ApiImage_saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToFile_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::saveToFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest* request, ::octaneapi::ApiImage_saveToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_saveToFileResponse>* ApiImageService::Stub::PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImage_saveToFileResponse, ::octaneapi::ApiImage_saveToFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveToFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_saveToFileResponse>* ApiImageService::Stub::AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveToFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::loadFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest& request, ::octaneapi::ApiImage_loadFromFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_loadFromFileRequest, ::octaneapi::ApiImage_loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadFromFile_, context, request, response);
}

void ApiImageService::Stub::async::loadFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest* request, ::octaneapi::ApiImage_loadFromFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_loadFromFileRequest, ::octaneapi::ApiImage_loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromFile_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::loadFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest* request, ::octaneapi::ApiImage_loadFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromFileResponse>* ApiImageService::Stub::PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImage_loadFromFileResponse, ::octaneapi::ApiImage_loadFromFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadFromFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromFileResponse>* ApiImageService::Stub::AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadFromFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::loadFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest& request, ::octaneapi::ApiImage_loadFromMemoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_loadFromMemoryRequest, ::octaneapi::ApiImage_loadFromMemoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadFromMemory_, context, request, response);
}

void ApiImageService::Stub::async::loadFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest* request, ::octaneapi::ApiImage_loadFromMemoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_loadFromMemoryRequest, ::octaneapi::ApiImage_loadFromMemoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromMemory_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::loadFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest* request, ::octaneapi::ApiImage_loadFromMemoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromMemoryResponse>* ApiImageService::Stub::PrepareAsyncloadFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImage_loadFromMemoryResponse, ::octaneapi::ApiImage_loadFromMemoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadFromMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromMemoryResponse>* ApiImageService::Stub::AsyncloadFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadFromMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void ApiImageService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImage_destroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::width(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest& request, ::octaneapi::ApiImage_widthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_widthRequest, ::octaneapi::ApiImage_widthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_width_, context, request, response);
}

void ApiImageService::Stub::async::width(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest* request, ::octaneapi::ApiImage_widthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_widthRequest, ::octaneapi::ApiImage_widthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_width_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::width(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest* request, ::octaneapi::ApiImage_widthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_width_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_widthResponse>* ApiImageService::Stub::PrepareAsyncwidthRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImage_widthResponse, ::octaneapi::ApiImage_widthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_width_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_widthResponse>* ApiImageService::Stub::AsyncwidthRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwidthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::height(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest& request, ::octaneapi::ApiImage_heightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_heightRequest, ::octaneapi::ApiImage_heightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_height_, context, request, response);
}

void ApiImageService::Stub::async::height(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest* request, ::octaneapi::ApiImage_heightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_heightRequest, ::octaneapi::ApiImage_heightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_height_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::height(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest* request, ::octaneapi::ApiImage_heightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_height_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_heightResponse>* ApiImageService::Stub::PrepareAsyncheightRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImage_heightResponse, ::octaneapi::ApiImage_heightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_height_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_heightResponse>* ApiImageService::Stub::AsyncheightRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncheightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::pixelFormat(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest& request, ::octaneapi::ApiImage_pixelFormatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_pixelFormatRequest, ::octaneapi::ApiImage_pixelFormatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pixelFormat_, context, request, response);
}

void ApiImageService::Stub::async::pixelFormat(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest* request, ::octaneapi::ApiImage_pixelFormatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_pixelFormatRequest, ::octaneapi::ApiImage_pixelFormatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pixelFormat_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::pixelFormat(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest* request, ::octaneapi::ApiImage_pixelFormatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pixelFormat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelFormatResponse>* ApiImageService::Stub::PrepareAsyncpixelFormatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImage_pixelFormatResponse, ::octaneapi::ApiImage_pixelFormatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pixelFormat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelFormatResponse>* ApiImageService::Stub::AsyncpixelFormatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpixelFormatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::isARGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest& request, ::octaneapi::ApiImage_isARGBResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_isARGBRequest, ::octaneapi::ApiImage_isARGBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isARGB_, context, request, response);
}

void ApiImageService::Stub::async::isARGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest* request, ::octaneapi::ApiImage_isARGBResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_isARGBRequest, ::octaneapi::ApiImage_isARGBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isARGB_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::isARGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest* request, ::octaneapi::ApiImage_isARGBResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isARGB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isARGBResponse>* ApiImageService::Stub::PrepareAsyncisARGBRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImage_isARGBResponse, ::octaneapi::ApiImage_isARGBRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isARGB_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isARGBResponse>* ApiImageService::Stub::AsyncisARGBRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisARGBRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::isRGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest& request, ::octaneapi::ApiImage_isRGBResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_isRGBRequest, ::octaneapi::ApiImage_isRGBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isRGB_, context, request, response);
}

void ApiImageService::Stub::async::isRGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest* request, ::octaneapi::ApiImage_isRGBResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_isRGBRequest, ::octaneapi::ApiImage_isRGBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isRGB_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::isRGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest* request, ::octaneapi::ApiImage_isRGBResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isRGB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isRGBResponse>* ApiImageService::Stub::PrepareAsyncisRGBRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImage_isRGBResponse, ::octaneapi::ApiImage_isRGBRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isRGB_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isRGBResponse>* ApiImageService::Stub::AsyncisRGBRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisRGBRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::isSingleChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest& request, ::octaneapi::ApiImage_isSingleChannelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_isSingleChannelRequest, ::octaneapi::ApiImage_isSingleChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isSingleChannel_, context, request, response);
}

void ApiImageService::Stub::async::isSingleChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest* request, ::octaneapi::ApiImage_isSingleChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_isSingleChannelRequest, ::octaneapi::ApiImage_isSingleChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isSingleChannel_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::isSingleChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest* request, ::octaneapi::ApiImage_isSingleChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isSingleChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isSingleChannelResponse>* ApiImageService::Stub::PrepareAsyncisSingleChannelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImage_isSingleChannelResponse, ::octaneapi::ApiImage_isSingleChannelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isSingleChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isSingleChannelResponse>* ApiImageService::Stub::AsyncisSingleChannelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisSingleChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::hasAlphaChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest& request, ::octaneapi::ApiImage_hasAlphaChannelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_hasAlphaChannelRequest, ::octaneapi::ApiImage_hasAlphaChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hasAlphaChannel_, context, request, response);
}

void ApiImageService::Stub::async::hasAlphaChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest* request, ::octaneapi::ApiImage_hasAlphaChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_hasAlphaChannelRequest, ::octaneapi::ApiImage_hasAlphaChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasAlphaChannel_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::hasAlphaChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest* request, ::octaneapi::ApiImage_hasAlphaChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasAlphaChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_hasAlphaChannelResponse>* ApiImageService::Stub::PrepareAsynchasAlphaChannelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImage_hasAlphaChannelResponse, ::octaneapi::ApiImage_hasAlphaChannelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hasAlphaChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_hasAlphaChannelResponse>* ApiImageService::Stub::AsynchasAlphaChannelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchasAlphaChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::clear(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clear_, context, request, response);
}

void ApiImageService::Stub::async::clear(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::clear(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::PrepareAsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImage_clearRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clear_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::AsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::updateTo(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_updateToRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_updateTo_, context, request, response);
}

void ApiImageService::Stub::async::updateTo(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_updateToRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updateTo_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::updateTo(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updateTo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::PrepareAsyncupdateToRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImage_updateToRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_updateTo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::AsyncupdateToRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncupdateToRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::pixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest& request, ::octaneapi::ApiImage_pixelAtResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_pixelAtRequest, ::octaneapi::ApiImage_pixelAtResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pixelAt_, context, request, response);
}

void ApiImageService::Stub::async::pixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest* request, ::octaneapi::ApiImage_pixelAtResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_pixelAtRequest, ::octaneapi::ApiImage_pixelAtResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pixelAt_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::pixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest* request, ::octaneapi::ApiImage_pixelAtResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pixelAt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelAtResponse>* ApiImageService::Stub::PrepareAsyncpixelAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImage_pixelAtResponse, ::octaneapi::ApiImage_pixelAtRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pixelAt_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelAtResponse>* ApiImageService::Stub::AsyncpixelAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpixelAtRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::setPixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_setPixelAtRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setPixelAt_, context, request, response);
}

void ApiImageService::Stub::async::setPixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_setPixelAtRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setPixelAt_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::setPixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setPixelAt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::PrepareAsyncsetPixelAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImage_setPixelAtRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setPixelAt_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::AsyncsetPixelAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetPixelAtRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::multiplyAlphaAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_multiplyAlphaAtRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_multiplyAlphaAt_, context, request, response);
}

void ApiImageService::Stub::async::multiplyAlphaAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_multiplyAlphaAtRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_multiplyAlphaAt_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::multiplyAlphaAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_multiplyAlphaAt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::PrepareAsyncmultiplyAlphaAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImage_multiplyAlphaAtRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_multiplyAlphaAt_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::AsyncmultiplyAlphaAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmultiplyAlphaAtRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::multiplyAllAlphas(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_multiplyAllAlphasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_multiplyAllAlphas_, context, request, response);
}

void ApiImageService::Stub::async::multiplyAllAlphas(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_multiplyAllAlphasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_multiplyAllAlphas_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::multiplyAllAlphas(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_multiplyAllAlphas_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::PrepareAsyncmultiplyAllAlphasRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImage_multiplyAllAlphasRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_multiplyAllAlphas_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::AsyncmultiplyAllAlphasRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmultiplyAllAlphasRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::desaturate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_desaturateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_desaturate_, context, request, response);
}

void ApiImageService::Stub::async::desaturate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_desaturateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_desaturate_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::desaturate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_desaturate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::PrepareAsyncdesaturateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImage_desaturateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_desaturate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::AsyncdesaturateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdesaturateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageService::Stub::resize(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImage_resizeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_resize_, context, request, response);
}

void ApiImageService::Stub::async::resize(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImage_resizeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resize_, context, request, response, std::move(f));
}

void ApiImageService::Stub::async::resize(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::PrepareAsyncresizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImage_resizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_resize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageService::Stub::AsyncresizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncresizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiImageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_createRequest, ::octaneapi::ApiImage_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_createRequest* req,
             ::octaneapi::ApiImage_createResponse* resp) {
               return service->create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_create1Request, ::octaneapi::ApiImage_create1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_create1Request* req,
             ::octaneapi::ApiImage_create1Response* resp) {
               return service->create1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_saveToFileRequest, ::octaneapi::ApiImage_saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_saveToFileRequest* req,
             ::octaneapi::ApiImage_saveToFileResponse* resp) {
               return service->saveToFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_loadFromFileRequest, ::octaneapi::ApiImage_loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_loadFromFileRequest* req,
             ::octaneapi::ApiImage_loadFromFileResponse* resp) {
               return service->loadFromFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_loadFromMemoryRequest, ::octaneapi::ApiImage_loadFromMemoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_loadFromMemoryRequest* req,
             ::octaneapi::ApiImage_loadFromMemoryResponse* resp) {
               return service->loadFromMemory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_destroyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_widthRequest, ::octaneapi::ApiImage_widthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_widthRequest* req,
             ::octaneapi::ApiImage_widthResponse* resp) {
               return service->width(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_heightRequest, ::octaneapi::ApiImage_heightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_heightRequest* req,
             ::octaneapi::ApiImage_heightResponse* resp) {
               return service->height(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_pixelFormatRequest, ::octaneapi::ApiImage_pixelFormatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_pixelFormatRequest* req,
             ::octaneapi::ApiImage_pixelFormatResponse* resp) {
               return service->pixelFormat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_isARGBRequest, ::octaneapi::ApiImage_isARGBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_isARGBRequest* req,
             ::octaneapi::ApiImage_isARGBResponse* resp) {
               return service->isARGB(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_isRGBRequest, ::octaneapi::ApiImage_isRGBResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_isRGBRequest* req,
             ::octaneapi::ApiImage_isRGBResponse* resp) {
               return service->isRGB(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_isSingleChannelRequest, ::octaneapi::ApiImage_isSingleChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_isSingleChannelRequest* req,
             ::octaneapi::ApiImage_isSingleChannelResponse* resp) {
               return service->isSingleChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_hasAlphaChannelRequest, ::octaneapi::ApiImage_hasAlphaChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_hasAlphaChannelRequest* req,
             ::octaneapi::ApiImage_hasAlphaChannelResponse* resp) {
               return service->hasAlphaChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_clearRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->clear(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_updateToRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_updateToRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->updateTo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_pixelAtRequest, ::octaneapi::ApiImage_pixelAtResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_pixelAtRequest* req,
             ::octaneapi::ApiImage_pixelAtResponse* resp) {
               return service->pixelAt(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_setPixelAtRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_setPixelAtRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setPixelAt(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_multiplyAlphaAtRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_multiplyAlphaAtRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->multiplyAlphaAt(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_multiplyAllAlphasRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_multiplyAllAlphasRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->multiplyAllAlphas(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_desaturateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_desaturateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->desaturate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageService::Service, ::octaneapi::ApiImage_resizeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImage_resizeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->resize(ctx, req, resp);
             }, this)));
}

ApiImageService::Service::~Service() {
}

::grpc::Status ApiImageService::Service::create(::grpc::ServerContext* context, const ::octaneapi::ApiImage_createRequest* request, ::octaneapi::ApiImage_createResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::create1(::grpc::ServerContext* context, const ::octaneapi::ApiImage_create1Request* request, ::octaneapi::ApiImage_create1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::saveToFile(::grpc::ServerContext* context, const ::octaneapi::ApiImage_saveToFileRequest* request, ::octaneapi::ApiImage_saveToFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::loadFromFile(::grpc::ServerContext* context, const ::octaneapi::ApiImage_loadFromFileRequest* request, ::octaneapi::ApiImage_loadFromFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::loadFromMemory(::grpc::ServerContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest* request, ::octaneapi::ApiImage_loadFromMemoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::destroy(::grpc::ServerContext* context, const ::octaneapi::ApiImage_destroyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::width(::grpc::ServerContext* context, const ::octaneapi::ApiImage_widthRequest* request, ::octaneapi::ApiImage_widthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::height(::grpc::ServerContext* context, const ::octaneapi::ApiImage_heightRequest* request, ::octaneapi::ApiImage_heightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::pixelFormat(::grpc::ServerContext* context, const ::octaneapi::ApiImage_pixelFormatRequest* request, ::octaneapi::ApiImage_pixelFormatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::isARGB(::grpc::ServerContext* context, const ::octaneapi::ApiImage_isARGBRequest* request, ::octaneapi::ApiImage_isARGBResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::isRGB(::grpc::ServerContext* context, const ::octaneapi::ApiImage_isRGBRequest* request, ::octaneapi::ApiImage_isRGBResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::isSingleChannel(::grpc::ServerContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest* request, ::octaneapi::ApiImage_isSingleChannelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::hasAlphaChannel(::grpc::ServerContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest* request, ::octaneapi::ApiImage_hasAlphaChannelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::clear(::grpc::ServerContext* context, const ::octaneapi::ApiImage_clearRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::updateTo(::grpc::ServerContext* context, const ::octaneapi::ApiImage_updateToRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::pixelAt(::grpc::ServerContext* context, const ::octaneapi::ApiImage_pixelAtRequest* request, ::octaneapi::ApiImage_pixelAtResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::setPixelAt(::grpc::ServerContext* context, const ::octaneapi::ApiImage_setPixelAtRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::multiplyAlphaAt(::grpc::ServerContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::multiplyAllAlphas(::grpc::ServerContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::desaturate(::grpc::ServerContext* context, const ::octaneapi::ApiImage_desaturateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageService::Service::resize(::grpc::ServerContext* context, const ::octaneapi::ApiImage_resizeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

