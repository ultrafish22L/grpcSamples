// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apitilegrid.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apitilegrid_2eproto__INCLUDED
#define GRPC_apitilegrid_2eproto__INCLUDED

#include "apitilegrid.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiTileGridLoader' from 'apitilegrid.h'
class ApiTileGridLoaderService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiTileGridLoaderService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Creates a pattern for generating file names, as described in the 
    // / attribute info of A_GRID_FILE_PATTERN on NT_TEX_IMAGE_TILES
    virtual ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest& request, ::octaneapi::ApiTileGridLoader_createResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    // / Destroy this object
    virtual ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    // / Initialize from settings stored in a supported node item (NT_TEX_IMAGE_TILES and NT_TEX_IMAGE_TILE_SET)
    // / Equivalent to calling updatePattern() and applyStoredSettings(), but it reads the source data from the
    // / passed in node item
    virtual ::grpc::Status loadFromNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncloadFromNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncloadFromNodeItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncloadFromNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncloadFromNodeItemRaw(context, request, cq));
    }
    // / Store data in this object in a supported node item (NT_TEX_IMAGE_TILES and NT_TEX_IMAGE_TILE_SET)
    // / This does not evaluate the item
    virtual ::grpc::Status saveToNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest& request, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>> AsyncsaveToNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>>(AsyncsaveToNodeItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>> PrepareAsyncsaveToNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>>(PrepareAsyncsaveToNodeItemRaw(context, request, cq));
    }
    // / Set from settings stored in a node
    virtual ::grpc::Status applyStoredSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncapplyStoredSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncapplyStoredSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncapplyStoredSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncapplyStoredSettingsRaw(context, request, cq));
    }
    // / Given a file name, guess which pattern it may represent
    virtual ::grpc::Status inferSettingsFromFilename(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest& request, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>> AsyncinferSettingsFromFilename(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>>(AsyncinferSettingsFromFilenameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>> PrepareAsyncinferSettingsFromFilename(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>>(PrepareAsyncinferSettingsFromFilenameRaw(context, request, cq));
    }
    // / Look for tiles in the file system
    virtual ::grpc::Status scanTiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncscanTiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncscanTilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncscanTiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncscanTilesRaw(context, request, cq));
    }
    // / Automatically resize a tile grid
    virtual ::grpc::Status automaticSizeGrid(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncautomaticSizeGrid(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncautomaticSizeGridRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncautomaticSizeGrid(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncautomaticSizeGridRaw(context, request, cq));
    }
    // / Get the current settings
    virtual ::grpc::Status getSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest& request, ::octaneapi::ApiTileGridLoader_getSettingsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_getSettingsResponse>> AsyncgetSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_getSettingsResponse>>(AsyncgetSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_getSettingsResponse>> PrepareAsyncgetSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_getSettingsResponse>>(PrepareAsyncgetSettingsRaw(context, request, cq));
    }
    // / Change the settings stored in this object, and if the list of files is set, add or
    // / remove padding to it so that it covers the new grid size
    virtual ::grpc::Status updateSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncupdateSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncupdateSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncupdateSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncupdateSettingsRaw(context, request, cq));
    }
    // / Get the list of files
    virtual ::grpc::Status getFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest& request, ::octaneapi::ApiTileGridLoader_getFilesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_getFilesResponse>> AsyncgetFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_getFilesResponse>>(AsyncgetFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_getFilesResponse>> PrepareAsyncgetFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_getFilesResponse>>(PrepareAsyncgetFilesRaw(context, request, cq));
    }
    // / Populate the current list of files
    virtual ::grpc::Status setFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetFilesRaw(context, request, cq));
    }
    // / Check if a cell has a file assigned to it
    virtual ::grpc::Status hasFileInCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest& request, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>> AsynchasFileInCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>>(AsynchasFileInCellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>> PrepareAsynchasFileInCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>>(PrepareAsynchasFileInCellRaw(context, request, cq));
    }
    // / For cells which aren't empty, return the file name
    virtual ::grpc::Status fileNameForCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest& request, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>> AsyncfileNameForCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>>(AsyncfileNameForCellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>> PrepareAsyncfileNameForCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>>(PrepareAsyncfileNameForCellRaw(context, request, cq));
    }
    // / Count the number of valid files in the currently defined tile grid
    virtual ::grpc::Status count(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest& request, ::octaneapi::ApiTileGridLoader_countResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_countResponse>> Asynccount(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_countResponse>>(AsynccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_countResponse>> PrepareAsynccount(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_countResponse>>(PrepareAsynccountRaw(context, request, cq));
    }
    // / Updates the file name pattern
    virtual ::grpc::Status updatePattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncupdatePattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncupdatePatternRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncupdatePattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncupdatePatternRaw(context, request, cq));
    }
    // / Returns true if the pattern is empty
    virtual ::grpc::Status hasEmptyPattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest& request, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>> AsynchasEmptyPattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>>(AsynchasEmptyPatternRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>> PrepareAsynchasEmptyPattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>>(PrepareAsynchasEmptyPatternRaw(context, request, cq));
    }
    // / Returns the pattern as a string
    virtual ::grpc::Status patternString(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest& request, ::octaneapi::ApiTileGridLoader_patternStringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_patternStringResponse>> AsyncpatternString(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_patternStringResponse>>(AsyncpatternStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_patternStringResponse>> PrepareAsyncpatternString(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_patternStringResponse>>(PrepareAsyncpatternStringRaw(context, request, cq));
    }
    // / True if the pattern contains any placeholders
    virtual ::grpc::Status hasPlaceholders(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest& request, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>> AsynchasPlaceholders(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>>(AsynchasPlaceholdersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>> PrepareAsynchasPlaceholders(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>>(PrepareAsynchasPlaceholdersRaw(context, request, cq));
    }
    // / True if the pattern has any linear indexing (including UDIM)
    virtual ::grpc::Status hasIndex(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest& request, ::octaneapi::ApiTileGridLoader_hasIndexResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasIndexResponse>> AsynchasIndex(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasIndexResponse>>(AsynchasIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasIndexResponse>> PrepareAsynchasIndex(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasIndexResponse>>(PrepareAsynchasIndexRaw(context, request, cq));
    }
    // / True if the pattern has a UDIM placeholder
    virtual ::grpc::Status hasUDIM(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest& request, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>> AsynchasUDIM(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>>(AsynchasUDIMRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>> PrepareAsynchasUDIM(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>>(PrepareAsynchasUDIMRaw(context, request, cq));
    }
    // / True if the pattern uses two-dimensional indexing
    virtual ::grpc::Status hasUv(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest& request, ::octaneapi::ApiTileGridLoader_hasUvResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasUvResponse>> AsynchasUv(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasUvResponse>>(AsynchasUvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasUvResponse>> PrepareAsynchasUv(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasUvResponse>>(PrepareAsynchasUvRaw(context, request, cq));
    }
    // / Sutstitute placeholders in the file name pattern with the given
    // / indices
    // /
    // / 
    virtual ::grpc::Status substitute(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest& request, ::octaneapi::ApiTileGridLoader_substituteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_substituteResponse>> Asyncsubstitute(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_substituteResponse>>(AsyncsubstituteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_substituteResponse>> PrepareAsyncsubstitute(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_substituteResponse>>(PrepareAsyncsubstituteRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Creates a pattern for generating file names, as described in the 
      // / attribute info of A_GRID_FILE_PATTERN on NT_TEX_IMAGE_TILES
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest* request, ::octaneapi::ApiTileGridLoader_createResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest* request, ::octaneapi::ApiTileGridLoader_createResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Destroy this object
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Initialize from settings stored in a supported node item (NT_TEX_IMAGE_TILES and NT_TEX_IMAGE_TILE_SET)
      // / Equivalent to calling updatePattern() and applyStoredSettings(), but it reads the source data from the
      // / passed in node item
      virtual void loadFromNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void loadFromNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Store data in this object in a supported node item (NT_TEX_IMAGE_TILES and NT_TEX_IMAGE_TILE_SET)
      // / This does not evaluate the item
      virtual void saveToNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* request, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void saveToNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* request, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Set from settings stored in a node
      virtual void applyStoredSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void applyStoredSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Given a file name, guess which pattern it may represent
      virtual void inferSettingsFromFilename(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* request, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void inferSettingsFromFilename(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* request, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Look for tiles in the file system
      virtual void scanTiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void scanTiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Automatically resize a tile grid
      virtual void automaticSizeGrid(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void automaticSizeGrid(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Get the current settings
      virtual void getSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* request, ::octaneapi::ApiTileGridLoader_getSettingsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* request, ::octaneapi::ApiTileGridLoader_getSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Change the settings stored in this object, and if the list of files is set, add or
      // / remove padding to it so that it covers the new grid size
      virtual void updateSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void updateSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Get the list of files
      virtual void getFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest* request, ::octaneapi::ApiTileGridLoader_getFilesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest* request, ::octaneapi::ApiTileGridLoader_getFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Populate the current list of files
      virtual void setFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Check if a cell has a file assigned to it
      virtual void hasFileInCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* request, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void hasFileInCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* request, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / For cells which aren't empty, return the file name
      virtual void fileNameForCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* request, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void fileNameForCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* request, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Count the number of valid files in the currently defined tile grid
      virtual void count(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest* request, ::octaneapi::ApiTileGridLoader_countResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void count(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest* request, ::octaneapi::ApiTileGridLoader_countResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Updates the file name pattern
      virtual void updatePattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void updatePattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns true if the pattern is empty
      virtual void hasEmptyPattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* request, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void hasEmptyPattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* request, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the pattern as a string
      virtual void patternString(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest* request, ::octaneapi::ApiTileGridLoader_patternStringResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void patternString(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest* request, ::octaneapi::ApiTileGridLoader_patternStringResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / True if the pattern contains any placeholders
      virtual void hasPlaceholders(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* request, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void hasPlaceholders(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* request, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / True if the pattern has any linear indexing (including UDIM)
      virtual void hasIndex(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* request, ::octaneapi::ApiTileGridLoader_hasIndexResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void hasIndex(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* request, ::octaneapi::ApiTileGridLoader_hasIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / True if the pattern has a UDIM placeholder
      virtual void hasUDIM(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* request, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void hasUDIM(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* request, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / True if the pattern uses two-dimensional indexing
      virtual void hasUv(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest* request, ::octaneapi::ApiTileGridLoader_hasUvResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void hasUv(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest* request, ::octaneapi::ApiTileGridLoader_hasUvResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Sutstitute placeholders in the file name pattern with the given
      // / indices
      // /
      // / 
      virtual void substitute(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest* request, ::octaneapi::ApiTileGridLoader_substituteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void substitute(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest* request, ::octaneapi::ApiTileGridLoader_substituteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncloadFromNodeItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncloadFromNodeItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>* AsyncsaveToNodeItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>* PrepareAsyncsaveToNodeItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncapplyStoredSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncapplyStoredSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>* AsyncinferSettingsFromFilenameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>* PrepareAsyncinferSettingsFromFilenameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncscanTilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncscanTilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncautomaticSizeGridRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncautomaticSizeGridRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_getSettingsResponse>* AsyncgetSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_getSettingsResponse>* PrepareAsyncgetSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncupdateSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncupdateSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_getFilesResponse>* AsyncgetFilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_getFilesResponse>* PrepareAsyncgetFilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetFilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetFilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>* AsynchasFileInCellRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>* PrepareAsynchasFileInCellRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>* AsyncfileNameForCellRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>* PrepareAsyncfileNameForCellRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_countResponse>* AsynccountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_countResponse>* PrepareAsynccountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncupdatePatternRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncupdatePatternRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>* AsynchasEmptyPatternRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>* PrepareAsynchasEmptyPatternRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_patternStringResponse>* AsyncpatternStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_patternStringResponse>* PrepareAsyncpatternStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>* AsynchasPlaceholdersRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>* PrepareAsynchasPlaceholdersRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasIndexResponse>* AsynchasIndexRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasIndexResponse>* PrepareAsynchasIndexRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>* AsynchasUDIMRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>* PrepareAsynchasUDIMRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasUvResponse>* AsynchasUvRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_hasUvResponse>* PrepareAsynchasUvRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_substituteResponse>* AsyncsubstituteRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiTileGridLoader_substituteResponse>* PrepareAsyncsubstituteRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest& request, ::octaneapi::ApiTileGridLoader_createResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    ::grpc::Status loadFromNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncloadFromNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncloadFromNodeItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncloadFromNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncloadFromNodeItemRaw(context, request, cq));
    }
    ::grpc::Status saveToNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest& request, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>> AsyncsaveToNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>>(AsyncsaveToNodeItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>> PrepareAsyncsaveToNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>>(PrepareAsyncsaveToNodeItemRaw(context, request, cq));
    }
    ::grpc::Status applyStoredSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncapplyStoredSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncapplyStoredSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncapplyStoredSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncapplyStoredSettingsRaw(context, request, cq));
    }
    ::grpc::Status inferSettingsFromFilename(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest& request, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>> AsyncinferSettingsFromFilename(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>>(AsyncinferSettingsFromFilenameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>> PrepareAsyncinferSettingsFromFilename(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>>(PrepareAsyncinferSettingsFromFilenameRaw(context, request, cq));
    }
    ::grpc::Status scanTiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncscanTiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncscanTilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncscanTiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncscanTilesRaw(context, request, cq));
    }
    ::grpc::Status automaticSizeGrid(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncautomaticSizeGrid(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncautomaticSizeGridRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncautomaticSizeGrid(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncautomaticSizeGridRaw(context, request, cq));
    }
    ::grpc::Status getSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest& request, ::octaneapi::ApiTileGridLoader_getSettingsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getSettingsResponse>> AsyncgetSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getSettingsResponse>>(AsyncgetSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getSettingsResponse>> PrepareAsyncgetSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getSettingsResponse>>(PrepareAsyncgetSettingsRaw(context, request, cq));
    }
    ::grpc::Status updateSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncupdateSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncupdateSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncupdateSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncupdateSettingsRaw(context, request, cq));
    }
    ::grpc::Status getFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest& request, ::octaneapi::ApiTileGridLoader_getFilesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getFilesResponse>> AsyncgetFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getFilesResponse>>(AsyncgetFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getFilesResponse>> PrepareAsyncgetFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getFilesResponse>>(PrepareAsyncgetFilesRaw(context, request, cq));
    }
    ::grpc::Status setFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetFilesRaw(context, request, cq));
    }
    ::grpc::Status hasFileInCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest& request, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>> AsynchasFileInCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>>(AsynchasFileInCellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>> PrepareAsynchasFileInCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>>(PrepareAsynchasFileInCellRaw(context, request, cq));
    }
    ::grpc::Status fileNameForCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest& request, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>> AsyncfileNameForCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>>(AsyncfileNameForCellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>> PrepareAsyncfileNameForCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>>(PrepareAsyncfileNameForCellRaw(context, request, cq));
    }
    ::grpc::Status count(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest& request, ::octaneapi::ApiTileGridLoader_countResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_countResponse>> Asynccount(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_countResponse>>(AsynccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_countResponse>> PrepareAsynccount(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_countResponse>>(PrepareAsynccountRaw(context, request, cq));
    }
    ::grpc::Status updatePattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncupdatePattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncupdatePatternRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncupdatePattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncupdatePatternRaw(context, request, cq));
    }
    ::grpc::Status hasEmptyPattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest& request, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>> AsynchasEmptyPattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>>(AsynchasEmptyPatternRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>> PrepareAsynchasEmptyPattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>>(PrepareAsynchasEmptyPatternRaw(context, request, cq));
    }
    ::grpc::Status patternString(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest& request, ::octaneapi::ApiTileGridLoader_patternStringResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_patternStringResponse>> AsyncpatternString(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_patternStringResponse>>(AsyncpatternStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_patternStringResponse>> PrepareAsyncpatternString(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_patternStringResponse>>(PrepareAsyncpatternStringRaw(context, request, cq));
    }
    ::grpc::Status hasPlaceholders(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest& request, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>> AsynchasPlaceholders(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>>(AsynchasPlaceholdersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>> PrepareAsynchasPlaceholders(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>>(PrepareAsynchasPlaceholdersRaw(context, request, cq));
    }
    ::grpc::Status hasIndex(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest& request, ::octaneapi::ApiTileGridLoader_hasIndexResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasIndexResponse>> AsynchasIndex(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasIndexResponse>>(AsynchasIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasIndexResponse>> PrepareAsynchasIndex(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasIndexResponse>>(PrepareAsynchasIndexRaw(context, request, cq));
    }
    ::grpc::Status hasUDIM(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest& request, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>> AsynchasUDIM(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>>(AsynchasUDIMRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>> PrepareAsynchasUDIM(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>>(PrepareAsynchasUDIMRaw(context, request, cq));
    }
    ::grpc::Status hasUv(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest& request, ::octaneapi::ApiTileGridLoader_hasUvResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUvResponse>> AsynchasUv(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUvResponse>>(AsynchasUvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUvResponse>> PrepareAsynchasUv(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUvResponse>>(PrepareAsynchasUvRaw(context, request, cq));
    }
    ::grpc::Status substitute(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest& request, ::octaneapi::ApiTileGridLoader_substituteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_substituteResponse>> Asyncsubstitute(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_substituteResponse>>(AsyncsubstituteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_substituteResponse>> PrepareAsyncsubstitute(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_substituteResponse>>(PrepareAsyncsubstituteRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest* request, ::octaneapi::ApiTileGridLoader_createResponse* response, std::function<void(::grpc::Status)>) override;
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest* request, ::octaneapi::ApiTileGridLoader_createResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void loadFromNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void loadFromNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void saveToNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* request, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* response, std::function<void(::grpc::Status)>) override;
      void saveToNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* request, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void applyStoredSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void applyStoredSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void inferSettingsFromFilename(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* request, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* response, std::function<void(::grpc::Status)>) override;
      void inferSettingsFromFilename(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* request, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void scanTiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void scanTiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void automaticSizeGrid(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void automaticSizeGrid(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* request, ::octaneapi::ApiTileGridLoader_getSettingsResponse* response, std::function<void(::grpc::Status)>) override;
      void getSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* request, ::octaneapi::ApiTileGridLoader_getSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void updateSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void updateSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest* request, ::octaneapi::ApiTileGridLoader_getFilesResponse* response, std::function<void(::grpc::Status)>) override;
      void getFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest* request, ::octaneapi::ApiTileGridLoader_getFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void setFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void hasFileInCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* request, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* response, std::function<void(::grpc::Status)>) override;
      void hasFileInCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* request, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void fileNameForCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* request, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* response, std::function<void(::grpc::Status)>) override;
      void fileNameForCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* request, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void count(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest* request, ::octaneapi::ApiTileGridLoader_countResponse* response, std::function<void(::grpc::Status)>) override;
      void count(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest* request, ::octaneapi::ApiTileGridLoader_countResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void updatePattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void updatePattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void hasEmptyPattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* request, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* response, std::function<void(::grpc::Status)>) override;
      void hasEmptyPattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* request, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void patternString(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest* request, ::octaneapi::ApiTileGridLoader_patternStringResponse* response, std::function<void(::grpc::Status)>) override;
      void patternString(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest* request, ::octaneapi::ApiTileGridLoader_patternStringResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void hasPlaceholders(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* request, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* response, std::function<void(::grpc::Status)>) override;
      void hasPlaceholders(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* request, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void hasIndex(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* request, ::octaneapi::ApiTileGridLoader_hasIndexResponse* response, std::function<void(::grpc::Status)>) override;
      void hasIndex(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* request, ::octaneapi::ApiTileGridLoader_hasIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void hasUDIM(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* request, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* response, std::function<void(::grpc::Status)>) override;
      void hasUDIM(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* request, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void hasUv(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest* request, ::octaneapi::ApiTileGridLoader_hasUvResponse* response, std::function<void(::grpc::Status)>) override;
      void hasUv(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest* request, ::octaneapi::ApiTileGridLoader_hasUvResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void substitute(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest* request, ::octaneapi::ApiTileGridLoader_substituteResponse* response, std::function<void(::grpc::Status)>) override;
      void substitute(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest* request, ::octaneapi::ApiTileGridLoader_substituteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncloadFromNodeItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncloadFromNodeItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>* AsyncsaveToNodeItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>* PrepareAsyncsaveToNodeItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncapplyStoredSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncapplyStoredSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>* AsyncinferSettingsFromFilenameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>* PrepareAsyncinferSettingsFromFilenameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncscanTilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncscanTilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncautomaticSizeGridRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncautomaticSizeGridRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getSettingsResponse>* AsyncgetSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getSettingsResponse>* PrepareAsyncgetSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncupdateSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncupdateSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getFilesResponse>* AsyncgetFilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getFilesResponse>* PrepareAsyncgetFilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetFilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetFilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>* AsynchasFileInCellRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>* PrepareAsynchasFileInCellRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>* AsyncfileNameForCellRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>* PrepareAsyncfileNameForCellRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_countResponse>* AsynccountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_countResponse>* PrepareAsynccountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncupdatePatternRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncupdatePatternRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>* AsynchasEmptyPatternRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>* PrepareAsynchasEmptyPatternRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_patternStringResponse>* AsyncpatternStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_patternStringResponse>* PrepareAsyncpatternStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>* AsynchasPlaceholdersRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>* PrepareAsynchasPlaceholdersRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasIndexResponse>* AsynchasIndexRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasIndexResponse>* PrepareAsynchasIndexRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>* AsynchasUDIMRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>* PrepareAsynchasUDIMRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUvResponse>* AsynchasUvRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUvResponse>* PrepareAsynchasUvRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_substituteResponse>* AsyncsubstituteRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_substituteResponse>* PrepareAsyncsubstituteRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_create_;
    const ::grpc::internal::RpcMethod rpcmethod_destroy_;
    const ::grpc::internal::RpcMethod rpcmethod_loadFromNodeItem_;
    const ::grpc::internal::RpcMethod rpcmethod_saveToNodeItem_;
    const ::grpc::internal::RpcMethod rpcmethod_applyStoredSettings_;
    const ::grpc::internal::RpcMethod rpcmethod_inferSettingsFromFilename_;
    const ::grpc::internal::RpcMethod rpcmethod_scanTiles_;
    const ::grpc::internal::RpcMethod rpcmethod_automaticSizeGrid_;
    const ::grpc::internal::RpcMethod rpcmethod_getSettings_;
    const ::grpc::internal::RpcMethod rpcmethod_updateSettings_;
    const ::grpc::internal::RpcMethod rpcmethod_getFiles_;
    const ::grpc::internal::RpcMethod rpcmethod_setFiles_;
    const ::grpc::internal::RpcMethod rpcmethod_hasFileInCell_;
    const ::grpc::internal::RpcMethod rpcmethod_fileNameForCell_;
    const ::grpc::internal::RpcMethod rpcmethod_count_;
    const ::grpc::internal::RpcMethod rpcmethod_updatePattern_;
    const ::grpc::internal::RpcMethod rpcmethod_hasEmptyPattern_;
    const ::grpc::internal::RpcMethod rpcmethod_patternString_;
    const ::grpc::internal::RpcMethod rpcmethod_hasPlaceholders_;
    const ::grpc::internal::RpcMethod rpcmethod_hasIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_hasUDIM_;
    const ::grpc::internal::RpcMethod rpcmethod_hasUv_;
    const ::grpc::internal::RpcMethod rpcmethod_substitute_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Creates a pattern for generating file names, as described in the 
    // / attribute info of A_GRID_FILE_PATTERN on NT_TEX_IMAGE_TILES
    virtual ::grpc::Status create(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_createRequest* request, ::octaneapi::ApiTileGridLoader_createResponse* response);
    // / Destroy this object
    virtual ::grpc::Status destroy(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest* request, ::google::protobuf::Empty* response);
    // / Initialize from settings stored in a supported node item (NT_TEX_IMAGE_TILES and NT_TEX_IMAGE_TILE_SET)
    // / Equivalent to calling updatePattern() and applyStoredSettings(), but it reads the source data from the
    // / passed in node item
    virtual ::grpc::Status loadFromNodeItem(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* request, ::google::protobuf::Empty* response);
    // / Store data in this object in a supported node item (NT_TEX_IMAGE_TILES and NT_TEX_IMAGE_TILE_SET)
    // / This does not evaluate the item
    virtual ::grpc::Status saveToNodeItem(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* request, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* response);
    // / Set from settings stored in a node
    virtual ::grpc::Status applyStoredSettings(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* request, ::google::protobuf::Empty* response);
    // / Given a file name, guess which pattern it may represent
    virtual ::grpc::Status inferSettingsFromFilename(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* request, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* response);
    // / Look for tiles in the file system
    virtual ::grpc::Status scanTiles(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* request, ::google::protobuf::Empty* response);
    // / Automatically resize a tile grid
    virtual ::grpc::Status automaticSizeGrid(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* request, ::google::protobuf::Empty* response);
    // / Get the current settings
    virtual ::grpc::Status getSettings(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* request, ::octaneapi::ApiTileGridLoader_getSettingsResponse* response);
    // / Change the settings stored in this object, and if the list of files is set, add or
    // / remove padding to it so that it covers the new grid size
    virtual ::grpc::Status updateSettings(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* request, ::google::protobuf::Empty* response);
    // / Get the list of files
    virtual ::grpc::Status getFiles(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest* request, ::octaneapi::ApiTileGridLoader_getFilesResponse* response);
    // / Populate the current list of files
    virtual ::grpc::Status setFiles(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest* request, ::google::protobuf::Empty* response);
    // / Check if a cell has a file assigned to it
    virtual ::grpc::Status hasFileInCell(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* request, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* response);
    // / For cells which aren't empty, return the file name
    virtual ::grpc::Status fileNameForCell(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* request, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* response);
    // / Count the number of valid files in the currently defined tile grid
    virtual ::grpc::Status count(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_countRequest* request, ::octaneapi::ApiTileGridLoader_countResponse* response);
    // / Updates the file name pattern
    virtual ::grpc::Status updatePattern(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* request, ::google::protobuf::Empty* response);
    // / Returns true if the pattern is empty
    virtual ::grpc::Status hasEmptyPattern(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* request, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* response);
    // / Returns the pattern as a string
    virtual ::grpc::Status patternString(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest* request, ::octaneapi::ApiTileGridLoader_patternStringResponse* response);
    // / True if the pattern contains any placeholders
    virtual ::grpc::Status hasPlaceholders(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* request, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* response);
    // / True if the pattern has any linear indexing (including UDIM)
    virtual ::grpc::Status hasIndex(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* request, ::octaneapi::ApiTileGridLoader_hasIndexResponse* response);
    // / True if the pattern has a UDIM placeholder
    virtual ::grpc::Status hasUDIM(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* request, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* response);
    // / True if the pattern uses two-dimensional indexing
    virtual ::grpc::Status hasUv(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest* request, ::octaneapi::ApiTileGridLoader_hasUvResponse* response);
    // / Sutstitute placeholders in the file name pattern with the given
    // / indices
    // /
    // / 
    virtual ::grpc::Status substitute(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest* request, ::octaneapi::ApiTileGridLoader_substituteResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_createRequest* /*request*/, ::octaneapi::ApiTileGridLoader_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_createRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_createResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_destroy() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_destroyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loadFromNodeItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loadFromNodeItem() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_loadFromNodeItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromNodeItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadFromNodeItem(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_saveToNodeItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_saveToNodeItem() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_saveToNodeItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToNodeItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* /*request*/, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveToNodeItem(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_applyStoredSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_applyStoredSettings() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_applyStoredSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status applyStoredSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestapplyStoredSettings(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_inferSettingsFromFilename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_inferSettingsFromFilename() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_inferSettingsFromFilename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status inferSettingsFromFilename(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* /*request*/, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestinferSettingsFromFilename(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_scanTiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_scanTiles() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_scanTiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status scanTiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestscanTiles(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_scanTilesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_automaticSizeGrid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_automaticSizeGrid() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_automaticSizeGrid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status automaticSizeGrid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestautomaticSizeGrid(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getSettings() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* /*request*/, ::octaneapi::ApiTileGridLoader_getSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSettings(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_getSettingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_getSettingsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_updateSettings() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_updateSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateSettings(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_updateSettingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getFiles() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_getFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_getFilesRequest* /*request*/, ::octaneapi::ApiTileGridLoader_getFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetFiles(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_getFilesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_getFilesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setFiles() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_setFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_setFilesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetFiles(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_setFilesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_hasFileInCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_hasFileInCell() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_hasFileInCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasFileInCell(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasFileInCell(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_fileNameForCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_fileNameForCell() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_fileNameForCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileNameForCell(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* /*request*/, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfileNameForCell(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_count : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_count() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_count() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status count(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_countRequest* /*request*/, ::octaneapi::ApiTileGridLoader_countResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcount(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_countRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_countResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updatePattern : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_updatePattern() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_updatePattern() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePattern(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdatePattern(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_updatePatternRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_hasEmptyPattern : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_hasEmptyPattern() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_hasEmptyPattern() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasEmptyPattern(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasEmptyPattern(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_patternString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_patternString() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_patternString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status patternString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_patternStringRequest* /*request*/, ::octaneapi::ApiTileGridLoader_patternStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpatternString(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_patternStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_patternStringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_hasPlaceholders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_hasPlaceholders() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_hasPlaceholders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasPlaceholders(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasPlaceholders(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_hasIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_hasIndex() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_hasIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasIndex(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasIndex(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_hasIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_hasIndexResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_hasUDIM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_hasUDIM() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_hasUDIM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasUDIM(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasUDIM(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_hasUDIMRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_hasUv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_hasUv() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_hasUv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasUv(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasUvRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasUvResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasUv(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_hasUvRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_hasUvResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_substitute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_substitute() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_substitute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status substitute(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_substituteRequest* /*request*/, ::octaneapi::ApiTileGridLoader_substituteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsubstitute(::grpc::ServerContext* context, ::octaneapi::ApiTileGridLoader_substituteRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiTileGridLoader_substituteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_create<WithAsyncMethod_destroy<WithAsyncMethod_loadFromNodeItem<WithAsyncMethod_saveToNodeItem<WithAsyncMethod_applyStoredSettings<WithAsyncMethod_inferSettingsFromFilename<WithAsyncMethod_scanTiles<WithAsyncMethod_automaticSizeGrid<WithAsyncMethod_getSettings<WithAsyncMethod_updateSettings<WithAsyncMethod_getFiles<WithAsyncMethod_setFiles<WithAsyncMethod_hasFileInCell<WithAsyncMethod_fileNameForCell<WithAsyncMethod_count<WithAsyncMethod_updatePattern<WithAsyncMethod_hasEmptyPattern<WithAsyncMethod_patternString<WithAsyncMethod_hasPlaceholders<WithAsyncMethod_hasIndex<WithAsyncMethod_hasUDIM<WithAsyncMethod_hasUv<WithAsyncMethod_substitute<Service > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_create() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_createRequest, ::octaneapi::ApiTileGridLoader_createResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_createRequest* request, ::octaneapi::ApiTileGridLoader_createResponse* response) { return this->create(context, request, response); }));}
    void SetMessageAllocatorFor_create(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_createRequest, ::octaneapi::ApiTileGridLoader_createResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_createRequest, ::octaneapi::ApiTileGridLoader_createResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_createRequest* /*request*/, ::octaneapi::ApiTileGridLoader_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_createRequest* /*request*/, ::octaneapi::ApiTileGridLoader_createResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_destroyRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest* request, ::google::protobuf::Empty* response) { return this->destroy(context, request, response); }));}
    void SetMessageAllocatorFor_destroy(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_destroyRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_destroyRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_loadFromNodeItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_loadFromNodeItem() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* request, ::google::protobuf::Empty* response) { return this->loadFromNodeItem(context, request, response); }));}
    void SetMessageAllocatorFor_loadFromNodeItem(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_loadFromNodeItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromNodeItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadFromNodeItem(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_saveToNodeItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_saveToNodeItem() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* request, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* response) { return this->saveToNodeItem(context, request, response); }));}
    void SetMessageAllocatorFor_saveToNodeItem(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_saveToNodeItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToNodeItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* /*request*/, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* saveToNodeItem(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* /*request*/, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_applyStoredSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_applyStoredSettings() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* request, ::google::protobuf::Empty* response) { return this->applyStoredSettings(context, request, response); }));}
    void SetMessageAllocatorFor_applyStoredSettings(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_applyStoredSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status applyStoredSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* applyStoredSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_inferSettingsFromFilename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_inferSettingsFromFilename() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* request, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* response) { return this->inferSettingsFromFilename(context, request, response); }));}
    void SetMessageAllocatorFor_inferSettingsFromFilename(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_inferSettingsFromFilename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status inferSettingsFromFilename(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* /*request*/, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* inferSettingsFromFilename(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* /*request*/, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_scanTiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_scanTiles() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_scanTilesRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* request, ::google::protobuf::Empty* response) { return this->scanTiles(context, request, response); }));}
    void SetMessageAllocatorFor_scanTiles(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_scanTilesRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_scanTilesRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_scanTiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status scanTiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* scanTiles(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_automaticSizeGrid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_automaticSizeGrid() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* request, ::google::protobuf::Empty* response) { return this->automaticSizeGrid(context, request, response); }));}
    void SetMessageAllocatorFor_automaticSizeGrid(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_automaticSizeGrid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status automaticSizeGrid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* automaticSizeGrid(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getSettings() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_getSettingsRequest, ::octaneapi::ApiTileGridLoader_getSettingsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* request, ::octaneapi::ApiTileGridLoader_getSettingsResponse* response) { return this->getSettings(context, request, response); }));}
    void SetMessageAllocatorFor_getSettings(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_getSettingsRequest, ::octaneapi::ApiTileGridLoader_getSettingsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_getSettingsRequest, ::octaneapi::ApiTileGridLoader_getSettingsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* /*request*/, ::octaneapi::ApiTileGridLoader_getSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* /*request*/, ::octaneapi::ApiTileGridLoader_getSettingsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_updateSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_updateSettings() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_updateSettingsRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* request, ::google::protobuf::Empty* response) { return this->updateSettings(context, request, response); }));}
    void SetMessageAllocatorFor_updateSettings(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_updateSettingsRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_updateSettingsRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_updateSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updateSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getFiles() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_getFilesRequest, ::octaneapi::ApiTileGridLoader_getFilesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest* request, ::octaneapi::ApiTileGridLoader_getFilesResponse* response) { return this->getFiles(context, request, response); }));}
    void SetMessageAllocatorFor_getFiles(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_getFilesRequest, ::octaneapi::ApiTileGridLoader_getFilesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_getFilesRequest, ::octaneapi::ApiTileGridLoader_getFilesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_getFilesRequest* /*request*/, ::octaneapi::ApiTileGridLoader_getFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_getFilesRequest* /*request*/, ::octaneapi::ApiTileGridLoader_getFilesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setFiles() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_setFilesRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest* request, ::google::protobuf::Empty* response) { return this->setFiles(context, request, response); }));}
    void SetMessageAllocatorFor_setFiles(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_setFilesRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_setFilesRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_setFilesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_setFilesRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_hasFileInCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_hasFileInCell() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_hasFileInCellRequest, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* request, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* response) { return this->hasFileInCell(context, request, response); }));}
    void SetMessageAllocatorFor_hasFileInCell(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_hasFileInCellRequest, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_hasFileInCellRequest, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_hasFileInCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasFileInCell(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasFileInCell(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_fileNameForCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_fileNameForCell() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_fileNameForCellRequest, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* request, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* response) { return this->fileNameForCell(context, request, response); }));}
    void SetMessageAllocatorFor_fileNameForCell(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_fileNameForCellRequest, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_fileNameForCellRequest, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_fileNameForCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileNameForCell(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* /*request*/, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* fileNameForCell(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* /*request*/, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_count : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_count() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_countRequest, ::octaneapi::ApiTileGridLoader_countResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_countRequest* request, ::octaneapi::ApiTileGridLoader_countResponse* response) { return this->count(context, request, response); }));}
    void SetMessageAllocatorFor_count(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_countRequest, ::octaneapi::ApiTileGridLoader_countResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_countRequest, ::octaneapi::ApiTileGridLoader_countResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_count() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status count(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_countRequest* /*request*/, ::octaneapi::ApiTileGridLoader_countResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* count(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_countRequest* /*request*/, ::octaneapi::ApiTileGridLoader_countResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_updatePattern : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_updatePattern() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_updatePatternRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* request, ::google::protobuf::Empty* response) { return this->updatePattern(context, request, response); }));}
    void SetMessageAllocatorFor_updatePattern(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_updatePatternRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_updatePatternRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_updatePattern() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePattern(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updatePattern(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_hasEmptyPattern : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_hasEmptyPattern() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* request, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* response) { return this->hasEmptyPattern(context, request, response); }));}
    void SetMessageAllocatorFor_hasEmptyPattern(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_hasEmptyPattern() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasEmptyPattern(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasEmptyPattern(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_patternString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_patternString() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_patternStringRequest, ::octaneapi::ApiTileGridLoader_patternStringResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest* request, ::octaneapi::ApiTileGridLoader_patternStringResponse* response) { return this->patternString(context, request, response); }));}
    void SetMessageAllocatorFor_patternString(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_patternStringRequest, ::octaneapi::ApiTileGridLoader_patternStringResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_patternStringRequest, ::octaneapi::ApiTileGridLoader_patternStringResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_patternString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status patternString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_patternStringRequest* /*request*/, ::octaneapi::ApiTileGridLoader_patternStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* patternString(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_patternStringRequest* /*request*/, ::octaneapi::ApiTileGridLoader_patternStringResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_hasPlaceholders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_hasPlaceholders() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* request, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* response) { return this->hasPlaceholders(context, request, response); }));}
    void SetMessageAllocatorFor_hasPlaceholders(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_hasPlaceholders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasPlaceholders(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasPlaceholders(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_hasIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_hasIndex() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_hasIndexRequest, ::octaneapi::ApiTileGridLoader_hasIndexResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* request, ::octaneapi::ApiTileGridLoader_hasIndexResponse* response) { return this->hasIndex(context, request, response); }));}
    void SetMessageAllocatorFor_hasIndex(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_hasIndexRequest, ::octaneapi::ApiTileGridLoader_hasIndexResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_hasIndexRequest, ::octaneapi::ApiTileGridLoader_hasIndexResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_hasIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasIndex(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasIndexResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_hasUDIM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_hasUDIM() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_hasUDIMRequest, ::octaneapi::ApiTileGridLoader_hasUDIMResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* request, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* response) { return this->hasUDIM(context, request, response); }));}
    void SetMessageAllocatorFor_hasUDIM(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_hasUDIMRequest, ::octaneapi::ApiTileGridLoader_hasUDIMResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_hasUDIMRequest, ::octaneapi::ApiTileGridLoader_hasUDIMResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_hasUDIM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasUDIM(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasUDIM(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_hasUv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_hasUv() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_hasUvRequest, ::octaneapi::ApiTileGridLoader_hasUvResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest* request, ::octaneapi::ApiTileGridLoader_hasUvResponse* response) { return this->hasUv(context, request, response); }));}
    void SetMessageAllocatorFor_hasUv(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_hasUvRequest, ::octaneapi::ApiTileGridLoader_hasUvResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_hasUvRequest, ::octaneapi::ApiTileGridLoader_hasUvResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_hasUv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasUv(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasUvRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasUvResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasUv(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasUvRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasUvResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_substitute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_substitute() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_substituteRequest, ::octaneapi::ApiTileGridLoader_substituteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest* request, ::octaneapi::ApiTileGridLoader_substituteResponse* response) { return this->substitute(context, request, response); }));}
    void SetMessageAllocatorFor_substitute(
        ::grpc::MessageAllocator< ::octaneapi::ApiTileGridLoader_substituteRequest, ::octaneapi::ApiTileGridLoader_substituteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiTileGridLoader_substituteRequest, ::octaneapi::ApiTileGridLoader_substituteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_substitute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status substitute(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_substituteRequest* /*request*/, ::octaneapi::ApiTileGridLoader_substituteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* substitute(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_substituteRequest* /*request*/, ::octaneapi::ApiTileGridLoader_substituteResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_create<WithCallbackMethod_destroy<WithCallbackMethod_loadFromNodeItem<WithCallbackMethod_saveToNodeItem<WithCallbackMethod_applyStoredSettings<WithCallbackMethod_inferSettingsFromFilename<WithCallbackMethod_scanTiles<WithCallbackMethod_automaticSizeGrid<WithCallbackMethod_getSettings<WithCallbackMethod_updateSettings<WithCallbackMethod_getFiles<WithCallbackMethod_setFiles<WithCallbackMethod_hasFileInCell<WithCallbackMethod_fileNameForCell<WithCallbackMethod_count<WithCallbackMethod_updatePattern<WithCallbackMethod_hasEmptyPattern<WithCallbackMethod_patternString<WithCallbackMethod_hasPlaceholders<WithCallbackMethod_hasIndex<WithCallbackMethod_hasUDIM<WithCallbackMethod_hasUv<WithCallbackMethod_substitute<Service > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_createRequest* /*request*/, ::octaneapi::ApiTileGridLoader_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_destroy() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loadFromNodeItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loadFromNodeItem() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_loadFromNodeItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromNodeItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_saveToNodeItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_saveToNodeItem() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_saveToNodeItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToNodeItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* /*request*/, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_applyStoredSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_applyStoredSettings() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_applyStoredSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status applyStoredSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_inferSettingsFromFilename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_inferSettingsFromFilename() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_inferSettingsFromFilename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status inferSettingsFromFilename(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* /*request*/, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_scanTiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_scanTiles() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_scanTiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status scanTiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_automaticSizeGrid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_automaticSizeGrid() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_automaticSizeGrid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status automaticSizeGrid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getSettings() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* /*request*/, ::octaneapi::ApiTileGridLoader_getSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_updateSettings() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_updateSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getFiles() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_getFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_getFilesRequest* /*request*/, ::octaneapi::ApiTileGridLoader_getFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setFiles() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_setFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_setFilesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_hasFileInCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_hasFileInCell() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_hasFileInCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasFileInCell(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_fileNameForCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_fileNameForCell() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_fileNameForCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileNameForCell(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* /*request*/, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_count : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_count() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_count() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status count(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_countRequest* /*request*/, ::octaneapi::ApiTileGridLoader_countResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updatePattern : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_updatePattern() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_updatePattern() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePattern(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_hasEmptyPattern : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_hasEmptyPattern() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_hasEmptyPattern() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasEmptyPattern(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_patternString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_patternString() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_patternString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status patternString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_patternStringRequest* /*request*/, ::octaneapi::ApiTileGridLoader_patternStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_hasPlaceholders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_hasPlaceholders() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_hasPlaceholders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasPlaceholders(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_hasIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_hasIndex() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_hasIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasIndex(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_hasUDIM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_hasUDIM() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_hasUDIM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasUDIM(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_hasUv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_hasUv() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_hasUv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasUv(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasUvRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasUvResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_substitute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_substitute() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_substitute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status substitute(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_substituteRequest* /*request*/, ::octaneapi::ApiTileGridLoader_substituteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_createRequest* /*request*/, ::octaneapi::ApiTileGridLoader_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_destroy() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_loadFromNodeItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loadFromNodeItem() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_loadFromNodeItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromNodeItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadFromNodeItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_saveToNodeItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_saveToNodeItem() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_saveToNodeItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToNodeItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* /*request*/, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveToNodeItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_applyStoredSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_applyStoredSettings() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_applyStoredSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status applyStoredSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestapplyStoredSettings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_inferSettingsFromFilename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_inferSettingsFromFilename() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_inferSettingsFromFilename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status inferSettingsFromFilename(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* /*request*/, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestinferSettingsFromFilename(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_scanTiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_scanTiles() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_scanTiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status scanTiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestscanTiles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_automaticSizeGrid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_automaticSizeGrid() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_automaticSizeGrid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status automaticSizeGrid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestautomaticSizeGrid(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getSettings() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* /*request*/, ::octaneapi::ApiTileGridLoader_getSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSettings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updateSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_updateSettings() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_updateSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateSettings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getFiles() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_getFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_getFilesRequest* /*request*/, ::octaneapi::ApiTileGridLoader_getFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetFiles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setFiles() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_setFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_setFilesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetFiles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_hasFileInCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_hasFileInCell() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_hasFileInCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasFileInCell(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasFileInCell(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_fileNameForCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_fileNameForCell() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_fileNameForCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileNameForCell(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* /*request*/, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfileNameForCell(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_count : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_count() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_count() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status count(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_countRequest* /*request*/, ::octaneapi::ApiTileGridLoader_countResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updatePattern : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_updatePattern() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_updatePattern() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePattern(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdatePattern(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_hasEmptyPattern : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_hasEmptyPattern() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_hasEmptyPattern() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasEmptyPattern(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasEmptyPattern(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_patternString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_patternString() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_patternString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status patternString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_patternStringRequest* /*request*/, ::octaneapi::ApiTileGridLoader_patternStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpatternString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_hasPlaceholders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_hasPlaceholders() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_hasPlaceholders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasPlaceholders(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasPlaceholders(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_hasIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_hasIndex() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_hasIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasIndex(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_hasUDIM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_hasUDIM() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_hasUDIM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasUDIM(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasUDIM(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_hasUv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_hasUv() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_hasUv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasUv(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasUvRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasUvResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasUv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_substitute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_substitute() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_substitute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status substitute(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_substituteRequest* /*request*/, ::octaneapi::ApiTileGridLoader_substituteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsubstitute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_create() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->create(context, request, response); }));
    }
    ~WithRawCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_createRequest* /*request*/, ::octaneapi::ApiTileGridLoader_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->destroy(context, request, response); }));
    }
    ~WithRawCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_loadFromNodeItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_loadFromNodeItem() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loadFromNodeItem(context, request, response); }));
    }
    ~WithRawCallbackMethod_loadFromNodeItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromNodeItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadFromNodeItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_saveToNodeItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_saveToNodeItem() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->saveToNodeItem(context, request, response); }));
    }
    ~WithRawCallbackMethod_saveToNodeItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToNodeItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* /*request*/, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* saveToNodeItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_applyStoredSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_applyStoredSettings() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->applyStoredSettings(context, request, response); }));
    }
    ~WithRawCallbackMethod_applyStoredSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status applyStoredSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* applyStoredSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_inferSettingsFromFilename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_inferSettingsFromFilename() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->inferSettingsFromFilename(context, request, response); }));
    }
    ~WithRawCallbackMethod_inferSettingsFromFilename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status inferSettingsFromFilename(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* /*request*/, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* inferSettingsFromFilename(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_scanTiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_scanTiles() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->scanTiles(context, request, response); }));
    }
    ~WithRawCallbackMethod_scanTiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status scanTiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* scanTiles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_automaticSizeGrid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_automaticSizeGrid() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->automaticSizeGrid(context, request, response); }));
    }
    ~WithRawCallbackMethod_automaticSizeGrid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status automaticSizeGrid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* automaticSizeGrid(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getSettings() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getSettings(context, request, response); }));
    }
    ~WithRawCallbackMethod_getSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* /*request*/, ::octaneapi::ApiTileGridLoader_getSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_updateSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_updateSettings() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->updateSettings(context, request, response); }));
    }
    ~WithRawCallbackMethod_updateSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updateSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getFiles() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getFiles(context, request, response); }));
    }
    ~WithRawCallbackMethod_getFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_getFilesRequest* /*request*/, ::octaneapi::ApiTileGridLoader_getFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setFiles() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setFiles(context, request, response); }));
    }
    ~WithRawCallbackMethod_setFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_setFilesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_hasFileInCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_hasFileInCell() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->hasFileInCell(context, request, response); }));
    }
    ~WithRawCallbackMethod_hasFileInCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasFileInCell(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasFileInCell(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_fileNameForCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_fileNameForCell() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->fileNameForCell(context, request, response); }));
    }
    ~WithRawCallbackMethod_fileNameForCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileNameForCell(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* /*request*/, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* fileNameForCell(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_count : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_count() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->count(context, request, response); }));
    }
    ~WithRawCallbackMethod_count() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status count(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_countRequest* /*request*/, ::octaneapi::ApiTileGridLoader_countResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* count(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_updatePattern : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_updatePattern() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->updatePattern(context, request, response); }));
    }
    ~WithRawCallbackMethod_updatePattern() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePattern(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updatePattern(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_hasEmptyPattern : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_hasEmptyPattern() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->hasEmptyPattern(context, request, response); }));
    }
    ~WithRawCallbackMethod_hasEmptyPattern() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasEmptyPattern(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasEmptyPattern(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_patternString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_patternString() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->patternString(context, request, response); }));
    }
    ~WithRawCallbackMethod_patternString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status patternString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_patternStringRequest* /*request*/, ::octaneapi::ApiTileGridLoader_patternStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* patternString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_hasPlaceholders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_hasPlaceholders() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->hasPlaceholders(context, request, response); }));
    }
    ~WithRawCallbackMethod_hasPlaceholders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasPlaceholders(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasPlaceholders(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_hasIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_hasIndex() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->hasIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_hasIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasIndex(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_hasUDIM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_hasUDIM() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->hasUDIM(context, request, response); }));
    }
    ~WithRawCallbackMethod_hasUDIM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasUDIM(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasUDIM(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_hasUv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_hasUv() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->hasUv(context, request, response); }));
    }
    ~WithRawCallbackMethod_hasUv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasUv(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasUvRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasUvResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasUv(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_substitute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_substitute() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->substitute(context, request, response); }));
    }
    ~WithRawCallbackMethod_substitute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status substitute(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_substituteRequest* /*request*/, ::octaneapi::ApiTileGridLoader_substituteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* substitute(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_createRequest, ::octaneapi::ApiTileGridLoader_createResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_createRequest, ::octaneapi::ApiTileGridLoader_createResponse>* streamer) {
                       return this->Streamedcreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_createRequest* /*request*/, ::octaneapi::ApiTileGridLoader_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_createRequest,::octaneapi::ApiTileGridLoader_createResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_destroy() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_destroyRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_destroyRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streameddestroy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddestroy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_destroyRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loadFromNodeItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loadFromNodeItem() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedloadFromNodeItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loadFromNodeItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loadFromNodeItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloadFromNodeItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_saveToNodeItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_saveToNodeItem() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>* streamer) {
                       return this->StreamedsaveToNodeItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_saveToNodeItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status saveToNodeItem(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* /*request*/, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsaveToNodeItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest,::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_applyStoredSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_applyStoredSettings() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedapplyStoredSettings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_applyStoredSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status applyStoredSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedapplyStoredSettings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_inferSettingsFromFilename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_inferSettingsFromFilename() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>* streamer) {
                       return this->StreamedinferSettingsFromFilename(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_inferSettingsFromFilename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status inferSettingsFromFilename(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* /*request*/, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedinferSettingsFromFilename(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest,::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_scanTiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_scanTiles() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_scanTilesRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_scanTilesRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedscanTiles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_scanTiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status scanTiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedscanTiles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_scanTilesRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_automaticSizeGrid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_automaticSizeGrid() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedautomaticSizeGrid(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_automaticSizeGrid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status automaticSizeGrid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedautomaticSizeGrid(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getSettings() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_getSettingsRequest, ::octaneapi::ApiTileGridLoader_getSettingsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_getSettingsRequest, ::octaneapi::ApiTileGridLoader_getSettingsResponse>* streamer) {
                       return this->StreamedgetSettings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* /*request*/, ::octaneapi::ApiTileGridLoader_getSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetSettings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_getSettingsRequest,::octaneapi::ApiTileGridLoader_getSettingsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updateSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_updateSettings() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_updateSettingsRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_updateSettingsRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedupdateSettings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_updateSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updateSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdateSettings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_updateSettingsRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getFiles() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_getFilesRequest, ::octaneapi::ApiTileGridLoader_getFilesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_getFilesRequest, ::octaneapi::ApiTileGridLoader_getFilesResponse>* streamer) {
                       return this->StreamedgetFiles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getFiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_getFilesRequest* /*request*/, ::octaneapi::ApiTileGridLoader_getFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetFiles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_getFilesRequest,::octaneapi::ApiTileGridLoader_getFilesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setFiles() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_setFilesRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_setFilesRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetFiles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setFiles(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_setFilesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetFiles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_setFilesRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_hasFileInCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_hasFileInCell() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_hasFileInCellRequest, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_hasFileInCellRequest, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>* streamer) {
                       return this->StreamedhasFileInCell(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_hasFileInCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status hasFileInCell(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedhasFileInCell(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_hasFileInCellRequest,::octaneapi::ApiTileGridLoader_hasFileInCellResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_fileNameForCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_fileNameForCell() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_fileNameForCellRequest, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_fileNameForCellRequest, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>* streamer) {
                       return this->StreamedfileNameForCell(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_fileNameForCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status fileNameForCell(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* /*request*/, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedfileNameForCell(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_fileNameForCellRequest,::octaneapi::ApiTileGridLoader_fileNameForCellResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_count : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_count() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_countRequest, ::octaneapi::ApiTileGridLoader_countResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_countRequest, ::octaneapi::ApiTileGridLoader_countResponse>* streamer) {
                       return this->Streamedcount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_count() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status count(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_countRequest* /*request*/, ::octaneapi::ApiTileGridLoader_countResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_countRequest,::octaneapi::ApiTileGridLoader_countResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updatePattern : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_updatePattern() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_updatePatternRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_updatePatternRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedupdatePattern(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_updatePattern() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updatePattern(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdatePattern(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_updatePatternRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_hasEmptyPattern : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_hasEmptyPattern() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>* streamer) {
                       return this->StreamedhasEmptyPattern(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_hasEmptyPattern() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status hasEmptyPattern(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedhasEmptyPattern(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest,::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_patternString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_patternString() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_patternStringRequest, ::octaneapi::ApiTileGridLoader_patternStringResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_patternStringRequest, ::octaneapi::ApiTileGridLoader_patternStringResponse>* streamer) {
                       return this->StreamedpatternString(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_patternString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status patternString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_patternStringRequest* /*request*/, ::octaneapi::ApiTileGridLoader_patternStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpatternString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_patternStringRequest,::octaneapi::ApiTileGridLoader_patternStringResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_hasPlaceholders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_hasPlaceholders() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>* streamer) {
                       return this->StreamedhasPlaceholders(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_hasPlaceholders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status hasPlaceholders(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedhasPlaceholders(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest,::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_hasIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_hasIndex() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_hasIndexRequest, ::octaneapi::ApiTileGridLoader_hasIndexResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_hasIndexRequest, ::octaneapi::ApiTileGridLoader_hasIndexResponse>* streamer) {
                       return this->StreamedhasIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_hasIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status hasIndex(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedhasIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_hasIndexRequest,::octaneapi::ApiTileGridLoader_hasIndexResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_hasUDIM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_hasUDIM() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_hasUDIMRequest, ::octaneapi::ApiTileGridLoader_hasUDIMResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_hasUDIMRequest, ::octaneapi::ApiTileGridLoader_hasUDIMResponse>* streamer) {
                       return this->StreamedhasUDIM(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_hasUDIM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status hasUDIM(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedhasUDIM(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_hasUDIMRequest,::octaneapi::ApiTileGridLoader_hasUDIMResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_hasUv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_hasUv() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_hasUvRequest, ::octaneapi::ApiTileGridLoader_hasUvResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_hasUvRequest, ::octaneapi::ApiTileGridLoader_hasUvResponse>* streamer) {
                       return this->StreamedhasUv(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_hasUv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status hasUv(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_hasUvRequest* /*request*/, ::octaneapi::ApiTileGridLoader_hasUvResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedhasUv(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_hasUvRequest,::octaneapi::ApiTileGridLoader_hasUvResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_substitute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_substitute() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiTileGridLoader_substituteRequest, ::octaneapi::ApiTileGridLoader_substituteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiTileGridLoader_substituteRequest, ::octaneapi::ApiTileGridLoader_substituteResponse>* streamer) {
                       return this->Streamedsubstitute(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_substitute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status substitute(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiTileGridLoader_substituteRequest* /*request*/, ::octaneapi::ApiTileGridLoader_substituteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsubstitute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiTileGridLoader_substituteRequest,::octaneapi::ApiTileGridLoader_substituteResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_loadFromNodeItem<WithStreamedUnaryMethod_saveToNodeItem<WithStreamedUnaryMethod_applyStoredSettings<WithStreamedUnaryMethod_inferSettingsFromFilename<WithStreamedUnaryMethod_scanTiles<WithStreamedUnaryMethod_automaticSizeGrid<WithStreamedUnaryMethod_getSettings<WithStreamedUnaryMethod_updateSettings<WithStreamedUnaryMethod_getFiles<WithStreamedUnaryMethod_setFiles<WithStreamedUnaryMethod_hasFileInCell<WithStreamedUnaryMethod_fileNameForCell<WithStreamedUnaryMethod_count<WithStreamedUnaryMethod_updatePattern<WithStreamedUnaryMethod_hasEmptyPattern<WithStreamedUnaryMethod_patternString<WithStreamedUnaryMethod_hasPlaceholders<WithStreamedUnaryMethod_hasIndex<WithStreamedUnaryMethod_hasUDIM<WithStreamedUnaryMethod_hasUv<WithStreamedUnaryMethod_substitute<Service > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_loadFromNodeItem<WithStreamedUnaryMethod_saveToNodeItem<WithStreamedUnaryMethod_applyStoredSettings<WithStreamedUnaryMethod_inferSettingsFromFilename<WithStreamedUnaryMethod_scanTiles<WithStreamedUnaryMethod_automaticSizeGrid<WithStreamedUnaryMethod_getSettings<WithStreamedUnaryMethod_updateSettings<WithStreamedUnaryMethod_getFiles<WithStreamedUnaryMethod_setFiles<WithStreamedUnaryMethod_hasFileInCell<WithStreamedUnaryMethod_fileNameForCell<WithStreamedUnaryMethod_count<WithStreamedUnaryMethod_updatePattern<WithStreamedUnaryMethod_hasEmptyPattern<WithStreamedUnaryMethod_patternString<WithStreamedUnaryMethod_hasPlaceholders<WithStreamedUnaryMethod_hasIndex<WithStreamedUnaryMethod_hasUDIM<WithStreamedUnaryMethod_hasUv<WithStreamedUnaryMethod_substitute<Service > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apitilegrid_2eproto__INCLUDED
