// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apifilename.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apifilename_2eproto__INCLUDED
#define GRPC_apifilename_2eproto__INCLUDED

#include "apifilename.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiFileName' from 'apifilename.h'
class ApiFileNameService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiFileNameService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Creates a new ApiFileName instance
    virtual ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest& request, ::octaneapi::ApiFileName_createResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    // / Destroys the ApiFileName object created by create() and other getters below
    virtual ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    // / Assigns a new file name path to this instance
    virtual ::grpc::Status set(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncset(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncset(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetRaw(context, request, cq));
    }
    // / Clears the instance
    virtual ::grpc::Status clear(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncclear(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncclearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncclear(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncclearRaw(context, request, cq));
    }
    // / Returns TRUE if this is an empty instance, i
    virtual ::grpc::Status isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest& request, ::octaneapi::ApiFileName_isEmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isEmptyResponse>> AsyncisEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isEmptyResponse>>(AsyncisEmptyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isEmptyResponse>> PrepareAsyncisEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isEmptyResponse>>(PrepareAsyncisEmptyRaw(context, request, cq));
    }
    // / Returns TRUE if the stored file name is absolute, i
    virtual ::grpc::Status isAbsolute(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest& request, ::octaneapi::ApiFileName_isAbsoluteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isAbsoluteResponse>> AsyncisAbsolute(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isAbsoluteResponse>>(AsyncisAbsoluteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isAbsoluteResponse>> PrepareAsyncisAbsolute(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isAbsoluteResponse>>(PrepareAsyncisAbsoluteRaw(context, request, cq));
    }
    // / Returns TRUE if the stored file name is relative
    virtual ::grpc::Status isRelative(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest& request, ::octaneapi::ApiFileName_isRelativeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isRelativeResponse>> AsyncisRelative(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isRelativeResponse>>(AsyncisRelativeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isRelativeResponse>> PrepareAsyncisRelative(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isRelativeResponse>>(PrepareAsyncisRelativeRaw(context, request, cq));
    }
    // / Returns the parent directory of the file name (including any root, like drive/server)
    virtual ::grpc::Status getParent(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest& request, ::octaneapi::ApiFileName_getParentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getParentResponse>> AsyncgetParent(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getParentResponse>>(AsyncgetParentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getParentResponse>> PrepareAsyncgetParent(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getParentResponse>>(PrepareAsyncgetParentRaw(context, request, cq));
    }
    // / Returns a file name of the file part (without root and directory)
    virtual ::grpc::Status getFileOnly(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest& request, ::octaneapi::ApiFileName_getFileOnlyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFileOnlyResponse>> AsyncgetFileOnly(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFileOnlyResponse>>(AsyncgetFileOnlyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFileOnlyResponse>> PrepareAsyncgetFileOnly(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFileOnlyResponse>>(PrepareAsyncgetFileOnlyRaw(context, request, cq));
    }
    // / Returns the full file name as string
    virtual ::grpc::Status getFullString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest& request, ::octaneapi::ApiFileName_getFullStringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFullStringResponse>> AsyncgetFullString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFullStringResponse>>(AsyncgetFullStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFullStringResponse>> PrepareAsyncgetFullString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFullStringResponse>>(PrepareAsyncgetFullStringRaw(context, request, cq));
    }
    // / Returns the root of the file name as string (only != "" on Windows)
    virtual ::grpc::Status getRootString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest& request, ::octaneapi::ApiFileName_getRootStringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getRootStringResponse>> AsyncgetRootString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getRootStringResponse>>(AsyncgetRootStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getRootStringResponse>> PrepareAsyncgetRootString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getRootStringResponse>>(PrepareAsyncgetRootStringRaw(context, request, cq));
    }
    // / Returns the directory part of the file name as string (including the root part on Windows)
    virtual ::grpc::Status getParentString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest& request, ::octaneapi::ApiFileName_getParentStringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getParentStringResponse>> AsyncgetParentString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getParentStringResponse>>(AsyncgetParentStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getParentStringResponse>> PrepareAsyncgetParentString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getParentStringResponse>>(PrepareAsyncgetParentStringRaw(context, request, cq));
    }
    // / Returns the file part of the instance as string
    virtual ::grpc::Status getFileString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest& request, ::octaneapi::ApiFileName_getFileStringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFileStringResponse>> AsyncgetFileString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFileStringResponse>>(AsyncgetFileStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFileStringResponse>> PrepareAsyncgetFileString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFileStringResponse>>(PrepareAsyncgetFileStringRaw(context, request, cq));
    }
    // / Returns the suffix of the last token (i
    virtual ::grpc::Status getSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest& request, ::octaneapi::ApiFileName_getSuffixResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getSuffixResponse>> AsyncgetSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getSuffixResponse>>(AsyncgetSuffixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getSuffixResponse>> PrepareAsyncgetSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getSuffixResponse>>(PrepareAsyncgetSuffixRaw(context, request, cq));
    }
    // / Sets the suffix of the last token (i
    virtual ::grpc::Status setSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetSuffixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetSuffixRaw(context, request, cq));
    }
    // / Similar to setSuffix(), but returning a new FileName instead
    virtual ::grpc::Status withSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest& request, ::octaneapi::ApiFileName_withSuffixResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_withSuffixResponse>> AsyncwithSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_withSuffixResponse>>(AsyncwithSuffixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_withSuffixResponse>> PrepareAsyncwithSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_withSuffixResponse>>(PrepareAsyncwithSuffixRaw(context, request, cq));
    }
    // / Makes this file name relative to the specified file name
    virtual ::grpc::Status makeRelativeTo(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest& request, ::octaneapi::ApiFileName_makeRelativeToResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_makeRelativeToResponse>> AsyncmakeRelativeTo(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_makeRelativeToResponse>>(AsyncmakeRelativeToRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_makeRelativeToResponse>> PrepareAsyncmakeRelativeTo(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_makeRelativeToResponse>>(PrepareAsyncmakeRelativeToRaw(context, request, cq));
    }
    // / Returns the concatenation of this file name with another
    virtual ::grpc::Status getConcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest& request, ::octaneapi::ApiFileName_getConcatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getConcatResponse>> AsyncgetConcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getConcatResponse>>(AsyncgetConcatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getConcatResponse>> PrepareAsyncgetConcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getConcatResponse>>(PrepareAsyncgetConcatRaw(context, request, cq));
    }
    // / Concats other filename to this file name
    virtual ::grpc::Status concat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncconcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncconcatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncconcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncconcatRaw(context, request, cq));
    }
    // / Returns TRUE if this instance is equal to the other one
    virtual ::grpc::Status equals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest& request, ::octaneapi::ApiFileName_equalsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_equalsResponse>> Asyncequals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_equalsResponse>>(AsyncequalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_equalsResponse>> PrepareAsyncequals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_equalsResponse>>(PrepareAsyncequalsRaw(context, request, cq));
    }
    // / Returns TRUE if this instance is not equal to the other one
    virtual ::grpc::Status notEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest& request, ::octaneapi::ApiFileName_notEqualsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_notEqualsResponse>> AsyncnotEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_notEqualsResponse>>(AsyncnotEqualsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_notEqualsResponse>> PrepareAsyncnotEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_notEqualsResponse>>(PrepareAsyncnotEqualsRaw(context, request, cq));
    }
    // / Returns TRUE if this instance is "less" than the other one (useful for ordered maps)
    virtual ::grpc::Status lessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest& request, ::octaneapi::ApiFileName_lessThanResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_lessThanResponse>> AsynclessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_lessThanResponse>>(AsynclessThanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_lessThanResponse>> PrepareAsynclessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_lessThanResponse>>(PrepareAsynclessThanRaw(context, request, cq));
    }
    // / Returns TRUE if this instance is equal to the other one, using a case-sensitive comparison
    // / on all platforms
    virtual ::grpc::Status exactlyEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest& request, ::octaneapi::ApiFileName_exactlyEqualsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_exactlyEqualsResponse>> AsyncexactlyEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_exactlyEqualsResponse>>(AsyncexactlyEqualsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_exactlyEqualsResponse>> PrepareAsyncexactlyEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_exactlyEqualsResponse>>(PrepareAsyncexactlyEqualsRaw(context, request, cq));
    }
    // / Returns TRUE if this instance is "less" than the other one, using a case-sensitive comparison
    // / on all platforms
    virtual ::grpc::Status exactlyLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest& request, ::octaneapi::ApiFileName_exactlyLessThanResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_exactlyLessThanResponse>> AsyncexactlyLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_exactlyLessThanResponse>>(AsyncexactlyLessThanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_exactlyLessThanResponse>> PrepareAsyncexactlyLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_exactlyLessThanResponse>>(PrepareAsyncexactlyLessThanRaw(context, request, cq));
    }
    // / Appends some text to the file name of the last token, but makes sure
    // / that it is inserted in front of the suffix (if the last token has one)
    virtual ::grpc::Status appendToFileName(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncappendToFileName(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncappendToFileNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncappendToFileName(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncappendToFileNameRaw(context, request, cq));
    }
    // / Returns TRUE if this file name exists as directory OR as file
    virtual ::grpc::Status exists(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest& request, ::octaneapi::ApiFileName_existsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsResponse>> Asyncexists(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsResponse>>(AsyncexistsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsResponse>> PrepareAsyncexists(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsResponse>>(PrepareAsyncexistsRaw(context, request, cq));
    }
    // / Returns TRUE if this file name exists and is a file
    virtual ::grpc::Status existsAsFile(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest& request, ::octaneapi::ApiFileName_existsAsFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsAsFileResponse>> AsyncexistsAsFile(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsAsFileResponse>>(AsyncexistsAsFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsAsFileResponse>> PrepareAsyncexistsAsFile(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsAsFileResponse>>(PrepareAsyncexistsAsFileRaw(context, request, cq));
    }
    // / Returns TRUE if this file name exists and is a file
    virtual ::grpc::Status existsAsDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest& request, ::octaneapi::ApiFileName_existsAsDirectoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsAsDirectoryResponse>> AsyncexistsAsDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsAsDirectoryResponse>>(AsyncexistsAsDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsAsDirectoryResponse>> PrepareAsyncexistsAsDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsAsDirectoryResponse>>(PrepareAsyncexistsAsDirectoryRaw(context, request, cq));
    }
    // / Returns TRUE if we can write to the specified file name
    virtual ::grpc::Status hasWriteAccess(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest& request, ::octaneapi::ApiFileName_hasWriteAccessResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_hasWriteAccessResponse>> AsynchasWriteAccess(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_hasWriteAccessResponse>>(AsynchasWriteAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_hasWriteAccessResponse>> PrepareAsynchasWriteAccess(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_hasWriteAccessResponse>>(PrepareAsynchasWriteAccessRaw(context, request, cq));
    }
    // / Tries to create a directory with this file name, which must be an absolute file name
    // / (asserted)
    virtual ::grpc::Status createDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest& request, ::octaneapi::ApiFileName_createDirectoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_createDirectoryResponse>> AsynccreateDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_createDirectoryResponse>>(AsynccreateDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_createDirectoryResponse>> PrepareAsynccreateDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_createDirectoryResponse>>(PrepareAsynccreateDirectoryRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Creates a new ApiFileName instance
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest* request, ::octaneapi::ApiFileName_createResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest* request, ::octaneapi::ApiFileName_createResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Destroys the ApiFileName object created by create() and other getters below
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Assigns a new file name path to this instance
      virtual void set(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void set(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Clears the instance
      virtual void clear(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void clear(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if this is an empty instance, i
      virtual void isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest* request, ::octaneapi::ApiFileName_isEmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest* request, ::octaneapi::ApiFileName_isEmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if the stored file name is absolute, i
      virtual void isAbsolute(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest* request, ::octaneapi::ApiFileName_isAbsoluteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isAbsolute(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest* request, ::octaneapi::ApiFileName_isAbsoluteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if the stored file name is relative
      virtual void isRelative(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest* request, ::octaneapi::ApiFileName_isRelativeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isRelative(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest* request, ::octaneapi::ApiFileName_isRelativeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the parent directory of the file name (including any root, like drive/server)
      virtual void getParent(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest* request, ::octaneapi::ApiFileName_getParentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getParent(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest* request, ::octaneapi::ApiFileName_getParentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns a file name of the file part (without root and directory)
      virtual void getFileOnly(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest* request, ::octaneapi::ApiFileName_getFileOnlyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getFileOnly(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest* request, ::octaneapi::ApiFileName_getFileOnlyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the full file name as string
      virtual void getFullString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest* request, ::octaneapi::ApiFileName_getFullStringResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getFullString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest* request, ::octaneapi::ApiFileName_getFullStringResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the root of the file name as string (only != "" on Windows)
      virtual void getRootString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest* request, ::octaneapi::ApiFileName_getRootStringResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getRootString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest* request, ::octaneapi::ApiFileName_getRootStringResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the directory part of the file name as string (including the root part on Windows)
      virtual void getParentString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest* request, ::octaneapi::ApiFileName_getParentStringResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getParentString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest* request, ::octaneapi::ApiFileName_getParentStringResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the file part of the instance as string
      virtual void getFileString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest* request, ::octaneapi::ApiFileName_getFileStringResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getFileString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest* request, ::octaneapi::ApiFileName_getFileStringResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the suffix of the last token (i
      virtual void getSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest* request, ::octaneapi::ApiFileName_getSuffixResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest* request, ::octaneapi::ApiFileName_getSuffixResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Sets the suffix of the last token (i
      virtual void setSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Similar to setSuffix(), but returning a new FileName instead
      virtual void withSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest* request, ::octaneapi::ApiFileName_withSuffixResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void withSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest* request, ::octaneapi::ApiFileName_withSuffixResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Makes this file name relative to the specified file name
      virtual void makeRelativeTo(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest* request, ::octaneapi::ApiFileName_makeRelativeToResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void makeRelativeTo(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest* request, ::octaneapi::ApiFileName_makeRelativeToResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the concatenation of this file name with another
      virtual void getConcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest* request, ::octaneapi::ApiFileName_getConcatResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getConcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest* request, ::octaneapi::ApiFileName_getConcatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Concats other filename to this file name
      virtual void concat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void concat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if this instance is equal to the other one
      virtual void equals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest* request, ::octaneapi::ApiFileName_equalsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void equals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest* request, ::octaneapi::ApiFileName_equalsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if this instance is not equal to the other one
      virtual void notEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest* request, ::octaneapi::ApiFileName_notEqualsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void notEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest* request, ::octaneapi::ApiFileName_notEqualsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if this instance is "less" than the other one (useful for ordered maps)
      virtual void lessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest* request, ::octaneapi::ApiFileName_lessThanResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void lessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest* request, ::octaneapi::ApiFileName_lessThanResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if this instance is equal to the other one, using a case-sensitive comparison
      // / on all platforms
      virtual void exactlyEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest* request, ::octaneapi::ApiFileName_exactlyEqualsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void exactlyEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest* request, ::octaneapi::ApiFileName_exactlyEqualsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if this instance is "less" than the other one, using a case-sensitive comparison
      // / on all platforms
      virtual void exactlyLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest* request, ::octaneapi::ApiFileName_exactlyLessThanResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void exactlyLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest* request, ::octaneapi::ApiFileName_exactlyLessThanResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Appends some text to the file name of the last token, but makes sure
      // / that it is inserted in front of the suffix (if the last token has one)
      virtual void appendToFileName(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void appendToFileName(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if this file name exists as directory OR as file
      virtual void exists(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest* request, ::octaneapi::ApiFileName_existsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void exists(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest* request, ::octaneapi::ApiFileName_existsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if this file name exists and is a file
      virtual void existsAsFile(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest* request, ::octaneapi::ApiFileName_existsAsFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void existsAsFile(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest* request, ::octaneapi::ApiFileName_existsAsFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if this file name exists and is a file
      virtual void existsAsDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* request, ::octaneapi::ApiFileName_existsAsDirectoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void existsAsDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* request, ::octaneapi::ApiFileName_existsAsDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if we can write to the specified file name
      virtual void hasWriteAccess(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest* request, ::octaneapi::ApiFileName_hasWriteAccessResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void hasWriteAccess(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest* request, ::octaneapi::ApiFileName_hasWriteAccessResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Tries to create a directory with this file name, which must be an absolute file name
      // / (asserted)
      virtual void createDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest* request, ::octaneapi::ApiFileName_createDirectoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest* request, ::octaneapi::ApiFileName_createDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isEmptyResponse>* AsyncisEmptyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isEmptyResponse>* PrepareAsyncisEmptyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isAbsoluteResponse>* AsyncisAbsoluteRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isAbsoluteResponse>* PrepareAsyncisAbsoluteRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isRelativeResponse>* AsyncisRelativeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_isRelativeResponse>* PrepareAsyncisRelativeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getParentResponse>* AsyncgetParentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getParentResponse>* PrepareAsyncgetParentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFileOnlyResponse>* AsyncgetFileOnlyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFileOnlyResponse>* PrepareAsyncgetFileOnlyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFullStringResponse>* AsyncgetFullStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFullStringResponse>* PrepareAsyncgetFullStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getRootStringResponse>* AsyncgetRootStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getRootStringResponse>* PrepareAsyncgetRootStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getParentStringResponse>* AsyncgetParentStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getParentStringResponse>* PrepareAsyncgetParentStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFileStringResponse>* AsyncgetFileStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getFileStringResponse>* PrepareAsyncgetFileStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getSuffixResponse>* AsyncgetSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getSuffixResponse>* PrepareAsyncgetSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_withSuffixResponse>* AsyncwithSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_withSuffixResponse>* PrepareAsyncwithSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_makeRelativeToResponse>* AsyncmakeRelativeToRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_makeRelativeToResponse>* PrepareAsyncmakeRelativeToRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getConcatResponse>* AsyncgetConcatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_getConcatResponse>* PrepareAsyncgetConcatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncconcatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncconcatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_equalsResponse>* AsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_equalsResponse>* PrepareAsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_notEqualsResponse>* AsyncnotEqualsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_notEqualsResponse>* PrepareAsyncnotEqualsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_lessThanResponse>* AsynclessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_lessThanResponse>* PrepareAsynclessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_exactlyEqualsResponse>* AsyncexactlyEqualsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_exactlyEqualsResponse>* PrepareAsyncexactlyEqualsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_exactlyLessThanResponse>* AsyncexactlyLessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_exactlyLessThanResponse>* PrepareAsyncexactlyLessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncappendToFileNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncappendToFileNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsResponse>* AsyncexistsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsResponse>* PrepareAsyncexistsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsAsFileResponse>* AsyncexistsAsFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsAsFileResponse>* PrepareAsyncexistsAsFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsAsDirectoryResponse>* AsyncexistsAsDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_existsAsDirectoryResponse>* PrepareAsyncexistsAsDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_hasWriteAccessResponse>* AsynchasWriteAccessRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_hasWriteAccessResponse>* PrepareAsynchasWriteAccessRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_createDirectoryResponse>* AsynccreateDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileName_createDirectoryResponse>* PrepareAsynccreateDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest& request, ::octaneapi::ApiFileName_createResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    ::grpc::Status set(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncset(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncset(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetRaw(context, request, cq));
    }
    ::grpc::Status clear(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncclear(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncclearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncclear(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncclearRaw(context, request, cq));
    }
    ::grpc::Status isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest& request, ::octaneapi::ApiFileName_isEmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isEmptyResponse>> AsyncisEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isEmptyResponse>>(AsyncisEmptyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isEmptyResponse>> PrepareAsyncisEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isEmptyResponse>>(PrepareAsyncisEmptyRaw(context, request, cq));
    }
    ::grpc::Status isAbsolute(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest& request, ::octaneapi::ApiFileName_isAbsoluteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isAbsoluteResponse>> AsyncisAbsolute(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isAbsoluteResponse>>(AsyncisAbsoluteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isAbsoluteResponse>> PrepareAsyncisAbsolute(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isAbsoluteResponse>>(PrepareAsyncisAbsoluteRaw(context, request, cq));
    }
    ::grpc::Status isRelative(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest& request, ::octaneapi::ApiFileName_isRelativeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isRelativeResponse>> AsyncisRelative(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isRelativeResponse>>(AsyncisRelativeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isRelativeResponse>> PrepareAsyncisRelative(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isRelativeResponse>>(PrepareAsyncisRelativeRaw(context, request, cq));
    }
    ::grpc::Status getParent(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest& request, ::octaneapi::ApiFileName_getParentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentResponse>> AsyncgetParent(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentResponse>>(AsyncgetParentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentResponse>> PrepareAsyncgetParent(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentResponse>>(PrepareAsyncgetParentRaw(context, request, cq));
    }
    ::grpc::Status getFileOnly(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest& request, ::octaneapi::ApiFileName_getFileOnlyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileOnlyResponse>> AsyncgetFileOnly(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileOnlyResponse>>(AsyncgetFileOnlyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileOnlyResponse>> PrepareAsyncgetFileOnly(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileOnlyResponse>>(PrepareAsyncgetFileOnlyRaw(context, request, cq));
    }
    ::grpc::Status getFullString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest& request, ::octaneapi::ApiFileName_getFullStringResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFullStringResponse>> AsyncgetFullString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFullStringResponse>>(AsyncgetFullStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFullStringResponse>> PrepareAsyncgetFullString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFullStringResponse>>(PrepareAsyncgetFullStringRaw(context, request, cq));
    }
    ::grpc::Status getRootString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest& request, ::octaneapi::ApiFileName_getRootStringResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getRootStringResponse>> AsyncgetRootString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getRootStringResponse>>(AsyncgetRootStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getRootStringResponse>> PrepareAsyncgetRootString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getRootStringResponse>>(PrepareAsyncgetRootStringRaw(context, request, cq));
    }
    ::grpc::Status getParentString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest& request, ::octaneapi::ApiFileName_getParentStringResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentStringResponse>> AsyncgetParentString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentStringResponse>>(AsyncgetParentStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentStringResponse>> PrepareAsyncgetParentString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentStringResponse>>(PrepareAsyncgetParentStringRaw(context, request, cq));
    }
    ::grpc::Status getFileString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest& request, ::octaneapi::ApiFileName_getFileStringResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileStringResponse>> AsyncgetFileString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileStringResponse>>(AsyncgetFileStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileStringResponse>> PrepareAsyncgetFileString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileStringResponse>>(PrepareAsyncgetFileStringRaw(context, request, cq));
    }
    ::grpc::Status getSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest& request, ::octaneapi::ApiFileName_getSuffixResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getSuffixResponse>> AsyncgetSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getSuffixResponse>>(AsyncgetSuffixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getSuffixResponse>> PrepareAsyncgetSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getSuffixResponse>>(PrepareAsyncgetSuffixRaw(context, request, cq));
    }
    ::grpc::Status setSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetSuffixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetSuffixRaw(context, request, cq));
    }
    ::grpc::Status withSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest& request, ::octaneapi::ApiFileName_withSuffixResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_withSuffixResponse>> AsyncwithSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_withSuffixResponse>>(AsyncwithSuffixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_withSuffixResponse>> PrepareAsyncwithSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_withSuffixResponse>>(PrepareAsyncwithSuffixRaw(context, request, cq));
    }
    ::grpc::Status makeRelativeTo(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest& request, ::octaneapi::ApiFileName_makeRelativeToResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_makeRelativeToResponse>> AsyncmakeRelativeTo(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_makeRelativeToResponse>>(AsyncmakeRelativeToRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_makeRelativeToResponse>> PrepareAsyncmakeRelativeTo(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_makeRelativeToResponse>>(PrepareAsyncmakeRelativeToRaw(context, request, cq));
    }
    ::grpc::Status getConcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest& request, ::octaneapi::ApiFileName_getConcatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getConcatResponse>> AsyncgetConcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getConcatResponse>>(AsyncgetConcatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getConcatResponse>> PrepareAsyncgetConcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getConcatResponse>>(PrepareAsyncgetConcatRaw(context, request, cq));
    }
    ::grpc::Status concat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncconcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncconcatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncconcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncconcatRaw(context, request, cq));
    }
    ::grpc::Status equals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest& request, ::octaneapi::ApiFileName_equalsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_equalsResponse>> Asyncequals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_equalsResponse>>(AsyncequalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_equalsResponse>> PrepareAsyncequals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_equalsResponse>>(PrepareAsyncequalsRaw(context, request, cq));
    }
    ::grpc::Status notEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest& request, ::octaneapi::ApiFileName_notEqualsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_notEqualsResponse>> AsyncnotEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_notEqualsResponse>>(AsyncnotEqualsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_notEqualsResponse>> PrepareAsyncnotEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_notEqualsResponse>>(PrepareAsyncnotEqualsRaw(context, request, cq));
    }
    ::grpc::Status lessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest& request, ::octaneapi::ApiFileName_lessThanResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_lessThanResponse>> AsynclessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_lessThanResponse>>(AsynclessThanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_lessThanResponse>> PrepareAsynclessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_lessThanResponse>>(PrepareAsynclessThanRaw(context, request, cq));
    }
    ::grpc::Status exactlyEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest& request, ::octaneapi::ApiFileName_exactlyEqualsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyEqualsResponse>> AsyncexactlyEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyEqualsResponse>>(AsyncexactlyEqualsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyEqualsResponse>> PrepareAsyncexactlyEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyEqualsResponse>>(PrepareAsyncexactlyEqualsRaw(context, request, cq));
    }
    ::grpc::Status exactlyLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest& request, ::octaneapi::ApiFileName_exactlyLessThanResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyLessThanResponse>> AsyncexactlyLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyLessThanResponse>>(AsyncexactlyLessThanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyLessThanResponse>> PrepareAsyncexactlyLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyLessThanResponse>>(PrepareAsyncexactlyLessThanRaw(context, request, cq));
    }
    ::grpc::Status appendToFileName(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncappendToFileName(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncappendToFileNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncappendToFileName(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncappendToFileNameRaw(context, request, cq));
    }
    ::grpc::Status exists(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest& request, ::octaneapi::ApiFileName_existsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsResponse>> Asyncexists(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsResponse>>(AsyncexistsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsResponse>> PrepareAsyncexists(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsResponse>>(PrepareAsyncexistsRaw(context, request, cq));
    }
    ::grpc::Status existsAsFile(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest& request, ::octaneapi::ApiFileName_existsAsFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsFileResponse>> AsyncexistsAsFile(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsFileResponse>>(AsyncexistsAsFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsFileResponse>> PrepareAsyncexistsAsFile(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsFileResponse>>(PrepareAsyncexistsAsFileRaw(context, request, cq));
    }
    ::grpc::Status existsAsDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest& request, ::octaneapi::ApiFileName_existsAsDirectoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsDirectoryResponse>> AsyncexistsAsDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsDirectoryResponse>>(AsyncexistsAsDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsDirectoryResponse>> PrepareAsyncexistsAsDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsDirectoryResponse>>(PrepareAsyncexistsAsDirectoryRaw(context, request, cq));
    }
    ::grpc::Status hasWriteAccess(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest& request, ::octaneapi::ApiFileName_hasWriteAccessResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_hasWriteAccessResponse>> AsynchasWriteAccess(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_hasWriteAccessResponse>>(AsynchasWriteAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_hasWriteAccessResponse>> PrepareAsynchasWriteAccess(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_hasWriteAccessResponse>>(PrepareAsynchasWriteAccessRaw(context, request, cq));
    }
    ::grpc::Status createDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest& request, ::octaneapi::ApiFileName_createDirectoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createDirectoryResponse>> AsynccreateDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createDirectoryResponse>>(AsynccreateDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createDirectoryResponse>> PrepareAsynccreateDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createDirectoryResponse>>(PrepareAsynccreateDirectoryRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest* request, ::octaneapi::ApiFileName_createResponse* response, std::function<void(::grpc::Status)>) override;
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest* request, ::octaneapi::ApiFileName_createResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void set(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void set(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void clear(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void clear(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest* request, ::octaneapi::ApiFileName_isEmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest* request, ::octaneapi::ApiFileName_isEmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isAbsolute(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest* request, ::octaneapi::ApiFileName_isAbsoluteResponse* response, std::function<void(::grpc::Status)>) override;
      void isAbsolute(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest* request, ::octaneapi::ApiFileName_isAbsoluteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isRelative(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest* request, ::octaneapi::ApiFileName_isRelativeResponse* response, std::function<void(::grpc::Status)>) override;
      void isRelative(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest* request, ::octaneapi::ApiFileName_isRelativeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getParent(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest* request, ::octaneapi::ApiFileName_getParentResponse* response, std::function<void(::grpc::Status)>) override;
      void getParent(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest* request, ::octaneapi::ApiFileName_getParentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getFileOnly(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest* request, ::octaneapi::ApiFileName_getFileOnlyResponse* response, std::function<void(::grpc::Status)>) override;
      void getFileOnly(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest* request, ::octaneapi::ApiFileName_getFileOnlyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getFullString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest* request, ::octaneapi::ApiFileName_getFullStringResponse* response, std::function<void(::grpc::Status)>) override;
      void getFullString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest* request, ::octaneapi::ApiFileName_getFullStringResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getRootString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest* request, ::octaneapi::ApiFileName_getRootStringResponse* response, std::function<void(::grpc::Status)>) override;
      void getRootString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest* request, ::octaneapi::ApiFileName_getRootStringResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getParentString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest* request, ::octaneapi::ApiFileName_getParentStringResponse* response, std::function<void(::grpc::Status)>) override;
      void getParentString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest* request, ::octaneapi::ApiFileName_getParentStringResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getFileString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest* request, ::octaneapi::ApiFileName_getFileStringResponse* response, std::function<void(::grpc::Status)>) override;
      void getFileString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest* request, ::octaneapi::ApiFileName_getFileStringResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest* request, ::octaneapi::ApiFileName_getSuffixResponse* response, std::function<void(::grpc::Status)>) override;
      void getSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest* request, ::octaneapi::ApiFileName_getSuffixResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void setSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void withSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest* request, ::octaneapi::ApiFileName_withSuffixResponse* response, std::function<void(::grpc::Status)>) override;
      void withSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest* request, ::octaneapi::ApiFileName_withSuffixResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void makeRelativeTo(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest* request, ::octaneapi::ApiFileName_makeRelativeToResponse* response, std::function<void(::grpc::Status)>) override;
      void makeRelativeTo(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest* request, ::octaneapi::ApiFileName_makeRelativeToResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getConcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest* request, ::octaneapi::ApiFileName_getConcatResponse* response, std::function<void(::grpc::Status)>) override;
      void getConcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest* request, ::octaneapi::ApiFileName_getConcatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void concat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void concat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void equals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest* request, ::octaneapi::ApiFileName_equalsResponse* response, std::function<void(::grpc::Status)>) override;
      void equals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest* request, ::octaneapi::ApiFileName_equalsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void notEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest* request, ::octaneapi::ApiFileName_notEqualsResponse* response, std::function<void(::grpc::Status)>) override;
      void notEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest* request, ::octaneapi::ApiFileName_notEqualsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void lessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest* request, ::octaneapi::ApiFileName_lessThanResponse* response, std::function<void(::grpc::Status)>) override;
      void lessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest* request, ::octaneapi::ApiFileName_lessThanResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void exactlyEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest* request, ::octaneapi::ApiFileName_exactlyEqualsResponse* response, std::function<void(::grpc::Status)>) override;
      void exactlyEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest* request, ::octaneapi::ApiFileName_exactlyEqualsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void exactlyLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest* request, ::octaneapi::ApiFileName_exactlyLessThanResponse* response, std::function<void(::grpc::Status)>) override;
      void exactlyLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest* request, ::octaneapi::ApiFileName_exactlyLessThanResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void appendToFileName(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void appendToFileName(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void exists(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest* request, ::octaneapi::ApiFileName_existsResponse* response, std::function<void(::grpc::Status)>) override;
      void exists(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest* request, ::octaneapi::ApiFileName_existsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void existsAsFile(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest* request, ::octaneapi::ApiFileName_existsAsFileResponse* response, std::function<void(::grpc::Status)>) override;
      void existsAsFile(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest* request, ::octaneapi::ApiFileName_existsAsFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void existsAsDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* request, ::octaneapi::ApiFileName_existsAsDirectoryResponse* response, std::function<void(::grpc::Status)>) override;
      void existsAsDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* request, ::octaneapi::ApiFileName_existsAsDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void hasWriteAccess(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest* request, ::octaneapi::ApiFileName_hasWriteAccessResponse* response, std::function<void(::grpc::Status)>) override;
      void hasWriteAccess(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest* request, ::octaneapi::ApiFileName_hasWriteAccessResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void createDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest* request, ::octaneapi::ApiFileName_createDirectoryResponse* response, std::function<void(::grpc::Status)>) override;
      void createDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest* request, ::octaneapi::ApiFileName_createDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isEmptyResponse>* AsyncisEmptyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isEmptyResponse>* PrepareAsyncisEmptyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isAbsoluteResponse>* AsyncisAbsoluteRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isAbsoluteResponse>* PrepareAsyncisAbsoluteRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isRelativeResponse>* AsyncisRelativeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isRelativeResponse>* PrepareAsyncisRelativeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentResponse>* AsyncgetParentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentResponse>* PrepareAsyncgetParentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileOnlyResponse>* AsyncgetFileOnlyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileOnlyResponse>* PrepareAsyncgetFileOnlyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFullStringResponse>* AsyncgetFullStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFullStringResponse>* PrepareAsyncgetFullStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getRootStringResponse>* AsyncgetRootStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getRootStringResponse>* PrepareAsyncgetRootStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentStringResponse>* AsyncgetParentStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentStringResponse>* PrepareAsyncgetParentStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileStringResponse>* AsyncgetFileStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileStringResponse>* PrepareAsyncgetFileStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getSuffixResponse>* AsyncgetSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getSuffixResponse>* PrepareAsyncgetSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_withSuffixResponse>* AsyncwithSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_withSuffixResponse>* PrepareAsyncwithSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_makeRelativeToResponse>* AsyncmakeRelativeToRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_makeRelativeToResponse>* PrepareAsyncmakeRelativeToRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getConcatResponse>* AsyncgetConcatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getConcatResponse>* PrepareAsyncgetConcatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncconcatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncconcatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_equalsResponse>* AsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_equalsResponse>* PrepareAsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_notEqualsResponse>* AsyncnotEqualsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_notEqualsResponse>* PrepareAsyncnotEqualsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_lessThanResponse>* AsynclessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_lessThanResponse>* PrepareAsynclessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyEqualsResponse>* AsyncexactlyEqualsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyEqualsResponse>* PrepareAsyncexactlyEqualsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyLessThanResponse>* AsyncexactlyLessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyLessThanResponse>* PrepareAsyncexactlyLessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncappendToFileNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncappendToFileNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsResponse>* AsyncexistsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsResponse>* PrepareAsyncexistsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsFileResponse>* AsyncexistsAsFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsFileResponse>* PrepareAsyncexistsAsFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsDirectoryResponse>* AsyncexistsAsDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsDirectoryResponse>* PrepareAsyncexistsAsDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_hasWriteAccessResponse>* AsynchasWriteAccessRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_hasWriteAccessResponse>* PrepareAsynchasWriteAccessRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createDirectoryResponse>* AsynccreateDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createDirectoryResponse>* PrepareAsynccreateDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_create_;
    const ::grpc::internal::RpcMethod rpcmethod_destroy_;
    const ::grpc::internal::RpcMethod rpcmethod_set_;
    const ::grpc::internal::RpcMethod rpcmethod_clear_;
    const ::grpc::internal::RpcMethod rpcmethod_isEmpty_;
    const ::grpc::internal::RpcMethod rpcmethod_isAbsolute_;
    const ::grpc::internal::RpcMethod rpcmethod_isRelative_;
    const ::grpc::internal::RpcMethod rpcmethod_getParent_;
    const ::grpc::internal::RpcMethod rpcmethod_getFileOnly_;
    const ::grpc::internal::RpcMethod rpcmethod_getFullString_;
    const ::grpc::internal::RpcMethod rpcmethod_getRootString_;
    const ::grpc::internal::RpcMethod rpcmethod_getParentString_;
    const ::grpc::internal::RpcMethod rpcmethod_getFileString_;
    const ::grpc::internal::RpcMethod rpcmethod_getSuffix_;
    const ::grpc::internal::RpcMethod rpcmethod_setSuffix_;
    const ::grpc::internal::RpcMethod rpcmethod_withSuffix_;
    const ::grpc::internal::RpcMethod rpcmethod_makeRelativeTo_;
    const ::grpc::internal::RpcMethod rpcmethod_getConcat_;
    const ::grpc::internal::RpcMethod rpcmethod_concat_;
    const ::grpc::internal::RpcMethod rpcmethod_equals_;
    const ::grpc::internal::RpcMethod rpcmethod_notEquals_;
    const ::grpc::internal::RpcMethod rpcmethod_lessThan_;
    const ::grpc::internal::RpcMethod rpcmethod_exactlyEquals_;
    const ::grpc::internal::RpcMethod rpcmethod_exactlyLessThan_;
    const ::grpc::internal::RpcMethod rpcmethod_appendToFileName_;
    const ::grpc::internal::RpcMethod rpcmethod_exists_;
    const ::grpc::internal::RpcMethod rpcmethod_existsAsFile_;
    const ::grpc::internal::RpcMethod rpcmethod_existsAsDirectory_;
    const ::grpc::internal::RpcMethod rpcmethod_hasWriteAccess_;
    const ::grpc::internal::RpcMethod rpcmethod_createDirectory_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Creates a new ApiFileName instance
    virtual ::grpc::Status create(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_createRequest* request, ::octaneapi::ApiFileName_createResponse* response);
    // / Destroys the ApiFileName object created by create() and other getters below
    virtual ::grpc::Status destroy(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_destroyRequest* request, ::google::protobuf::Empty* response);
    // / Assigns a new file name path to this instance
    virtual ::grpc::Status set(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_setRequest* request, ::google::protobuf::Empty* response);
    // / Clears the instance
    virtual ::grpc::Status clear(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_clearRequest* request, ::google::protobuf::Empty* response);
    // / Returns TRUE if this is an empty instance, i
    virtual ::grpc::Status isEmpty(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_isEmptyRequest* request, ::octaneapi::ApiFileName_isEmptyResponse* response);
    // / Returns TRUE if the stored file name is absolute, i
    virtual ::grpc::Status isAbsolute(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest* request, ::octaneapi::ApiFileName_isAbsoluteResponse* response);
    // / Returns TRUE if the stored file name is relative
    virtual ::grpc::Status isRelative(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_isRelativeRequest* request, ::octaneapi::ApiFileName_isRelativeResponse* response);
    // / Returns the parent directory of the file name (including any root, like drive/server)
    virtual ::grpc::Status getParent(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getParentRequest* request, ::octaneapi::ApiFileName_getParentResponse* response);
    // / Returns a file name of the file part (without root and directory)
    virtual ::grpc::Status getFileOnly(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest* request, ::octaneapi::ApiFileName_getFileOnlyResponse* response);
    // / Returns the full file name as string
    virtual ::grpc::Status getFullString(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getFullStringRequest* request, ::octaneapi::ApiFileName_getFullStringResponse* response);
    // / Returns the root of the file name as string (only != "" on Windows)
    virtual ::grpc::Status getRootString(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getRootStringRequest* request, ::octaneapi::ApiFileName_getRootStringResponse* response);
    // / Returns the directory part of the file name as string (including the root part on Windows)
    virtual ::grpc::Status getParentString(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getParentStringRequest* request, ::octaneapi::ApiFileName_getParentStringResponse* response);
    // / Returns the file part of the instance as string
    virtual ::grpc::Status getFileString(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getFileStringRequest* request, ::octaneapi::ApiFileName_getFileStringResponse* response);
    // / Returns the suffix of the last token (i
    virtual ::grpc::Status getSuffix(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getSuffixRequest* request, ::octaneapi::ApiFileName_getSuffixResponse* response);
    // / Sets the suffix of the last token (i
    virtual ::grpc::Status setSuffix(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_setSuffixRequest* request, ::google::protobuf::Empty* response);
    // / Similar to setSuffix(), but returning a new FileName instead
    virtual ::grpc::Status withSuffix(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_withSuffixRequest* request, ::octaneapi::ApiFileName_withSuffixResponse* response);
    // / Makes this file name relative to the specified file name
    virtual ::grpc::Status makeRelativeTo(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest* request, ::octaneapi::ApiFileName_makeRelativeToResponse* response);
    // / Returns the concatenation of this file name with another
    virtual ::grpc::Status getConcat(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getConcatRequest* request, ::octaneapi::ApiFileName_getConcatResponse* response);
    // / Concats other filename to this file name
    virtual ::grpc::Status concat(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_concatRequest* request, ::google::protobuf::Empty* response);
    // / Returns TRUE if this instance is equal to the other one
    virtual ::grpc::Status equals(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_equalsRequest* request, ::octaneapi::ApiFileName_equalsResponse* response);
    // / Returns TRUE if this instance is not equal to the other one
    virtual ::grpc::Status notEquals(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_notEqualsRequest* request, ::octaneapi::ApiFileName_notEqualsResponse* response);
    // / Returns TRUE if this instance is "less" than the other one (useful for ordered maps)
    virtual ::grpc::Status lessThan(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_lessThanRequest* request, ::octaneapi::ApiFileName_lessThanResponse* response);
    // / Returns TRUE if this instance is equal to the other one, using a case-sensitive comparison
    // / on all platforms
    virtual ::grpc::Status exactlyEquals(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest* request, ::octaneapi::ApiFileName_exactlyEqualsResponse* response);
    // / Returns TRUE if this instance is "less" than the other one, using a case-sensitive comparison
    // / on all platforms
    virtual ::grpc::Status exactlyLessThan(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest* request, ::octaneapi::ApiFileName_exactlyLessThanResponse* response);
    // / Appends some text to the file name of the last token, but makes sure
    // / that it is inserted in front of the suffix (if the last token has one)
    virtual ::grpc::Status appendToFileName(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest* request, ::google::protobuf::Empty* response);
    // / Returns TRUE if this file name exists as directory OR as file
    virtual ::grpc::Status exists(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_existsRequest* request, ::octaneapi::ApiFileName_existsResponse* response);
    // / Returns TRUE if this file name exists and is a file
    virtual ::grpc::Status existsAsFile(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest* request, ::octaneapi::ApiFileName_existsAsFileResponse* response);
    // / Returns TRUE if this file name exists and is a file
    virtual ::grpc::Status existsAsDirectory(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* request, ::octaneapi::ApiFileName_existsAsDirectoryResponse* response);
    // / Returns TRUE if we can write to the specified file name
    virtual ::grpc::Status hasWriteAccess(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest* request, ::octaneapi::ApiFileName_hasWriteAccessResponse* response);
    // / Tries to create a directory with this file name, which must be an absolute file name
    // / (asserted)
    virtual ::grpc::Status createDirectory(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest* request, ::octaneapi::ApiFileName_createDirectoryResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_createRequest* /*request*/, ::octaneapi::ApiFileName_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::octaneapi::ApiFileName_createRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_createResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_destroy() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::octaneapi::ApiFileName_destroyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_set() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_setRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestset(::grpc::ServerContext* context, ::octaneapi::ApiFileName_setRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_clear() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclear(::grpc::ServerContext* context, ::octaneapi::ApiFileName_clearRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isEmpty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isEmpty() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_isEmpty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isEmpty(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isEmptyRequest* /*request*/, ::octaneapi::ApiFileName_isEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisEmpty(::grpc::ServerContext* context, ::octaneapi::ApiFileName_isEmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_isEmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isAbsolute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isAbsolute() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_isAbsolute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAbsolute(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isAbsoluteRequest* /*request*/, ::octaneapi::ApiFileName_isAbsoluteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisAbsolute(::grpc::ServerContext* context, ::octaneapi::ApiFileName_isAbsoluteRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_isAbsoluteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isRelative : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isRelative() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_isRelative() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isRelative(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isRelativeRequest* /*request*/, ::octaneapi::ApiFileName_isRelativeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisRelative(::grpc::ServerContext* context, ::octaneapi::ApiFileName_isRelativeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_isRelativeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getParent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getParent() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_getParent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getParentRequest* /*request*/, ::octaneapi::ApiFileName_getParentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetParent(::grpc::ServerContext* context, ::octaneapi::ApiFileName_getParentRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_getParentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getFileOnly : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getFileOnly() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getFileOnly() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileOnly(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFileOnlyRequest* /*request*/, ::octaneapi::ApiFileName_getFileOnlyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetFileOnly(::grpc::ServerContext* context, ::octaneapi::ApiFileName_getFileOnlyRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_getFileOnlyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getFullString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getFullString() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getFullString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFullString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFullStringRequest* /*request*/, ::octaneapi::ApiFileName_getFullStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetFullString(::grpc::ServerContext* context, ::octaneapi::ApiFileName_getFullStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_getFullStringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getRootString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getRootString() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_getRootString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRootString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getRootStringRequest* /*request*/, ::octaneapi::ApiFileName_getRootStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRootString(::grpc::ServerContext* context, ::octaneapi::ApiFileName_getRootStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_getRootStringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getParentString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getParentString() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_getParentString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParentString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getParentStringRequest* /*request*/, ::octaneapi::ApiFileName_getParentStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetParentString(::grpc::ServerContext* context, ::octaneapi::ApiFileName_getParentStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_getParentStringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getFileString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getFileString() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_getFileString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFileStringRequest* /*request*/, ::octaneapi::ApiFileName_getFileStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetFileString(::grpc::ServerContext* context, ::octaneapi::ApiFileName_getFileStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_getFileStringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getSuffix() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_getSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getSuffixRequest* /*request*/, ::octaneapi::ApiFileName_getSuffixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSuffix(::grpc::ServerContext* context, ::octaneapi::ApiFileName_getSuffixRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_getSuffixResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setSuffix() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_setSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_setSuffixRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetSuffix(::grpc::ServerContext* context, ::octaneapi::ApiFileName_setSuffixRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_withSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_withSuffix() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_withSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status withSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_withSuffixRequest* /*request*/, ::octaneapi::ApiFileName_withSuffixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestwithSuffix(::grpc::ServerContext* context, ::octaneapi::ApiFileName_withSuffixRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_withSuffixResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_makeRelativeTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_makeRelativeTo() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_makeRelativeTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status makeRelativeTo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_makeRelativeToRequest* /*request*/, ::octaneapi::ApiFileName_makeRelativeToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmakeRelativeTo(::grpc::ServerContext* context, ::octaneapi::ApiFileName_makeRelativeToRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_makeRelativeToResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getConcat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getConcat() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_getConcat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConcat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getConcatRequest* /*request*/, ::octaneapi::ApiFileName_getConcatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConcat(::grpc::ServerContext* context, ::octaneapi::ApiFileName_getConcatRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_getConcatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_concat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_concat() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_concat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status concat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_concatRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestconcat(::grpc::ServerContext* context, ::octaneapi::ApiFileName_concatRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_equals() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_equalsRequest* /*request*/, ::octaneapi::ApiFileName_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestequals(::grpc::ServerContext* context, ::octaneapi::ApiFileName_equalsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_equalsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_notEquals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_notEquals() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_notEquals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status notEquals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_notEqualsRequest* /*request*/, ::octaneapi::ApiFileName_notEqualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnotEquals(::grpc::ServerContext* context, ::octaneapi::ApiFileName_notEqualsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_notEqualsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_lessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_lessThan() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_lessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status lessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_lessThanRequest* /*request*/, ::octaneapi::ApiFileName_lessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlessThan(::grpc::ServerContext* context, ::octaneapi::ApiFileName_lessThanRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_lessThanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_exactlyEquals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_exactlyEquals() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_exactlyEquals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exactlyEquals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_exactlyEqualsRequest* /*request*/, ::octaneapi::ApiFileName_exactlyEqualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexactlyEquals(::grpc::ServerContext* context, ::octaneapi::ApiFileName_exactlyEqualsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_exactlyEqualsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_exactlyLessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_exactlyLessThan() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_exactlyLessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exactlyLessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_exactlyLessThanRequest* /*request*/, ::octaneapi::ApiFileName_exactlyLessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexactlyLessThan(::grpc::ServerContext* context, ::octaneapi::ApiFileName_exactlyLessThanRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_exactlyLessThanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_appendToFileName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_appendToFileName() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_appendToFileName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status appendToFileName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_appendToFileNameRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestappendToFileName(::grpc::ServerContext* context, ::octaneapi::ApiFileName_appendToFileNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_exists() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exists(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsRequest* /*request*/, ::octaneapi::ApiFileName_existsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestexists(::grpc::ServerContext* context, ::octaneapi::ApiFileName_existsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_existsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_existsAsFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_existsAsFile() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_existsAsFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status existsAsFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsAsFileRequest* /*request*/, ::octaneapi::ApiFileName_existsAsFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexistsAsFile(::grpc::ServerContext* context, ::octaneapi::ApiFileName_existsAsFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_existsAsFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_existsAsDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_existsAsDirectory() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_existsAsDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status existsAsDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* /*request*/, ::octaneapi::ApiFileName_existsAsDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexistsAsDirectory(::grpc::ServerContext* context, ::octaneapi::ApiFileName_existsAsDirectoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_existsAsDirectoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_hasWriteAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_hasWriteAccess() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_hasWriteAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasWriteAccess(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_hasWriteAccessRequest* /*request*/, ::octaneapi::ApiFileName_hasWriteAccessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasWriteAccess(::grpc::ServerContext* context, ::octaneapi::ApiFileName_hasWriteAccessRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_hasWriteAccessResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createDirectory() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_createDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_createDirectoryRequest* /*request*/, ::octaneapi::ApiFileName_createDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateDirectory(::grpc::ServerContext* context, ::octaneapi::ApiFileName_createDirectoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileName_createDirectoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_create<WithAsyncMethod_destroy<WithAsyncMethod_set<WithAsyncMethod_clear<WithAsyncMethod_isEmpty<WithAsyncMethod_isAbsolute<WithAsyncMethod_isRelative<WithAsyncMethod_getParent<WithAsyncMethod_getFileOnly<WithAsyncMethod_getFullString<WithAsyncMethod_getRootString<WithAsyncMethod_getParentString<WithAsyncMethod_getFileString<WithAsyncMethod_getSuffix<WithAsyncMethod_setSuffix<WithAsyncMethod_withSuffix<WithAsyncMethod_makeRelativeTo<WithAsyncMethod_getConcat<WithAsyncMethod_concat<WithAsyncMethod_equals<WithAsyncMethod_notEquals<WithAsyncMethod_lessThan<WithAsyncMethod_exactlyEquals<WithAsyncMethod_exactlyLessThan<WithAsyncMethod_appendToFileName<WithAsyncMethod_exists<WithAsyncMethod_existsAsFile<WithAsyncMethod_existsAsDirectory<WithAsyncMethod_hasWriteAccess<WithAsyncMethod_createDirectory<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_create() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_createRequest, ::octaneapi::ApiFileName_createResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_createRequest* request, ::octaneapi::ApiFileName_createResponse* response) { return this->create(context, request, response); }));}
    void SetMessageAllocatorFor_create(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_createRequest, ::octaneapi::ApiFileName_createResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_createRequest, ::octaneapi::ApiFileName_createResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_createRequest* /*request*/, ::octaneapi::ApiFileName_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_createRequest* /*request*/, ::octaneapi::ApiFileName_createResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_destroyRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_destroyRequest* request, ::google::protobuf::Empty* response) { return this->destroy(context, request, response); }));}
    void SetMessageAllocatorFor_destroy(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_destroyRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_destroyRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_set() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_setRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_setRequest* request, ::google::protobuf::Empty* response) { return this->set(context, request, response); }));}
    void SetMessageAllocatorFor_set(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_setRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_setRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_setRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* set(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_setRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_clear() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_clearRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_clearRequest* request, ::google::protobuf::Empty* response) { return this->clear(context, request, response); }));}
    void SetMessageAllocatorFor_clear(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_clearRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_clearRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clear(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isEmpty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isEmpty() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_isEmptyRequest, ::octaneapi::ApiFileName_isEmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_isEmptyRequest* request, ::octaneapi::ApiFileName_isEmptyResponse* response) { return this->isEmpty(context, request, response); }));}
    void SetMessageAllocatorFor_isEmpty(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_isEmptyRequest, ::octaneapi::ApiFileName_isEmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_isEmptyRequest, ::octaneapi::ApiFileName_isEmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isEmpty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isEmpty(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isEmptyRequest* /*request*/, ::octaneapi::ApiFileName_isEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isEmpty(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_isEmptyRequest* /*request*/, ::octaneapi::ApiFileName_isEmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isAbsolute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isAbsolute() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_isAbsoluteRequest, ::octaneapi::ApiFileName_isAbsoluteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest* request, ::octaneapi::ApiFileName_isAbsoluteResponse* response) { return this->isAbsolute(context, request, response); }));}
    void SetMessageAllocatorFor_isAbsolute(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_isAbsoluteRequest, ::octaneapi::ApiFileName_isAbsoluteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_isAbsoluteRequest, ::octaneapi::ApiFileName_isAbsoluteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isAbsolute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAbsolute(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isAbsoluteRequest* /*request*/, ::octaneapi::ApiFileName_isAbsoluteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isAbsolute(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_isAbsoluteRequest* /*request*/, ::octaneapi::ApiFileName_isAbsoluteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isRelative : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isRelative() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_isRelativeRequest, ::octaneapi::ApiFileName_isRelativeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_isRelativeRequest* request, ::octaneapi::ApiFileName_isRelativeResponse* response) { return this->isRelative(context, request, response); }));}
    void SetMessageAllocatorFor_isRelative(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_isRelativeRequest, ::octaneapi::ApiFileName_isRelativeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_isRelativeRequest, ::octaneapi::ApiFileName_isRelativeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isRelative() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isRelative(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isRelativeRequest* /*request*/, ::octaneapi::ApiFileName_isRelativeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isRelative(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_isRelativeRequest* /*request*/, ::octaneapi::ApiFileName_isRelativeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getParent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getParent() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getParentRequest, ::octaneapi::ApiFileName_getParentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_getParentRequest* request, ::octaneapi::ApiFileName_getParentResponse* response) { return this->getParent(context, request, response); }));}
    void SetMessageAllocatorFor_getParent(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_getParentRequest, ::octaneapi::ApiFileName_getParentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getParentRequest, ::octaneapi::ApiFileName_getParentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getParent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getParentRequest* /*request*/, ::octaneapi::ApiFileName_getParentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getParent(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_getParentRequest* /*request*/, ::octaneapi::ApiFileName_getParentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getFileOnly : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getFileOnly() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getFileOnlyRequest, ::octaneapi::ApiFileName_getFileOnlyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest* request, ::octaneapi::ApiFileName_getFileOnlyResponse* response) { return this->getFileOnly(context, request, response); }));}
    void SetMessageAllocatorFor_getFileOnly(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_getFileOnlyRequest, ::octaneapi::ApiFileName_getFileOnlyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getFileOnlyRequest, ::octaneapi::ApiFileName_getFileOnlyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getFileOnly() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileOnly(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFileOnlyRequest* /*request*/, ::octaneapi::ApiFileName_getFileOnlyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getFileOnly(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_getFileOnlyRequest* /*request*/, ::octaneapi::ApiFileName_getFileOnlyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getFullString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getFullString() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getFullStringRequest, ::octaneapi::ApiFileName_getFullStringResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_getFullStringRequest* request, ::octaneapi::ApiFileName_getFullStringResponse* response) { return this->getFullString(context, request, response); }));}
    void SetMessageAllocatorFor_getFullString(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_getFullStringRequest, ::octaneapi::ApiFileName_getFullStringResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getFullStringRequest, ::octaneapi::ApiFileName_getFullStringResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getFullString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFullString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFullStringRequest* /*request*/, ::octaneapi::ApiFileName_getFullStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getFullString(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_getFullStringRequest* /*request*/, ::octaneapi::ApiFileName_getFullStringResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getRootString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getRootString() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getRootStringRequest, ::octaneapi::ApiFileName_getRootStringResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_getRootStringRequest* request, ::octaneapi::ApiFileName_getRootStringResponse* response) { return this->getRootString(context, request, response); }));}
    void SetMessageAllocatorFor_getRootString(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_getRootStringRequest, ::octaneapi::ApiFileName_getRootStringResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getRootStringRequest, ::octaneapi::ApiFileName_getRootStringResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getRootString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRootString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getRootStringRequest* /*request*/, ::octaneapi::ApiFileName_getRootStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getRootString(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_getRootStringRequest* /*request*/, ::octaneapi::ApiFileName_getRootStringResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getParentString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getParentString() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getParentStringRequest, ::octaneapi::ApiFileName_getParentStringResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_getParentStringRequest* request, ::octaneapi::ApiFileName_getParentStringResponse* response) { return this->getParentString(context, request, response); }));}
    void SetMessageAllocatorFor_getParentString(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_getParentStringRequest, ::octaneapi::ApiFileName_getParentStringResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getParentStringRequest, ::octaneapi::ApiFileName_getParentStringResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getParentString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParentString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getParentStringRequest* /*request*/, ::octaneapi::ApiFileName_getParentStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getParentString(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_getParentStringRequest* /*request*/, ::octaneapi::ApiFileName_getParentStringResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getFileString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getFileString() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getFileStringRequest, ::octaneapi::ApiFileName_getFileStringResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_getFileStringRequest* request, ::octaneapi::ApiFileName_getFileStringResponse* response) { return this->getFileString(context, request, response); }));}
    void SetMessageAllocatorFor_getFileString(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_getFileStringRequest, ::octaneapi::ApiFileName_getFileStringResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getFileStringRequest, ::octaneapi::ApiFileName_getFileStringResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getFileString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFileStringRequest* /*request*/, ::octaneapi::ApiFileName_getFileStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getFileString(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_getFileStringRequest* /*request*/, ::octaneapi::ApiFileName_getFileStringResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getSuffix() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getSuffixRequest, ::octaneapi::ApiFileName_getSuffixResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_getSuffixRequest* request, ::octaneapi::ApiFileName_getSuffixResponse* response) { return this->getSuffix(context, request, response); }));}
    void SetMessageAllocatorFor_getSuffix(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_getSuffixRequest, ::octaneapi::ApiFileName_getSuffixResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getSuffixRequest, ::octaneapi::ApiFileName_getSuffixResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getSuffixRequest* /*request*/, ::octaneapi::ApiFileName_getSuffixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getSuffix(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_getSuffixRequest* /*request*/, ::octaneapi::ApiFileName_getSuffixResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setSuffix() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_setSuffixRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_setSuffixRequest* request, ::google::protobuf::Empty* response) { return this->setSuffix(context, request, response); }));}
    void SetMessageAllocatorFor_setSuffix(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_setSuffixRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_setSuffixRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_setSuffixRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setSuffix(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_setSuffixRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_withSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_withSuffix() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_withSuffixRequest, ::octaneapi::ApiFileName_withSuffixResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_withSuffixRequest* request, ::octaneapi::ApiFileName_withSuffixResponse* response) { return this->withSuffix(context, request, response); }));}
    void SetMessageAllocatorFor_withSuffix(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_withSuffixRequest, ::octaneapi::ApiFileName_withSuffixResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_withSuffixRequest, ::octaneapi::ApiFileName_withSuffixResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_withSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status withSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_withSuffixRequest* /*request*/, ::octaneapi::ApiFileName_withSuffixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* withSuffix(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_withSuffixRequest* /*request*/, ::octaneapi::ApiFileName_withSuffixResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_makeRelativeTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_makeRelativeTo() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_makeRelativeToRequest, ::octaneapi::ApiFileName_makeRelativeToResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest* request, ::octaneapi::ApiFileName_makeRelativeToResponse* response) { return this->makeRelativeTo(context, request, response); }));}
    void SetMessageAllocatorFor_makeRelativeTo(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_makeRelativeToRequest, ::octaneapi::ApiFileName_makeRelativeToResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_makeRelativeToRequest, ::octaneapi::ApiFileName_makeRelativeToResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_makeRelativeTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status makeRelativeTo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_makeRelativeToRequest* /*request*/, ::octaneapi::ApiFileName_makeRelativeToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* makeRelativeTo(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_makeRelativeToRequest* /*request*/, ::octaneapi::ApiFileName_makeRelativeToResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getConcat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getConcat() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getConcatRequest, ::octaneapi::ApiFileName_getConcatResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_getConcatRequest* request, ::octaneapi::ApiFileName_getConcatResponse* response) { return this->getConcat(context, request, response); }));}
    void SetMessageAllocatorFor_getConcat(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_getConcatRequest, ::octaneapi::ApiFileName_getConcatResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_getConcatRequest, ::octaneapi::ApiFileName_getConcatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getConcat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConcat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getConcatRequest* /*request*/, ::octaneapi::ApiFileName_getConcatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getConcat(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_getConcatRequest* /*request*/, ::octaneapi::ApiFileName_getConcatResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_concat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_concat() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_concatRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_concatRequest* request, ::google::protobuf::Empty* response) { return this->concat(context, request, response); }));}
    void SetMessageAllocatorFor_concat(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_concatRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_concatRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_concat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status concat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_concatRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* concat(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_concatRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_equals() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_equalsRequest, ::octaneapi::ApiFileName_equalsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_equalsRequest* request, ::octaneapi::ApiFileName_equalsResponse* response) { return this->equals(context, request, response); }));}
    void SetMessageAllocatorFor_equals(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_equalsRequest, ::octaneapi::ApiFileName_equalsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_equalsRequest, ::octaneapi::ApiFileName_equalsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_equalsRequest* /*request*/, ::octaneapi::ApiFileName_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* equals(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_equalsRequest* /*request*/, ::octaneapi::ApiFileName_equalsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_notEquals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_notEquals() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_notEqualsRequest, ::octaneapi::ApiFileName_notEqualsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_notEqualsRequest* request, ::octaneapi::ApiFileName_notEqualsResponse* response) { return this->notEquals(context, request, response); }));}
    void SetMessageAllocatorFor_notEquals(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_notEqualsRequest, ::octaneapi::ApiFileName_notEqualsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_notEqualsRequest, ::octaneapi::ApiFileName_notEqualsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_notEquals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status notEquals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_notEqualsRequest* /*request*/, ::octaneapi::ApiFileName_notEqualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* notEquals(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_notEqualsRequest* /*request*/, ::octaneapi::ApiFileName_notEqualsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_lessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_lessThan() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_lessThanRequest, ::octaneapi::ApiFileName_lessThanResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_lessThanRequest* request, ::octaneapi::ApiFileName_lessThanResponse* response) { return this->lessThan(context, request, response); }));}
    void SetMessageAllocatorFor_lessThan(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_lessThanRequest, ::octaneapi::ApiFileName_lessThanResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_lessThanRequest, ::octaneapi::ApiFileName_lessThanResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_lessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status lessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_lessThanRequest* /*request*/, ::octaneapi::ApiFileName_lessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* lessThan(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_lessThanRequest* /*request*/, ::octaneapi::ApiFileName_lessThanResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_exactlyEquals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_exactlyEquals() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_exactlyEqualsRequest, ::octaneapi::ApiFileName_exactlyEqualsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest* request, ::octaneapi::ApiFileName_exactlyEqualsResponse* response) { return this->exactlyEquals(context, request, response); }));}
    void SetMessageAllocatorFor_exactlyEquals(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_exactlyEqualsRequest, ::octaneapi::ApiFileName_exactlyEqualsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_exactlyEqualsRequest, ::octaneapi::ApiFileName_exactlyEqualsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_exactlyEquals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exactlyEquals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_exactlyEqualsRequest* /*request*/, ::octaneapi::ApiFileName_exactlyEqualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* exactlyEquals(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_exactlyEqualsRequest* /*request*/, ::octaneapi::ApiFileName_exactlyEqualsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_exactlyLessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_exactlyLessThan() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_exactlyLessThanRequest, ::octaneapi::ApiFileName_exactlyLessThanResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest* request, ::octaneapi::ApiFileName_exactlyLessThanResponse* response) { return this->exactlyLessThan(context, request, response); }));}
    void SetMessageAllocatorFor_exactlyLessThan(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_exactlyLessThanRequest, ::octaneapi::ApiFileName_exactlyLessThanResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_exactlyLessThanRequest, ::octaneapi::ApiFileName_exactlyLessThanResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_exactlyLessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exactlyLessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_exactlyLessThanRequest* /*request*/, ::octaneapi::ApiFileName_exactlyLessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* exactlyLessThan(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_exactlyLessThanRequest* /*request*/, ::octaneapi::ApiFileName_exactlyLessThanResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_appendToFileName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_appendToFileName() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_appendToFileNameRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest* request, ::google::protobuf::Empty* response) { return this->appendToFileName(context, request, response); }));}
    void SetMessageAllocatorFor_appendToFileName(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_appendToFileNameRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_appendToFileNameRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_appendToFileName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status appendToFileName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_appendToFileNameRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* appendToFileName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_appendToFileNameRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_exists() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_existsRequest, ::octaneapi::ApiFileName_existsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_existsRequest* request, ::octaneapi::ApiFileName_existsResponse* response) { return this->exists(context, request, response); }));}
    void SetMessageAllocatorFor_exists(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_existsRequest, ::octaneapi::ApiFileName_existsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_existsRequest, ::octaneapi::ApiFileName_existsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exists(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsRequest* /*request*/, ::octaneapi::ApiFileName_existsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* exists(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_existsRequest* /*request*/, ::octaneapi::ApiFileName_existsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_existsAsFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_existsAsFile() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_existsAsFileRequest, ::octaneapi::ApiFileName_existsAsFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest* request, ::octaneapi::ApiFileName_existsAsFileResponse* response) { return this->existsAsFile(context, request, response); }));}
    void SetMessageAllocatorFor_existsAsFile(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_existsAsFileRequest, ::octaneapi::ApiFileName_existsAsFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_existsAsFileRequest, ::octaneapi::ApiFileName_existsAsFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_existsAsFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status existsAsFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsAsFileRequest* /*request*/, ::octaneapi::ApiFileName_existsAsFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* existsAsFile(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_existsAsFileRequest* /*request*/, ::octaneapi::ApiFileName_existsAsFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_existsAsDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_existsAsDirectory() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_existsAsDirectoryRequest, ::octaneapi::ApiFileName_existsAsDirectoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* request, ::octaneapi::ApiFileName_existsAsDirectoryResponse* response) { return this->existsAsDirectory(context, request, response); }));}
    void SetMessageAllocatorFor_existsAsDirectory(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_existsAsDirectoryRequest, ::octaneapi::ApiFileName_existsAsDirectoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_existsAsDirectoryRequest, ::octaneapi::ApiFileName_existsAsDirectoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_existsAsDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status existsAsDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* /*request*/, ::octaneapi::ApiFileName_existsAsDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* existsAsDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* /*request*/, ::octaneapi::ApiFileName_existsAsDirectoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_hasWriteAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_hasWriteAccess() {
      ::grpc::Service::MarkMethodCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_hasWriteAccessRequest, ::octaneapi::ApiFileName_hasWriteAccessResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest* request, ::octaneapi::ApiFileName_hasWriteAccessResponse* response) { return this->hasWriteAccess(context, request, response); }));}
    void SetMessageAllocatorFor_hasWriteAccess(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_hasWriteAccessRequest, ::octaneapi::ApiFileName_hasWriteAccessResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_hasWriteAccessRequest, ::octaneapi::ApiFileName_hasWriteAccessResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_hasWriteAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasWriteAccess(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_hasWriteAccessRequest* /*request*/, ::octaneapi::ApiFileName_hasWriteAccessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasWriteAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_hasWriteAccessRequest* /*request*/, ::octaneapi::ApiFileName_hasWriteAccessResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createDirectory() {
      ::grpc::Service::MarkMethodCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_createDirectoryRequest, ::octaneapi::ApiFileName_createDirectoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest* request, ::octaneapi::ApiFileName_createDirectoryResponse* response) { return this->createDirectory(context, request, response); }));}
    void SetMessageAllocatorFor_createDirectory(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileName_createDirectoryRequest, ::octaneapi::ApiFileName_createDirectoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileName_createDirectoryRequest, ::octaneapi::ApiFileName_createDirectoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_createDirectoryRequest* /*request*/, ::octaneapi::ApiFileName_createDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileName_createDirectoryRequest* /*request*/, ::octaneapi::ApiFileName_createDirectoryResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_create<WithCallbackMethod_destroy<WithCallbackMethod_set<WithCallbackMethod_clear<WithCallbackMethod_isEmpty<WithCallbackMethod_isAbsolute<WithCallbackMethod_isRelative<WithCallbackMethod_getParent<WithCallbackMethod_getFileOnly<WithCallbackMethod_getFullString<WithCallbackMethod_getRootString<WithCallbackMethod_getParentString<WithCallbackMethod_getFileString<WithCallbackMethod_getSuffix<WithCallbackMethod_setSuffix<WithCallbackMethod_withSuffix<WithCallbackMethod_makeRelativeTo<WithCallbackMethod_getConcat<WithCallbackMethod_concat<WithCallbackMethod_equals<WithCallbackMethod_notEquals<WithCallbackMethod_lessThan<WithCallbackMethod_exactlyEquals<WithCallbackMethod_exactlyLessThan<WithCallbackMethod_appendToFileName<WithCallbackMethod_exists<WithCallbackMethod_existsAsFile<WithCallbackMethod_existsAsDirectory<WithCallbackMethod_hasWriteAccess<WithCallbackMethod_createDirectory<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_createRequest* /*request*/, ::octaneapi::ApiFileName_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_destroy() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_set() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_setRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_clear() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isEmpty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isEmpty() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_isEmpty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isEmpty(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isEmptyRequest* /*request*/, ::octaneapi::ApiFileName_isEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isAbsolute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isAbsolute() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_isAbsolute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAbsolute(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isAbsoluteRequest* /*request*/, ::octaneapi::ApiFileName_isAbsoluteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isRelative : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isRelative() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_isRelative() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isRelative(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isRelativeRequest* /*request*/, ::octaneapi::ApiFileName_isRelativeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getParent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getParent() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_getParent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getParentRequest* /*request*/, ::octaneapi::ApiFileName_getParentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getFileOnly : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getFileOnly() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getFileOnly() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileOnly(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFileOnlyRequest* /*request*/, ::octaneapi::ApiFileName_getFileOnlyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getFullString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getFullString() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getFullString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFullString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFullStringRequest* /*request*/, ::octaneapi::ApiFileName_getFullStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getRootString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getRootString() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_getRootString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRootString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getRootStringRequest* /*request*/, ::octaneapi::ApiFileName_getRootStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getParentString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getParentString() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_getParentString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParentString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getParentStringRequest* /*request*/, ::octaneapi::ApiFileName_getParentStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getFileString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getFileString() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_getFileString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFileStringRequest* /*request*/, ::octaneapi::ApiFileName_getFileStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getSuffix() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_getSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getSuffixRequest* /*request*/, ::octaneapi::ApiFileName_getSuffixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setSuffix() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_setSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_setSuffixRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_withSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_withSuffix() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_withSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status withSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_withSuffixRequest* /*request*/, ::octaneapi::ApiFileName_withSuffixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_makeRelativeTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_makeRelativeTo() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_makeRelativeTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status makeRelativeTo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_makeRelativeToRequest* /*request*/, ::octaneapi::ApiFileName_makeRelativeToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getConcat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getConcat() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_getConcat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConcat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getConcatRequest* /*request*/, ::octaneapi::ApiFileName_getConcatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_concat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_concat() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_concat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status concat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_concatRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_equals() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_equalsRequest* /*request*/, ::octaneapi::ApiFileName_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_notEquals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_notEquals() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_notEquals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status notEquals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_notEqualsRequest* /*request*/, ::octaneapi::ApiFileName_notEqualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_lessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_lessThan() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_lessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status lessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_lessThanRequest* /*request*/, ::octaneapi::ApiFileName_lessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_exactlyEquals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_exactlyEquals() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_exactlyEquals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exactlyEquals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_exactlyEqualsRequest* /*request*/, ::octaneapi::ApiFileName_exactlyEqualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_exactlyLessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_exactlyLessThan() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_exactlyLessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exactlyLessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_exactlyLessThanRequest* /*request*/, ::octaneapi::ApiFileName_exactlyLessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_appendToFileName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_appendToFileName() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_appendToFileName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status appendToFileName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_appendToFileNameRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_exists() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exists(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsRequest* /*request*/, ::octaneapi::ApiFileName_existsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_existsAsFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_existsAsFile() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_existsAsFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status existsAsFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsAsFileRequest* /*request*/, ::octaneapi::ApiFileName_existsAsFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_existsAsDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_existsAsDirectory() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_existsAsDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status existsAsDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* /*request*/, ::octaneapi::ApiFileName_existsAsDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_hasWriteAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_hasWriteAccess() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_hasWriteAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasWriteAccess(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_hasWriteAccessRequest* /*request*/, ::octaneapi::ApiFileName_hasWriteAccessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createDirectory() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_createDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_createDirectoryRequest* /*request*/, ::octaneapi::ApiFileName_createDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_createRequest* /*request*/, ::octaneapi::ApiFileName_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_destroy() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_set() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_setRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_clear() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclear(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isEmpty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isEmpty() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_isEmpty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isEmpty(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isEmptyRequest* /*request*/, ::octaneapi::ApiFileName_isEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisEmpty(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isAbsolute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isAbsolute() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_isAbsolute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAbsolute(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isAbsoluteRequest* /*request*/, ::octaneapi::ApiFileName_isAbsoluteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisAbsolute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isRelative : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isRelative() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_isRelative() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isRelative(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isRelativeRequest* /*request*/, ::octaneapi::ApiFileName_isRelativeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisRelative(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getParent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getParent() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_getParent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getParentRequest* /*request*/, ::octaneapi::ApiFileName_getParentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetParent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getFileOnly : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getFileOnly() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getFileOnly() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileOnly(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFileOnlyRequest* /*request*/, ::octaneapi::ApiFileName_getFileOnlyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetFileOnly(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getFullString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getFullString() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getFullString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFullString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFullStringRequest* /*request*/, ::octaneapi::ApiFileName_getFullStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetFullString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getRootString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getRootString() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_getRootString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRootString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getRootStringRequest* /*request*/, ::octaneapi::ApiFileName_getRootStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRootString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getParentString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getParentString() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_getParentString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParentString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getParentStringRequest* /*request*/, ::octaneapi::ApiFileName_getParentStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetParentString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getFileString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getFileString() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_getFileString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFileStringRequest* /*request*/, ::octaneapi::ApiFileName_getFileStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetFileString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getSuffix() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_getSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getSuffixRequest* /*request*/, ::octaneapi::ApiFileName_getSuffixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSuffix(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setSuffix() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_setSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_setSuffixRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetSuffix(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_withSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_withSuffix() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_withSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status withSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_withSuffixRequest* /*request*/, ::octaneapi::ApiFileName_withSuffixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestwithSuffix(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_makeRelativeTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_makeRelativeTo() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_makeRelativeTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status makeRelativeTo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_makeRelativeToRequest* /*request*/, ::octaneapi::ApiFileName_makeRelativeToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmakeRelativeTo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getConcat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getConcat() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_getConcat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConcat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getConcatRequest* /*request*/, ::octaneapi::ApiFileName_getConcatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConcat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_concat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_concat() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_concat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status concat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_concatRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestconcat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_equals() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_equalsRequest* /*request*/, ::octaneapi::ApiFileName_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestequals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_notEquals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_notEquals() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_notEquals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status notEquals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_notEqualsRequest* /*request*/, ::octaneapi::ApiFileName_notEqualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnotEquals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_lessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_lessThan() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_lessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status lessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_lessThanRequest* /*request*/, ::octaneapi::ApiFileName_lessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlessThan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_exactlyEquals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_exactlyEquals() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_exactlyEquals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exactlyEquals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_exactlyEqualsRequest* /*request*/, ::octaneapi::ApiFileName_exactlyEqualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexactlyEquals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_exactlyLessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_exactlyLessThan() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_exactlyLessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exactlyLessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_exactlyLessThanRequest* /*request*/, ::octaneapi::ApiFileName_exactlyLessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexactlyLessThan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_appendToFileName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_appendToFileName() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_appendToFileName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status appendToFileName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_appendToFileNameRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestappendToFileName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_exists() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exists(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsRequest* /*request*/, ::octaneapi::ApiFileName_existsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestexists(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_existsAsFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_existsAsFile() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_existsAsFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status existsAsFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsAsFileRequest* /*request*/, ::octaneapi::ApiFileName_existsAsFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexistsAsFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_existsAsDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_existsAsDirectory() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_existsAsDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status existsAsDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* /*request*/, ::octaneapi::ApiFileName_existsAsDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexistsAsDirectory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_hasWriteAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_hasWriteAccess() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_hasWriteAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasWriteAccess(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_hasWriteAccessRequest* /*request*/, ::octaneapi::ApiFileName_hasWriteAccessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasWriteAccess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createDirectory() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_createDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_createDirectoryRequest* /*request*/, ::octaneapi::ApiFileName_createDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateDirectory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_create() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->create(context, request, response); }));
    }
    ~WithRawCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_createRequest* /*request*/, ::octaneapi::ApiFileName_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->destroy(context, request, response); }));
    }
    ~WithRawCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_set() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->set(context, request, response); }));
    }
    ~WithRawCallbackMethod_set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_setRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* set(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_clear() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->clear(context, request, response); }));
    }
    ~WithRawCallbackMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clear(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isEmpty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isEmpty() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isEmpty(context, request, response); }));
    }
    ~WithRawCallbackMethod_isEmpty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isEmpty(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isEmptyRequest* /*request*/, ::octaneapi::ApiFileName_isEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isEmpty(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isAbsolute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isAbsolute() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isAbsolute(context, request, response); }));
    }
    ~WithRawCallbackMethod_isAbsolute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAbsolute(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isAbsoluteRequest* /*request*/, ::octaneapi::ApiFileName_isAbsoluteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isAbsolute(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isRelative : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isRelative() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isRelative(context, request, response); }));
    }
    ~WithRawCallbackMethod_isRelative() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isRelative(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isRelativeRequest* /*request*/, ::octaneapi::ApiFileName_isRelativeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isRelative(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getParent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getParent() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getParent(context, request, response); }));
    }
    ~WithRawCallbackMethod_getParent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getParentRequest* /*request*/, ::octaneapi::ApiFileName_getParentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getParent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getFileOnly : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getFileOnly() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getFileOnly(context, request, response); }));
    }
    ~WithRawCallbackMethod_getFileOnly() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileOnly(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFileOnlyRequest* /*request*/, ::octaneapi::ApiFileName_getFileOnlyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getFileOnly(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getFullString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getFullString() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getFullString(context, request, response); }));
    }
    ~WithRawCallbackMethod_getFullString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFullString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFullStringRequest* /*request*/, ::octaneapi::ApiFileName_getFullStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getFullString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getRootString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getRootString() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getRootString(context, request, response); }));
    }
    ~WithRawCallbackMethod_getRootString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRootString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getRootStringRequest* /*request*/, ::octaneapi::ApiFileName_getRootStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getRootString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getParentString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getParentString() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getParentString(context, request, response); }));
    }
    ~WithRawCallbackMethod_getParentString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParentString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getParentStringRequest* /*request*/, ::octaneapi::ApiFileName_getParentStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getParentString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getFileString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getFileString() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getFileString(context, request, response); }));
    }
    ~WithRawCallbackMethod_getFileString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFileStringRequest* /*request*/, ::octaneapi::ApiFileName_getFileStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getFileString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getSuffix() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getSuffix(context, request, response); }));
    }
    ~WithRawCallbackMethod_getSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getSuffixRequest* /*request*/, ::octaneapi::ApiFileName_getSuffixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getSuffix(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setSuffix() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setSuffix(context, request, response); }));
    }
    ~WithRawCallbackMethod_setSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_setSuffixRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setSuffix(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_withSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_withSuffix() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->withSuffix(context, request, response); }));
    }
    ~WithRawCallbackMethod_withSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status withSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_withSuffixRequest* /*request*/, ::octaneapi::ApiFileName_withSuffixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* withSuffix(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_makeRelativeTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_makeRelativeTo() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->makeRelativeTo(context, request, response); }));
    }
    ~WithRawCallbackMethod_makeRelativeTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status makeRelativeTo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_makeRelativeToRequest* /*request*/, ::octaneapi::ApiFileName_makeRelativeToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* makeRelativeTo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getConcat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getConcat() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getConcat(context, request, response); }));
    }
    ~WithRawCallbackMethod_getConcat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConcat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getConcatRequest* /*request*/, ::octaneapi::ApiFileName_getConcatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getConcat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_concat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_concat() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->concat(context, request, response); }));
    }
    ~WithRawCallbackMethod_concat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status concat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_concatRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* concat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_equals() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->equals(context, request, response); }));
    }
    ~WithRawCallbackMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_equalsRequest* /*request*/, ::octaneapi::ApiFileName_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* equals(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_notEquals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_notEquals() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->notEquals(context, request, response); }));
    }
    ~WithRawCallbackMethod_notEquals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status notEquals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_notEqualsRequest* /*request*/, ::octaneapi::ApiFileName_notEqualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* notEquals(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_lessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_lessThan() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->lessThan(context, request, response); }));
    }
    ~WithRawCallbackMethod_lessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status lessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_lessThanRequest* /*request*/, ::octaneapi::ApiFileName_lessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* lessThan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_exactlyEquals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_exactlyEquals() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->exactlyEquals(context, request, response); }));
    }
    ~WithRawCallbackMethod_exactlyEquals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exactlyEquals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_exactlyEqualsRequest* /*request*/, ::octaneapi::ApiFileName_exactlyEqualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* exactlyEquals(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_exactlyLessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_exactlyLessThan() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->exactlyLessThan(context, request, response); }));
    }
    ~WithRawCallbackMethod_exactlyLessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exactlyLessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_exactlyLessThanRequest* /*request*/, ::octaneapi::ApiFileName_exactlyLessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* exactlyLessThan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_appendToFileName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_appendToFileName() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->appendToFileName(context, request, response); }));
    }
    ~WithRawCallbackMethod_appendToFileName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status appendToFileName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_appendToFileNameRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* appendToFileName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_exists() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->exists(context, request, response); }));
    }
    ~WithRawCallbackMethod_exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exists(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsRequest* /*request*/, ::octaneapi::ApiFileName_existsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* exists(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_existsAsFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_existsAsFile() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->existsAsFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_existsAsFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status existsAsFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsAsFileRequest* /*request*/, ::octaneapi::ApiFileName_existsAsFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* existsAsFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_existsAsDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_existsAsDirectory() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->existsAsDirectory(context, request, response); }));
    }
    ~WithRawCallbackMethod_existsAsDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status existsAsDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* /*request*/, ::octaneapi::ApiFileName_existsAsDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* existsAsDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_hasWriteAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_hasWriteAccess() {
      ::grpc::Service::MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->hasWriteAccess(context, request, response); }));
    }
    ~WithRawCallbackMethod_hasWriteAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasWriteAccess(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_hasWriteAccessRequest* /*request*/, ::octaneapi::ApiFileName_hasWriteAccessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasWriteAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createDirectory() {
      ::grpc::Service::MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createDirectory(context, request, response); }));
    }
    ~WithRawCallbackMethod_createDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_createDirectoryRequest* /*request*/, ::octaneapi::ApiFileName_createDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_createRequest, ::octaneapi::ApiFileName_createResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_createRequest, ::octaneapi::ApiFileName_createResponse>* streamer) {
                       return this->Streamedcreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_createRequest* /*request*/, ::octaneapi::ApiFileName_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_createRequest,::octaneapi::ApiFileName_createResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_destroy() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_destroyRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_destroyRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streameddestroy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddestroy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_destroyRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_set() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_setRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_setRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status set(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_setRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_setRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_clear() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_clearRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_clearRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedclear(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclear(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_clearRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isEmpty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isEmpty() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_isEmptyRequest, ::octaneapi::ApiFileName_isEmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_isEmptyRequest, ::octaneapi::ApiFileName_isEmptyResponse>* streamer) {
                       return this->StreamedisEmpty(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isEmpty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isEmpty(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isEmptyRequest* /*request*/, ::octaneapi::ApiFileName_isEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisEmpty(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_isEmptyRequest,::octaneapi::ApiFileName_isEmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isAbsolute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isAbsolute() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_isAbsoluteRequest, ::octaneapi::ApiFileName_isAbsoluteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_isAbsoluteRequest, ::octaneapi::ApiFileName_isAbsoluteResponse>* streamer) {
                       return this->StreamedisAbsolute(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isAbsolute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isAbsolute(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isAbsoluteRequest* /*request*/, ::octaneapi::ApiFileName_isAbsoluteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisAbsolute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_isAbsoluteRequest,::octaneapi::ApiFileName_isAbsoluteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isRelative : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isRelative() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_isRelativeRequest, ::octaneapi::ApiFileName_isRelativeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_isRelativeRequest, ::octaneapi::ApiFileName_isRelativeResponse>* streamer) {
                       return this->StreamedisRelative(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isRelative() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isRelative(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_isRelativeRequest* /*request*/, ::octaneapi::ApiFileName_isRelativeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisRelative(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_isRelativeRequest,::octaneapi::ApiFileName_isRelativeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getParent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getParent() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_getParentRequest, ::octaneapi::ApiFileName_getParentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_getParentRequest, ::octaneapi::ApiFileName_getParentResponse>* streamer) {
                       return this->StreamedgetParent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getParent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getParent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getParentRequest* /*request*/, ::octaneapi::ApiFileName_getParentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetParent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_getParentRequest,::octaneapi::ApiFileName_getParentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getFileOnly : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getFileOnly() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_getFileOnlyRequest, ::octaneapi::ApiFileName_getFileOnlyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_getFileOnlyRequest, ::octaneapi::ApiFileName_getFileOnlyResponse>* streamer) {
                       return this->StreamedgetFileOnly(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getFileOnly() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getFileOnly(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFileOnlyRequest* /*request*/, ::octaneapi::ApiFileName_getFileOnlyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetFileOnly(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_getFileOnlyRequest,::octaneapi::ApiFileName_getFileOnlyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getFullString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getFullString() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_getFullStringRequest, ::octaneapi::ApiFileName_getFullStringResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_getFullStringRequest, ::octaneapi::ApiFileName_getFullStringResponse>* streamer) {
                       return this->StreamedgetFullString(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getFullString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getFullString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFullStringRequest* /*request*/, ::octaneapi::ApiFileName_getFullStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetFullString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_getFullStringRequest,::octaneapi::ApiFileName_getFullStringResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getRootString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getRootString() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_getRootStringRequest, ::octaneapi::ApiFileName_getRootStringResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_getRootStringRequest, ::octaneapi::ApiFileName_getRootStringResponse>* streamer) {
                       return this->StreamedgetRootString(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getRootString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRootString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getRootStringRequest* /*request*/, ::octaneapi::ApiFileName_getRootStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetRootString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_getRootStringRequest,::octaneapi::ApiFileName_getRootStringResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getParentString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getParentString() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_getParentStringRequest, ::octaneapi::ApiFileName_getParentStringResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_getParentStringRequest, ::octaneapi::ApiFileName_getParentStringResponse>* streamer) {
                       return this->StreamedgetParentString(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getParentString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getParentString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getParentStringRequest* /*request*/, ::octaneapi::ApiFileName_getParentStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetParentString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_getParentStringRequest,::octaneapi::ApiFileName_getParentStringResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getFileString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getFileString() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_getFileStringRequest, ::octaneapi::ApiFileName_getFileStringResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_getFileStringRequest, ::octaneapi::ApiFileName_getFileStringResponse>* streamer) {
                       return this->StreamedgetFileString(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getFileString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getFileString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getFileStringRequest* /*request*/, ::octaneapi::ApiFileName_getFileStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetFileString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_getFileStringRequest,::octaneapi::ApiFileName_getFileStringResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getSuffix() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_getSuffixRequest, ::octaneapi::ApiFileName_getSuffixResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_getSuffixRequest, ::octaneapi::ApiFileName_getSuffixResponse>* streamer) {
                       return this->StreamedgetSuffix(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getSuffixRequest* /*request*/, ::octaneapi::ApiFileName_getSuffixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetSuffix(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_getSuffixRequest,::octaneapi::ApiFileName_getSuffixResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setSuffix() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_setSuffixRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_setSuffixRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetSuffix(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_setSuffixRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetSuffix(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_setSuffixRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_withSuffix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_withSuffix() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_withSuffixRequest, ::octaneapi::ApiFileName_withSuffixResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_withSuffixRequest, ::octaneapi::ApiFileName_withSuffixResponse>* streamer) {
                       return this->StreamedwithSuffix(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_withSuffix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status withSuffix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_withSuffixRequest* /*request*/, ::octaneapi::ApiFileName_withSuffixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedwithSuffix(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_withSuffixRequest,::octaneapi::ApiFileName_withSuffixResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_makeRelativeTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_makeRelativeTo() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_makeRelativeToRequest, ::octaneapi::ApiFileName_makeRelativeToResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_makeRelativeToRequest, ::octaneapi::ApiFileName_makeRelativeToResponse>* streamer) {
                       return this->StreamedmakeRelativeTo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_makeRelativeTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status makeRelativeTo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_makeRelativeToRequest* /*request*/, ::octaneapi::ApiFileName_makeRelativeToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedmakeRelativeTo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_makeRelativeToRequest,::octaneapi::ApiFileName_makeRelativeToResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getConcat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getConcat() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_getConcatRequest, ::octaneapi::ApiFileName_getConcatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_getConcatRequest, ::octaneapi::ApiFileName_getConcatResponse>* streamer) {
                       return this->StreamedgetConcat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getConcat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getConcat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_getConcatRequest* /*request*/, ::octaneapi::ApiFileName_getConcatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetConcat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_getConcatRequest,::octaneapi::ApiFileName_getConcatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_concat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_concat() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_concatRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_concatRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedconcat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_concat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status concat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_concatRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedconcat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_concatRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_equals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_equals() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_equalsRequest, ::octaneapi::ApiFileName_equalsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_equalsRequest, ::octaneapi::ApiFileName_equalsResponse>* streamer) {
                       return this->Streamedequals(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_equals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status equals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_equalsRequest* /*request*/, ::octaneapi::ApiFileName_equalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedequals(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_equalsRequest,::octaneapi::ApiFileName_equalsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_notEquals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_notEquals() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_notEqualsRequest, ::octaneapi::ApiFileName_notEqualsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_notEqualsRequest, ::octaneapi::ApiFileName_notEqualsResponse>* streamer) {
                       return this->StreamednotEquals(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_notEquals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status notEquals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_notEqualsRequest* /*request*/, ::octaneapi::ApiFileName_notEqualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamednotEquals(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_notEqualsRequest,::octaneapi::ApiFileName_notEqualsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_lessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_lessThan() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_lessThanRequest, ::octaneapi::ApiFileName_lessThanResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_lessThanRequest, ::octaneapi::ApiFileName_lessThanResponse>* streamer) {
                       return this->StreamedlessThan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_lessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status lessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_lessThanRequest* /*request*/, ::octaneapi::ApiFileName_lessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlessThan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_lessThanRequest,::octaneapi::ApiFileName_lessThanResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_exactlyEquals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_exactlyEquals() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_exactlyEqualsRequest, ::octaneapi::ApiFileName_exactlyEqualsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_exactlyEqualsRequest, ::octaneapi::ApiFileName_exactlyEqualsResponse>* streamer) {
                       return this->StreamedexactlyEquals(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_exactlyEquals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status exactlyEquals(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_exactlyEqualsRequest* /*request*/, ::octaneapi::ApiFileName_exactlyEqualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedexactlyEquals(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_exactlyEqualsRequest,::octaneapi::ApiFileName_exactlyEqualsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_exactlyLessThan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_exactlyLessThan() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_exactlyLessThanRequest, ::octaneapi::ApiFileName_exactlyLessThanResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_exactlyLessThanRequest, ::octaneapi::ApiFileName_exactlyLessThanResponse>* streamer) {
                       return this->StreamedexactlyLessThan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_exactlyLessThan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status exactlyLessThan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_exactlyLessThanRequest* /*request*/, ::octaneapi::ApiFileName_exactlyLessThanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedexactlyLessThan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_exactlyLessThanRequest,::octaneapi::ApiFileName_exactlyLessThanResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_appendToFileName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_appendToFileName() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_appendToFileNameRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_appendToFileNameRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedappendToFileName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_appendToFileName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status appendToFileName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_appendToFileNameRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedappendToFileName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_appendToFileNameRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_exists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_exists() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_existsRequest, ::octaneapi::ApiFileName_existsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_existsRequest, ::octaneapi::ApiFileName_existsResponse>* streamer) {
                       return this->Streamedexists(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_exists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status exists(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsRequest* /*request*/, ::octaneapi::ApiFileName_existsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedexists(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_existsRequest,::octaneapi::ApiFileName_existsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_existsAsFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_existsAsFile() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_existsAsFileRequest, ::octaneapi::ApiFileName_existsAsFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_existsAsFileRequest, ::octaneapi::ApiFileName_existsAsFileResponse>* streamer) {
                       return this->StreamedexistsAsFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_existsAsFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status existsAsFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsAsFileRequest* /*request*/, ::octaneapi::ApiFileName_existsAsFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedexistsAsFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_existsAsFileRequest,::octaneapi::ApiFileName_existsAsFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_existsAsDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_existsAsDirectory() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_existsAsDirectoryRequest, ::octaneapi::ApiFileName_existsAsDirectoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_existsAsDirectoryRequest, ::octaneapi::ApiFileName_existsAsDirectoryResponse>* streamer) {
                       return this->StreamedexistsAsDirectory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_existsAsDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status existsAsDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* /*request*/, ::octaneapi::ApiFileName_existsAsDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedexistsAsDirectory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_existsAsDirectoryRequest,::octaneapi::ApiFileName_existsAsDirectoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_hasWriteAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_hasWriteAccess() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_hasWriteAccessRequest, ::octaneapi::ApiFileName_hasWriteAccessResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_hasWriteAccessRequest, ::octaneapi::ApiFileName_hasWriteAccessResponse>* streamer) {
                       return this->StreamedhasWriteAccess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_hasWriteAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status hasWriteAccess(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_hasWriteAccessRequest* /*request*/, ::octaneapi::ApiFileName_hasWriteAccessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedhasWriteAccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_hasWriteAccessRequest,::octaneapi::ApiFileName_hasWriteAccessResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createDirectory() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileName_createDirectoryRequest, ::octaneapi::ApiFileName_createDirectoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileName_createDirectoryRequest, ::octaneapi::ApiFileName_createDirectoryResponse>* streamer) {
                       return this->StreamedcreateDirectory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileName_createDirectoryRequest* /*request*/, ::octaneapi::ApiFileName_createDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateDirectory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileName_createDirectoryRequest,::octaneapi::ApiFileName_createDirectoryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_set<WithStreamedUnaryMethod_clear<WithStreamedUnaryMethod_isEmpty<WithStreamedUnaryMethod_isAbsolute<WithStreamedUnaryMethod_isRelative<WithStreamedUnaryMethod_getParent<WithStreamedUnaryMethod_getFileOnly<WithStreamedUnaryMethod_getFullString<WithStreamedUnaryMethod_getRootString<WithStreamedUnaryMethod_getParentString<WithStreamedUnaryMethod_getFileString<WithStreamedUnaryMethod_getSuffix<WithStreamedUnaryMethod_setSuffix<WithStreamedUnaryMethod_withSuffix<WithStreamedUnaryMethod_makeRelativeTo<WithStreamedUnaryMethod_getConcat<WithStreamedUnaryMethod_concat<WithStreamedUnaryMethod_equals<WithStreamedUnaryMethod_notEquals<WithStreamedUnaryMethod_lessThan<WithStreamedUnaryMethod_exactlyEquals<WithStreamedUnaryMethod_exactlyLessThan<WithStreamedUnaryMethod_appendToFileName<WithStreamedUnaryMethod_exists<WithStreamedUnaryMethod_existsAsFile<WithStreamedUnaryMethod_existsAsDirectory<WithStreamedUnaryMethod_hasWriteAccess<WithStreamedUnaryMethod_createDirectory<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_set<WithStreamedUnaryMethod_clear<WithStreamedUnaryMethod_isEmpty<WithStreamedUnaryMethod_isAbsolute<WithStreamedUnaryMethod_isRelative<WithStreamedUnaryMethod_getParent<WithStreamedUnaryMethod_getFileOnly<WithStreamedUnaryMethod_getFullString<WithStreamedUnaryMethod_getRootString<WithStreamedUnaryMethod_getParentString<WithStreamedUnaryMethod_getFileString<WithStreamedUnaryMethod_getSuffix<WithStreamedUnaryMethod_setSuffix<WithStreamedUnaryMethod_withSuffix<WithStreamedUnaryMethod_makeRelativeTo<WithStreamedUnaryMethod_getConcat<WithStreamedUnaryMethod_concat<WithStreamedUnaryMethod_equals<WithStreamedUnaryMethod_notEquals<WithStreamedUnaryMethod_lessThan<WithStreamedUnaryMethod_exactlyEquals<WithStreamedUnaryMethod_exactlyLessThan<WithStreamedUnaryMethod_appendToFileName<WithStreamedUnaryMethod_exists<WithStreamedUnaryMethod_existsAsFile<WithStreamedUnaryMethod_existsAsDirectory<WithStreamedUnaryMethod_hasWriteAccess<WithStreamedUnaryMethod_createDirectory<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apifilename_2eproto__INCLUDED
