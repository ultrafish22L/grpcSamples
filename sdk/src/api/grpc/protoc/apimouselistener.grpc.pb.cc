// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apimouselistener.proto

#include "apimouselistener.pb.h"
#include "apimouselistener.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiMouseEventService_method_names[] = {
  "/octaneapi.ApiMouseEventService/make",
};

std::unique_ptr< ApiMouseEventService::Stub> ApiMouseEventService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiMouseEventService::Stub> stub(new ApiMouseEventService::Stub(channel, options));
  return stub;
}

ApiMouseEventService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_make_(ApiMouseEventService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiMouseEventService::Stub::make(::grpc::ClientContext* context, const ::octaneapi::ApiMouseEvent_makeRequest& request, ::octaneapi::ApiMouseEvent_makeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMouseEvent_makeRequest, ::octaneapi::ApiMouseEvent_makeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_make_, context, request, response);
}

void ApiMouseEventService::Stub::async::make(::grpc::ClientContext* context, const ::octaneapi::ApiMouseEvent_makeRequest* request, ::octaneapi::ApiMouseEvent_makeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMouseEvent_makeRequest, ::octaneapi::ApiMouseEvent_makeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_make_, context, request, response, std::move(f));
}

void ApiMouseEventService::Stub::async::make(::grpc::ClientContext* context, const ::octaneapi::ApiMouseEvent_makeRequest* request, ::octaneapi::ApiMouseEvent_makeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_make_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMouseEvent_makeResponse>* ApiMouseEventService::Stub::PrepareAsyncmakeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMouseEvent_makeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMouseEvent_makeResponse, ::octaneapi::ApiMouseEvent_makeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_make_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMouseEvent_makeResponse>* ApiMouseEventService::Stub::AsyncmakeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMouseEvent_makeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmakeRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiMouseEventService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMouseEventService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMouseEventService::Service, ::octaneapi::ApiMouseEvent_makeRequest, ::octaneapi::ApiMouseEvent_makeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMouseEventService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMouseEvent_makeRequest* req,
             ::octaneapi::ApiMouseEvent_makeResponse* resp) {
               return service->make(ctx, req, resp);
             }, this)));
}

ApiMouseEventService::Service::~Service() {
}

::grpc::Status ApiMouseEventService::Service::make(::grpc::ServerContext* context, const ::octaneapi::ApiMouseEvent_makeRequest* request, ::octaneapi::ApiMouseEvent_makeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ApiMouseListenerService_method_names[] = {
  "/octaneapi.ApiMouseListenerService/create",
  "/octaneapi.ApiMouseListenerService/destroy",
};

std::unique_ptr< ApiMouseListenerService::Stub> ApiMouseListenerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiMouseListenerService::Stub> stub(new ApiMouseListenerService::Stub(channel, options));
  return stub;
}

ApiMouseListenerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create_(ApiMouseListenerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(ApiMouseListenerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiMouseListenerService::Stub::create(::grpc::ClientContext* context, const ::octaneapi::ApiMouseListener_createRequest& request, ::octaneapi::ApiMouseListener_createResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMouseListener_createRequest, ::octaneapi::ApiMouseListener_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_, context, request, response);
}

void ApiMouseListenerService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiMouseListener_createRequest* request, ::octaneapi::ApiMouseListener_createResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMouseListener_createRequest, ::octaneapi::ApiMouseListener_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void ApiMouseListenerService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiMouseListener_createRequest* request, ::octaneapi::ApiMouseListener_createResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMouseListener_createResponse>* ApiMouseListenerService::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMouseListener_createRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMouseListener_createResponse, ::octaneapi::ApiMouseListener_createRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMouseListener_createResponse>* ApiMouseListenerService::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMouseListener_createRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMouseListenerService::Stub::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiMouseListener_destroyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMouseListener_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void ApiMouseListenerService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiMouseListener_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMouseListener_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void ApiMouseListenerService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiMouseListener_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiMouseListenerService::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMouseListener_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiMouseListener_destroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiMouseListenerService::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMouseListener_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiMouseListenerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMouseListenerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMouseListenerService::Service, ::octaneapi::ApiMouseListener_createRequest, ::octaneapi::ApiMouseListener_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMouseListenerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMouseListener_createRequest* req,
             ::octaneapi::ApiMouseListener_createResponse* resp) {
               return service->create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMouseListenerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMouseListenerService::Service, ::octaneapi::ApiMouseListener_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMouseListenerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMouseListener_destroyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
}

ApiMouseListenerService::Service::~Service() {
}

::grpc::Status ApiMouseListenerService::Service::create(::grpc::ServerContext* context, const ::octaneapi::ApiMouseListener_createRequest* request, ::octaneapi::ApiMouseListener_createResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMouseListenerService::Service::destroy(::grpc::ServerContext* context, const ::octaneapi::ApiMouseListener_destroyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ApiMouseWheelDetailsService_method_names[] = {
  "/octaneapi.ApiMouseWheelDetailsService/make1",
};

std::unique_ptr< ApiMouseWheelDetailsService::Stub> ApiMouseWheelDetailsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiMouseWheelDetailsService::Stub> stub(new ApiMouseWheelDetailsService::Stub(channel, options));
  return stub;
}

ApiMouseWheelDetailsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_make1_(ApiMouseWheelDetailsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiMouseWheelDetailsService::Stub::make1(::grpc::ClientContext* context, const ::octaneapi::ApiMouseWheelDetails_makeRequest& request, ::octaneapi::ApiMouseWheelDetails_makeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMouseWheelDetails_makeRequest, ::octaneapi::ApiMouseWheelDetails_makeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_make1_, context, request, response);
}

void ApiMouseWheelDetailsService::Stub::async::make1(::grpc::ClientContext* context, const ::octaneapi::ApiMouseWheelDetails_makeRequest* request, ::octaneapi::ApiMouseWheelDetails_makeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMouseWheelDetails_makeRequest, ::octaneapi::ApiMouseWheelDetails_makeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_make1_, context, request, response, std::move(f));
}

void ApiMouseWheelDetailsService::Stub::async::make1(::grpc::ClientContext* context, const ::octaneapi::ApiMouseWheelDetails_makeRequest* request, ::octaneapi::ApiMouseWheelDetails_makeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_make1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMouseWheelDetails_makeResponse>* ApiMouseWheelDetailsService::Stub::PrepareAsyncmake1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMouseWheelDetails_makeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMouseWheelDetails_makeResponse, ::octaneapi::ApiMouseWheelDetails_makeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_make1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMouseWheelDetails_makeResponse>* ApiMouseWheelDetailsService::Stub::Asyncmake1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMouseWheelDetails_makeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmake1Raw(context, request, cq);
  result->StartCall();
  return result;
}

ApiMouseWheelDetailsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMouseWheelDetailsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMouseWheelDetailsService::Service, ::octaneapi::ApiMouseWheelDetails_makeRequest, ::octaneapi::ApiMouseWheelDetails_makeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMouseWheelDetailsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMouseWheelDetails_makeRequest* req,
             ::octaneapi::ApiMouseWheelDetails_makeResponse* resp) {
               return service->make1(ctx, req, resp);
             }, this)));
}

ApiMouseWheelDetailsService::Service::~Service() {
}

::grpc::Status ApiMouseWheelDetailsService::Service::make1(::grpc::ServerContext* context, const ::octaneapi::ApiMouseWheelDetails_makeRequest* request, ::octaneapi::ApiMouseWheelDetails_makeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

