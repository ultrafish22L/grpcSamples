// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apitable.proto

#include "apitable.pb.h"
#include "apitable.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiTableService_method_names[] = {
  "/octaneapi.ApiTableService/create",
  "/octaneapi.ApiTableService/destroy",
  "/octaneapi.ApiTableService/updateContent",
  "/octaneapi.ApiTableService/selectRow",
  "/octaneapi.ApiTableService/selectRangeOfRows",
  "/octaneapi.ApiTableService/deselectRow",
  "/octaneapi.ApiTableService/deselectAllRows",
  "/octaneapi.ApiTableService/flipRowSelection",
  "/octaneapi.ApiTableService/isRowSelected",
  "/octaneapi.ApiTableService/numSelectedRows",
  "/octaneapi.ApiTableService/selectedRow",
  "/octaneapi.ApiTableService/lastRowSelected",
};

std::unique_ptr< ApiTableService::Stub> ApiTableService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiTableService::Stub> stub(new ApiTableService::Stub(channel, options));
  return stub;
}

ApiTableService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create_(ApiTableService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(ApiTableService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_updateContent_(ApiTableService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_selectRow_(ApiTableService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_selectRangeOfRows_(ApiTableService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deselectRow_(ApiTableService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deselectAllRows_(ApiTableService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_flipRowSelection_(ApiTableService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isRowSelected_(ApiTableService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_numSelectedRows_(ApiTableService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_selectedRow_(ApiTableService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_lastRowSelected_(ApiTableService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiTableService::Stub::create(::grpc::ClientContext* context, const ::octaneapi::ApiTable_createRequest& request, ::octaneapi::ApiTable_createResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTable_createRequest, ::octaneapi::ApiTable_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_, context, request, response);
}

void ApiTableService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiTable_createRequest* request, ::octaneapi::ApiTable_createResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTable_createRequest, ::octaneapi::ApiTable_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void ApiTableService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiTable_createRequest* request, ::octaneapi::ApiTable_createResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTable_createResponse>* ApiTableService::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_createRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTable_createResponse, ::octaneapi::ApiTable_createRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTable_createResponse>* ApiTableService::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_createRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTableService::Stub::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiTable_destroyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTable_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void ApiTableService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiTable_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTable_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void ApiTableService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiTable_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTableService::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTable_destroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTableService::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTableService::Stub::updateContent(::grpc::ClientContext* context, const ::octaneapi::ApiTable_updateContentRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTable_updateContentRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_updateContent_, context, request, response);
}

void ApiTableService::Stub::async::updateContent(::grpc::ClientContext* context, const ::octaneapi::ApiTable_updateContentRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTable_updateContentRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updateContent_, context, request, response, std::move(f));
}

void ApiTableService::Stub::async::updateContent(::grpc::ClientContext* context, const ::octaneapi::ApiTable_updateContentRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updateContent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTableService::Stub::PrepareAsyncupdateContentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_updateContentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTable_updateContentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_updateContent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTableService::Stub::AsyncupdateContentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_updateContentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncupdateContentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTableService::Stub::selectRow(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectRowRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTable_selectRowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_selectRow_, context, request, response);
}

void ApiTableService::Stub::async::selectRow(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectRowRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTable_selectRowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_selectRow_, context, request, response, std::move(f));
}

void ApiTableService::Stub::async::selectRow(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectRowRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_selectRow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTableService::Stub::PrepareAsyncselectRowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTable_selectRowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_selectRow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTableService::Stub::AsyncselectRowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectRowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncselectRowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTableService::Stub::selectRangeOfRows(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectRangeOfRowsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTable_selectRangeOfRowsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_selectRangeOfRows_, context, request, response);
}

void ApiTableService::Stub::async::selectRangeOfRows(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectRangeOfRowsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTable_selectRangeOfRowsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_selectRangeOfRows_, context, request, response, std::move(f));
}

void ApiTableService::Stub::async::selectRangeOfRows(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectRangeOfRowsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_selectRangeOfRows_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTableService::Stub::PrepareAsyncselectRangeOfRowsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectRangeOfRowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTable_selectRangeOfRowsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_selectRangeOfRows_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTableService::Stub::AsyncselectRangeOfRowsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectRangeOfRowsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncselectRangeOfRowsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTableService::Stub::deselectRow(::grpc::ClientContext* context, const ::octaneapi::ApiTable_deselectRowRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTable_deselectRowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deselectRow_, context, request, response);
}

void ApiTableService::Stub::async::deselectRow(::grpc::ClientContext* context, const ::octaneapi::ApiTable_deselectRowRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTable_deselectRowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deselectRow_, context, request, response, std::move(f));
}

void ApiTableService::Stub::async::deselectRow(::grpc::ClientContext* context, const ::octaneapi::ApiTable_deselectRowRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deselectRow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTableService::Stub::PrepareAsyncdeselectRowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_deselectRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTable_deselectRowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deselectRow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTableService::Stub::AsyncdeselectRowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_deselectRowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeselectRowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTableService::Stub::deselectAllRows(::grpc::ClientContext* context, const ::octaneapi::ApiTable_deselectAllRowsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTable_deselectAllRowsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deselectAllRows_, context, request, response);
}

void ApiTableService::Stub::async::deselectAllRows(::grpc::ClientContext* context, const ::octaneapi::ApiTable_deselectAllRowsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTable_deselectAllRowsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deselectAllRows_, context, request, response, std::move(f));
}

void ApiTableService::Stub::async::deselectAllRows(::grpc::ClientContext* context, const ::octaneapi::ApiTable_deselectAllRowsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deselectAllRows_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTableService::Stub::PrepareAsyncdeselectAllRowsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_deselectAllRowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTable_deselectAllRowsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deselectAllRows_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTableService::Stub::AsyncdeselectAllRowsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_deselectAllRowsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeselectAllRowsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTableService::Stub::flipRowSelection(::grpc::ClientContext* context, const ::octaneapi::ApiTable_flipRowSelectionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTable_flipRowSelectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_flipRowSelection_, context, request, response);
}

void ApiTableService::Stub::async::flipRowSelection(::grpc::ClientContext* context, const ::octaneapi::ApiTable_flipRowSelectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTable_flipRowSelectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_flipRowSelection_, context, request, response, std::move(f));
}

void ApiTableService::Stub::async::flipRowSelection(::grpc::ClientContext* context, const ::octaneapi::ApiTable_flipRowSelectionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_flipRowSelection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTableService::Stub::PrepareAsyncflipRowSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_flipRowSelectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTable_flipRowSelectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_flipRowSelection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTableService::Stub::AsyncflipRowSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_flipRowSelectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncflipRowSelectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTableService::Stub::isRowSelected(::grpc::ClientContext* context, const ::octaneapi::ApiTable_isRowSelectedRequest& request, ::octaneapi::ApiTable_isRowSelectedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTable_isRowSelectedRequest, ::octaneapi::ApiTable_isRowSelectedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isRowSelected_, context, request, response);
}

void ApiTableService::Stub::async::isRowSelected(::grpc::ClientContext* context, const ::octaneapi::ApiTable_isRowSelectedRequest* request, ::octaneapi::ApiTable_isRowSelectedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTable_isRowSelectedRequest, ::octaneapi::ApiTable_isRowSelectedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isRowSelected_, context, request, response, std::move(f));
}

void ApiTableService::Stub::async::isRowSelected(::grpc::ClientContext* context, const ::octaneapi::ApiTable_isRowSelectedRequest* request, ::octaneapi::ApiTable_isRowSelectedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isRowSelected_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTable_isRowSelectedResponse>* ApiTableService::Stub::PrepareAsyncisRowSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_isRowSelectedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTable_isRowSelectedResponse, ::octaneapi::ApiTable_isRowSelectedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isRowSelected_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTable_isRowSelectedResponse>* ApiTableService::Stub::AsyncisRowSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_isRowSelectedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisRowSelectedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTableService::Stub::numSelectedRows(::grpc::ClientContext* context, const ::octaneapi::ApiTable_numSelectedRowsRequest& request, ::octaneapi::ApiTable_numSelectedRowsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTable_numSelectedRowsRequest, ::octaneapi::ApiTable_numSelectedRowsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_numSelectedRows_, context, request, response);
}

void ApiTableService::Stub::async::numSelectedRows(::grpc::ClientContext* context, const ::octaneapi::ApiTable_numSelectedRowsRequest* request, ::octaneapi::ApiTable_numSelectedRowsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTable_numSelectedRowsRequest, ::octaneapi::ApiTable_numSelectedRowsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_numSelectedRows_, context, request, response, std::move(f));
}

void ApiTableService::Stub::async::numSelectedRows(::grpc::ClientContext* context, const ::octaneapi::ApiTable_numSelectedRowsRequest* request, ::octaneapi::ApiTable_numSelectedRowsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_numSelectedRows_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTable_numSelectedRowsResponse>* ApiTableService::Stub::PrepareAsyncnumSelectedRowsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_numSelectedRowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTable_numSelectedRowsResponse, ::octaneapi::ApiTable_numSelectedRowsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_numSelectedRows_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTable_numSelectedRowsResponse>* ApiTableService::Stub::AsyncnumSelectedRowsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_numSelectedRowsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnumSelectedRowsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTableService::Stub::selectedRow(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectedRowRequest& request, ::octaneapi::ApiTable_selectedRowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTable_selectedRowRequest, ::octaneapi::ApiTable_selectedRowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_selectedRow_, context, request, response);
}

void ApiTableService::Stub::async::selectedRow(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectedRowRequest* request, ::octaneapi::ApiTable_selectedRowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTable_selectedRowRequest, ::octaneapi::ApiTable_selectedRowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_selectedRow_, context, request, response, std::move(f));
}

void ApiTableService::Stub::async::selectedRow(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectedRowRequest* request, ::octaneapi::ApiTable_selectedRowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_selectedRow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTable_selectedRowResponse>* ApiTableService::Stub::PrepareAsyncselectedRowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectedRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTable_selectedRowResponse, ::octaneapi::ApiTable_selectedRowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_selectedRow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTable_selectedRowResponse>* ApiTableService::Stub::AsyncselectedRowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_selectedRowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncselectedRowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTableService::Stub::lastRowSelected(::grpc::ClientContext* context, const ::octaneapi::ApiTable_lastRowSelectedRequest& request, ::octaneapi::ApiTable_lastRowSelectedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTable_lastRowSelectedRequest, ::octaneapi::ApiTable_lastRowSelectedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_lastRowSelected_, context, request, response);
}

void ApiTableService::Stub::async::lastRowSelected(::grpc::ClientContext* context, const ::octaneapi::ApiTable_lastRowSelectedRequest* request, ::octaneapi::ApiTable_lastRowSelectedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTable_lastRowSelectedRequest, ::octaneapi::ApiTable_lastRowSelectedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_lastRowSelected_, context, request, response, std::move(f));
}

void ApiTableService::Stub::async::lastRowSelected(::grpc::ClientContext* context, const ::octaneapi::ApiTable_lastRowSelectedRequest* request, ::octaneapi::ApiTable_lastRowSelectedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_lastRowSelected_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTable_lastRowSelectedResponse>* ApiTableService::Stub::PrepareAsynclastRowSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_lastRowSelectedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTable_lastRowSelectedResponse, ::octaneapi::ApiTable_lastRowSelectedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_lastRowSelected_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTable_lastRowSelectedResponse>* ApiTableService::Stub::AsynclastRowSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTable_lastRowSelectedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclastRowSelectedRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiTableService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTableService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTableService::Service, ::octaneapi::ApiTable_createRequest, ::octaneapi::ApiTable_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTable_createRequest* req,
             ::octaneapi::ApiTable_createResponse* resp) {
               return service->create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTableService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTableService::Service, ::octaneapi::ApiTable_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTable_destroyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTableService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTableService::Service, ::octaneapi::ApiTable_updateContentRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTable_updateContentRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->updateContent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTableService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTableService::Service, ::octaneapi::ApiTable_selectRowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTable_selectRowRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->selectRow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTableService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTableService::Service, ::octaneapi::ApiTable_selectRangeOfRowsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTable_selectRangeOfRowsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->selectRangeOfRows(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTableService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTableService::Service, ::octaneapi::ApiTable_deselectRowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTable_deselectRowRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->deselectRow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTableService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTableService::Service, ::octaneapi::ApiTable_deselectAllRowsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTable_deselectAllRowsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->deselectAllRows(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTableService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTableService::Service, ::octaneapi::ApiTable_flipRowSelectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTable_flipRowSelectionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->flipRowSelection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTableService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTableService::Service, ::octaneapi::ApiTable_isRowSelectedRequest, ::octaneapi::ApiTable_isRowSelectedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTable_isRowSelectedRequest* req,
             ::octaneapi::ApiTable_isRowSelectedResponse* resp) {
               return service->isRowSelected(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTableService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTableService::Service, ::octaneapi::ApiTable_numSelectedRowsRequest, ::octaneapi::ApiTable_numSelectedRowsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTable_numSelectedRowsRequest* req,
             ::octaneapi::ApiTable_numSelectedRowsResponse* resp) {
               return service->numSelectedRows(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTableService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTableService::Service, ::octaneapi::ApiTable_selectedRowRequest, ::octaneapi::ApiTable_selectedRowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTable_selectedRowRequest* req,
             ::octaneapi::ApiTable_selectedRowResponse* resp) {
               return service->selectedRow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTableService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTableService::Service, ::octaneapi::ApiTable_lastRowSelectedRequest, ::octaneapi::ApiTable_lastRowSelectedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTable_lastRowSelectedRequest* req,
             ::octaneapi::ApiTable_lastRowSelectedResponse* resp) {
               return service->lastRowSelected(ctx, req, resp);
             }, this)));
}

ApiTableService::Service::~Service() {
}

::grpc::Status ApiTableService::Service::create(::grpc::ServerContext* context, const ::octaneapi::ApiTable_createRequest* request, ::octaneapi::ApiTable_createResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTableService::Service::destroy(::grpc::ServerContext* context, const ::octaneapi::ApiTable_destroyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTableService::Service::updateContent(::grpc::ServerContext* context, const ::octaneapi::ApiTable_updateContentRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTableService::Service::selectRow(::grpc::ServerContext* context, const ::octaneapi::ApiTable_selectRowRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTableService::Service::selectRangeOfRows(::grpc::ServerContext* context, const ::octaneapi::ApiTable_selectRangeOfRowsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTableService::Service::deselectRow(::grpc::ServerContext* context, const ::octaneapi::ApiTable_deselectRowRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTableService::Service::deselectAllRows(::grpc::ServerContext* context, const ::octaneapi::ApiTable_deselectAllRowsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTableService::Service::flipRowSelection(::grpc::ServerContext* context, const ::octaneapi::ApiTable_flipRowSelectionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTableService::Service::isRowSelected(::grpc::ServerContext* context, const ::octaneapi::ApiTable_isRowSelectedRequest* request, ::octaneapi::ApiTable_isRowSelectedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTableService::Service::numSelectedRows(::grpc::ServerContext* context, const ::octaneapi::ApiTable_numSelectedRowsRequest* request, ::octaneapi::ApiTable_numSelectedRowsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTableService::Service::selectedRow(::grpc::ServerContext* context, const ::octaneapi::ApiTable_selectedRowRequest* request, ::octaneapi::ApiTable_selectedRowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTableService::Service::lastRowSelected(::grpc::ServerContext* context, const ::octaneapi::ApiTable_lastRowSelectedRequest* request, ::octaneapi::ApiTable_lastRowSelectedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

