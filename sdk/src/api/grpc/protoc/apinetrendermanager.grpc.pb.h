// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apinetrendermanager.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apinetrendermanager_2eproto__INCLUDED
#define GRPC_apinetrendermanager_2eproto__INCLUDED

#include "apinetrendermanager.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiNetRenderManager' from 'apinetrendermanager.h'
class ApiNetRenderManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiNetRenderManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Configures network rendering
    virtual ::grpc::Status configure(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest& request, ::octaneapi::ApiNetRenderManager_configureResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_configureResponse>> Asyncconfigure(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_configureResponse>>(AsyncconfigureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_configureResponse>> PrepareAsyncconfigure(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_configureResponse>>(PrepareAsyncconfigureRaw(context, request, cq));
    }
    // / Returns the current net render configuration
    virtual ::grpc::Status configuration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest& request, ::octaneapi::ApiNetRenderManager_configurationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_configurationResponse>> Asyncconfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_configurationResponse>>(AsyncconfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_configurationResponse>> PrepareAsyncconfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_configurationResponse>>(PrepareAsyncconfigurationRaw(context, request, cq));
    }
    // / Enables/disables network rendering
    virtual ::grpc::Status enable(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncenable(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncenableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncenable(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncenableRaw(context, request, cq));
    }
    // / Returns TRUE if network rendering is supported in this build
    virtual ::grpc::Status isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest& request, ::octaneapi::ApiNetRenderManager_isSupportedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_isSupportedResponse>> AsyncisSupported(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_isSupportedResponse>>(AsyncisSupportedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_isSupportedResponse>> PrepareAsyncisSupported(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_isSupportedResponse>>(PrepareAsyncisSupportedRaw(context, request, cq));
    }
    // / Checks if network rendering is enabled
    virtual ::grpc::Status isEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest& request, ::octaneapi::ApiNetRenderManager_isEnabledResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_isEnabledResponse>> AsyncisEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_isEnabledResponse>>(AsyncisEnabledRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_isEnabledResponse>> PrepareAsyncisEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_isEnabledResponse>>(PrepareAsyncisEnabledRaw(context, request, cq));
    }
    // / Stores the current network rendering configuration in the application preferences
    virtual ::grpc::Status saveConfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsaveConfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsaveConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsaveConfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsaveConfigurationRaw(context, request, cq));
    }
    // / Opens a modal dialog to allow the user to set the network render configuration
    virtual ::grpc::Status openOctanePreferences(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncopenOctanePreferences(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncopenOctanePreferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncopenOctanePreferences(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncopenOctanePreferencesRaw(context, request, cq));
    }
    // / Returns the number of network interfaces available on this computer
    virtual ::grpc::Status networkInterfaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest& request, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>> AsyncnetworkInterfaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>>(AsyncnetworkInterfaceCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>> PrepareAsyncnetworkInterfaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>>(PrepareAsyncnetworkInterfaceCountRaw(context, request, cq));
    }
    // / Retrieves info about a specific network interface on this computer
    virtual ::grpc::Status networkInterface(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest& request, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>> AsyncnetworkInterface(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>>(AsyncnetworkInterfaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>> PrepareAsyncnetworkInterface(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>>(PrepareAsyncnetworkInterfaceRaw(context, request, cq));
    }
    // / Registers a status update called
    virtual ::grpc::Status setNetStatusListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest& request, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>> AsyncsetNetStatusListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>>(AsyncsetNetStatusListenerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>> PrepareAsyncsetNetStatusListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>>(PrepareAsyncsetNetStatusListenerRaw(context, request, cq));
    }
    // / Returns the current net render status
    virtual ::grpc::Status status(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest& request, ::octaneapi::ApiNetRenderManager_statusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_statusResponse>> Asyncstatus(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_statusResponse>>(AsyncstatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_statusResponse>> PrepareAsyncstatus(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_statusResponse>>(PrepareAsyncstatusRaw(context, request, cq));
    }
    // / Register a daemon listeners
    virtual ::grpc::Status setDaemonListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest& request, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>> AsyncsetDaemonListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>>(AsyncsetDaemonListenerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>> PrepareAsyncsetDaemonListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>>(PrepareAsyncsetDaemonListenerRaw(context, request, cq));
    }
    // / Binds a daemon to this master
    virtual ::grpc::Status bindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest& request, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>> AsyncbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>>(AsyncbindDaemonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>> PrepareAsyncbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>>(PrepareAsyncbindDaemonRaw(context, request, cq));
    }
    // / Unbinds a daemon from this master
    virtual ::grpc::Status unbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncunbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncunbindDaemonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncunbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncunbindDaemonRaw(context, request, cq));
    }
    // / Steals a daemon
    virtual ::grpc::Status stealDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest& request, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>> AsyncstealDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>>(AsyncstealDaemonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>> PrepareAsyncstealDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>>(PrepareAsyncstealDaemonRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Configures network rendering
      virtual void configure(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest* request, ::octaneapi::ApiNetRenderManager_configureResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void configure(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest* request, ::octaneapi::ApiNetRenderManager_configureResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the current net render configuration
      virtual void configuration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest* request, ::octaneapi::ApiNetRenderManager_configurationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void configuration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest* request, ::octaneapi::ApiNetRenderManager_configurationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Enables/disables network rendering
      virtual void enable(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void enable(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if network rendering is supported in this build
      virtual void isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* request, ::octaneapi::ApiNetRenderManager_isSupportedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* request, ::octaneapi::ApiNetRenderManager_isSupportedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Checks if network rendering is enabled
      virtual void isEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* request, ::octaneapi::ApiNetRenderManager_isEnabledResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* request, ::octaneapi::ApiNetRenderManager_isEnabledResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Stores the current network rendering configuration in the application preferences
      virtual void saveConfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void saveConfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Opens a modal dialog to allow the user to set the network render configuration
      virtual void openOctanePreferences(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void openOctanePreferences(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the number of network interfaces available on this computer
      virtual void networkInterfaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void networkInterfaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Retrieves info about a specific network interface on this computer
      virtual void networkInterface(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void networkInterface(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Registers a status update called
      virtual void setNetStatusListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* request, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setNetStatusListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* request, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the current net render status
      virtual void status(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest* request, ::octaneapi::ApiNetRenderManager_statusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void status(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest* request, ::octaneapi::ApiNetRenderManager_statusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Register a daemon listeners
      virtual void setDaemonListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* request, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setDaemonListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* request, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Binds a daemon to this master
      virtual void bindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* request, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void bindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* request, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Unbinds a daemon from this master
      virtual void unbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Steals a daemon
      virtual void stealDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* request, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void stealDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* request, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_configureResponse>* AsyncconfigureRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_configureResponse>* PrepareAsyncconfigureRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_configurationResponse>* AsyncconfigurationRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_configurationResponse>* PrepareAsyncconfigurationRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncenableRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncenableRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_isSupportedResponse>* AsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_isSupportedResponse>* PrepareAsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_isEnabledResponse>* AsyncisEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_isEnabledResponse>* PrepareAsyncisEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsaveConfigurationRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsaveConfigurationRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncopenOctanePreferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncopenOctanePreferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>* AsyncnetworkInterfaceCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>* PrepareAsyncnetworkInterfaceCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>* AsyncnetworkInterfaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>* PrepareAsyncnetworkInterfaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>* AsyncsetNetStatusListenerRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>* PrepareAsyncsetNetStatusListenerRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_statusResponse>* AsyncstatusRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_statusResponse>* PrepareAsyncstatusRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>* AsyncsetDaemonListenerRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>* PrepareAsyncsetDaemonListenerRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>* AsyncbindDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>* PrepareAsyncbindDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncunbindDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncunbindDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>* AsyncstealDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>* PrepareAsyncstealDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status configure(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest& request, ::octaneapi::ApiNetRenderManager_configureResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configureResponse>> Asyncconfigure(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configureResponse>>(AsyncconfigureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configureResponse>> PrepareAsyncconfigure(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configureResponse>>(PrepareAsyncconfigureRaw(context, request, cq));
    }
    ::grpc::Status configuration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest& request, ::octaneapi::ApiNetRenderManager_configurationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configurationResponse>> Asyncconfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configurationResponse>>(AsyncconfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configurationResponse>> PrepareAsyncconfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configurationResponse>>(PrepareAsyncconfigurationRaw(context, request, cq));
    }
    ::grpc::Status enable(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncenable(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncenableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncenable(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncenableRaw(context, request, cq));
    }
    ::grpc::Status isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest& request, ::octaneapi::ApiNetRenderManager_isSupportedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isSupportedResponse>> AsyncisSupported(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isSupportedResponse>>(AsyncisSupportedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isSupportedResponse>> PrepareAsyncisSupported(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isSupportedResponse>>(PrepareAsyncisSupportedRaw(context, request, cq));
    }
    ::grpc::Status isEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest& request, ::octaneapi::ApiNetRenderManager_isEnabledResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isEnabledResponse>> AsyncisEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isEnabledResponse>>(AsyncisEnabledRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isEnabledResponse>> PrepareAsyncisEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isEnabledResponse>>(PrepareAsyncisEnabledRaw(context, request, cq));
    }
    ::grpc::Status saveConfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsaveConfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsaveConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsaveConfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsaveConfigurationRaw(context, request, cq));
    }
    ::grpc::Status openOctanePreferences(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncopenOctanePreferences(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncopenOctanePreferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncopenOctanePreferences(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncopenOctanePreferencesRaw(context, request, cq));
    }
    ::grpc::Status networkInterfaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest& request, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>> AsyncnetworkInterfaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>>(AsyncnetworkInterfaceCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>> PrepareAsyncnetworkInterfaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>>(PrepareAsyncnetworkInterfaceCountRaw(context, request, cq));
    }
    ::grpc::Status networkInterface(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest& request, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>> AsyncnetworkInterface(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>>(AsyncnetworkInterfaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>> PrepareAsyncnetworkInterface(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>>(PrepareAsyncnetworkInterfaceRaw(context, request, cq));
    }
    ::grpc::Status setNetStatusListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest& request, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>> AsyncsetNetStatusListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>>(AsyncsetNetStatusListenerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>> PrepareAsyncsetNetStatusListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>>(PrepareAsyncsetNetStatusListenerRaw(context, request, cq));
    }
    ::grpc::Status status(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest& request, ::octaneapi::ApiNetRenderManager_statusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_statusResponse>> Asyncstatus(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_statusResponse>>(AsyncstatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_statusResponse>> PrepareAsyncstatus(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_statusResponse>>(PrepareAsyncstatusRaw(context, request, cq));
    }
    ::grpc::Status setDaemonListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest& request, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>> AsyncsetDaemonListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>>(AsyncsetDaemonListenerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>> PrepareAsyncsetDaemonListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>>(PrepareAsyncsetDaemonListenerRaw(context, request, cq));
    }
    ::grpc::Status bindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest& request, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>> AsyncbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>>(AsyncbindDaemonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>> PrepareAsyncbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>>(PrepareAsyncbindDaemonRaw(context, request, cq));
    }
    ::grpc::Status unbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncunbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncunbindDaemonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncunbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncunbindDaemonRaw(context, request, cq));
    }
    ::grpc::Status stealDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest& request, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>> AsyncstealDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>>(AsyncstealDaemonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>> PrepareAsyncstealDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>>(PrepareAsyncstealDaemonRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void configure(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest* request, ::octaneapi::ApiNetRenderManager_configureResponse* response, std::function<void(::grpc::Status)>) override;
      void configure(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest* request, ::octaneapi::ApiNetRenderManager_configureResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void configuration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest* request, ::octaneapi::ApiNetRenderManager_configurationResponse* response, std::function<void(::grpc::Status)>) override;
      void configuration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest* request, ::octaneapi::ApiNetRenderManager_configurationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void enable(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void enable(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* request, ::octaneapi::ApiNetRenderManager_isSupportedResponse* response, std::function<void(::grpc::Status)>) override;
      void isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* request, ::octaneapi::ApiNetRenderManager_isSupportedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* request, ::octaneapi::ApiNetRenderManager_isEnabledResponse* response, std::function<void(::grpc::Status)>) override;
      void isEnabled(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* request, ::octaneapi::ApiNetRenderManager_isEnabledResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void saveConfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void saveConfiguration(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void openOctanePreferences(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void openOctanePreferences(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void networkInterfaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* response, std::function<void(::grpc::Status)>) override;
      void networkInterfaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void networkInterface(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* response, std::function<void(::grpc::Status)>) override;
      void networkInterface(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setNetStatusListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* request, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* response, std::function<void(::grpc::Status)>) override;
      void setNetStatusListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* request, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void status(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest* request, ::octaneapi::ApiNetRenderManager_statusResponse* response, std::function<void(::grpc::Status)>) override;
      void status(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest* request, ::octaneapi::ApiNetRenderManager_statusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setDaemonListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* request, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* response, std::function<void(::grpc::Status)>) override;
      void setDaemonListener(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* request, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void bindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* request, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* response, std::function<void(::grpc::Status)>) override;
      void bindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* request, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void unbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void unbindDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void stealDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* request, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* response, std::function<void(::grpc::Status)>) override;
      void stealDaemon(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* request, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configureResponse>* AsyncconfigureRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configureResponse>* PrepareAsyncconfigureRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configurationResponse>* AsyncconfigurationRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_configurationResponse>* PrepareAsyncconfigurationRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncenableRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncenableRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isSupportedResponse>* AsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isSupportedResponse>* PrepareAsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isEnabledResponse>* AsyncisEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_isEnabledResponse>* PrepareAsyncisEnabledRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsaveConfigurationRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsaveConfigurationRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncopenOctanePreferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncopenOctanePreferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>* AsyncnetworkInterfaceCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>* PrepareAsyncnetworkInterfaceCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>* AsyncnetworkInterfaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>* PrepareAsyncnetworkInterfaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>* AsyncsetNetStatusListenerRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>* PrepareAsyncsetNetStatusListenerRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_statusResponse>* AsyncstatusRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_statusResponse>* PrepareAsyncstatusRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>* AsyncsetDaemonListenerRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>* PrepareAsyncsetDaemonListenerRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>* AsyncbindDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>* PrepareAsyncbindDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncunbindDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncunbindDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>* AsyncstealDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>* PrepareAsyncstealDaemonRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_configure_;
    const ::grpc::internal::RpcMethod rpcmethod_configuration_;
    const ::grpc::internal::RpcMethod rpcmethod_enable_;
    const ::grpc::internal::RpcMethod rpcmethod_isSupported_;
    const ::grpc::internal::RpcMethod rpcmethod_isEnabled_;
    const ::grpc::internal::RpcMethod rpcmethod_saveConfiguration_;
    const ::grpc::internal::RpcMethod rpcmethod_openOctanePreferences_;
    const ::grpc::internal::RpcMethod rpcmethod_networkInterfaceCount_;
    const ::grpc::internal::RpcMethod rpcmethod_networkInterface_;
    const ::grpc::internal::RpcMethod rpcmethod_setNetStatusListener_;
    const ::grpc::internal::RpcMethod rpcmethod_status_;
    const ::grpc::internal::RpcMethod rpcmethod_setDaemonListener_;
    const ::grpc::internal::RpcMethod rpcmethod_bindDaemon_;
    const ::grpc::internal::RpcMethod rpcmethod_unbindDaemon_;
    const ::grpc::internal::RpcMethod rpcmethod_stealDaemon_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Configures network rendering
    virtual ::grpc::Status configure(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest* request, ::octaneapi::ApiNetRenderManager_configureResponse* response);
    // / Returns the current net render configuration
    virtual ::grpc::Status configuration(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest* request, ::octaneapi::ApiNetRenderManager_configurationResponse* response);
    // / Enables/disables network rendering
    virtual ::grpc::Status enable(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest* request, ::google::protobuf::Empty* response);
    // / Returns TRUE if network rendering is supported in this build
    virtual ::grpc::Status isSupported(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* request, ::octaneapi::ApiNetRenderManager_isSupportedResponse* response);
    // / Checks if network rendering is enabled
    virtual ::grpc::Status isEnabled(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* request, ::octaneapi::ApiNetRenderManager_isEnabledResponse* response);
    // / Stores the current network rendering configuration in the application preferences
    virtual ::grpc::Status saveConfiguration(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* request, ::google::protobuf::Empty* response);
    // / Opens a modal dialog to allow the user to set the network render configuration
    virtual ::grpc::Status openOctanePreferences(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* request, ::google::protobuf::Empty* response);
    // / Returns the number of network interfaces available on this computer
    virtual ::grpc::Status networkInterfaceCount(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* response);
    // / Retrieves info about a specific network interface on this computer
    virtual ::grpc::Status networkInterface(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* response);
    // / Registers a status update called
    virtual ::grpc::Status setNetStatusListener(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* request, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* response);
    // / Returns the current net render status
    virtual ::grpc::Status status(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest* request, ::octaneapi::ApiNetRenderManager_statusResponse* response);
    // / Register a daemon listeners
    virtual ::grpc::Status setDaemonListener(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* request, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* response);
    // / Binds a daemon to this master
    virtual ::grpc::Status bindDaemon(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* request, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* response);
    // / Unbinds a daemon from this master
    virtual ::grpc::Status unbindDaemon(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* request, ::google::protobuf::Empty* response);
    // / Steals a daemon
    virtual ::grpc::Status stealDaemon(::grpc::ServerContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* request, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_configure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_configure() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_configure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status configure(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_configureRequest* /*request*/, ::octaneapi::ApiNetRenderManager_configureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestconfigure(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_configureRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiNetRenderManager_configureResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_configuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_configuration() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_configuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status configuration(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_configurationRequest* /*request*/, ::octaneapi::ApiNetRenderManager_configurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestconfiguration(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_configurationRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiNetRenderManager_configurationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_enable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_enable() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_enable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enable(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_enableRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestenable(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_enableRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isSupported() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* /*request*/, ::octaneapi::ApiNetRenderManager_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisSupported(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_isSupportedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiNetRenderManager_isSupportedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isEnabled() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_isEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isEnabled(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* /*request*/, ::octaneapi::ApiNetRenderManager_isEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisEnabled(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_isEnabledRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiNetRenderManager_isEnabledResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_saveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_saveConfiguration() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_saveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveConfiguration(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveConfiguration(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_openOctanePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_openOctanePreferences() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_openOctanePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status openOctanePreferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestopenOctanePreferences(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_networkInterfaceCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_networkInterfaceCount() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_networkInterfaceCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status networkInterfaceCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* /*request*/, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnetworkInterfaceCount(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_networkInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_networkInterface() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_networkInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status networkInterface(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* /*request*/, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnetworkInterface(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setNetStatusListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setNetStatusListener() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_setNetStatusListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setNetStatusListener(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* /*request*/, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetNetStatusListener(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_status() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_statusRequest* /*request*/, ::octaneapi::ApiNetRenderManager_statusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststatus(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_statusRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiNetRenderManager_statusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setDaemonListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setDaemonListener() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_setDaemonListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDaemonListener(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* /*request*/, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDaemonListener(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_bindDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_bindDaemon() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_bindDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bindDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* /*request*/, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbindDaemon(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_bindDaemonRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiNetRenderManager_bindDaemonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unbindDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unbindDaemon() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_unbindDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unbindDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunbindDaemon(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stealDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_stealDaemon() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_stealDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stealDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* /*request*/, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststealDaemon(::grpc::ServerContext* context, ::octaneapi::ApiNetRenderManager_stealDaemonRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiNetRenderManager_stealDaemonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_configure<WithAsyncMethod_configuration<WithAsyncMethod_enable<WithAsyncMethod_isSupported<WithAsyncMethod_isEnabled<WithAsyncMethod_saveConfiguration<WithAsyncMethod_openOctanePreferences<WithAsyncMethod_networkInterfaceCount<WithAsyncMethod_networkInterface<WithAsyncMethod_setNetStatusListener<WithAsyncMethod_status<WithAsyncMethod_setDaemonListener<WithAsyncMethod_bindDaemon<WithAsyncMethod_unbindDaemon<WithAsyncMethod_stealDaemon<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_configure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_configure() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_configureRequest, ::octaneapi::ApiNetRenderManager_configureResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_configureRequest* request, ::octaneapi::ApiNetRenderManager_configureResponse* response) { return this->configure(context, request, response); }));}
    void SetMessageAllocatorFor_configure(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_configureRequest, ::octaneapi::ApiNetRenderManager_configureResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_configureRequest, ::octaneapi::ApiNetRenderManager_configureResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_configure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status configure(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_configureRequest* /*request*/, ::octaneapi::ApiNetRenderManager_configureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* configure(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_configureRequest* /*request*/, ::octaneapi::ApiNetRenderManager_configureResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_configuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_configuration() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_configurationRequest, ::octaneapi::ApiNetRenderManager_configurationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_configurationRequest* request, ::octaneapi::ApiNetRenderManager_configurationResponse* response) { return this->configuration(context, request, response); }));}
    void SetMessageAllocatorFor_configuration(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_configurationRequest, ::octaneapi::ApiNetRenderManager_configurationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_configurationRequest, ::octaneapi::ApiNetRenderManager_configurationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_configuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status configuration(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_configurationRequest* /*request*/, ::octaneapi::ApiNetRenderManager_configurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* configuration(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_configurationRequest* /*request*/, ::octaneapi::ApiNetRenderManager_configurationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_enable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_enable() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_enableRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_enableRequest* request, ::google::protobuf::Empty* response) { return this->enable(context, request, response); }));}
    void SetMessageAllocatorFor_enable(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_enableRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_enableRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_enable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enable(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_enableRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* enable(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_enableRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isSupported() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_isSupportedRequest, ::octaneapi::ApiNetRenderManager_isSupportedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* request, ::octaneapi::ApiNetRenderManager_isSupportedResponse* response) { return this->isSupported(context, request, response); }));}
    void SetMessageAllocatorFor_isSupported(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_isSupportedRequest, ::octaneapi::ApiNetRenderManager_isSupportedResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_isSupportedRequest, ::octaneapi::ApiNetRenderManager_isSupportedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* /*request*/, ::octaneapi::ApiNetRenderManager_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isSupported(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* /*request*/, ::octaneapi::ApiNetRenderManager_isSupportedResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isEnabled() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_isEnabledRequest, ::octaneapi::ApiNetRenderManager_isEnabledResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* request, ::octaneapi::ApiNetRenderManager_isEnabledResponse* response) { return this->isEnabled(context, request, response); }));}
    void SetMessageAllocatorFor_isEnabled(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_isEnabledRequest, ::octaneapi::ApiNetRenderManager_isEnabledResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_isEnabledRequest, ::octaneapi::ApiNetRenderManager_isEnabledResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isEnabled(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* /*request*/, ::octaneapi::ApiNetRenderManager_isEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isEnabled(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* /*request*/, ::octaneapi::ApiNetRenderManager_isEnabledResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_saveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_saveConfiguration() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_saveConfigurationRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* request, ::google::protobuf::Empty* response) { return this->saveConfiguration(context, request, response); }));}
    void SetMessageAllocatorFor_saveConfiguration(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_saveConfigurationRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_saveConfigurationRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_saveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveConfiguration(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* saveConfiguration(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_openOctanePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_openOctanePreferences() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* request, ::google::protobuf::Empty* response) { return this->openOctanePreferences(context, request, response); }));}
    void SetMessageAllocatorFor_openOctanePreferences(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_openOctanePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status openOctanePreferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* openOctanePreferences(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_networkInterfaceCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_networkInterfaceCount() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* response) { return this->networkInterfaceCount(context, request, response); }));}
    void SetMessageAllocatorFor_networkInterfaceCount(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_networkInterfaceCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status networkInterfaceCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* /*request*/, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* networkInterfaceCount(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* /*request*/, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_networkInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_networkInterface() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_networkInterfaceRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* request, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* response) { return this->networkInterface(context, request, response); }));}
    void SetMessageAllocatorFor_networkInterface(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_networkInterfaceRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_networkInterfaceRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_networkInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status networkInterface(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* /*request*/, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* networkInterface(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* /*request*/, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setNetStatusListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setNetStatusListener() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* request, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* response) { return this->setNetStatusListener(context, request, response); }));}
    void SetMessageAllocatorFor_setNetStatusListener(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setNetStatusListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setNetStatusListener(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* /*request*/, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setNetStatusListener(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* /*request*/, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_status() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_statusRequest, ::octaneapi::ApiNetRenderManager_statusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_statusRequest* request, ::octaneapi::ApiNetRenderManager_statusResponse* response) { return this->status(context, request, response); }));}
    void SetMessageAllocatorFor_status(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_statusRequest, ::octaneapi::ApiNetRenderManager_statusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_statusRequest, ::octaneapi::ApiNetRenderManager_statusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_statusRequest* /*request*/, ::octaneapi::ApiNetRenderManager_statusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* status(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_statusRequest* /*request*/, ::octaneapi::ApiNetRenderManager_statusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setDaemonListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setDaemonListener() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* request, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* response) { return this->setDaemonListener(context, request, response); }));}
    void SetMessageAllocatorFor_setDaemonListener(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setDaemonListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDaemonListener(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* /*request*/, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setDaemonListener(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* /*request*/, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_bindDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_bindDaemon() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_bindDaemonRequest, ::octaneapi::ApiNetRenderManager_bindDaemonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* request, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* response) { return this->bindDaemon(context, request, response); }));}
    void SetMessageAllocatorFor_bindDaemon(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_bindDaemonRequest, ::octaneapi::ApiNetRenderManager_bindDaemonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_bindDaemonRequest, ::octaneapi::ApiNetRenderManager_bindDaemonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_bindDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bindDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* /*request*/, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* bindDaemon(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* /*request*/, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_unbindDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_unbindDaemon() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_unbindDaemonRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* request, ::google::protobuf::Empty* response) { return this->unbindDaemon(context, request, response); }));}
    void SetMessageAllocatorFor_unbindDaemon(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_unbindDaemonRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_unbindDaemonRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_unbindDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unbindDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unbindDaemon(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_stealDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_stealDaemon() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_stealDaemonRequest, ::octaneapi::ApiNetRenderManager_stealDaemonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* request, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* response) { return this->stealDaemon(context, request, response); }));}
    void SetMessageAllocatorFor_stealDaemon(
        ::grpc::MessageAllocator< ::octaneapi::ApiNetRenderManager_stealDaemonRequest, ::octaneapi::ApiNetRenderManager_stealDaemonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiNetRenderManager_stealDaemonRequest, ::octaneapi::ApiNetRenderManager_stealDaemonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_stealDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stealDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* /*request*/, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stealDaemon(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* /*request*/, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_configure<WithCallbackMethod_configuration<WithCallbackMethod_enable<WithCallbackMethod_isSupported<WithCallbackMethod_isEnabled<WithCallbackMethod_saveConfiguration<WithCallbackMethod_openOctanePreferences<WithCallbackMethod_networkInterfaceCount<WithCallbackMethod_networkInterface<WithCallbackMethod_setNetStatusListener<WithCallbackMethod_status<WithCallbackMethod_setDaemonListener<WithCallbackMethod_bindDaemon<WithCallbackMethod_unbindDaemon<WithCallbackMethod_stealDaemon<Service > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_configure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_configure() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_configure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status configure(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_configureRequest* /*request*/, ::octaneapi::ApiNetRenderManager_configureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_configuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_configuration() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_configuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status configuration(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_configurationRequest* /*request*/, ::octaneapi::ApiNetRenderManager_configurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_enable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_enable() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_enable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enable(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_enableRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isSupported() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* /*request*/, ::octaneapi::ApiNetRenderManager_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isEnabled() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_isEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isEnabled(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* /*request*/, ::octaneapi::ApiNetRenderManager_isEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_saveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_saveConfiguration() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_saveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveConfiguration(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_openOctanePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_openOctanePreferences() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_openOctanePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status openOctanePreferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_networkInterfaceCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_networkInterfaceCount() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_networkInterfaceCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status networkInterfaceCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* /*request*/, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_networkInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_networkInterface() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_networkInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status networkInterface(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* /*request*/, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setNetStatusListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setNetStatusListener() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_setNetStatusListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setNetStatusListener(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* /*request*/, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_status() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_statusRequest* /*request*/, ::octaneapi::ApiNetRenderManager_statusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setDaemonListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setDaemonListener() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_setDaemonListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDaemonListener(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* /*request*/, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_bindDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_bindDaemon() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_bindDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bindDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* /*request*/, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unbindDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unbindDaemon() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_unbindDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unbindDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stealDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_stealDaemon() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_stealDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stealDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* /*request*/, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_configure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_configure() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_configure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status configure(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_configureRequest* /*request*/, ::octaneapi::ApiNetRenderManager_configureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestconfigure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_configuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_configuration() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_configuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status configuration(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_configurationRequest* /*request*/, ::octaneapi::ApiNetRenderManager_configurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestconfiguration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_enable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_enable() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_enable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enable(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_enableRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestenable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isSupported() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* /*request*/, ::octaneapi::ApiNetRenderManager_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisSupported(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isEnabled() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_isEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isEnabled(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* /*request*/, ::octaneapi::ApiNetRenderManager_isEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisEnabled(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_saveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_saveConfiguration() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_saveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveConfiguration(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveConfiguration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_openOctanePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_openOctanePreferences() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_openOctanePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status openOctanePreferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestopenOctanePreferences(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_networkInterfaceCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_networkInterfaceCount() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_networkInterfaceCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status networkInterfaceCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* /*request*/, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnetworkInterfaceCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_networkInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_networkInterface() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_networkInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status networkInterface(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* /*request*/, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnetworkInterface(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setNetStatusListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setNetStatusListener() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_setNetStatusListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setNetStatusListener(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* /*request*/, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetNetStatusListener(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_status() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_statusRequest* /*request*/, ::octaneapi::ApiNetRenderManager_statusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setDaemonListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setDaemonListener() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_setDaemonListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDaemonListener(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* /*request*/, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDaemonListener(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_bindDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_bindDaemon() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_bindDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bindDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* /*request*/, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbindDaemon(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unbindDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unbindDaemon() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_unbindDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unbindDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunbindDaemon(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stealDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_stealDaemon() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_stealDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stealDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* /*request*/, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststealDaemon(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_configure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_configure() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->configure(context, request, response); }));
    }
    ~WithRawCallbackMethod_configure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status configure(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_configureRequest* /*request*/, ::octaneapi::ApiNetRenderManager_configureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* configure(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_configuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_configuration() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->configuration(context, request, response); }));
    }
    ~WithRawCallbackMethod_configuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status configuration(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_configurationRequest* /*request*/, ::octaneapi::ApiNetRenderManager_configurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* configuration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_enable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_enable() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->enable(context, request, response); }));
    }
    ~WithRawCallbackMethod_enable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status enable(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_enableRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* enable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isSupported() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isSupported(context, request, response); }));
    }
    ~WithRawCallbackMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* /*request*/, ::octaneapi::ApiNetRenderManager_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isSupported(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isEnabled() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isEnabled(context, request, response); }));
    }
    ~WithRawCallbackMethod_isEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isEnabled(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* /*request*/, ::octaneapi::ApiNetRenderManager_isEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isEnabled(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_saveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_saveConfiguration() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->saveConfiguration(context, request, response); }));
    }
    ~WithRawCallbackMethod_saveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveConfiguration(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* saveConfiguration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_openOctanePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_openOctanePreferences() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->openOctanePreferences(context, request, response); }));
    }
    ~WithRawCallbackMethod_openOctanePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status openOctanePreferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* openOctanePreferences(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_networkInterfaceCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_networkInterfaceCount() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->networkInterfaceCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_networkInterfaceCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status networkInterfaceCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* /*request*/, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* networkInterfaceCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_networkInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_networkInterface() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->networkInterface(context, request, response); }));
    }
    ~WithRawCallbackMethod_networkInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status networkInterface(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* /*request*/, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* networkInterface(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setNetStatusListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setNetStatusListener() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setNetStatusListener(context, request, response); }));
    }
    ~WithRawCallbackMethod_setNetStatusListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setNetStatusListener(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* /*request*/, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setNetStatusListener(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_status() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->status(context, request, response); }));
    }
    ~WithRawCallbackMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_statusRequest* /*request*/, ::octaneapi::ApiNetRenderManager_statusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* status(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setDaemonListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setDaemonListener() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setDaemonListener(context, request, response); }));
    }
    ~WithRawCallbackMethod_setDaemonListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDaemonListener(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* /*request*/, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setDaemonListener(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_bindDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_bindDaemon() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->bindDaemon(context, request, response); }));
    }
    ~WithRawCallbackMethod_bindDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bindDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* /*request*/, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* bindDaemon(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_unbindDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_unbindDaemon() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unbindDaemon(context, request, response); }));
    }
    ~WithRawCallbackMethod_unbindDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unbindDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unbindDaemon(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_stealDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_stealDaemon() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->stealDaemon(context, request, response); }));
    }
    ~WithRawCallbackMethod_stealDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stealDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* /*request*/, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stealDaemon(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_configure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_configure() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_configureRequest, ::octaneapi::ApiNetRenderManager_configureResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_configureRequest, ::octaneapi::ApiNetRenderManager_configureResponse>* streamer) {
                       return this->Streamedconfigure(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_configure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status configure(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_configureRequest* /*request*/, ::octaneapi::ApiNetRenderManager_configureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedconfigure(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_configureRequest,::octaneapi::ApiNetRenderManager_configureResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_configuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_configuration() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_configurationRequest, ::octaneapi::ApiNetRenderManager_configurationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_configurationRequest, ::octaneapi::ApiNetRenderManager_configurationResponse>* streamer) {
                       return this->Streamedconfiguration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_configuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status configuration(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_configurationRequest* /*request*/, ::octaneapi::ApiNetRenderManager_configurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedconfiguration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_configurationRequest,::octaneapi::ApiNetRenderManager_configurationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_enable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_enable() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_enableRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_enableRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedenable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_enable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status enable(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_enableRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedenable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_enableRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isSupported() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_isSupportedRequest, ::octaneapi::ApiNetRenderManager_isSupportedResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_isSupportedRequest, ::octaneapi::ApiNetRenderManager_isSupportedResponse>* streamer) {
                       return this->StreamedisSupported(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_isSupportedRequest* /*request*/, ::octaneapi::ApiNetRenderManager_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisSupported(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_isSupportedRequest,::octaneapi::ApiNetRenderManager_isSupportedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isEnabled() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_isEnabledRequest, ::octaneapi::ApiNetRenderManager_isEnabledResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_isEnabledRequest, ::octaneapi::ApiNetRenderManager_isEnabledResponse>* streamer) {
                       return this->StreamedisEnabled(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isEnabled(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_isEnabledRequest* /*request*/, ::octaneapi::ApiNetRenderManager_isEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisEnabled(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_isEnabledRequest,::octaneapi::ApiNetRenderManager_isEnabledResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_saveConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_saveConfiguration() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_saveConfigurationRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_saveConfigurationRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsaveConfiguration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_saveConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status saveConfiguration(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_saveConfigurationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsaveConfiguration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_saveConfigurationRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_openOctanePreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_openOctanePreferences() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedopenOctanePreferences(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_openOctanePreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status openOctanePreferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedopenOctanePreferences(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_openOctanePreferencesRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_networkInterfaceCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_networkInterfaceCount() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>* streamer) {
                       return this->StreamednetworkInterfaceCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_networkInterfaceCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status networkInterfaceCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest* /*request*/, ::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamednetworkInterfaceCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_networkInterfaceCountRequest,::octaneapi::ApiNetRenderManager_networkInterfaceCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_networkInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_networkInterface() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_networkInterfaceRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_networkInterfaceRequest, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse>* streamer) {
                       return this->StreamednetworkInterface(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_networkInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status networkInterface(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_networkInterfaceRequest* /*request*/, ::octaneapi::ApiNetRenderManager_networkInterfaceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamednetworkInterface(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_networkInterfaceRequest,::octaneapi::ApiNetRenderManager_networkInterfaceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setNetStatusListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setNetStatusListener() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>* streamer) {
                       return this->StreamedsetNetStatusListener(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setNetStatusListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setNetStatusListener(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest* /*request*/, ::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetNetStatusListener(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_setNetStatusListenerRequest,::octaneapi::ApiNetRenderManager_setNetStatusListenerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_status() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_statusRequest, ::octaneapi::ApiNetRenderManager_statusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_statusRequest, ::octaneapi::ApiNetRenderManager_statusResponse>* streamer) {
                       return this->Streamedstatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_statusRequest* /*request*/, ::octaneapi::ApiNetRenderManager_statusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_statusRequest,::octaneapi::ApiNetRenderManager_statusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setDaemonListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setDaemonListener() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>* streamer) {
                       return this->StreamedsetDaemonListener(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setDaemonListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setDaemonListener(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest* /*request*/, ::octaneapi::ApiNetRenderManager_setDaemonListenerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetDaemonListener(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_setDaemonListenerRequest,::octaneapi::ApiNetRenderManager_setDaemonListenerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_bindDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_bindDaemon() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_bindDaemonRequest, ::octaneapi::ApiNetRenderManager_bindDaemonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_bindDaemonRequest, ::octaneapi::ApiNetRenderManager_bindDaemonResponse>* streamer) {
                       return this->StreamedbindDaemon(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_bindDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status bindDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_bindDaemonRequest* /*request*/, ::octaneapi::ApiNetRenderManager_bindDaemonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedbindDaemon(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_bindDaemonRequest,::octaneapi::ApiNetRenderManager_bindDaemonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unbindDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unbindDaemon() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_unbindDaemonRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_unbindDaemonRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedunbindDaemon(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_unbindDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unbindDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_unbindDaemonRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedunbindDaemon(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_unbindDaemonRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stealDaemon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_stealDaemon() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiNetRenderManager_stealDaemonRequest, ::octaneapi::ApiNetRenderManager_stealDaemonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiNetRenderManager_stealDaemonRequest, ::octaneapi::ApiNetRenderManager_stealDaemonResponse>* streamer) {
                       return this->StreamedstealDaemon(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_stealDaemon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stealDaemon(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiNetRenderManager_stealDaemonRequest* /*request*/, ::octaneapi::ApiNetRenderManager_stealDaemonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedstealDaemon(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiNetRenderManager_stealDaemonRequest,::octaneapi::ApiNetRenderManager_stealDaemonResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_configure<WithStreamedUnaryMethod_configuration<WithStreamedUnaryMethod_enable<WithStreamedUnaryMethod_isSupported<WithStreamedUnaryMethod_isEnabled<WithStreamedUnaryMethod_saveConfiguration<WithStreamedUnaryMethod_openOctanePreferences<WithStreamedUnaryMethod_networkInterfaceCount<WithStreamedUnaryMethod_networkInterface<WithStreamedUnaryMethod_setNetStatusListener<WithStreamedUnaryMethod_status<WithStreamedUnaryMethod_setDaemonListener<WithStreamedUnaryMethod_bindDaemon<WithStreamedUnaryMethod_unbindDaemon<WithStreamedUnaryMethod_stealDaemon<Service > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_configure<WithStreamedUnaryMethod_configuration<WithStreamedUnaryMethod_enable<WithStreamedUnaryMethod_isSupported<WithStreamedUnaryMethod_isEnabled<WithStreamedUnaryMethod_saveConfiguration<WithStreamedUnaryMethod_openOctanePreferences<WithStreamedUnaryMethod_networkInterfaceCount<WithStreamedUnaryMethod_networkInterface<WithStreamedUnaryMethod_setNetStatusListener<WithStreamedUnaryMethod_status<WithStreamedUnaryMethod_setDaemonListener<WithStreamedUnaryMethod_bindDaemon<WithStreamedUnaryMethod_unbindDaemon<WithStreamedUnaryMethod_stealDaemon<Service > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apinetrendermanager_2eproto__INCLUDED
