// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apinodesystem_8.proto
#ifndef GRPC_apinodesystem_5f8_2eproto__INCLUDED
#define GRPC_apinodesystem_5f8_2eproto__INCLUDED

#include "apinodesystem_8.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

class ApiRootNodeGraphService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiRootNodeGraphService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Creates a root node graph (graph without owner) with the specified version
    virtual ::grpc::Status create2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest& request, ::octaneapi::ApiRootNodeGraph_createResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_createResponse>> Asynccreate2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_createResponse>>(Asynccreate2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_createResponse>> PrepareAsynccreate2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_createResponse>>(PrepareAsynccreate2Raw(context, request, cq));
    }
    // / Clears the root node graph (it will be empty afterwards) and sets it to the specified
    // / version
    virtual ::grpc::Status init2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncinit2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(Asyncinit2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncinit2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncinit2Raw(context, request, cq));
    }
    // / Converts the root node graph to the current version and evaluates all nodes
    virtual ::grpc::Status convertAndEvaluate(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncconvertAndEvaluate(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncconvertAndEvaluateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncconvertAndEvaluate(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncconvertAndEvaluateRaw(context, request, cq));
    }
    // / Returns the total time span for all animations in this graph
    virtual ::grpc::Status animationTimeSpan(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest& request, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>> AsyncanimationTimeSpan(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>>(AsyncanimationTimeSpanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>> PrepareAsyncanimationTimeSpan(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>>(PrepareAsyncanimationTimeSpanRaw(context, request, cq));
    }
    // / Updates the time of all attributes in this root node graph
    virtual ::grpc::Status updateTime(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncupdateTime(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncupdateTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncupdateTime(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncupdateTimeRaw(context, request, cq));
    }
    // / Imports a scene from disk into this graph
    virtual ::grpc::Status importFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest& request, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>> AsyncimportFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>>(AsyncimportFromFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>> PrepareAsyncimportFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>>(PrepareAsyncimportFromFileRaw(context, request, cq));
    }
    // / Imports an OCS XML string scene from disk into this graph
    virtual ::grpc::Status importOcsFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest& request, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>> AsyncimportOcsFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>>(AsyncimportOcsFromMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>> PrepareAsyncimportOcsFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>>(PrepareAsyncimportOcsFromMemoryRaw(context, request, cq));
    }
    // / Imports an ORBX data from memory into this graph, chunk by chunk
    virtual ::grpc::Status importOrbxFromCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest& request, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>> AsyncimportOrbxFromCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>>(AsyncimportOrbxFromCallbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>> PrepareAsyncimportOrbxFromCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>>(PrepareAsyncimportOrbxFromCallbackRaw(context, request, cq));
    }
    // / Imports an ORBX data from memory into this graph
    virtual ::grpc::Status importOrbxFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest& request, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>> AsyncimportOrbxFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>>(AsyncimportOrbxFromMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>> PrepareAsyncimportOrbxFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>>(PrepareAsyncimportOrbxFromMemoryRaw(context, request, cq));
    }
    // / Exports this root graph into a file (regular ocs or package)
    virtual ::grpc::Status exportToFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest& request, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>> AsyncexportToFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>>(AsyncexportToFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>> PrepareAsyncexportToFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>>(PrepareAsyncexportToFileRaw(context, request, cq));
    }
    // / Exports this graph into a string and optionally exports the raw data
    virtual ::grpc::Status exportToString(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest& request, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>> AsyncexportToString(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>>(AsyncexportToStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>> PrepareAsyncexportToString(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>>(PrepareAsyncexportToStringRaw(context, request, cq));
    }
    // / Returns the number of reference graphs that this root graph contains
    virtual ::grpc::Status referenceGraphCount(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest& request, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>> AsyncreferenceGraphCount(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>>(AsyncreferenceGraphCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>> PrepareAsyncreferenceGraphCount(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>>(PrepareAsyncreferenceGraphCountRaw(context, request, cq));
    }
    // / Loads all reference graphs in this graph
    virtual ::grpc::Status loadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncloadAllReferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncloadAllReferencesRaw(context, request, cq));
    }
    // / Unloads all reference graphs in this graph
    virtual ::grpc::Status unloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncunloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncunloadAllReferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncunloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncunloadAllReferencesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Creates a root node graph (graph without owner) with the specified version
      virtual void create2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest* request, ::octaneapi::ApiRootNodeGraph_createResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest* request, ::octaneapi::ApiRootNodeGraph_createResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Clears the root node graph (it will be empty afterwards) and sets it to the specified
      // / version
      virtual void init2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Converts the root node graph to the current version and evaluates all nodes
      virtual void convertAndEvaluate(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void convertAndEvaluate(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the total time span for all animations in this graph
      virtual void animationTimeSpan(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* request, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void animationTimeSpan(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* request, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Updates the time of all attributes in this root node graph
      virtual void updateTime(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void updateTime(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Imports a scene from disk into this graph
      virtual void importFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* request, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void importFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* request, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Imports an OCS XML string scene from disk into this graph
      virtual void importOcsFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void importOcsFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Imports an ORBX data from memory into this graph, chunk by chunk
      virtual void importOrbxFromCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void importOrbxFromCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Imports an ORBX data from memory into this graph
      virtual void importOrbxFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void importOrbxFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Exports this root graph into a file (regular ocs or package)
      virtual void exportToFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* request, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void exportToFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* request, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Exports this graph into a string and optionally exports the raw data
      virtual void exportToString(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* request, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void exportToString(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* request, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the number of reference graphs that this root graph contains
      virtual void referenceGraphCount(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* request, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void referenceGraphCount(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* request, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Loads all reference graphs in this graph
      virtual void loadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void loadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Unloads all reference graphs in this graph
      virtual void unloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_createResponse>* Asynccreate2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_createResponse>* PrepareAsynccreate2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* Asyncinit2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncinit2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncconvertAndEvaluateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncconvertAndEvaluateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>* AsyncanimationTimeSpanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>* PrepareAsyncanimationTimeSpanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncupdateTimeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncupdateTimeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>* AsyncimportFromFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>* PrepareAsyncimportFromFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>* AsyncimportOcsFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>* PrepareAsyncimportOcsFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>* AsyncimportOrbxFromCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>* PrepareAsyncimportOrbxFromCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>* AsyncimportOrbxFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>* PrepareAsyncimportOrbxFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>* AsyncexportToFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>* PrepareAsyncexportToFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>* AsyncexportToStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>* PrepareAsyncexportToStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>* AsyncreferenceGraphCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>* PrepareAsyncreferenceGraphCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncloadAllReferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncloadAllReferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncunloadAllReferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncunloadAllReferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status create2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest& request, ::octaneapi::ApiRootNodeGraph_createResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_createResponse>> Asynccreate2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_createResponse>>(Asynccreate2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_createResponse>> PrepareAsynccreate2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_createResponse>>(PrepareAsynccreate2Raw(context, request, cq));
    }
    ::grpc::Status init2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncinit2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(Asyncinit2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncinit2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncinit2Raw(context, request, cq));
    }
    ::grpc::Status convertAndEvaluate(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncconvertAndEvaluate(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncconvertAndEvaluateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncconvertAndEvaluate(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncconvertAndEvaluateRaw(context, request, cq));
    }
    ::grpc::Status animationTimeSpan(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest& request, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>> AsyncanimationTimeSpan(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>>(AsyncanimationTimeSpanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>> PrepareAsyncanimationTimeSpan(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>>(PrepareAsyncanimationTimeSpanRaw(context, request, cq));
    }
    ::grpc::Status updateTime(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncupdateTime(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncupdateTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncupdateTime(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncupdateTimeRaw(context, request, cq));
    }
    ::grpc::Status importFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest& request, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>> AsyncimportFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>>(AsyncimportFromFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>> PrepareAsyncimportFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>>(PrepareAsyncimportFromFileRaw(context, request, cq));
    }
    ::grpc::Status importOcsFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest& request, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>> AsyncimportOcsFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>>(AsyncimportOcsFromMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>> PrepareAsyncimportOcsFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>>(PrepareAsyncimportOcsFromMemoryRaw(context, request, cq));
    }
    ::grpc::Status importOrbxFromCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest& request, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>> AsyncimportOrbxFromCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>>(AsyncimportOrbxFromCallbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>> PrepareAsyncimportOrbxFromCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>>(PrepareAsyncimportOrbxFromCallbackRaw(context, request, cq));
    }
    ::grpc::Status importOrbxFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest& request, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>> AsyncimportOrbxFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>>(AsyncimportOrbxFromMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>> PrepareAsyncimportOrbxFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>>(PrepareAsyncimportOrbxFromMemoryRaw(context, request, cq));
    }
    ::grpc::Status exportToFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest& request, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>> AsyncexportToFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>>(AsyncexportToFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>> PrepareAsyncexportToFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>>(PrepareAsyncexportToFileRaw(context, request, cq));
    }
    ::grpc::Status exportToString(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest& request, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>> AsyncexportToString(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>>(AsyncexportToStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>> PrepareAsyncexportToString(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>>(PrepareAsyncexportToStringRaw(context, request, cq));
    }
    ::grpc::Status referenceGraphCount(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest& request, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>> AsyncreferenceGraphCount(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>>(AsyncreferenceGraphCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>> PrepareAsyncreferenceGraphCount(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>>(PrepareAsyncreferenceGraphCountRaw(context, request, cq));
    }
    ::grpc::Status loadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncloadAllReferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncloadAllReferencesRaw(context, request, cq));
    }
    ::grpc::Status unloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncunloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncunloadAllReferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncunloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncunloadAllReferencesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void create2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest* request, ::octaneapi::ApiRootNodeGraph_createResponse* response, std::function<void(::grpc::Status)>) override;
      void create2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest* request, ::octaneapi::ApiRootNodeGraph_createResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void init2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void init2(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void convertAndEvaluate(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void convertAndEvaluate(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void animationTimeSpan(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* request, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* response, std::function<void(::grpc::Status)>) override;
      void animationTimeSpan(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* request, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void updateTime(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void updateTime(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void importFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* request, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* response, std::function<void(::grpc::Status)>) override;
      void importFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* request, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void importOcsFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* response, std::function<void(::grpc::Status)>) override;
      void importOcsFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void importOrbxFromCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* response, std::function<void(::grpc::Status)>) override;
      void importOrbxFromCallback(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void importOrbxFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* response, std::function<void(::grpc::Status)>) override;
      void importOrbxFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void exportToFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* request, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* response, std::function<void(::grpc::Status)>) override;
      void exportToFile(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* request, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void exportToString(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* request, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* response, std::function<void(::grpc::Status)>) override;
      void exportToString(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* request, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void referenceGraphCount(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* request, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* response, std::function<void(::grpc::Status)>) override;
      void referenceGraphCount(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* request, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void loadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void loadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void unloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void unloadAllReferences(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_createResponse>* Asynccreate2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_createResponse>* PrepareAsynccreate2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Asyncinit2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncinit2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncconvertAndEvaluateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncconvertAndEvaluateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>* AsyncanimationTimeSpanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>* PrepareAsyncanimationTimeSpanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncupdateTimeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncupdateTimeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>* AsyncimportFromFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>* PrepareAsyncimportFromFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>* AsyncimportOcsFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>* PrepareAsyncimportOcsFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>* AsyncimportOrbxFromCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>* PrepareAsyncimportOrbxFromCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>* AsyncimportOrbxFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>* PrepareAsyncimportOrbxFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>* AsyncexportToFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>* PrepareAsyncexportToFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>* AsyncexportToStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>* PrepareAsyncexportToStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>* AsyncreferenceGraphCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>* PrepareAsyncreferenceGraphCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncloadAllReferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncloadAllReferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncunloadAllReferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncunloadAllReferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_create2_;
    const ::grpc::internal::RpcMethod rpcmethod_init2_;
    const ::grpc::internal::RpcMethod rpcmethod_convertAndEvaluate_;
    const ::grpc::internal::RpcMethod rpcmethod_animationTimeSpan_;
    const ::grpc::internal::RpcMethod rpcmethod_updateTime_;
    const ::grpc::internal::RpcMethod rpcmethod_importFromFile_;
    const ::grpc::internal::RpcMethod rpcmethod_importOcsFromMemory_;
    const ::grpc::internal::RpcMethod rpcmethod_importOrbxFromCallback_;
    const ::grpc::internal::RpcMethod rpcmethod_importOrbxFromMemory_;
    const ::grpc::internal::RpcMethod rpcmethod_exportToFile_;
    const ::grpc::internal::RpcMethod rpcmethod_exportToString_;
    const ::grpc::internal::RpcMethod rpcmethod_referenceGraphCount_;
    const ::grpc::internal::RpcMethod rpcmethod_loadAllReferences_;
    const ::grpc::internal::RpcMethod rpcmethod_unloadAllReferences_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Creates a root node graph (graph without owner) with the specified version
    virtual ::grpc::Status create2(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest* request, ::octaneapi::ApiRootNodeGraph_createResponse* response);
    // / Clears the root node graph (it will be empty afterwards) and sets it to the specified
    // / version
    virtual ::grpc::Status init2(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest* request, ::google::protobuf::Empty* response);
    // / Converts the root node graph to the current version and evaluates all nodes
    virtual ::grpc::Status convertAndEvaluate(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* request, ::google::protobuf::Empty* response);
    // / Returns the total time span for all animations in this graph
    virtual ::grpc::Status animationTimeSpan(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* request, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* response);
    // / Updates the time of all attributes in this root node graph
    virtual ::grpc::Status updateTime(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* request, ::google::protobuf::Empty* response);
    // / Imports a scene from disk into this graph
    virtual ::grpc::Status importFromFile(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* request, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* response);
    // / Imports an OCS XML string scene from disk into this graph
    virtual ::grpc::Status importOcsFromMemory(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* response);
    // / Imports an ORBX data from memory into this graph, chunk by chunk
    virtual ::grpc::Status importOrbxFromCallback(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* response);
    // / Imports an ORBX data from memory into this graph
    virtual ::grpc::Status importOrbxFromMemory(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* response);
    // / Exports this root graph into a file (regular ocs or package)
    virtual ::grpc::Status exportToFile(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* request, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* response);
    // / Exports this graph into a string and optionally exports the raw data
    virtual ::grpc::Status exportToString(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* request, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* response);
    // / Returns the number of reference graphs that this root graph contains
    virtual ::grpc::Status referenceGraphCount(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* request, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* response);
    // / Loads all reference graphs in this graph
    virtual ::grpc::Status loadAllReferences(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* request, ::google::protobuf::Empty* response);
    // / Unloads all reference graphs in this graph
    virtual ::grpc::Status unloadAllReferences(::grpc::ServerContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_create2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_create2() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_create2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_createRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate2(::grpc::ServerContext* context, ::octaneapi::ApiRootNodeGraph_createRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiRootNodeGraph_createResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_init2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init2() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_init2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit2(::grpc::ServerContext* context, ::octaneapi::ApiRootNodeGraph_initRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_convertAndEvaluate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_convertAndEvaluate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_convertAndEvaluate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status convertAndEvaluate(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestconvertAndEvaluate(::grpc::ServerContext* context, ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_animationTimeSpan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_animationTimeSpan() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_animationTimeSpan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status animationTimeSpan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestanimationTimeSpan(::grpc::ServerContext* context, ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_updateTime() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_updateTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateTime(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateTime(::grpc::ServerContext* context, ::octaneapi::ApiRootNodeGraph_updateTimeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_importFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_importFromFile() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_importFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importFromFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimportFromFile(::grpc::ServerContext* context, ::octaneapi::ApiRootNodeGraph_importFromFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiRootNodeGraph_importFromFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_importOcsFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_importOcsFromMemory() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_importOcsFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOcsFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimportOcsFromMemory(::grpc::ServerContext* context, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_importOrbxFromCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_importOrbxFromCallback() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_importOrbxFromCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOrbxFromCallback(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimportOrbxFromCallback(::grpc::ServerContext* context, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_importOrbxFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_importOrbxFromMemory() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_importOrbxFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOrbxFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimportOrbxFromMemory(::grpc::ServerContext* context, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_exportToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_exportToFile() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_exportToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportToFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexportToFile(::grpc::ServerContext* context, ::octaneapi::ApiRootNodeGraph_exportToFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiRootNodeGraph_exportToFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_exportToString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_exportToString() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_exportToString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportToString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexportToString(::grpc::ServerContext* context, ::octaneapi::ApiRootNodeGraph_exportToStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiRootNodeGraph_exportToStringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_referenceGraphCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_referenceGraphCount() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_referenceGraphCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status referenceGraphCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreferenceGraphCount(::grpc::ServerContext* context, ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loadAllReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loadAllReferences() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_loadAllReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadAllReferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadAllReferences(::grpc::ServerContext* context, ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unloadAllReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unloadAllReferences() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_unloadAllReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unloadAllReferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunloadAllReferences(::grpc::ServerContext* context, ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_create2<WithAsyncMethod_init2<WithAsyncMethod_convertAndEvaluate<WithAsyncMethod_animationTimeSpan<WithAsyncMethod_updateTime<WithAsyncMethod_importFromFile<WithAsyncMethod_importOcsFromMemory<WithAsyncMethod_importOrbxFromCallback<WithAsyncMethod_importOrbxFromMemory<WithAsyncMethod_exportToFile<WithAsyncMethod_exportToString<WithAsyncMethod_referenceGraphCount<WithAsyncMethod_loadAllReferences<WithAsyncMethod_unloadAllReferences<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_create2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_create2() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_createRequest, ::octaneapi::ApiRootNodeGraph_createResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRootNodeGraph_createRequest* request, ::octaneapi::ApiRootNodeGraph_createResponse* response) { return this->create2(context, request, response); }));}
    void SetMessageAllocatorFor_create2(
        ::grpc::MessageAllocator< ::octaneapi::ApiRootNodeGraph_createRequest, ::octaneapi::ApiRootNodeGraph_createResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_createRequest, ::octaneapi::ApiRootNodeGraph_createResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_create2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_createRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create2(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_createRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_createResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_init2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init2() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_initRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRootNodeGraph_initRequest* request, ::google::protobuf::Empty* response) { return this->init2(context, request, response); }));}
    void SetMessageAllocatorFor_init2(
        ::grpc::MessageAllocator< ::octaneapi::ApiRootNodeGraph_initRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_initRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init2(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_convertAndEvaluate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_convertAndEvaluate() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* request, ::google::protobuf::Empty* response) { return this->convertAndEvaluate(context, request, response); }));}
    void SetMessageAllocatorFor_convertAndEvaluate(
        ::grpc::MessageAllocator< ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_convertAndEvaluate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status convertAndEvaluate(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* convertAndEvaluate(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_animationTimeSpan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_animationTimeSpan() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* request, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* response) { return this->animationTimeSpan(context, request, response); }));}
    void SetMessageAllocatorFor_animationTimeSpan(
        ::grpc::MessageAllocator< ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_animationTimeSpan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status animationTimeSpan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* animationTimeSpan(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_updateTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_updateTime() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_updateTimeRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* request, ::google::protobuf::Empty* response) { return this->updateTime(context, request, response); }));}
    void SetMessageAllocatorFor_updateTime(
        ::grpc::MessageAllocator< ::octaneapi::ApiRootNodeGraph_updateTimeRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_updateTimeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_updateTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateTime(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updateTime(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_importFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_importFromFile() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_importFromFileRequest, ::octaneapi::ApiRootNodeGraph_importFromFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* request, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* response) { return this->importFromFile(context, request, response); }));}
    void SetMessageAllocatorFor_importFromFile(
        ::grpc::MessageAllocator< ::octaneapi::ApiRootNodeGraph_importFromFileRequest, ::octaneapi::ApiRootNodeGraph_importFromFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_importFromFileRequest, ::octaneapi::ApiRootNodeGraph_importFromFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_importFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importFromFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* importFromFile(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_importOcsFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_importOcsFromMemory() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* response) { return this->importOcsFromMemory(context, request, response); }));}
    void SetMessageAllocatorFor_importOcsFromMemory(
        ::grpc::MessageAllocator< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_importOcsFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOcsFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* importOcsFromMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_importOrbxFromCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_importOrbxFromCallback() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* response) { return this->importOrbxFromCallback(context, request, response); }));}
    void SetMessageAllocatorFor_importOrbxFromCallback(
        ::grpc::MessageAllocator< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_importOrbxFromCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOrbxFromCallback(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* importOrbxFromCallback(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_importOrbxFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_importOrbxFromMemory() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* request, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* response) { return this->importOrbxFromMemory(context, request, response); }));}
    void SetMessageAllocatorFor_importOrbxFromMemory(
        ::grpc::MessageAllocator< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_importOrbxFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOrbxFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* importOrbxFromMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_exportToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_exportToFile() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_exportToFileRequest, ::octaneapi::ApiRootNodeGraph_exportToFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* request, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* response) { return this->exportToFile(context, request, response); }));}
    void SetMessageAllocatorFor_exportToFile(
        ::grpc::MessageAllocator< ::octaneapi::ApiRootNodeGraph_exportToFileRequest, ::octaneapi::ApiRootNodeGraph_exportToFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_exportToFileRequest, ::octaneapi::ApiRootNodeGraph_exportToFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_exportToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportToFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* exportToFile(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_exportToString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_exportToString() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_exportToStringRequest, ::octaneapi::ApiRootNodeGraph_exportToStringResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* request, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* response) { return this->exportToString(context, request, response); }));}
    void SetMessageAllocatorFor_exportToString(
        ::grpc::MessageAllocator< ::octaneapi::ApiRootNodeGraph_exportToStringRequest, ::octaneapi::ApiRootNodeGraph_exportToStringResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_exportToStringRequest, ::octaneapi::ApiRootNodeGraph_exportToStringResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_exportToString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportToString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* exportToString(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_referenceGraphCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_referenceGraphCount() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* request, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* response) { return this->referenceGraphCount(context, request, response); }));}
    void SetMessageAllocatorFor_referenceGraphCount(
        ::grpc::MessageAllocator< ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_referenceGraphCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status referenceGraphCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* referenceGraphCount(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_loadAllReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_loadAllReferences() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* request, ::google::protobuf::Empty* response) { return this->loadAllReferences(context, request, response); }));}
    void SetMessageAllocatorFor_loadAllReferences(
        ::grpc::MessageAllocator< ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_loadAllReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadAllReferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadAllReferences(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_unloadAllReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_unloadAllReferences() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* request, ::google::protobuf::Empty* response) { return this->unloadAllReferences(context, request, response); }));}
    void SetMessageAllocatorFor_unloadAllReferences(
        ::grpc::MessageAllocator< ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_unloadAllReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unloadAllReferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unloadAllReferences(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_create2<WithCallbackMethod_init2<WithCallbackMethod_convertAndEvaluate<WithCallbackMethod_animationTimeSpan<WithCallbackMethod_updateTime<WithCallbackMethod_importFromFile<WithCallbackMethod_importOcsFromMemory<WithCallbackMethod_importOrbxFromCallback<WithCallbackMethod_importOrbxFromMemory<WithCallbackMethod_exportToFile<WithCallbackMethod_exportToString<WithCallbackMethod_referenceGraphCount<WithCallbackMethod_loadAllReferences<WithCallbackMethod_unloadAllReferences<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_create2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_create2() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_create2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_createRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_init2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init2() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_init2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_convertAndEvaluate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_convertAndEvaluate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_convertAndEvaluate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status convertAndEvaluate(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_animationTimeSpan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_animationTimeSpan() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_animationTimeSpan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status animationTimeSpan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_updateTime() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_updateTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateTime(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_importFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_importFromFile() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_importFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importFromFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_importOcsFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_importOcsFromMemory() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_importOcsFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOcsFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_importOrbxFromCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_importOrbxFromCallback() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_importOrbxFromCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOrbxFromCallback(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_importOrbxFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_importOrbxFromMemory() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_importOrbxFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOrbxFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_exportToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_exportToFile() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_exportToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportToFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_exportToString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_exportToString() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_exportToString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportToString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_referenceGraphCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_referenceGraphCount() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_referenceGraphCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status referenceGraphCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loadAllReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loadAllReferences() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_loadAllReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadAllReferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unloadAllReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unloadAllReferences() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_unloadAllReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unloadAllReferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_create2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_create2() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_create2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_createRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_init2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init2() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_init2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_convertAndEvaluate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_convertAndEvaluate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_convertAndEvaluate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status convertAndEvaluate(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestconvertAndEvaluate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_animationTimeSpan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_animationTimeSpan() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_animationTimeSpan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status animationTimeSpan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestanimationTimeSpan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updateTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_updateTime() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_updateTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateTime(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_importFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_importFromFile() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_importFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importFromFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimportFromFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_importOcsFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_importOcsFromMemory() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_importOcsFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOcsFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimportOcsFromMemory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_importOrbxFromCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_importOrbxFromCallback() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_importOrbxFromCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOrbxFromCallback(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimportOrbxFromCallback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_importOrbxFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_importOrbxFromMemory() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_importOrbxFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOrbxFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimportOrbxFromMemory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_exportToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_exportToFile() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_exportToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportToFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexportToFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_exportToString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_exportToString() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_exportToString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportToString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexportToString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_referenceGraphCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_referenceGraphCount() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_referenceGraphCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status referenceGraphCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreferenceGraphCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_loadAllReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loadAllReferences() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_loadAllReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadAllReferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadAllReferences(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unloadAllReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unloadAllReferences() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_unloadAllReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unloadAllReferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunloadAllReferences(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_create2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_create2() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->create2(context, request, response); }));
    }
    ~WithRawCallbackMethod_create2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_createRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init2() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init2(context, request, response); }));
    }
    ~WithRawCallbackMethod_init2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_convertAndEvaluate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_convertAndEvaluate() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->convertAndEvaluate(context, request, response); }));
    }
    ~WithRawCallbackMethod_convertAndEvaluate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status convertAndEvaluate(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* convertAndEvaluate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_animationTimeSpan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_animationTimeSpan() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->animationTimeSpan(context, request, response); }));
    }
    ~WithRawCallbackMethod_animationTimeSpan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status animationTimeSpan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* animationTimeSpan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_updateTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_updateTime() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->updateTime(context, request, response); }));
    }
    ~WithRawCallbackMethod_updateTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateTime(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updateTime(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_importFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_importFromFile() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->importFromFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_importFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importFromFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* importFromFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_importOcsFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_importOcsFromMemory() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->importOcsFromMemory(context, request, response); }));
    }
    ~WithRawCallbackMethod_importOcsFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOcsFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* importOcsFromMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_importOrbxFromCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_importOrbxFromCallback() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->importOrbxFromCallback(context, request, response); }));
    }
    ~WithRawCallbackMethod_importOrbxFromCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOrbxFromCallback(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* importOrbxFromCallback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_importOrbxFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_importOrbxFromMemory() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->importOrbxFromMemory(context, request, response); }));
    }
    ~WithRawCallbackMethod_importOrbxFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status importOrbxFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* importOrbxFromMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_exportToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_exportToFile() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->exportToFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_exportToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportToFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* exportToFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_exportToString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_exportToString() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->exportToString(context, request, response); }));
    }
    ~WithRawCallbackMethod_exportToString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportToString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* exportToString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_referenceGraphCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_referenceGraphCount() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->referenceGraphCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_referenceGraphCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status referenceGraphCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* referenceGraphCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_loadAllReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_loadAllReferences() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loadAllReferences(context, request, response); }));
    }
    ~WithRawCallbackMethod_loadAllReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadAllReferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadAllReferences(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_unloadAllReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_unloadAllReferences() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unloadAllReferences(context, request, response); }));
    }
    ~WithRawCallbackMethod_unloadAllReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unloadAllReferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unloadAllReferences(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_create2() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRootNodeGraph_createRequest, ::octaneapi::ApiRootNodeGraph_createResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRootNodeGraph_createRequest, ::octaneapi::ApiRootNodeGraph_createResponse>* streamer) {
                       return this->Streamedcreate2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_create2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_createRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRootNodeGraph_createRequest,::octaneapi::ApiRootNodeGraph_createResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init2() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRootNodeGraph_initRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRootNodeGraph_initRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedinit2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init2(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRootNodeGraph_initRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_convertAndEvaluate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_convertAndEvaluate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedconvertAndEvaluate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_convertAndEvaluate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status convertAndEvaluate(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedconvertAndEvaluate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRootNodeGraph_convertAndEvaluateRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_animationTimeSpan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_animationTimeSpan() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>* streamer) {
                       return this->StreamedanimationTimeSpan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_animationTimeSpan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status animationTimeSpan(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedanimationTimeSpan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRootNodeGraph_animationTimeSpanRequest,::octaneapi::ApiRootNodeGraph_animationTimeSpanResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updateTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_updateTime() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRootNodeGraph_updateTimeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRootNodeGraph_updateTimeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedupdateTime(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_updateTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updateTime(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_updateTimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdateTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRootNodeGraph_updateTimeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_importFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_importFromFile() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRootNodeGraph_importFromFileRequest, ::octaneapi::ApiRootNodeGraph_importFromFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRootNodeGraph_importFromFileRequest, ::octaneapi::ApiRootNodeGraph_importFromFileResponse>* streamer) {
                       return this->StreamedimportFromFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_importFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status importFromFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importFromFileRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedimportFromFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRootNodeGraph_importFromFileRequest,::octaneapi::ApiRootNodeGraph_importFromFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_importOcsFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_importOcsFromMemory() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>* streamer) {
                       return this->StreamedimportOcsFromMemory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_importOcsFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status importOcsFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedimportOcsFromMemory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRootNodeGraph_importOcsFromMemoryRequest,::octaneapi::ApiRootNodeGraph_importOcsFromMemoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_importOrbxFromCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_importOrbxFromCallback() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>* streamer) {
                       return this->StreamedimportOrbxFromCallback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_importOrbxFromCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status importOrbxFromCallback(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedimportOrbxFromCallback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackRequest,::octaneapi::ApiRootNodeGraph_importOrbxFromCallbackResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_importOrbxFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_importOrbxFromMemory() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>* streamer) {
                       return this->StreamedimportOrbxFromMemory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_importOrbxFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status importOrbxFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedimportOrbxFromMemory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryRequest,::octaneapi::ApiRootNodeGraph_importOrbxFromMemoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_exportToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_exportToFile() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRootNodeGraph_exportToFileRequest, ::octaneapi::ApiRootNodeGraph_exportToFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRootNodeGraph_exportToFileRequest, ::octaneapi::ApiRootNodeGraph_exportToFileResponse>* streamer) {
                       return this->StreamedexportToFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_exportToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status exportToFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_exportToFileRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_exportToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedexportToFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRootNodeGraph_exportToFileRequest,::octaneapi::ApiRootNodeGraph_exportToFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_exportToString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_exportToString() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRootNodeGraph_exportToStringRequest, ::octaneapi::ApiRootNodeGraph_exportToStringResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRootNodeGraph_exportToStringRequest, ::octaneapi::ApiRootNodeGraph_exportToStringResponse>* streamer) {
                       return this->StreamedexportToString(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_exportToString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status exportToString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_exportToStringRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_exportToStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedexportToString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRootNodeGraph_exportToStringRequest,::octaneapi::ApiRootNodeGraph_exportToStringResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_referenceGraphCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_referenceGraphCount() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>* streamer) {
                       return this->StreamedreferenceGraphCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_referenceGraphCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status referenceGraphCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest* /*request*/, ::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedreferenceGraphCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRootNodeGraph_referenceGraphCountRequest,::octaneapi::ApiRootNodeGraph_referenceGraphCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loadAllReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loadAllReferences() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedloadAllReferences(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loadAllReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loadAllReferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloadAllReferences(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRootNodeGraph_loadAllReferencesRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unloadAllReferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unloadAllReferences() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedunloadAllReferences(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_unloadAllReferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unloadAllReferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedunloadAllReferences(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRootNodeGraph_unloadAllReferencesRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_create2<WithStreamedUnaryMethod_init2<WithStreamedUnaryMethod_convertAndEvaluate<WithStreamedUnaryMethod_animationTimeSpan<WithStreamedUnaryMethod_updateTime<WithStreamedUnaryMethod_importFromFile<WithStreamedUnaryMethod_importOcsFromMemory<WithStreamedUnaryMethod_importOrbxFromCallback<WithStreamedUnaryMethod_importOrbxFromMemory<WithStreamedUnaryMethod_exportToFile<WithStreamedUnaryMethod_exportToString<WithStreamedUnaryMethod_referenceGraphCount<WithStreamedUnaryMethod_loadAllReferences<WithStreamedUnaryMethod_unloadAllReferences<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_create2<WithStreamedUnaryMethod_init2<WithStreamedUnaryMethod_convertAndEvaluate<WithStreamedUnaryMethod_animationTimeSpan<WithStreamedUnaryMethod_updateTime<WithStreamedUnaryMethod_importFromFile<WithStreamedUnaryMethod_importOcsFromMemory<WithStreamedUnaryMethod_importOrbxFromCallback<WithStreamedUnaryMethod_importOrbxFromMemory<WithStreamedUnaryMethod_exportToFile<WithStreamedUnaryMethod_exportToString<WithStreamedUnaryMethod_referenceGraphCount<WithStreamedUnaryMethod_loadAllReferences<WithStreamedUnaryMethod_unloadAllReferences<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apinodesystem_5f8_2eproto__INCLUDED
