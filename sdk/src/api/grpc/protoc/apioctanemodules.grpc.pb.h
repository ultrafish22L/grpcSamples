// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apioctanemodules.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apioctanemodules_2eproto__INCLUDED
#define GRPC_apioctanemodules_2eproto__INCLUDED

#include "apioctanemodules.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiOctaneModules' from 'apioctanemodules.h'
class ApiOctaneModulesService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiOctaneModulesService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / A directory from which modules will be loaded
    virtual ::grpc::Status setDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest& request, ::octaneapi::ApiOctaneModules_setDirectoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_setDirectoryResponse>> AsyncsetDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_setDirectoryResponse>>(AsyncsetDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_setDirectoryResponse>> PrepareAsyncsetDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_setDirectoryResponse>>(PrepareAsyncsetDirectoryRaw(context, request, cq));
    }
    // / The current directory where the octane loads modules from
    virtual ::grpc::Status getDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest& request, ::octaneapi::ApiOctaneModules_getDirectoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getDirectoryResponse>> AsyncgetDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getDirectoryResponse>>(AsyncgetDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getDirectoryResponse>> PrepareAsyncgetDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getDirectoryResponse>>(PrepareAsyncgetDirectoryRaw(context, request, cq));
    }
    // / Returns module information for the moduleId
    virtual ::grpc::Status getModuleInfo(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest& request, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>> AsyncgetModuleInfo(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>>(AsyncgetModuleInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>> PrepareAsyncgetModuleInfo(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>>(PrepareAsyncgetModuleInfoRaw(context, request, cq));
    }
    // / Return list of all available ids of node graph modules
    // / Note: To create a module nodegraph pass the module id
    // / to the ApiNodeGraph::Create function
    virtual ::grpc::Status getNodegraphModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest& request, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>> AsyncgetNodegraphModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>>(AsyncgetNodegraphModulesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>> PrepareAsyncgetNodegraphModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>>(PrepareAsyncgetNodegraphModulesRaw(context, request, cq));
    }
    // / Return list of all available ids of command modules
    virtual ::grpc::Status getCommandModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest& request, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>> AsyncgetCommandModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>>(AsyncgetCommandModulesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>> PrepareAsyncgetCommandModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>>(PrepareAsyncgetCommandModulesRaw(context, request, cq));
    }
    // / Execute a command module
    virtual ::grpc::Status runCommandModule(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest& request, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>> AsyncrunCommandModule(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>>(AsyncrunCommandModuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>> PrepareAsyncrunCommandModule(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>>(PrepareAsyncrunCommandModuleRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / A directory from which modules will be loaded
      virtual void setDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* request, ::octaneapi::ApiOctaneModules_setDirectoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* request, ::octaneapi::ApiOctaneModules_setDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / The current directory where the octane loads modules from
      virtual void getDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* request, ::octaneapi::ApiOctaneModules_getDirectoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* request, ::octaneapi::ApiOctaneModules_getDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns module information for the moduleId
      virtual void getModuleInfo(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* request, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getModuleInfo(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* request, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Return list of all available ids of node graph modules
      // / Note: To create a module nodegraph pass the module id
      // / to the ApiNodeGraph::Create function
      virtual void getNodegraphModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* request, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getNodegraphModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* request, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Return list of all available ids of command modules
      virtual void getCommandModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* request, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getCommandModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* request, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Execute a command module
      virtual void runCommandModule(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* request, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void runCommandModule(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* request, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_setDirectoryResponse>* AsyncsetDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_setDirectoryResponse>* PrepareAsyncsetDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getDirectoryResponse>* AsyncgetDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getDirectoryResponse>* PrepareAsyncgetDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>* AsyncgetModuleInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>* PrepareAsyncgetModuleInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>* AsyncgetNodegraphModulesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>* PrepareAsyncgetNodegraphModulesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>* AsyncgetCommandModulesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>* PrepareAsyncgetCommandModulesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>* AsyncrunCommandModuleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>* PrepareAsyncrunCommandModuleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status setDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest& request, ::octaneapi::ApiOctaneModules_setDirectoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_setDirectoryResponse>> AsyncsetDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_setDirectoryResponse>>(AsyncsetDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_setDirectoryResponse>> PrepareAsyncsetDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_setDirectoryResponse>>(PrepareAsyncsetDirectoryRaw(context, request, cq));
    }
    ::grpc::Status getDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest& request, ::octaneapi::ApiOctaneModules_getDirectoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getDirectoryResponse>> AsyncgetDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getDirectoryResponse>>(AsyncgetDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getDirectoryResponse>> PrepareAsyncgetDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getDirectoryResponse>>(PrepareAsyncgetDirectoryRaw(context, request, cq));
    }
    ::grpc::Status getModuleInfo(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest& request, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>> AsyncgetModuleInfo(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>>(AsyncgetModuleInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>> PrepareAsyncgetModuleInfo(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>>(PrepareAsyncgetModuleInfoRaw(context, request, cq));
    }
    ::grpc::Status getNodegraphModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest& request, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>> AsyncgetNodegraphModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>>(AsyncgetNodegraphModulesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>> PrepareAsyncgetNodegraphModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>>(PrepareAsyncgetNodegraphModulesRaw(context, request, cq));
    }
    ::grpc::Status getCommandModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest& request, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>> AsyncgetCommandModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>>(AsyncgetCommandModulesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>> PrepareAsyncgetCommandModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>>(PrepareAsyncgetCommandModulesRaw(context, request, cq));
    }
    ::grpc::Status runCommandModule(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest& request, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>> AsyncrunCommandModule(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>>(AsyncrunCommandModuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>> PrepareAsyncrunCommandModule(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>>(PrepareAsyncrunCommandModuleRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void setDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* request, ::octaneapi::ApiOctaneModules_setDirectoryResponse* response, std::function<void(::grpc::Status)>) override;
      void setDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* request, ::octaneapi::ApiOctaneModules_setDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* request, ::octaneapi::ApiOctaneModules_getDirectoryResponse* response, std::function<void(::grpc::Status)>) override;
      void getDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* request, ::octaneapi::ApiOctaneModules_getDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getModuleInfo(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* request, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void getModuleInfo(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* request, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getNodegraphModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* request, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* response, std::function<void(::grpc::Status)>) override;
      void getNodegraphModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* request, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getCommandModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* request, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* response, std::function<void(::grpc::Status)>) override;
      void getCommandModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* request, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void runCommandModule(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* request, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* response, std::function<void(::grpc::Status)>) override;
      void runCommandModule(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* request, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_setDirectoryResponse>* AsyncsetDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_setDirectoryResponse>* PrepareAsyncsetDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getDirectoryResponse>* AsyncgetDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getDirectoryResponse>* PrepareAsyncgetDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>* AsyncgetModuleInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>* PrepareAsyncgetModuleInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>* AsyncgetNodegraphModulesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>* PrepareAsyncgetNodegraphModulesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>* AsyncgetCommandModulesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>* PrepareAsyncgetCommandModulesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>* AsyncrunCommandModuleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>* PrepareAsyncrunCommandModuleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_setDirectory_;
    const ::grpc::internal::RpcMethod rpcmethod_getDirectory_;
    const ::grpc::internal::RpcMethod rpcmethod_getModuleInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_getNodegraphModules_;
    const ::grpc::internal::RpcMethod rpcmethod_getCommandModules_;
    const ::grpc::internal::RpcMethod rpcmethod_runCommandModule_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / A directory from which modules will be loaded
    virtual ::grpc::Status setDirectory(::grpc::ServerContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* request, ::octaneapi::ApiOctaneModules_setDirectoryResponse* response);
    // / The current directory where the octane loads modules from
    virtual ::grpc::Status getDirectory(::grpc::ServerContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* request, ::octaneapi::ApiOctaneModules_getDirectoryResponse* response);
    // / Returns module information for the moduleId
    virtual ::grpc::Status getModuleInfo(::grpc::ServerContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* request, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* response);
    // / Return list of all available ids of node graph modules
    // / Note: To create a module nodegraph pass the module id
    // / to the ApiNodeGraph::Create function
    virtual ::grpc::Status getNodegraphModules(::grpc::ServerContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* request, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* response);
    // / Return list of all available ids of command modules
    virtual ::grpc::Status getCommandModules(::grpc::ServerContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* request, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* response);
    // / Execute a command module
    virtual ::grpc::Status runCommandModule(::grpc::ServerContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* request, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_setDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setDirectory() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_setDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* /*request*/, ::octaneapi::ApiOctaneModules_setDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDirectory(::grpc::ServerContext* context, ::octaneapi::ApiOctaneModules_setDirectoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOctaneModules_setDirectoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDirectory() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* /*request*/, ::octaneapi::ApiOctaneModules_getDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDirectory(::grpc::ServerContext* context, ::octaneapi::ApiOctaneModules_getDirectoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOctaneModules_getDirectoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getModuleInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getModuleInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getModuleInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getModuleInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* /*request*/, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetModuleInfo(::grpc::ServerContext* context, ::octaneapi::ApiOctaneModules_getModuleInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getNodegraphModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getNodegraphModules() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getNodegraphModules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodegraphModules(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* /*request*/, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNodegraphModules(::grpc::ServerContext* context, ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCommandModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getCommandModules() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getCommandModules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCommandModules(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* /*request*/, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCommandModules(::grpc::ServerContext* context, ::octaneapi::ApiOctaneModules_getCommandModulesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_runCommandModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_runCommandModule() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_runCommandModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status runCommandModule(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* /*request*/, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrunCommandModule(::grpc::ServerContext* context, ::octaneapi::ApiOctaneModules_runCommandModuleRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_setDirectory<WithAsyncMethod_getDirectory<WithAsyncMethod_getModuleInfo<WithAsyncMethod_getNodegraphModules<WithAsyncMethod_getCommandModules<WithAsyncMethod_runCommandModule<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_setDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setDirectory() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOctaneModules_setDirectoryRequest, ::octaneapi::ApiOctaneModules_setDirectoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* request, ::octaneapi::ApiOctaneModules_setDirectoryResponse* response) { return this->setDirectory(context, request, response); }));}
    void SetMessageAllocatorFor_setDirectory(
        ::grpc::MessageAllocator< ::octaneapi::ApiOctaneModules_setDirectoryRequest, ::octaneapi::ApiOctaneModules_setDirectoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOctaneModules_setDirectoryRequest, ::octaneapi::ApiOctaneModules_setDirectoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* /*request*/, ::octaneapi::ApiOctaneModules_setDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* /*request*/, ::octaneapi::ApiOctaneModules_setDirectoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getDirectory() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOctaneModules_getDirectoryRequest, ::octaneapi::ApiOctaneModules_getDirectoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* request, ::octaneapi::ApiOctaneModules_getDirectoryResponse* response) { return this->getDirectory(context, request, response); }));}
    void SetMessageAllocatorFor_getDirectory(
        ::grpc::MessageAllocator< ::octaneapi::ApiOctaneModules_getDirectoryRequest, ::octaneapi::ApiOctaneModules_getDirectoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOctaneModules_getDirectoryRequest, ::octaneapi::ApiOctaneModules_getDirectoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* /*request*/, ::octaneapi::ApiOctaneModules_getDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* /*request*/, ::octaneapi::ApiOctaneModules_getDirectoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getModuleInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getModuleInfo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOctaneModules_getModuleInfoRequest, ::octaneapi::ApiOctaneModules_getModuleInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* request, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* response) { return this->getModuleInfo(context, request, response); }));}
    void SetMessageAllocatorFor_getModuleInfo(
        ::grpc::MessageAllocator< ::octaneapi::ApiOctaneModules_getModuleInfoRequest, ::octaneapi::ApiOctaneModules_getModuleInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOctaneModules_getModuleInfoRequest, ::octaneapi::ApiOctaneModules_getModuleInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getModuleInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getModuleInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* /*request*/, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getModuleInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* /*request*/, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getNodegraphModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getNodegraphModules() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* request, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* response) { return this->getNodegraphModules(context, request, response); }));}
    void SetMessageAllocatorFor_getNodegraphModules(
        ::grpc::MessageAllocator< ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getNodegraphModules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodegraphModules(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* /*request*/, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getNodegraphModules(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* /*request*/, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getCommandModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getCommandModules() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOctaneModules_getCommandModulesRequest, ::octaneapi::ApiOctaneModules_getCommandModulesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* request, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* response) { return this->getCommandModules(context, request, response); }));}
    void SetMessageAllocatorFor_getCommandModules(
        ::grpc::MessageAllocator< ::octaneapi::ApiOctaneModules_getCommandModulesRequest, ::octaneapi::ApiOctaneModules_getCommandModulesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOctaneModules_getCommandModulesRequest, ::octaneapi::ApiOctaneModules_getCommandModulesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getCommandModules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCommandModules(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* /*request*/, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCommandModules(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* /*request*/, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_runCommandModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_runCommandModule() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOctaneModules_runCommandModuleRequest, ::octaneapi::ApiOctaneModules_runCommandModuleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* request, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* response) { return this->runCommandModule(context, request, response); }));}
    void SetMessageAllocatorFor_runCommandModule(
        ::grpc::MessageAllocator< ::octaneapi::ApiOctaneModules_runCommandModuleRequest, ::octaneapi::ApiOctaneModules_runCommandModuleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOctaneModules_runCommandModuleRequest, ::octaneapi::ApiOctaneModules_runCommandModuleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_runCommandModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status runCommandModule(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* /*request*/, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* runCommandModule(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* /*request*/, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_setDirectory<WithCallbackMethod_getDirectory<WithCallbackMethod_getModuleInfo<WithCallbackMethod_getNodegraphModules<WithCallbackMethod_getCommandModules<WithCallbackMethod_runCommandModule<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_setDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setDirectory() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_setDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* /*request*/, ::octaneapi::ApiOctaneModules_setDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDirectory() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* /*request*/, ::octaneapi::ApiOctaneModules_getDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getModuleInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getModuleInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getModuleInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getModuleInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* /*request*/, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getNodegraphModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getNodegraphModules() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getNodegraphModules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodegraphModules(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* /*request*/, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCommandModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getCommandModules() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getCommandModules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCommandModules(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* /*request*/, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_runCommandModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_runCommandModule() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_runCommandModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status runCommandModule(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* /*request*/, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_setDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setDirectory() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_setDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* /*request*/, ::octaneapi::ApiOctaneModules_setDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDirectory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDirectory() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* /*request*/, ::octaneapi::ApiOctaneModules_getDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDirectory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getModuleInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getModuleInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getModuleInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getModuleInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* /*request*/, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetModuleInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNodegraphModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getNodegraphModules() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getNodegraphModules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodegraphModules(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* /*request*/, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNodegraphModules(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCommandModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getCommandModules() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getCommandModules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCommandModules(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* /*request*/, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCommandModules(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_runCommandModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_runCommandModule() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_runCommandModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status runCommandModule(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* /*request*/, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrunCommandModule(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setDirectory() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setDirectory(context, request, response); }));
    }
    ~WithRawCallbackMethod_setDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* /*request*/, ::octaneapi::ApiOctaneModules_setDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getDirectory() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDirectory(context, request, response); }));
    }
    ~WithRawCallbackMethod_getDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* /*request*/, ::octaneapi::ApiOctaneModules_getDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getModuleInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getModuleInfo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getModuleInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_getModuleInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getModuleInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* /*request*/, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getModuleInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getNodegraphModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getNodegraphModules() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getNodegraphModules(context, request, response); }));
    }
    ~WithRawCallbackMethod_getNodegraphModules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNodegraphModules(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* /*request*/, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getNodegraphModules(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getCommandModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getCommandModules() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getCommandModules(context, request, response); }));
    }
    ~WithRawCallbackMethod_getCommandModules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCommandModules(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* /*request*/, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCommandModules(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_runCommandModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_runCommandModule() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->runCommandModule(context, request, response); }));
    }
    ~WithRawCallbackMethod_runCommandModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status runCommandModule(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* /*request*/, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* runCommandModule(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setDirectory() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOctaneModules_setDirectoryRequest, ::octaneapi::ApiOctaneModules_setDirectoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOctaneModules_setDirectoryRequest, ::octaneapi::ApiOctaneModules_setDirectoryResponse>* streamer) {
                       return this->StreamedsetDirectory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* /*request*/, ::octaneapi::ApiOctaneModules_setDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetDirectory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOctaneModules_setDirectoryRequest,::octaneapi::ApiOctaneModules_setDirectoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDirectory() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOctaneModules_getDirectoryRequest, ::octaneapi::ApiOctaneModules_getDirectoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOctaneModules_getDirectoryRequest, ::octaneapi::ApiOctaneModules_getDirectoryResponse>* streamer) {
                       return this->StreamedgetDirectory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* /*request*/, ::octaneapi::ApiOctaneModules_getDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDirectory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOctaneModules_getDirectoryRequest,::octaneapi::ApiOctaneModules_getDirectoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getModuleInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getModuleInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOctaneModules_getModuleInfoRequest, ::octaneapi::ApiOctaneModules_getModuleInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOctaneModules_getModuleInfoRequest, ::octaneapi::ApiOctaneModules_getModuleInfoResponse>* streamer) {
                       return this->StreamedgetModuleInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getModuleInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getModuleInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* /*request*/, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetModuleInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOctaneModules_getModuleInfoRequest,::octaneapi::ApiOctaneModules_getModuleInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNodegraphModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getNodegraphModules() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>* streamer) {
                       return this->StreamedgetNodegraphModules(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getNodegraphModules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNodegraphModules(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* /*request*/, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNodegraphModules(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest,::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCommandModules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getCommandModules() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOctaneModules_getCommandModulesRequest, ::octaneapi::ApiOctaneModules_getCommandModulesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOctaneModules_getCommandModulesRequest, ::octaneapi::ApiOctaneModules_getCommandModulesResponse>* streamer) {
                       return this->StreamedgetCommandModules(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getCommandModules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCommandModules(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* /*request*/, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCommandModules(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOctaneModules_getCommandModulesRequest,::octaneapi::ApiOctaneModules_getCommandModulesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_runCommandModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_runCommandModule() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOctaneModules_runCommandModuleRequest, ::octaneapi::ApiOctaneModules_runCommandModuleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOctaneModules_runCommandModuleRequest, ::octaneapi::ApiOctaneModules_runCommandModuleResponse>* streamer) {
                       return this->StreamedrunCommandModule(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_runCommandModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status runCommandModule(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* /*request*/, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrunCommandModule(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOctaneModules_runCommandModuleRequest,::octaneapi::ApiOctaneModules_runCommandModuleResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_setDirectory<WithStreamedUnaryMethod_getDirectory<WithStreamedUnaryMethod_getModuleInfo<WithStreamedUnaryMethod_getNodegraphModules<WithStreamedUnaryMethod_getCommandModules<WithStreamedUnaryMethod_runCommandModule<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_setDirectory<WithStreamedUnaryMethod_getDirectory<WithStreamedUnaryMethod_getModuleInfo<WithStreamedUnaryMethod_getNodegraphModules<WithStreamedUnaryMethod_getCommandModules<WithStreamedUnaryMethod_runCommandModule<Service > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apioctanemodules_2eproto__INCLUDED
