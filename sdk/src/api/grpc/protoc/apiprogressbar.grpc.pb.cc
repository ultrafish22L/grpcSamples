// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apiprogressbar.proto

#include "apiprogressbar.pb.h"
#include "apiprogressbar.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiProgressBarService_method_names[] = {
  "/octaneapi.ApiProgressBarService/create",
  "/octaneapi.ApiProgressBarService/destroy",
  "/octaneapi.ApiProgressBarService/setProgress",
  "/octaneapi.ApiProgressBarService/progress",
  "/octaneapi.ApiProgressBarService/setText",
};

std::unique_ptr< ApiProgressBarService::Stub> ApiProgressBarService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiProgressBarService::Stub> stub(new ApiProgressBarService::Stub(channel, options));
  return stub;
}

ApiProgressBarService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create_(ApiProgressBarService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(ApiProgressBarService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setProgress_(ApiProgressBarService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_progress_(ApiProgressBarService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setText_(ApiProgressBarService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiProgressBarService::Stub::create(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_createRequest& request, ::octaneapi::ApiProgressBar_createResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProgressBar_createRequest, ::octaneapi::ApiProgressBar_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_, context, request, response);
}

void ApiProgressBarService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_createRequest* request, ::octaneapi::ApiProgressBar_createResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProgressBar_createRequest, ::octaneapi::ApiProgressBar_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void ApiProgressBarService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_createRequest* request, ::octaneapi::ApiProgressBar_createResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProgressBar_createResponse>* ApiProgressBarService::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_createRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProgressBar_createResponse, ::octaneapi::ApiProgressBar_createRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProgressBar_createResponse>* ApiProgressBarService::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_createRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProgressBarService::Stub::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_destroyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProgressBar_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void ApiProgressBarService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProgressBar_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void ApiProgressBarService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiProgressBarService::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiProgressBar_destroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiProgressBarService::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProgressBarService::Stub::setProgress(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_setProgressRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProgressBar_setProgressRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setProgress_, context, request, response);
}

void ApiProgressBarService::Stub::async::setProgress(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_setProgressRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProgressBar_setProgressRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setProgress_, context, request, response, std::move(f));
}

void ApiProgressBarService::Stub::async::setProgress(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_setProgressRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setProgress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiProgressBarService::Stub::PrepareAsyncsetProgressRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_setProgressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiProgressBar_setProgressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setProgress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiProgressBarService::Stub::AsyncsetProgressRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_setProgressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetProgressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProgressBarService::Stub::progress(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_progressRequest& request, ::octaneapi::ApiProgressBar_progressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProgressBar_progressRequest, ::octaneapi::ApiProgressBar_progressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_progress_, context, request, response);
}

void ApiProgressBarService::Stub::async::progress(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_progressRequest* request, ::octaneapi::ApiProgressBar_progressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProgressBar_progressRequest, ::octaneapi::ApiProgressBar_progressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_progress_, context, request, response, std::move(f));
}

void ApiProgressBarService::Stub::async::progress(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_progressRequest* request, ::octaneapi::ApiProgressBar_progressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_progress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProgressBar_progressResponse>* ApiProgressBarService::Stub::PrepareAsyncprogressRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_progressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiProgressBar_progressResponse, ::octaneapi::ApiProgressBar_progressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_progress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProgressBar_progressResponse>* ApiProgressBarService::Stub::AsyncprogressRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_progressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncprogressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiProgressBarService::Stub::setText(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_setTextRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiProgressBar_setTextRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setText_, context, request, response);
}

void ApiProgressBarService::Stub::async::setText(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_setTextRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiProgressBar_setTextRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setText_, context, request, response, std::move(f));
}

void ApiProgressBarService::Stub::async::setText(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_setTextRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setText_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiProgressBarService::Stub::PrepareAsyncsetTextRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_setTextRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiProgressBar_setTextRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setText_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiProgressBarService::Stub::AsyncsetTextRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProgressBar_setTextRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetTextRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiProgressBarService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProgressBarService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProgressBarService::Service, ::octaneapi::ApiProgressBar_createRequest, ::octaneapi::ApiProgressBar_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProgressBarService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProgressBar_createRequest* req,
             ::octaneapi::ApiProgressBar_createResponse* resp) {
               return service->create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProgressBarService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProgressBarService::Service, ::octaneapi::ApiProgressBar_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProgressBarService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProgressBar_destroyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProgressBarService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProgressBarService::Service, ::octaneapi::ApiProgressBar_setProgressRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProgressBarService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProgressBar_setProgressRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setProgress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProgressBarService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProgressBarService::Service, ::octaneapi::ApiProgressBar_progressRequest, ::octaneapi::ApiProgressBar_progressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProgressBarService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProgressBar_progressRequest* req,
             ::octaneapi::ApiProgressBar_progressResponse* resp) {
               return service->progress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiProgressBarService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiProgressBarService::Service, ::octaneapi::ApiProgressBar_setTextRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiProgressBarService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiProgressBar_setTextRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setText(ctx, req, resp);
             }, this)));
}

ApiProgressBarService::Service::~Service() {
}

::grpc::Status ApiProgressBarService::Service::create(::grpc::ServerContext* context, const ::octaneapi::ApiProgressBar_createRequest* request, ::octaneapi::ApiProgressBar_createResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProgressBarService::Service::destroy(::grpc::ServerContext* context, const ::octaneapi::ApiProgressBar_destroyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProgressBarService::Service::setProgress(::grpc::ServerContext* context, const ::octaneapi::ApiProgressBar_setProgressRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProgressBarService::Service::progress(::grpc::ServerContext* context, const ::octaneapi::ApiProgressBar_progressRequest* request, ::octaneapi::ApiProgressBar_progressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiProgressBarService::Service::setText(::grpc::ServerContext* context, const ::octaneapi::ApiProgressBar_setTextRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

