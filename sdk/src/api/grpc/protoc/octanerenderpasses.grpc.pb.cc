// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: octanerenderpasses.proto

#include "octanerenderpasses.pb.h"
#include "octanerenderpasses.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* RenderResultStatisticsService_method_names[] = {
  "/octaneapi.RenderResultStatisticsService/clear",
  "/octaneapi.RenderResultStatisticsService/internalFilmResolution",
  "/octaneapi.RenderResultStatisticsService/channelType",
  "/octaneapi.RenderResultStatisticsService/samplesPerPixel",
  "/octaneapi.RenderResultStatisticsService/maxSamplesPerPixel",
  "/octaneapi.RenderResultStatisticsService/samplesPerSecond",
  "/octaneapi.RenderResultStatisticsService/progress",
  "/octaneapi.RenderResultStatisticsService/started",
  "/octaneapi.RenderResultStatisticsService/finished",
};

std::unique_ptr< RenderResultStatisticsService::Stub> RenderResultStatisticsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RenderResultStatisticsService::Stub> stub(new RenderResultStatisticsService::Stub(channel, options));
  return stub;
}

RenderResultStatisticsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_clear_(RenderResultStatisticsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_internalFilmResolution_(RenderResultStatisticsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_channelType_(RenderResultStatisticsService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_samplesPerPixel_(RenderResultStatisticsService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_maxSamplesPerPixel_(RenderResultStatisticsService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_samplesPerSecond_(RenderResultStatisticsService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_progress_(RenderResultStatisticsService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_started_(RenderResultStatisticsService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_finished_(RenderResultStatisticsService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RenderResultStatisticsService::Stub::clear(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::RenderResultStatistics_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clear_, context, request, response);
}

void RenderResultStatisticsService::Stub::async::clear(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::RenderResultStatistics_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_, context, request, response, std::move(f));
}

void RenderResultStatisticsService::Stub::async::clear(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RenderResultStatisticsService::Stub::PrepareAsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::RenderResultStatistics_clearRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clear_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RenderResultStatisticsService::Stub::AsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_clearRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderResultStatisticsService::Stub::internalFilmResolution(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest& request, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_internalFilmResolution_, context, request, response);
}

void RenderResultStatisticsService::Stub::async::internalFilmResolution(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* request, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_internalFilmResolution_, context, request, response, std::move(f));
}

void RenderResultStatisticsService::Stub::async::internalFilmResolution(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* request, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_internalFilmResolution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>* RenderResultStatisticsService::Stub::PrepareAsyncinternalFilmResolutionRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse, ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_internalFilmResolution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse>* RenderResultStatisticsService::Stub::AsyncinternalFilmResolutionRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinternalFilmResolutionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderResultStatisticsService::Stub::channelType(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest& request, ::octaneapi::RenderResultStatistics_channelTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::RenderResultStatistics_channelTypeRequest, ::octaneapi::RenderResultStatistics_channelTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_channelType_, context, request, response);
}

void RenderResultStatisticsService::Stub::async::channelType(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest* request, ::octaneapi::RenderResultStatistics_channelTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::RenderResultStatistics_channelTypeRequest, ::octaneapi::RenderResultStatistics_channelTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_channelType_, context, request, response, std::move(f));
}

void RenderResultStatisticsService::Stub::async::channelType(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest* request, ::octaneapi::RenderResultStatistics_channelTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_channelType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_channelTypeResponse>* RenderResultStatisticsService::Stub::PrepareAsyncchannelTypeRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::RenderResultStatistics_channelTypeResponse, ::octaneapi::RenderResultStatistics_channelTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_channelType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_channelTypeResponse>* RenderResultStatisticsService::Stub::AsyncchannelTypeRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncchannelTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderResultStatisticsService::Stub::samplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest& request, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::RenderResultStatistics_samplesPerPixelRequest, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_samplesPerPixel_, context, request, response);
}

void RenderResultStatisticsService::Stub::async::samplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::RenderResultStatistics_samplesPerPixelRequest, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_samplesPerPixel_, context, request, response, std::move(f));
}

void RenderResultStatisticsService::Stub::async::samplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_samplesPerPixel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>* RenderResultStatisticsService::Stub::PrepareAsyncsamplesPerPixelRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse, ::octaneapi::RenderResultStatistics_samplesPerPixelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_samplesPerPixel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerPixelResponse>* RenderResultStatisticsService::Stub::AsyncsamplesPerPixelRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsamplesPerPixelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderResultStatisticsService::Stub::maxSamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest& request, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_maxSamplesPerPixel_, context, request, response);
}

void RenderResultStatisticsService::Stub::async::maxSamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_maxSamplesPerPixel_, context, request, response, std::move(f));
}

void RenderResultStatisticsService::Stub::async::maxSamplesPerPixel(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_maxSamplesPerPixel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>* RenderResultStatisticsService::Stub::PrepareAsyncmaxSamplesPerPixelRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_maxSamplesPerPixel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse>* RenderResultStatisticsService::Stub::AsyncmaxSamplesPerPixelRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmaxSamplesPerPixelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderResultStatisticsService::Stub::samplesPerSecond(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest& request, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::RenderResultStatistics_samplesPerSecondRequest, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_samplesPerSecond_, context, request, response);
}

void RenderResultStatisticsService::Stub::async::samplesPerSecond(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* request, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::RenderResultStatistics_samplesPerSecondRequest, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_samplesPerSecond_, context, request, response, std::move(f));
}

void RenderResultStatisticsService::Stub::async::samplesPerSecond(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* request, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_samplesPerSecond_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>* RenderResultStatisticsService::Stub::PrepareAsyncsamplesPerSecondRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse, ::octaneapi::RenderResultStatistics_samplesPerSecondRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_samplesPerSecond_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_samplesPerSecondResponse>* RenderResultStatisticsService::Stub::AsyncsamplesPerSecondRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsamplesPerSecondRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderResultStatisticsService::Stub::progress(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest& request, ::octaneapi::RenderResultStatistics_progressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::RenderResultStatistics_progressRequest, ::octaneapi::RenderResultStatistics_progressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_progress_, context, request, response);
}

void RenderResultStatisticsService::Stub::async::progress(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest* request, ::octaneapi::RenderResultStatistics_progressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::RenderResultStatistics_progressRequest, ::octaneapi::RenderResultStatistics_progressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_progress_, context, request, response, std::move(f));
}

void RenderResultStatisticsService::Stub::async::progress(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest* request, ::octaneapi::RenderResultStatistics_progressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_progress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_progressResponse>* RenderResultStatisticsService::Stub::PrepareAsyncprogressRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::RenderResultStatistics_progressResponse, ::octaneapi::RenderResultStatistics_progressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_progress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_progressResponse>* RenderResultStatisticsService::Stub::AsyncprogressRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_progressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncprogressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderResultStatisticsService::Stub::started(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest& request, ::octaneapi::RenderResultStatistics_startedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::RenderResultStatistics_startedRequest, ::octaneapi::RenderResultStatistics_startedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_started_, context, request, response);
}

void RenderResultStatisticsService::Stub::async::started(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest* request, ::octaneapi::RenderResultStatistics_startedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::RenderResultStatistics_startedRequest, ::octaneapi::RenderResultStatistics_startedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_started_, context, request, response, std::move(f));
}

void RenderResultStatisticsService::Stub::async::started(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest* request, ::octaneapi::RenderResultStatistics_startedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_started_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_startedResponse>* RenderResultStatisticsService::Stub::PrepareAsyncstartedRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::RenderResultStatistics_startedResponse, ::octaneapi::RenderResultStatistics_startedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_started_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_startedResponse>* RenderResultStatisticsService::Stub::AsyncstartedRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_startedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderResultStatisticsService::Stub::finished(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest& request, ::octaneapi::RenderResultStatistics_finishedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::RenderResultStatistics_finishedRequest, ::octaneapi::RenderResultStatistics_finishedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_finished_, context, request, response);
}

void RenderResultStatisticsService::Stub::async::finished(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest* request, ::octaneapi::RenderResultStatistics_finishedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::RenderResultStatistics_finishedRequest, ::octaneapi::RenderResultStatistics_finishedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_finished_, context, request, response, std::move(f));
}

void RenderResultStatisticsService::Stub::async::finished(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest* request, ::octaneapi::RenderResultStatistics_finishedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_finished_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_finishedResponse>* RenderResultStatisticsService::Stub::PrepareAsyncfinishedRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::RenderResultStatistics_finishedResponse, ::octaneapi::RenderResultStatistics_finishedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_finished_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::RenderResultStatistics_finishedResponse>* RenderResultStatisticsService::Stub::AsyncfinishedRaw(::grpc::ClientContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfinishedRaw(context, request, cq);
  result->StartCall();
  return result;
}

RenderResultStatisticsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderResultStatisticsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderResultStatisticsService::Service, ::octaneapi::RenderResultStatistics_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderResultStatisticsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::RenderResultStatistics_clearRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->clear(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderResultStatisticsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderResultStatisticsService::Service, ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderResultStatisticsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* req,
             ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* resp) {
               return service->internalFilmResolution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderResultStatisticsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderResultStatisticsService::Service, ::octaneapi::RenderResultStatistics_channelTypeRequest, ::octaneapi::RenderResultStatistics_channelTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderResultStatisticsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::RenderResultStatistics_channelTypeRequest* req,
             ::octaneapi::RenderResultStatistics_channelTypeResponse* resp) {
               return service->channelType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderResultStatisticsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderResultStatisticsService::Service, ::octaneapi::RenderResultStatistics_samplesPerPixelRequest, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderResultStatisticsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* req,
             ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* resp) {
               return service->samplesPerPixel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderResultStatisticsService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderResultStatisticsService::Service, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderResultStatisticsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* req,
             ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* resp) {
               return service->maxSamplesPerPixel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderResultStatisticsService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderResultStatisticsService::Service, ::octaneapi::RenderResultStatistics_samplesPerSecondRequest, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderResultStatisticsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* req,
             ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* resp) {
               return service->samplesPerSecond(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderResultStatisticsService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderResultStatisticsService::Service, ::octaneapi::RenderResultStatistics_progressRequest, ::octaneapi::RenderResultStatistics_progressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderResultStatisticsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::RenderResultStatistics_progressRequest* req,
             ::octaneapi::RenderResultStatistics_progressResponse* resp) {
               return service->progress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderResultStatisticsService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderResultStatisticsService::Service, ::octaneapi::RenderResultStatistics_startedRequest, ::octaneapi::RenderResultStatistics_startedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderResultStatisticsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::RenderResultStatistics_startedRequest* req,
             ::octaneapi::RenderResultStatistics_startedResponse* resp) {
               return service->started(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderResultStatisticsService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderResultStatisticsService::Service, ::octaneapi::RenderResultStatistics_finishedRequest, ::octaneapi::RenderResultStatistics_finishedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderResultStatisticsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::RenderResultStatistics_finishedRequest* req,
             ::octaneapi::RenderResultStatistics_finishedResponse* resp) {
               return service->finished(ctx, req, resp);
             }, this)));
}

RenderResultStatisticsService::Service::~Service() {
}

::grpc::Status RenderResultStatisticsService::Service::clear(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_clearRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderResultStatisticsService::Service::internalFilmResolution(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_internalFilmResolutionRequest* request, ::octaneapi::RenderResultStatistics_internalFilmResolutionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderResultStatisticsService::Service::channelType(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_channelTypeRequest* request, ::octaneapi::RenderResultStatistics_channelTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderResultStatisticsService::Service::samplesPerPixel(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_samplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_samplesPerPixelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderResultStatisticsService::Service::maxSamplesPerPixel(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_maxSamplesPerPixelRequest* request, ::octaneapi::RenderResultStatistics_maxSamplesPerPixelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderResultStatisticsService::Service::samplesPerSecond(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_samplesPerSecondRequest* request, ::octaneapi::RenderResultStatistics_samplesPerSecondResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderResultStatisticsService::Service::progress(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_progressRequest* request, ::octaneapi::RenderResultStatistics_progressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderResultStatisticsService::Service::started(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_startedRequest* request, ::octaneapi::RenderResultStatistics_startedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderResultStatisticsService::Service::finished(::grpc::ServerContext* context, const ::octaneapi::RenderResultStatistics_finishedRequest* request, ::octaneapi::RenderResultStatistics_finishedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

