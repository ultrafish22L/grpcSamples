// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apiimagebuffer.proto

#include "apiimagebuffer.pb.h"
#include "apiimagebuffer.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiImageBufferService_method_names[] = {
  "/octaneapi.ApiImageBufferService/create",
  "/octaneapi.ApiImageBufferService/create1",
  "/octaneapi.ApiImageBufferService/load",
  "/octaneapi.ApiImageBufferService/load1",
  "/octaneapi.ApiImageBufferService/convertTo",
  "/octaneapi.ApiImageBufferService/destroy",
  "/octaneapi.ApiImageBufferService/bytesPerPixel",
  "/octaneapi.ApiImageBufferService/bytesPerChannel",
  "/octaneapi.ApiImageBufferService/channelCount",
  "/octaneapi.ApiImageBufferService/size",
  "/octaneapi.ApiImageBufferService/sizeInBytes",
  "/octaneapi.ApiImageBufferService/type",
  "/octaneapi.ApiImageBufferService/sourceInfo",
  "/octaneapi.ApiImageBufferService/canWrapX",
  "/octaneapi.ApiImageBufferService/canWrapY",
  "/octaneapi.ApiImageBufferService/needsFlip",
  "/octaneapi.ApiImageBufferService/hasAlpha",
  "/octaneapi.ApiImageBufferService/hasColor",
  "/octaneapi.ApiImageBufferService/isCompressed",
  "/octaneapi.ApiImageBufferService/isEmpty",
  "/octaneapi.ApiImageBufferService/isHalf",
  "/octaneapi.ApiImageBufferService/isHdr",
  "/octaneapi.ApiImageBufferService/isMono",
  "/octaneapi.ApiImageBufferService/isPixelValid",
  "/octaneapi.ApiImageBufferService/compress",
  "/octaneapi.ApiImageBufferService/setPixelLdr",
  "/octaneapi.ApiImageBufferService/setPixelHalf",
  "/octaneapi.ApiImageBufferService/setPixelHdr",
  "/octaneapi.ApiImageBufferService/copyRegion",
  "/octaneapi.ApiImageBufferService/compositeOnBlack",
  "/octaneapi.ApiImageBufferService/flipVertical",
  "/octaneapi.ApiImageBufferService/convert",
  "/octaneapi.ApiImageBufferService/applyGaussianFilter",
  "/octaneapi.ApiImageBufferService/applyBoxFilter",
  "/octaneapi.ApiImageBufferService/applyLevels",
  "/octaneapi.ApiImageBufferService/compareValues",
  "/octaneapi.ApiImageBufferService/calculateMeanSquareError",
  "/octaneapi.ApiImageBufferService/save",
  "/octaneapi.ApiImageBufferService/saveAsync",
  "/octaneapi.ApiImageBufferService/pixelAddr",
  "/octaneapi.ApiImageBufferService/pixelAddr1",
};

std::unique_ptr< ApiImageBufferService::Stub> ApiImageBufferService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiImageBufferService::Stub> stub(new ApiImageBufferService::Stub(channel, options));
  return stub;
}

ApiImageBufferService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create_(ApiImageBufferService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_create1_(ApiImageBufferService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_load_(ApiImageBufferService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_load1_(ApiImageBufferService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_convertTo_(ApiImageBufferService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(ApiImageBufferService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_bytesPerPixel_(ApiImageBufferService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_bytesPerChannel_(ApiImageBufferService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_channelCount_(ApiImageBufferService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_size_(ApiImageBufferService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sizeInBytes_(ApiImageBufferService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_type_(ApiImageBufferService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sourceInfo_(ApiImageBufferService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_canWrapX_(ApiImageBufferService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_canWrapY_(ApiImageBufferService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_needsFlip_(ApiImageBufferService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hasAlpha_(ApiImageBufferService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hasColor_(ApiImageBufferService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isCompressed_(ApiImageBufferService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isEmpty_(ApiImageBufferService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isHalf_(ApiImageBufferService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isHdr_(ApiImageBufferService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isMono_(ApiImageBufferService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isPixelValid_(ApiImageBufferService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_compress_(ApiImageBufferService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setPixelLdr_(ApiImageBufferService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setPixelHalf_(ApiImageBufferService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setPixelHdr_(ApiImageBufferService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_copyRegion_(ApiImageBufferService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_compositeOnBlack_(ApiImageBufferService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_flipVertical_(ApiImageBufferService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_convert_(ApiImageBufferService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_applyGaussianFilter_(ApiImageBufferService_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_applyBoxFilter_(ApiImageBufferService_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_applyLevels_(ApiImageBufferService_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_compareValues_(ApiImageBufferService_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_calculateMeanSquareError_(ApiImageBufferService_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_save_(ApiImageBufferService_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveAsync_(ApiImageBufferService_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pixelAddr_(ApiImageBufferService_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pixelAddr1_(ApiImageBufferService_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiImageBufferService::Stub::create(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_createRequest& request, ::octaneapi::ApiImageBuffer_createResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_createRequest, ::octaneapi::ApiImageBuffer_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_, context, request, response);
}

void ApiImageBufferService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_createRequest* request, ::octaneapi::ApiImageBuffer_createResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_createRequest, ::octaneapi::ApiImageBuffer_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_createRequest* request, ::octaneapi::ApiImageBuffer_createResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_createResponse>* ApiImageBufferService::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_createRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_createResponse, ::octaneapi::ApiImageBuffer_createRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_createResponse>* ApiImageBufferService::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_createRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::create1(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_create1Request& request, ::octaneapi::ApiImageBuffer_create1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_create1Request, ::octaneapi::ApiImageBuffer_create1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create1_, context, request, response);
}

void ApiImageBufferService::Stub::async::create1(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_create1Request* request, ::octaneapi::ApiImageBuffer_create1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_create1Request, ::octaneapi::ApiImageBuffer_create1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create1_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::create1(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_create1Request* request, ::octaneapi::ApiImageBuffer_create1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_create1Response>* ApiImageBufferService::Stub::PrepareAsynccreate1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_create1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_create1Response, ::octaneapi::ApiImageBuffer_create1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_create1Response>* ApiImageBufferService::Stub::Asynccreate1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_create1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreate1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::load(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_loadRequest& request, ::octaneapi::ApiImageBuffer_loadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_loadRequest, ::octaneapi::ApiImageBuffer_loadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_load_, context, request, response);
}

void ApiImageBufferService::Stub::async::load(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_loadRequest* request, ::octaneapi::ApiImageBuffer_loadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_loadRequest, ::octaneapi::ApiImageBuffer_loadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_load_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::load(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_loadRequest* request, ::octaneapi::ApiImageBuffer_loadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_load_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_loadResponse>* ApiImageBufferService::Stub::PrepareAsyncloadRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_loadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_loadResponse, ::octaneapi::ApiImageBuffer_loadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_load_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_loadResponse>* ApiImageBufferService::Stub::AsyncloadRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_loadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::load1(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_load1Request& request, ::octaneapi::ApiImageBuffer_load1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_load1Request, ::octaneapi::ApiImageBuffer_load1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_load1_, context, request, response);
}

void ApiImageBufferService::Stub::async::load1(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_load1Request* request, ::octaneapi::ApiImageBuffer_load1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_load1Request, ::octaneapi::ApiImageBuffer_load1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_load1_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::load1(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_load1Request* request, ::octaneapi::ApiImageBuffer_load1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_load1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_load1Response>* ApiImageBufferService::Stub::PrepareAsyncload1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_load1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_load1Response, ::octaneapi::ApiImageBuffer_load1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_load1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_load1Response>* ApiImageBufferService::Stub::Asyncload1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_load1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncload1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::convertTo(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_convertToRequest& request, ::octaneapi::ApiImageBuffer_convertToResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_convertToRequest, ::octaneapi::ApiImageBuffer_convertToResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_convertTo_, context, request, response);
}

void ApiImageBufferService::Stub::async::convertTo(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_convertToRequest* request, ::octaneapi::ApiImageBuffer_convertToResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_convertToRequest, ::octaneapi::ApiImageBuffer_convertToResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_convertTo_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::convertTo(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_convertToRequest* request, ::octaneapi::ApiImageBuffer_convertToResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_convertTo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_convertToResponse>* ApiImageBufferService::Stub::PrepareAsyncconvertToRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_convertToRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_convertToResponse, ::octaneapi::ApiImageBuffer_convertToRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_convertTo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_convertToResponse>* ApiImageBufferService::Stub::AsyncconvertToRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_convertToRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconvertToRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_destroyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void ApiImageBufferService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImageBuffer_destroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::bytesPerPixel(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_bytesPerPixelRequest& request, ::octaneapi::ApiImageBuffer_bytesPerPixelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_bytesPerPixelRequest, ::octaneapi::ApiImageBuffer_bytesPerPixelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_bytesPerPixel_, context, request, response);
}

void ApiImageBufferService::Stub::async::bytesPerPixel(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_bytesPerPixelRequest* request, ::octaneapi::ApiImageBuffer_bytesPerPixelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_bytesPerPixelRequest, ::octaneapi::ApiImageBuffer_bytesPerPixelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_bytesPerPixel_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::bytesPerPixel(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_bytesPerPixelRequest* request, ::octaneapi::ApiImageBuffer_bytesPerPixelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_bytesPerPixel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_bytesPerPixelResponse>* ApiImageBufferService::Stub::PrepareAsyncbytesPerPixelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_bytesPerPixelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_bytesPerPixelResponse, ::octaneapi::ApiImageBuffer_bytesPerPixelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_bytesPerPixel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_bytesPerPixelResponse>* ApiImageBufferService::Stub::AsyncbytesPerPixelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_bytesPerPixelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbytesPerPixelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::bytesPerChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_bytesPerChannelRequest& request, ::octaneapi::ApiImageBuffer_bytesPerChannelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_bytesPerChannelRequest, ::octaneapi::ApiImageBuffer_bytesPerChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_bytesPerChannel_, context, request, response);
}

void ApiImageBufferService::Stub::async::bytesPerChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_bytesPerChannelRequest* request, ::octaneapi::ApiImageBuffer_bytesPerChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_bytesPerChannelRequest, ::octaneapi::ApiImageBuffer_bytesPerChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_bytesPerChannel_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::bytesPerChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_bytesPerChannelRequest* request, ::octaneapi::ApiImageBuffer_bytesPerChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_bytesPerChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_bytesPerChannelResponse>* ApiImageBufferService::Stub::PrepareAsyncbytesPerChannelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_bytesPerChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_bytesPerChannelResponse, ::octaneapi::ApiImageBuffer_bytesPerChannelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_bytesPerChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_bytesPerChannelResponse>* ApiImageBufferService::Stub::AsyncbytesPerChannelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_bytesPerChannelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbytesPerChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::channelCount(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_channelCountRequest& request, ::octaneapi::ApiImageBuffer_channelCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_channelCountRequest, ::octaneapi::ApiImageBuffer_channelCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_channelCount_, context, request, response);
}

void ApiImageBufferService::Stub::async::channelCount(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_channelCountRequest* request, ::octaneapi::ApiImageBuffer_channelCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_channelCountRequest, ::octaneapi::ApiImageBuffer_channelCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_channelCount_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::channelCount(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_channelCountRequest* request, ::octaneapi::ApiImageBuffer_channelCountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_channelCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_channelCountResponse>* ApiImageBufferService::Stub::PrepareAsyncchannelCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_channelCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_channelCountResponse, ::octaneapi::ApiImageBuffer_channelCountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_channelCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_channelCountResponse>* ApiImageBufferService::Stub::AsyncchannelCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_channelCountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncchannelCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::size(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sizeRequest& request, ::octaneapi::ApiImageBuffer_sizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_sizeRequest, ::octaneapi::ApiImageBuffer_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_size_, context, request, response);
}

void ApiImageBufferService::Stub::async::size(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sizeRequest* request, ::octaneapi::ApiImageBuffer_sizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_sizeRequest, ::octaneapi::ApiImageBuffer_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_size_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::size(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sizeRequest* request, ::octaneapi::ApiImageBuffer_sizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_size_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_sizeResponse>* ApiImageBufferService::Stub::PrepareAsyncsizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_sizeResponse, ::octaneapi::ApiImageBuffer_sizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_size_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_sizeResponse>* ApiImageBufferService::Stub::AsyncsizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::sizeInBytes(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sizeInBytesRequest& request, ::octaneapi::ApiImageBuffer_sizeInBytesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_sizeInBytesRequest, ::octaneapi::ApiImageBuffer_sizeInBytesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sizeInBytes_, context, request, response);
}

void ApiImageBufferService::Stub::async::sizeInBytes(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sizeInBytesRequest* request, ::octaneapi::ApiImageBuffer_sizeInBytesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_sizeInBytesRequest, ::octaneapi::ApiImageBuffer_sizeInBytesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sizeInBytes_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::sizeInBytes(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sizeInBytesRequest* request, ::octaneapi::ApiImageBuffer_sizeInBytesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sizeInBytes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_sizeInBytesResponse>* ApiImageBufferService::Stub::PrepareAsyncsizeInBytesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sizeInBytesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_sizeInBytesResponse, ::octaneapi::ApiImageBuffer_sizeInBytesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sizeInBytes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_sizeInBytesResponse>* ApiImageBufferService::Stub::AsyncsizeInBytesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sizeInBytesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsizeInBytesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::type(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_typeRequest& request, ::octaneapi::ApiImageBuffer_typeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_typeRequest, ::octaneapi::ApiImageBuffer_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_type_, context, request, response);
}

void ApiImageBufferService::Stub::async::type(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_typeRequest* request, ::octaneapi::ApiImageBuffer_typeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_typeRequest, ::octaneapi::ApiImageBuffer_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_type_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::type(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_typeRequest* request, ::octaneapi::ApiImageBuffer_typeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_type_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_typeResponse>* ApiImageBufferService::Stub::PrepareAsynctypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_typeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_typeResponse, ::octaneapi::ApiImageBuffer_typeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_type_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_typeResponse>* ApiImageBufferService::Stub::AsynctypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_typeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::sourceInfo(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sourceInfoRequest& request, ::octaneapi::ApiImageBuffer_sourceInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_sourceInfoRequest, ::octaneapi::ApiImageBuffer_sourceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sourceInfo_, context, request, response);
}

void ApiImageBufferService::Stub::async::sourceInfo(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sourceInfoRequest* request, ::octaneapi::ApiImageBuffer_sourceInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_sourceInfoRequest, ::octaneapi::ApiImageBuffer_sourceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sourceInfo_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::sourceInfo(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sourceInfoRequest* request, ::octaneapi::ApiImageBuffer_sourceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sourceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_sourceInfoResponse>* ApiImageBufferService::Stub::PrepareAsyncsourceInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sourceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_sourceInfoResponse, ::octaneapi::ApiImageBuffer_sourceInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sourceInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_sourceInfoResponse>* ApiImageBufferService::Stub::AsyncsourceInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_sourceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsourceInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::canWrapX(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_canWrapXRequest& request, ::octaneapi::ApiImageBuffer_canWrapXResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_canWrapXRequest, ::octaneapi::ApiImageBuffer_canWrapXResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_canWrapX_, context, request, response);
}

void ApiImageBufferService::Stub::async::canWrapX(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_canWrapXRequest* request, ::octaneapi::ApiImageBuffer_canWrapXResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_canWrapXRequest, ::octaneapi::ApiImageBuffer_canWrapXResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_canWrapX_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::canWrapX(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_canWrapXRequest* request, ::octaneapi::ApiImageBuffer_canWrapXResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_canWrapX_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_canWrapXResponse>* ApiImageBufferService::Stub::PrepareAsynccanWrapXRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_canWrapXRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_canWrapXResponse, ::octaneapi::ApiImageBuffer_canWrapXRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_canWrapX_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_canWrapXResponse>* ApiImageBufferService::Stub::AsynccanWrapXRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_canWrapXRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccanWrapXRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::canWrapY(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_canWrapYRequest& request, ::octaneapi::ApiImageBuffer_canWrapYResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_canWrapYRequest, ::octaneapi::ApiImageBuffer_canWrapYResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_canWrapY_, context, request, response);
}

void ApiImageBufferService::Stub::async::canWrapY(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_canWrapYRequest* request, ::octaneapi::ApiImageBuffer_canWrapYResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_canWrapYRequest, ::octaneapi::ApiImageBuffer_canWrapYResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_canWrapY_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::canWrapY(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_canWrapYRequest* request, ::octaneapi::ApiImageBuffer_canWrapYResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_canWrapY_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_canWrapYResponse>* ApiImageBufferService::Stub::PrepareAsynccanWrapYRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_canWrapYRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_canWrapYResponse, ::octaneapi::ApiImageBuffer_canWrapYRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_canWrapY_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_canWrapYResponse>* ApiImageBufferService::Stub::AsynccanWrapYRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_canWrapYRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccanWrapYRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::needsFlip(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_needsFlipRequest& request, ::octaneapi::ApiImageBuffer_needsFlipResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_needsFlipRequest, ::octaneapi::ApiImageBuffer_needsFlipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_needsFlip_, context, request, response);
}

void ApiImageBufferService::Stub::async::needsFlip(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_needsFlipRequest* request, ::octaneapi::ApiImageBuffer_needsFlipResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_needsFlipRequest, ::octaneapi::ApiImageBuffer_needsFlipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_needsFlip_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::needsFlip(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_needsFlipRequest* request, ::octaneapi::ApiImageBuffer_needsFlipResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_needsFlip_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_needsFlipResponse>* ApiImageBufferService::Stub::PrepareAsyncneedsFlipRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_needsFlipRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_needsFlipResponse, ::octaneapi::ApiImageBuffer_needsFlipRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_needsFlip_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_needsFlipResponse>* ApiImageBufferService::Stub::AsyncneedsFlipRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_needsFlipRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncneedsFlipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::hasAlpha(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_hasAlphaRequest& request, ::octaneapi::ApiImageBuffer_hasAlphaResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_hasAlphaRequest, ::octaneapi::ApiImageBuffer_hasAlphaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hasAlpha_, context, request, response);
}

void ApiImageBufferService::Stub::async::hasAlpha(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_hasAlphaRequest* request, ::octaneapi::ApiImageBuffer_hasAlphaResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_hasAlphaRequest, ::octaneapi::ApiImageBuffer_hasAlphaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasAlpha_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::hasAlpha(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_hasAlphaRequest* request, ::octaneapi::ApiImageBuffer_hasAlphaResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasAlpha_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_hasAlphaResponse>* ApiImageBufferService::Stub::PrepareAsynchasAlphaRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_hasAlphaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_hasAlphaResponse, ::octaneapi::ApiImageBuffer_hasAlphaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hasAlpha_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_hasAlphaResponse>* ApiImageBufferService::Stub::AsynchasAlphaRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_hasAlphaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchasAlphaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::hasColor(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_hasColorRequest& request, ::octaneapi::ApiImageBuffer_hasColorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_hasColorRequest, ::octaneapi::ApiImageBuffer_hasColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hasColor_, context, request, response);
}

void ApiImageBufferService::Stub::async::hasColor(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_hasColorRequest* request, ::octaneapi::ApiImageBuffer_hasColorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_hasColorRequest, ::octaneapi::ApiImageBuffer_hasColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasColor_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::hasColor(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_hasColorRequest* request, ::octaneapi::ApiImageBuffer_hasColorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasColor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_hasColorResponse>* ApiImageBufferService::Stub::PrepareAsynchasColorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_hasColorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_hasColorResponse, ::octaneapi::ApiImageBuffer_hasColorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hasColor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_hasColorResponse>* ApiImageBufferService::Stub::AsynchasColorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_hasColorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchasColorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::isCompressed(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isCompressedRequest& request, ::octaneapi::ApiImageBuffer_isCompressedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_isCompressedRequest, ::octaneapi::ApiImageBuffer_isCompressedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isCompressed_, context, request, response);
}

void ApiImageBufferService::Stub::async::isCompressed(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isCompressedRequest* request, ::octaneapi::ApiImageBuffer_isCompressedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_isCompressedRequest, ::octaneapi::ApiImageBuffer_isCompressedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isCompressed_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::isCompressed(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isCompressedRequest* request, ::octaneapi::ApiImageBuffer_isCompressedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isCompressed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_isCompressedResponse>* ApiImageBufferService::Stub::PrepareAsyncisCompressedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isCompressedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_isCompressedResponse, ::octaneapi::ApiImageBuffer_isCompressedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isCompressed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_isCompressedResponse>* ApiImageBufferService::Stub::AsyncisCompressedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isCompressedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisCompressedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isEmptyRequest& request, ::octaneapi::ApiImageBuffer_isEmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_isEmptyRequest, ::octaneapi::ApiImageBuffer_isEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isEmpty_, context, request, response);
}

void ApiImageBufferService::Stub::async::isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isEmptyRequest* request, ::octaneapi::ApiImageBuffer_isEmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_isEmptyRequest, ::octaneapi::ApiImageBuffer_isEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isEmpty_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isEmptyRequest* request, ::octaneapi::ApiImageBuffer_isEmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isEmpty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_isEmptyResponse>* ApiImageBufferService::Stub::PrepareAsyncisEmptyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isEmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_isEmptyResponse, ::octaneapi::ApiImageBuffer_isEmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isEmpty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_isEmptyResponse>* ApiImageBufferService::Stub::AsyncisEmptyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isEmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisEmptyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::isHalf(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isHalfRequest& request, ::octaneapi::ApiImageBuffer_isHalfResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_isHalfRequest, ::octaneapi::ApiImageBuffer_isHalfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isHalf_, context, request, response);
}

void ApiImageBufferService::Stub::async::isHalf(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isHalfRequest* request, ::octaneapi::ApiImageBuffer_isHalfResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_isHalfRequest, ::octaneapi::ApiImageBuffer_isHalfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isHalf_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::isHalf(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isHalfRequest* request, ::octaneapi::ApiImageBuffer_isHalfResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isHalf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_isHalfResponse>* ApiImageBufferService::Stub::PrepareAsyncisHalfRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isHalfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_isHalfResponse, ::octaneapi::ApiImageBuffer_isHalfRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isHalf_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_isHalfResponse>* ApiImageBufferService::Stub::AsyncisHalfRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isHalfRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisHalfRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::isHdr(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isHdrRequest& request, ::octaneapi::ApiImageBuffer_isHdrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_isHdrRequest, ::octaneapi::ApiImageBuffer_isHdrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isHdr_, context, request, response);
}

void ApiImageBufferService::Stub::async::isHdr(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isHdrRequest* request, ::octaneapi::ApiImageBuffer_isHdrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_isHdrRequest, ::octaneapi::ApiImageBuffer_isHdrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isHdr_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::isHdr(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isHdrRequest* request, ::octaneapi::ApiImageBuffer_isHdrResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isHdr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_isHdrResponse>* ApiImageBufferService::Stub::PrepareAsyncisHdrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isHdrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_isHdrResponse, ::octaneapi::ApiImageBuffer_isHdrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isHdr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_isHdrResponse>* ApiImageBufferService::Stub::AsyncisHdrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isHdrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisHdrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::isMono(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isMonoRequest& request, ::octaneapi::ApiImageBuffer_isMonoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_isMonoRequest, ::octaneapi::ApiImageBuffer_isMonoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isMono_, context, request, response);
}

void ApiImageBufferService::Stub::async::isMono(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isMonoRequest* request, ::octaneapi::ApiImageBuffer_isMonoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_isMonoRequest, ::octaneapi::ApiImageBuffer_isMonoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isMono_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::isMono(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isMonoRequest* request, ::octaneapi::ApiImageBuffer_isMonoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isMono_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_isMonoResponse>* ApiImageBufferService::Stub::PrepareAsyncisMonoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isMonoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_isMonoResponse, ::octaneapi::ApiImageBuffer_isMonoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isMono_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_isMonoResponse>* ApiImageBufferService::Stub::AsyncisMonoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isMonoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisMonoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::isPixelValid(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isPixelValidRequest& request, ::octaneapi::ApiImageBuffer_isPixelValidResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_isPixelValidRequest, ::octaneapi::ApiImageBuffer_isPixelValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isPixelValid_, context, request, response);
}

void ApiImageBufferService::Stub::async::isPixelValid(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isPixelValidRequest* request, ::octaneapi::ApiImageBuffer_isPixelValidResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_isPixelValidRequest, ::octaneapi::ApiImageBuffer_isPixelValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isPixelValid_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::isPixelValid(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isPixelValidRequest* request, ::octaneapi::ApiImageBuffer_isPixelValidResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isPixelValid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_isPixelValidResponse>* ApiImageBufferService::Stub::PrepareAsyncisPixelValidRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isPixelValidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_isPixelValidResponse, ::octaneapi::ApiImageBuffer_isPixelValidRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isPixelValid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_isPixelValidResponse>* ApiImageBufferService::Stub::AsyncisPixelValidRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_isPixelValidRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisPixelValidRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::compress(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compressRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_compressRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_compress_, context, request, response);
}

void ApiImageBufferService::Stub::async::compress(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compressRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_compressRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_compress_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::compress(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compressRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_compress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::PrepareAsynccompressRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImageBuffer_compressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_compress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::AsynccompressRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccompressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::setPixelLdr(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelLdrRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_setPixelLdrRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setPixelLdr_, context, request, response);
}

void ApiImageBufferService::Stub::async::setPixelLdr(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelLdrRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_setPixelLdrRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setPixelLdr_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::setPixelLdr(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelLdrRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setPixelLdr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::PrepareAsyncsetPixelLdrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelLdrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImageBuffer_setPixelLdrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setPixelLdr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::AsyncsetPixelLdrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelLdrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetPixelLdrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::setPixelHalf(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelHalfRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_setPixelHalfRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setPixelHalf_, context, request, response);
}

void ApiImageBufferService::Stub::async::setPixelHalf(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelHalfRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_setPixelHalfRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setPixelHalf_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::setPixelHalf(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelHalfRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setPixelHalf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::PrepareAsyncsetPixelHalfRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelHalfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImageBuffer_setPixelHalfRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setPixelHalf_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::AsyncsetPixelHalfRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelHalfRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetPixelHalfRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::setPixelHdr(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelHdrRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_setPixelHdrRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setPixelHdr_, context, request, response);
}

void ApiImageBufferService::Stub::async::setPixelHdr(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelHdrRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_setPixelHdrRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setPixelHdr_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::setPixelHdr(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelHdrRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setPixelHdr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::PrepareAsyncsetPixelHdrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelHdrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImageBuffer_setPixelHdrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setPixelHdr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::AsyncsetPixelHdrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_setPixelHdrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetPixelHdrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::copyRegion(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_copyRegionRequest& request, ::octaneapi::ApiImageBuffer_copyRegionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_copyRegionRequest, ::octaneapi::ApiImageBuffer_copyRegionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_copyRegion_, context, request, response);
}

void ApiImageBufferService::Stub::async::copyRegion(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_copyRegionRequest* request, ::octaneapi::ApiImageBuffer_copyRegionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_copyRegionRequest, ::octaneapi::ApiImageBuffer_copyRegionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_copyRegion_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::copyRegion(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_copyRegionRequest* request, ::octaneapi::ApiImageBuffer_copyRegionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_copyRegion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_copyRegionResponse>* ApiImageBufferService::Stub::PrepareAsynccopyRegionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_copyRegionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_copyRegionResponse, ::octaneapi::ApiImageBuffer_copyRegionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_copyRegion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_copyRegionResponse>* ApiImageBufferService::Stub::AsynccopyRegionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_copyRegionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccopyRegionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::compositeOnBlack(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compositeOnBlackRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_compositeOnBlackRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_compositeOnBlack_, context, request, response);
}

void ApiImageBufferService::Stub::async::compositeOnBlack(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compositeOnBlackRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_compositeOnBlackRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_compositeOnBlack_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::compositeOnBlack(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compositeOnBlackRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_compositeOnBlack_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::PrepareAsynccompositeOnBlackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compositeOnBlackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImageBuffer_compositeOnBlackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_compositeOnBlack_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::AsynccompositeOnBlackRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compositeOnBlackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccompositeOnBlackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::flipVertical(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_flipVerticalRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_flipVerticalRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_flipVertical_, context, request, response);
}

void ApiImageBufferService::Stub::async::flipVertical(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_flipVerticalRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_flipVerticalRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_flipVertical_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::flipVertical(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_flipVerticalRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_flipVertical_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::PrepareAsyncflipVerticalRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_flipVerticalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImageBuffer_flipVerticalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_flipVertical_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::AsyncflipVerticalRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_flipVerticalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncflipVerticalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::convert(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_convertRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_convertRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_convert_, context, request, response);
}

void ApiImageBufferService::Stub::async::convert(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_convertRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_convertRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_convert_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::convert(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_convertRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_convert_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::PrepareAsyncconvertRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_convertRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImageBuffer_convertRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_convert_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::AsyncconvertRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_convertRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconvertRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::applyGaussianFilter(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyGaussianFilterRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_applyGaussianFilterRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_applyGaussianFilter_, context, request, response);
}

void ApiImageBufferService::Stub::async::applyGaussianFilter(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyGaussianFilterRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_applyGaussianFilterRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_applyGaussianFilter_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::applyGaussianFilter(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyGaussianFilterRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_applyGaussianFilter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::PrepareAsyncapplyGaussianFilterRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyGaussianFilterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImageBuffer_applyGaussianFilterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_applyGaussianFilter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::AsyncapplyGaussianFilterRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyGaussianFilterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncapplyGaussianFilterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::applyBoxFilter(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyBoxFilterRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_applyBoxFilterRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_applyBoxFilter_, context, request, response);
}

void ApiImageBufferService::Stub::async::applyBoxFilter(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyBoxFilterRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_applyBoxFilterRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_applyBoxFilter_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::applyBoxFilter(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyBoxFilterRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_applyBoxFilter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::PrepareAsyncapplyBoxFilterRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyBoxFilterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImageBuffer_applyBoxFilterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_applyBoxFilter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::AsyncapplyBoxFilterRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyBoxFilterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncapplyBoxFilterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::applyLevels(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyLevelsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_applyLevelsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_applyLevels_, context, request, response);
}

void ApiImageBufferService::Stub::async::applyLevels(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyLevelsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_applyLevelsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_applyLevels_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::applyLevels(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyLevelsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_applyLevels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::PrepareAsyncapplyLevelsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyLevelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImageBuffer_applyLevelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_applyLevels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::AsyncapplyLevelsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_applyLevelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncapplyLevelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::compareValues(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compareValuesRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_compareValuesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_compareValues_, context, request, response);
}

void ApiImageBufferService::Stub::async::compareValues(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compareValuesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_compareValuesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_compareValues_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::compareValues(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compareValuesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_compareValues_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::PrepareAsynccompareValuesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compareValuesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiImageBuffer_compareValuesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_compareValues_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiImageBufferService::Stub::AsynccompareValuesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_compareValuesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccompareValuesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::calculateMeanSquareError(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorRequest& request, ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorRequest, ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_calculateMeanSquareError_, context, request, response);
}

void ApiImageBufferService::Stub::async::calculateMeanSquareError(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorRequest* request, ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorRequest, ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_calculateMeanSquareError_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::calculateMeanSquareError(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorRequest* request, ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_calculateMeanSquareError_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorResponse>* ApiImageBufferService::Stub::PrepareAsynccalculateMeanSquareErrorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorResponse, ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_calculateMeanSquareError_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorResponse>* ApiImageBufferService::Stub::AsynccalculateMeanSquareErrorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccalculateMeanSquareErrorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::save(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_saveRequest& request, ::octaneapi::ApiImageBuffer_saveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_saveRequest, ::octaneapi::ApiImageBuffer_saveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_save_, context, request, response);
}

void ApiImageBufferService::Stub::async::save(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_saveRequest* request, ::octaneapi::ApiImageBuffer_saveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_saveRequest, ::octaneapi::ApiImageBuffer_saveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_save_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::save(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_saveRequest* request, ::octaneapi::ApiImageBuffer_saveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_save_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_saveResponse>* ApiImageBufferService::Stub::PrepareAsyncsaveRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_saveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_saveResponse, ::octaneapi::ApiImageBuffer_saveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_save_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_saveResponse>* ApiImageBufferService::Stub::AsyncsaveRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_saveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::saveAsync(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_saveAsyncRequest& request, ::octaneapi::ApiImageBuffer_saveAsyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_saveAsyncRequest, ::octaneapi::ApiImageBuffer_saveAsyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveAsync_, context, request, response);
}

void ApiImageBufferService::Stub::async::saveAsync(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_saveAsyncRequest* request, ::octaneapi::ApiImageBuffer_saveAsyncResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_saveAsyncRequest, ::octaneapi::ApiImageBuffer_saveAsyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveAsync_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::saveAsync(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_saveAsyncRequest* request, ::octaneapi::ApiImageBuffer_saveAsyncResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveAsync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_saveAsyncResponse>* ApiImageBufferService::Stub::PrepareAsyncsaveAsyncRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_saveAsyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_saveAsyncResponse, ::octaneapi::ApiImageBuffer_saveAsyncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveAsync_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_saveAsyncResponse>* ApiImageBufferService::Stub::AsyncsaveAsyncRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_saveAsyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveAsyncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::pixelAddr(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_pixelAddrRequest& request, ::octaneapi::ApiImageBuffer_pixelAddrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_pixelAddrRequest, ::octaneapi::ApiImageBuffer_pixelAddrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pixelAddr_, context, request, response);
}

void ApiImageBufferService::Stub::async::pixelAddr(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_pixelAddrRequest* request, ::octaneapi::ApiImageBuffer_pixelAddrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_pixelAddrRequest, ::octaneapi::ApiImageBuffer_pixelAddrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pixelAddr_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::pixelAddr(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_pixelAddrRequest* request, ::octaneapi::ApiImageBuffer_pixelAddrResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pixelAddr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_pixelAddrResponse>* ApiImageBufferService::Stub::PrepareAsyncpixelAddrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_pixelAddrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_pixelAddrResponse, ::octaneapi::ApiImageBuffer_pixelAddrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pixelAddr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_pixelAddrResponse>* ApiImageBufferService::Stub::AsyncpixelAddrRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_pixelAddrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpixelAddrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiImageBufferService::Stub::pixelAddr1(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_pixelAddr1Request& request, ::octaneapi::ApiImageBuffer_pixelAddr1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiImageBuffer_pixelAddr1Request, ::octaneapi::ApiImageBuffer_pixelAddr1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pixelAddr1_, context, request, response);
}

void ApiImageBufferService::Stub::async::pixelAddr1(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_pixelAddr1Request* request, ::octaneapi::ApiImageBuffer_pixelAddr1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiImageBuffer_pixelAddr1Request, ::octaneapi::ApiImageBuffer_pixelAddr1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pixelAddr1_, context, request, response, std::move(f));
}

void ApiImageBufferService::Stub::async::pixelAddr1(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_pixelAddr1Request* request, ::octaneapi::ApiImageBuffer_pixelAddr1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pixelAddr1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_pixelAddr1Response>* ApiImageBufferService::Stub::PrepareAsyncpixelAddr1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_pixelAddr1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiImageBuffer_pixelAddr1Response, ::octaneapi::ApiImageBuffer_pixelAddr1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pixelAddr1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImageBuffer_pixelAddr1Response>* ApiImageBufferService::Stub::AsyncpixelAddr1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiImageBuffer_pixelAddr1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpixelAddr1Raw(context, request, cq);
  result->StartCall();
  return result;
}

ApiImageBufferService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_createRequest, ::octaneapi::ApiImageBuffer_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_createRequest* req,
             ::octaneapi::ApiImageBuffer_createResponse* resp) {
               return service->create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_create1Request, ::octaneapi::ApiImageBuffer_create1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_create1Request* req,
             ::octaneapi::ApiImageBuffer_create1Response* resp) {
               return service->create1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_loadRequest, ::octaneapi::ApiImageBuffer_loadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_loadRequest* req,
             ::octaneapi::ApiImageBuffer_loadResponse* resp) {
               return service->load(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_load1Request, ::octaneapi::ApiImageBuffer_load1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_load1Request* req,
             ::octaneapi::ApiImageBuffer_load1Response* resp) {
               return service->load1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_convertToRequest, ::octaneapi::ApiImageBuffer_convertToResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_convertToRequest* req,
             ::octaneapi::ApiImageBuffer_convertToResponse* resp) {
               return service->convertTo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_destroyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_bytesPerPixelRequest, ::octaneapi::ApiImageBuffer_bytesPerPixelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_bytesPerPixelRequest* req,
             ::octaneapi::ApiImageBuffer_bytesPerPixelResponse* resp) {
               return service->bytesPerPixel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_bytesPerChannelRequest, ::octaneapi::ApiImageBuffer_bytesPerChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_bytesPerChannelRequest* req,
             ::octaneapi::ApiImageBuffer_bytesPerChannelResponse* resp) {
               return service->bytesPerChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_channelCountRequest, ::octaneapi::ApiImageBuffer_channelCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_channelCountRequest* req,
             ::octaneapi::ApiImageBuffer_channelCountResponse* resp) {
               return service->channelCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_sizeRequest, ::octaneapi::ApiImageBuffer_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_sizeRequest* req,
             ::octaneapi::ApiImageBuffer_sizeResponse* resp) {
               return service->size(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_sizeInBytesRequest, ::octaneapi::ApiImageBuffer_sizeInBytesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_sizeInBytesRequest* req,
             ::octaneapi::ApiImageBuffer_sizeInBytesResponse* resp) {
               return service->sizeInBytes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_typeRequest, ::octaneapi::ApiImageBuffer_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_typeRequest* req,
             ::octaneapi::ApiImageBuffer_typeResponse* resp) {
               return service->type(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_sourceInfoRequest, ::octaneapi::ApiImageBuffer_sourceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_sourceInfoRequest* req,
             ::octaneapi::ApiImageBuffer_sourceInfoResponse* resp) {
               return service->sourceInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_canWrapXRequest, ::octaneapi::ApiImageBuffer_canWrapXResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_canWrapXRequest* req,
             ::octaneapi::ApiImageBuffer_canWrapXResponse* resp) {
               return service->canWrapX(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_canWrapYRequest, ::octaneapi::ApiImageBuffer_canWrapYResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_canWrapYRequest* req,
             ::octaneapi::ApiImageBuffer_canWrapYResponse* resp) {
               return service->canWrapY(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_needsFlipRequest, ::octaneapi::ApiImageBuffer_needsFlipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_needsFlipRequest* req,
             ::octaneapi::ApiImageBuffer_needsFlipResponse* resp) {
               return service->needsFlip(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_hasAlphaRequest, ::octaneapi::ApiImageBuffer_hasAlphaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_hasAlphaRequest* req,
             ::octaneapi::ApiImageBuffer_hasAlphaResponse* resp) {
               return service->hasAlpha(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_hasColorRequest, ::octaneapi::ApiImageBuffer_hasColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_hasColorRequest* req,
             ::octaneapi::ApiImageBuffer_hasColorResponse* resp) {
               return service->hasColor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_isCompressedRequest, ::octaneapi::ApiImageBuffer_isCompressedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_isCompressedRequest* req,
             ::octaneapi::ApiImageBuffer_isCompressedResponse* resp) {
               return service->isCompressed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_isEmptyRequest, ::octaneapi::ApiImageBuffer_isEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_isEmptyRequest* req,
             ::octaneapi::ApiImageBuffer_isEmptyResponse* resp) {
               return service->isEmpty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_isHalfRequest, ::octaneapi::ApiImageBuffer_isHalfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_isHalfRequest* req,
             ::octaneapi::ApiImageBuffer_isHalfResponse* resp) {
               return service->isHalf(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_isHdrRequest, ::octaneapi::ApiImageBuffer_isHdrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_isHdrRequest* req,
             ::octaneapi::ApiImageBuffer_isHdrResponse* resp) {
               return service->isHdr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_isMonoRequest, ::octaneapi::ApiImageBuffer_isMonoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_isMonoRequest* req,
             ::octaneapi::ApiImageBuffer_isMonoResponse* resp) {
               return service->isMono(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_isPixelValidRequest, ::octaneapi::ApiImageBuffer_isPixelValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_isPixelValidRequest* req,
             ::octaneapi::ApiImageBuffer_isPixelValidResponse* resp) {
               return service->isPixelValid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_compressRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_compressRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->compress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_setPixelLdrRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_setPixelLdrRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setPixelLdr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_setPixelHalfRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_setPixelHalfRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setPixelHalf(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_setPixelHdrRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_setPixelHdrRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setPixelHdr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_copyRegionRequest, ::octaneapi::ApiImageBuffer_copyRegionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_copyRegionRequest* req,
             ::octaneapi::ApiImageBuffer_copyRegionResponse* resp) {
               return service->copyRegion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_compositeOnBlackRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_compositeOnBlackRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->compositeOnBlack(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_flipVerticalRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_flipVerticalRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->flipVertical(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_convertRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_convertRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->convert(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_applyGaussianFilterRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_applyGaussianFilterRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->applyGaussianFilter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_applyBoxFilterRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_applyBoxFilterRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->applyBoxFilter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_applyLevelsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_applyLevelsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->applyLevels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_compareValuesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_compareValuesRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->compareValues(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorRequest, ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorRequest* req,
             ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorResponse* resp) {
               return service->calculateMeanSquareError(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_saveRequest, ::octaneapi::ApiImageBuffer_saveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_saveRequest* req,
             ::octaneapi::ApiImageBuffer_saveResponse* resp) {
               return service->save(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_saveAsyncRequest, ::octaneapi::ApiImageBuffer_saveAsyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_saveAsyncRequest* req,
             ::octaneapi::ApiImageBuffer_saveAsyncResponse* resp) {
               return service->saveAsync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_pixelAddrRequest, ::octaneapi::ApiImageBuffer_pixelAddrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_pixelAddrRequest* req,
             ::octaneapi::ApiImageBuffer_pixelAddrResponse* resp) {
               return service->pixelAddr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiImageBufferService_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiImageBufferService::Service, ::octaneapi::ApiImageBuffer_pixelAddr1Request, ::octaneapi::ApiImageBuffer_pixelAddr1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiImageBufferService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiImageBuffer_pixelAddr1Request* req,
             ::octaneapi::ApiImageBuffer_pixelAddr1Response* resp) {
               return service->pixelAddr1(ctx, req, resp);
             }, this)));
}

ApiImageBufferService::Service::~Service() {
}

::grpc::Status ApiImageBufferService::Service::create(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_createRequest* request, ::octaneapi::ApiImageBuffer_createResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::create1(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_create1Request* request, ::octaneapi::ApiImageBuffer_create1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::load(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_loadRequest* request, ::octaneapi::ApiImageBuffer_loadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::load1(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_load1Request* request, ::octaneapi::ApiImageBuffer_load1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::convertTo(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_convertToRequest* request, ::octaneapi::ApiImageBuffer_convertToResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::destroy(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_destroyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::bytesPerPixel(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_bytesPerPixelRequest* request, ::octaneapi::ApiImageBuffer_bytesPerPixelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::bytesPerChannel(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_bytesPerChannelRequest* request, ::octaneapi::ApiImageBuffer_bytesPerChannelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::channelCount(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_channelCountRequest* request, ::octaneapi::ApiImageBuffer_channelCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::size(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_sizeRequest* request, ::octaneapi::ApiImageBuffer_sizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::sizeInBytes(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_sizeInBytesRequest* request, ::octaneapi::ApiImageBuffer_sizeInBytesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::type(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_typeRequest* request, ::octaneapi::ApiImageBuffer_typeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::sourceInfo(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_sourceInfoRequest* request, ::octaneapi::ApiImageBuffer_sourceInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::canWrapX(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_canWrapXRequest* request, ::octaneapi::ApiImageBuffer_canWrapXResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::canWrapY(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_canWrapYRequest* request, ::octaneapi::ApiImageBuffer_canWrapYResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::needsFlip(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_needsFlipRequest* request, ::octaneapi::ApiImageBuffer_needsFlipResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::hasAlpha(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_hasAlphaRequest* request, ::octaneapi::ApiImageBuffer_hasAlphaResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::hasColor(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_hasColorRequest* request, ::octaneapi::ApiImageBuffer_hasColorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::isCompressed(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_isCompressedRequest* request, ::octaneapi::ApiImageBuffer_isCompressedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::isEmpty(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_isEmptyRequest* request, ::octaneapi::ApiImageBuffer_isEmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::isHalf(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_isHalfRequest* request, ::octaneapi::ApiImageBuffer_isHalfResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::isHdr(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_isHdrRequest* request, ::octaneapi::ApiImageBuffer_isHdrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::isMono(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_isMonoRequest* request, ::octaneapi::ApiImageBuffer_isMonoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::isPixelValid(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_isPixelValidRequest* request, ::octaneapi::ApiImageBuffer_isPixelValidResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::compress(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_compressRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::setPixelLdr(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_setPixelLdrRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::setPixelHalf(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_setPixelHalfRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::setPixelHdr(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_setPixelHdrRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::copyRegion(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_copyRegionRequest* request, ::octaneapi::ApiImageBuffer_copyRegionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::compositeOnBlack(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_compositeOnBlackRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::flipVertical(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_flipVerticalRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::convert(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_convertRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::applyGaussianFilter(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_applyGaussianFilterRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::applyBoxFilter(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_applyBoxFilterRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::applyLevels(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_applyLevelsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::compareValues(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_compareValuesRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::calculateMeanSquareError(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorRequest* request, ::octaneapi::ApiImageBuffer_calculateMeanSquareErrorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::save(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_saveRequest* request, ::octaneapi::ApiImageBuffer_saveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::saveAsync(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_saveAsyncRequest* request, ::octaneapi::ApiImageBuffer_saveAsyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::pixelAddr(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_pixelAddrRequest* request, ::octaneapi::ApiImageBuffer_pixelAddrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiImageBufferService::Service::pixelAddr1(::grpc::ServerContext* context, const ::octaneapi::ApiImageBuffer_pixelAddr1Request* request, ::octaneapi::ApiImageBuffer_pixelAddr1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

