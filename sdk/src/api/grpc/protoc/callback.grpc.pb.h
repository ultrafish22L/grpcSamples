// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: callback.proto
#ifndef GRPC_callback_2eproto__INCLUDED
#define GRPC_callback_2eproto__INCLUDED

#include "callback.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

class CallbackHandler final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.CallbackHandler";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Start(::grpc::ClientContext* context, const ::octaneapi::StartRequest& request, ::octaneapi::StartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::StartResponse>> AsyncStart(::grpc::ClientContext* context, const ::octaneapi::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::StartResponse>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::StartResponse>> PrepareAsyncStart(::grpc::ClientContext* context, const ::octaneapi::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::StartResponse>>(PrepareAsyncStartRaw(context, request, cq));
    }
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::octaneapi::StopRequest& request, ::octaneapi::StopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::octaneapi::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::octaneapi::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    virtual ::grpc::Status PerformBlocking(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncPerformBlocking(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncPerformBlockingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncPerformBlocking(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncPerformBlockingRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadRenderStateProject(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest& request, ::octaneapi::LoadRenderStateProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::LoadRenderStateProjectResponse>> AsyncLoadRenderStateProject(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::LoadRenderStateProjectResponse>>(AsyncLoadRenderStateProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::LoadRenderStateProjectResponse>> PrepareAsyncLoadRenderStateProject(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::LoadRenderStateProjectResponse>>(PrepareAsyncLoadRenderStateProjectRaw(context, request, cq));
    }
    virtual ::grpc::Status OnDaemonUpdate(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncOnDaemonUpdate(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncOnDaemonUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncOnDaemonUpdate(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncOnDaemonUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status OnStatusUpdate(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncOnStatusUpdate(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncOnStatusUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncOnStatusUpdate(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncOnStatusUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status TriggerFunc(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncTriggerFunc(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncTriggerFuncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncTriggerFunc(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncTriggerFuncRaw(context, request, cq));
    }
    virtual ::grpc::Status EvaluateFunc(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncEvaluateFunc(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncEvaluateFuncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncEvaluateFunc(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncEvaluateFuncRaw(context, request, cq));
    }
    virtual ::grpc::Status CleanupFunc(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncCleanupFunc(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncCleanupFuncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncCleanupFunc(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncCleanupFuncRaw(context, request, cq));
    }
    virtual ::grpc::Status DestroyFunc(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncDestroyFunc(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncDestroyFuncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncDestroyFunc(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncDestroyFuncRaw(context, request, cq));
    }
    virtual ::grpc::Status ColorChanged(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncColorChanged(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncColorChangedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncColorChanged(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncColorChangedRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateFunc(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest& request, ::octaneapi::CreateFuncResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CreateFuncResponse>> AsyncCreateFunc(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CreateFuncResponse>>(AsyncCreateFuncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CreateFuncResponse>> PrepareAsyncCreateFunc(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CreateFuncResponse>>(PrepareAsyncCreateFuncRaw(context, request, cq));
    }
    virtual ::grpc::Status InitFunc(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest& request, ::octaneapi::InitFuncResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::InitFuncResponse>> AsyncInitFunc(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::InitFuncResponse>>(AsyncInitFuncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::InitFuncResponse>> PrepareAsyncInitFunc(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::InitFuncResponse>>(PrepareAsyncInitFuncRaw(context, request, cq));
    }
    virtual ::grpc::Status ChangeManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncChangeManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncChangeManagerObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncChangeManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncChangeManagerObserverRaw(context, request, cq));
    }
    virtual ::grpc::Status ChangeManagerTimeObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncChangeManagerTimeObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncChangeManagerTimeObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncChangeManagerTimeObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncChangeManagerTimeObserverRaw(context, request, cq));
    }
    virtual ::grpc::Status ProjectManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncProjectManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncProjectManagerObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncProjectManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncProjectManagerObserverRaw(context, request, cq));
    }
    virtual ::grpc::Status SelectionManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncSelectionManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncSelectionManagerObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncSelectionManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncSelectionManagerObserverRaw(context, request, cq));
    }
    virtual ::grpc::Status IsReady(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest& request, ::octaneapi::IsReadyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::IsReadyResponse>> AsyncIsReady(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::IsReadyResponse>>(AsyncIsReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::IsReadyResponse>> PrepareAsyncIsReady(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::IsReadyResponse>>(PrepareAsyncIsReadyRaw(context, request, cq));
    }
    virtual ::grpc::Status Notify(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest& request, ::octaneapi::NotificationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NotificationResponse>> AsyncNotify(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NotificationResponse>>(AsyncNotifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NotificationResponse>> PrepareAsyncNotify(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NotificationResponse>>(PrepareAsyncNotifyRaw(context, request, cq));
    }
    virtual ::grpc::Status CommandModuleRunFunc(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncCommandModuleRunFunc(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncCommandModuleRunFuncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncCommandModuleRunFunc(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncCommandModuleRunFuncRaw(context, request, cq));
    }
    virtual ::grpc::Status ObserverCallback(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncObserverCallback(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncObserverCallbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncObserverCallback(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncObserverCallbackRaw(context, request, cq));
    }
    virtual ::grpc::Status DbViewLoaded(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncDbViewLoaded(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncDbViewLoadedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncDbViewLoaded(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncDbViewLoadedRaw(context, request, cq));
    }
    virtual ::grpc::Status Finish(::grpc::ClientContext* context, const ::octaneapi::FinishRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncFinish(::grpc::ClientContext* context, const ::octaneapi::FinishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncFinishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncFinish(::grpc::ClientContext* context, const ::octaneapi::FinishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncFinishRaw(context, request, cq));
    }
    virtual ::grpc::Status OnTileBlended(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncOnTileBlended(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncOnTileBlendedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncOnTileBlended(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncOnTileBlendedRaw(context, request, cq));
    }
    virtual ::grpc::Status OnNewStatistics(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncOnNewStatistics(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncOnNewStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncOnNewStatistics(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncOnNewStatisticsRaw(context, request, cq));
    }
    virtual ::grpc::Status OnNewImage(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncOnNewImage(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncOnNewImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncOnNewImage(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncOnNewImageRaw(context, request, cq));
    }
    virtual ::grpc::Status OnOcioError(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncOnOcioError(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncOnOcioErrorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncOnOcioError(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncOnOcioErrorRaw(context, request, cq));
    }
    virtual ::grpc::Status OnRenderFailure(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncOnRenderFailure(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncOnRenderFailureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncOnRenderFailure(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncOnRenderFailureRaw(context, request, cq));
    }
    virtual ::grpc::Status NextChunk(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest& request, ::octaneapi::NextChunkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NextChunkResponse>> AsyncNextChunk(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NextChunkResponse>>(AsyncNextChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NextChunkResponse>> PrepareAsyncNextChunk(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NextChunkResponse>>(PrepareAsyncNextChunkRaw(context, request, cq));
    }
    virtual ::grpc::Status Checked(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncChecked(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncCheckedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncChecked(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncCheckedRaw(context, request, cq));
    }
    virtual ::grpc::Status ComboBoxChanged(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncComboBoxChanged(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncComboBoxChangedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncComboBoxChanged(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncComboBoxChangedRaw(context, request, cq));
    }
    virtual ::grpc::Status ApiLog(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncApiLog(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncApiLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncApiLog(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncApiLogRaw(context, request, cq));
    }
    virtual ::grpc::Status OnMainWindowClose(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncOnMainWindowClose(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncOnMainWindowCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncOnMainWindowClose(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncOnMainWindowCloseRaw(context, request, cq));
    }
    virtual ::grpc::Status MouseEvent(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncMouseEvent(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncMouseEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncMouseEvent(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncMouseEventRaw(context, request, cq));
    }
    virtual ::grpc::Status DbViewClosing(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncDbViewClosing(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncDbViewClosingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncDbViewClosing(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncDbViewClosingRaw(context, request, cq));
    }
    virtual ::grpc::Status NumericBoxChanged(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncNumericBoxChanged(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncNumericBoxChangedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncNumericBoxChanged(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncNumericBoxChangedRaw(context, request, cq));
    }
    virtual ::grpc::Status Callback1(::grpc::ClientContext* context, const ::octaneapi::Callback1Request& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncCallback1(::grpc::ClientContext* context, const ::octaneapi::Callback1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncCallback1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncCallback1(::grpc::ClientContext* context, const ::octaneapi::Callback1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncCallback1Raw(context, request, cq));
    }
    virtual ::grpc::Status Callback2(::grpc::ClientContext* context, const ::octaneapi::Callback2Request& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncCallback2(::grpc::ClientContext* context, const ::octaneapi::Callback2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncCallback2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncCallback2(::grpc::ClientContext* context, const ::octaneapi::Callback2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncCallback2Raw(context, request, cq));
    }
    virtual ::grpc::Status ApiProjectManager_AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::octaneapi::AssetMissingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::AssetMissingResponse>> AsyncApiProjectManager_AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::AssetMissingResponse>>(AsyncApiProjectManager_AssetMissingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::AssetMissingResponse>> PrepareAsyncApiProjectManager_AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::AssetMissingResponse>>(PrepareAsyncApiProjectManager_AssetMissingRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest& request, ::octaneapi::UpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status AsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest& request, ::octaneapi::UpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::UpdateResponse>> AsyncAsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::UpdateResponse>>(AsyncAsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::UpdateResponse>> PrepareAsyncAsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::UpdateResponse>>(PrepareAsyncAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::octaneapi::AssetMissingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::AssetMissingResponse>> AsyncAssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::AssetMissingResponse>>(AsyncAssetMissingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::AssetMissingResponse>> PrepareAsyncAssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::AssetMissingResponse>>(PrepareAsyncAssetMissingRaw(context, request, cq));
    }
    virtual ::grpc::Status NumRows(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::NumRowsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NumRowsResponse>> AsyncNumRows(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NumRowsResponse>>(AsyncNumRowsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NumRowsResponse>> PrepareAsyncNumRows(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NumRowsResponse>>(PrepareAsyncNumRowsRaw(context, request, cq));
    }
    virtual ::grpc::Status Content(::grpc::ClientContext* context, const ::octaneapi::ContentRequest& request, ::octaneapi::ContentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ContentResponse>> AsyncContent(::grpc::ClientContext* context, const ::octaneapi::ContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ContentResponse>>(AsyncContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ContentResponse>> PrepareAsyncContent(::grpc::ClientContext* context, const ::octaneapi::ContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ContentResponse>>(PrepareAsyncContentRaw(context, request, cq));
    }
    virtual ::grpc::Status ButtonClicked(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncButtonClicked(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncButtonClickedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncButtonClicked(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncButtonClickedRaw(context, request, cq));
    }
    virtual ::grpc::Status SelectionChanged(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncSelectionChanged(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncSelectionChangedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncSelectionChanged(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncSelectionChangedRaw(context, request, cq));
    }
    virtual ::grpc::Status TextEditorChanged(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncTextEditorChanged(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncTextEditorChangedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncTextEditorChanged(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncTextEditorChangedRaw(context, request, cq));
    }
    virtual ::grpc::Status OnWindowClose(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest& request, ::octaneapi::CallbackAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> AsyncOnWindowClose(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(AsyncOnWindowCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>> PrepareAsyncOnWindowClose(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>>(PrepareAsyncOnWindowCloseRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Start(::grpc::ClientContext* context, const ::octaneapi::StartRequest* request, ::octaneapi::StartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Start(::grpc::ClientContext* context, const ::octaneapi::StartRequest* request, ::octaneapi::StartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::octaneapi::StopRequest* request, ::octaneapi::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::octaneapi::StopRequest* request, ::octaneapi::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PerformBlocking(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PerformBlocking(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LoadRenderStateProject(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest* request, ::octaneapi::LoadRenderStateProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadRenderStateProject(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest* request, ::octaneapi::LoadRenderStateProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OnDaemonUpdate(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnDaemonUpdate(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OnStatusUpdate(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnStatusUpdate(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TriggerFunc(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerFunc(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EvaluateFunc(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EvaluateFunc(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CleanupFunc(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CleanupFunc(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DestroyFunc(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DestroyFunc(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ColorChanged(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ColorChanged(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateFunc(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest* request, ::octaneapi::CreateFuncResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateFunc(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest* request, ::octaneapi::CreateFuncResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InitFunc(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest* request, ::octaneapi::InitFuncResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitFunc(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest* request, ::octaneapi::InitFuncResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ChangeManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ChangeManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ChangeManagerTimeObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ChangeManagerTimeObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ProjectManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProjectManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SelectionManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SelectionManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void IsReady(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest* request, ::octaneapi::IsReadyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsReady(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest* request, ::octaneapi::IsReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Notify(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest* request, ::octaneapi::NotificationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Notify(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest* request, ::octaneapi::NotificationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CommandModuleRunFunc(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CommandModuleRunFunc(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ObserverCallback(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ObserverCallback(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DbViewLoaded(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DbViewLoaded(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Finish(::grpc::ClientContext* context, const ::octaneapi::FinishRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Finish(::grpc::ClientContext* context, const ::octaneapi::FinishRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OnTileBlended(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnTileBlended(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OnNewStatistics(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnNewStatistics(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OnNewImage(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnNewImage(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OnOcioError(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnOcioError(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OnRenderFailure(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnRenderFailure(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NextChunk(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest* request, ::octaneapi::NextChunkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NextChunk(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest* request, ::octaneapi::NextChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Checked(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Checked(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ComboBoxChanged(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ComboBoxChanged(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ApiLog(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ApiLog(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OnMainWindowClose(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnMainWindowClose(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MouseEvent(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MouseEvent(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DbViewClosing(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DbViewClosing(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NumericBoxChanged(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NumericBoxChanged(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Callback1(::grpc::ClientContext* context, const ::octaneapi::Callback1Request* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Callback1(::grpc::ClientContext* context, const ::octaneapi::Callback1Request* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Callback2(::grpc::ClientContext* context, const ::octaneapi::Callback2Request* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Callback2(::grpc::ClientContext* context, const ::octaneapi::Callback2Request* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ApiProjectManager_AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ApiProjectManager_AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest* request, ::octaneapi::UpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest* request, ::octaneapi::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest* request, ::octaneapi::UpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest* request, ::octaneapi::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NumRows(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::NumRowsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NumRows(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::NumRowsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Content(::grpc::ClientContext* context, const ::octaneapi::ContentRequest* request, ::octaneapi::ContentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Content(::grpc::ClientContext* context, const ::octaneapi::ContentRequest* request, ::octaneapi::ContentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ButtonClicked(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ButtonClicked(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SelectionChanged(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SelectionChanged(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TextEditorChanged(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TextEditorChanged(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OnWindowClose(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnWindowClose(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::StartResponse>* AsyncStartRaw(::grpc::ClientContext* context, const ::octaneapi::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::StartResponse>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::octaneapi::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::octaneapi::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::octaneapi::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncPerformBlockingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncPerformBlockingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::LoadRenderStateProjectResponse>* AsyncLoadRenderStateProjectRaw(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::LoadRenderStateProjectResponse>* PrepareAsyncLoadRenderStateProjectRaw(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncOnDaemonUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncOnDaemonUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncOnStatusUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncOnStatusUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncTriggerFuncRaw(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncTriggerFuncRaw(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncEvaluateFuncRaw(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncEvaluateFuncRaw(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncCleanupFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncCleanupFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncDestroyFuncRaw(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncDestroyFuncRaw(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncColorChangedRaw(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncColorChangedRaw(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CreateFuncResponse>* AsyncCreateFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CreateFuncResponse>* PrepareAsyncCreateFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::InitFuncResponse>* AsyncInitFuncRaw(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::InitFuncResponse>* PrepareAsyncInitFuncRaw(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncChangeManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncChangeManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncChangeManagerTimeObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncChangeManagerTimeObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncProjectManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncProjectManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncSelectionManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncSelectionManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::IsReadyResponse>* AsyncIsReadyRaw(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::IsReadyResponse>* PrepareAsyncIsReadyRaw(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NotificationResponse>* AsyncNotifyRaw(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NotificationResponse>* PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncCommandModuleRunFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncCommandModuleRunFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncObserverCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncObserverCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncDbViewLoadedRaw(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncDbViewLoadedRaw(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncFinishRaw(::grpc::ClientContext* context, const ::octaneapi::FinishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncFinishRaw(::grpc::ClientContext* context, const ::octaneapi::FinishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncOnTileBlendedRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncOnTileBlendedRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncOnNewStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncOnNewStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncOnNewImageRaw(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncOnNewImageRaw(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncOnOcioErrorRaw(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncOnOcioErrorRaw(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncOnRenderFailureRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncOnRenderFailureRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NextChunkResponse>* AsyncNextChunkRaw(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NextChunkResponse>* PrepareAsyncNextChunkRaw(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncCheckedRaw(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncCheckedRaw(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncComboBoxChangedRaw(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncComboBoxChangedRaw(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncApiLogRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncApiLogRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncOnMainWindowCloseRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncOnMainWindowCloseRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncMouseEventRaw(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncMouseEventRaw(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncDbViewClosingRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncDbViewClosingRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncNumericBoxChangedRaw(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncNumericBoxChangedRaw(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncCallback1Raw(::grpc::ClientContext* context, const ::octaneapi::Callback1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncCallback1Raw(::grpc::ClientContext* context, const ::octaneapi::Callback1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncCallback2Raw(::grpc::ClientContext* context, const ::octaneapi::Callback2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncCallback2Raw(::grpc::ClientContext* context, const ::octaneapi::Callback2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::AssetMissingResponse>* AsyncApiProjectManager_AssetMissingRaw(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::AssetMissingResponse>* PrepareAsyncApiProjectManager_AssetMissingRaw(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::UpdateResponse>* AsyncAsyncUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::UpdateResponse>* PrepareAsyncAsyncUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::AssetMissingResponse>* AsyncAssetMissingRaw(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::AssetMissingResponse>* PrepareAsyncAssetMissingRaw(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NumRowsResponse>* AsyncNumRowsRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::NumRowsResponse>* PrepareAsyncNumRowsRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ContentResponse>* AsyncContentRaw(::grpc::ClientContext* context, const ::octaneapi::ContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ContentResponse>* PrepareAsyncContentRaw(::grpc::ClientContext* context, const ::octaneapi::ContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncButtonClickedRaw(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncButtonClickedRaw(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncSelectionChangedRaw(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncSelectionChangedRaw(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncTextEditorChangedRaw(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncTextEditorChangedRaw(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* AsyncOnWindowCloseRaw(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CallbackAck>* PrepareAsyncOnWindowCloseRaw(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Start(::grpc::ClientContext* context, const ::octaneapi::StartRequest& request, ::octaneapi::StartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::StartResponse>> AsyncStart(::grpc::ClientContext* context, const ::octaneapi::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::StartResponse>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::StartResponse>> PrepareAsyncStart(::grpc::ClientContext* context, const ::octaneapi::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::StartResponse>>(PrepareAsyncStartRaw(context, request, cq));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::octaneapi::StopRequest& request, ::octaneapi::StopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::octaneapi::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::octaneapi::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    ::grpc::Status PerformBlocking(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncPerformBlocking(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncPerformBlockingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncPerformBlocking(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncPerformBlockingRaw(context, request, cq));
    }
    ::grpc::Status LoadRenderStateProject(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest& request, ::octaneapi::LoadRenderStateProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::LoadRenderStateProjectResponse>> AsyncLoadRenderStateProject(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::LoadRenderStateProjectResponse>>(AsyncLoadRenderStateProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::LoadRenderStateProjectResponse>> PrepareAsyncLoadRenderStateProject(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::LoadRenderStateProjectResponse>>(PrepareAsyncLoadRenderStateProjectRaw(context, request, cq));
    }
    ::grpc::Status OnDaemonUpdate(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncOnDaemonUpdate(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncOnDaemonUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncOnDaemonUpdate(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncOnDaemonUpdateRaw(context, request, cq));
    }
    ::grpc::Status OnStatusUpdate(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncOnStatusUpdate(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncOnStatusUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncOnStatusUpdate(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncOnStatusUpdateRaw(context, request, cq));
    }
    ::grpc::Status TriggerFunc(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncTriggerFunc(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncTriggerFuncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncTriggerFunc(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncTriggerFuncRaw(context, request, cq));
    }
    ::grpc::Status EvaluateFunc(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncEvaluateFunc(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncEvaluateFuncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncEvaluateFunc(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncEvaluateFuncRaw(context, request, cq));
    }
    ::grpc::Status CleanupFunc(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncCleanupFunc(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncCleanupFuncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncCleanupFunc(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncCleanupFuncRaw(context, request, cq));
    }
    ::grpc::Status DestroyFunc(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncDestroyFunc(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncDestroyFuncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncDestroyFunc(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncDestroyFuncRaw(context, request, cq));
    }
    ::grpc::Status ColorChanged(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncColorChanged(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncColorChangedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncColorChanged(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncColorChangedRaw(context, request, cq));
    }
    ::grpc::Status CreateFunc(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest& request, ::octaneapi::CreateFuncResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CreateFuncResponse>> AsyncCreateFunc(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CreateFuncResponse>>(AsyncCreateFuncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CreateFuncResponse>> PrepareAsyncCreateFunc(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CreateFuncResponse>>(PrepareAsyncCreateFuncRaw(context, request, cq));
    }
    ::grpc::Status InitFunc(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest& request, ::octaneapi::InitFuncResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::InitFuncResponse>> AsyncInitFunc(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::InitFuncResponse>>(AsyncInitFuncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::InitFuncResponse>> PrepareAsyncInitFunc(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::InitFuncResponse>>(PrepareAsyncInitFuncRaw(context, request, cq));
    }
    ::grpc::Status ChangeManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncChangeManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncChangeManagerObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncChangeManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncChangeManagerObserverRaw(context, request, cq));
    }
    ::grpc::Status ChangeManagerTimeObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncChangeManagerTimeObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncChangeManagerTimeObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncChangeManagerTimeObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncChangeManagerTimeObserverRaw(context, request, cq));
    }
    ::grpc::Status ProjectManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncProjectManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncProjectManagerObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncProjectManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncProjectManagerObserverRaw(context, request, cq));
    }
    ::grpc::Status SelectionManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncSelectionManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncSelectionManagerObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncSelectionManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncSelectionManagerObserverRaw(context, request, cq));
    }
    ::grpc::Status IsReady(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest& request, ::octaneapi::IsReadyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::IsReadyResponse>> AsyncIsReady(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::IsReadyResponse>>(AsyncIsReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::IsReadyResponse>> PrepareAsyncIsReady(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::IsReadyResponse>>(PrepareAsyncIsReadyRaw(context, request, cq));
    }
    ::grpc::Status Notify(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest& request, ::octaneapi::NotificationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::NotificationResponse>> AsyncNotify(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::NotificationResponse>>(AsyncNotifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::NotificationResponse>> PrepareAsyncNotify(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::NotificationResponse>>(PrepareAsyncNotifyRaw(context, request, cq));
    }
    ::grpc::Status CommandModuleRunFunc(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncCommandModuleRunFunc(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncCommandModuleRunFuncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncCommandModuleRunFunc(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncCommandModuleRunFuncRaw(context, request, cq));
    }
    ::grpc::Status ObserverCallback(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncObserverCallback(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncObserverCallbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncObserverCallback(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncObserverCallbackRaw(context, request, cq));
    }
    ::grpc::Status DbViewLoaded(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncDbViewLoaded(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncDbViewLoadedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncDbViewLoaded(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncDbViewLoadedRaw(context, request, cq));
    }
    ::grpc::Status Finish(::grpc::ClientContext* context, const ::octaneapi::FinishRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncFinish(::grpc::ClientContext* context, const ::octaneapi::FinishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncFinishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncFinish(::grpc::ClientContext* context, const ::octaneapi::FinishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncFinishRaw(context, request, cq));
    }
    ::grpc::Status OnTileBlended(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncOnTileBlended(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncOnTileBlendedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncOnTileBlended(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncOnTileBlendedRaw(context, request, cq));
    }
    ::grpc::Status OnNewStatistics(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncOnNewStatistics(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncOnNewStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncOnNewStatistics(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncOnNewStatisticsRaw(context, request, cq));
    }
    ::grpc::Status OnNewImage(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncOnNewImage(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncOnNewImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncOnNewImage(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncOnNewImageRaw(context, request, cq));
    }
    ::grpc::Status OnOcioError(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncOnOcioError(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncOnOcioErrorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncOnOcioError(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncOnOcioErrorRaw(context, request, cq));
    }
    ::grpc::Status OnRenderFailure(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncOnRenderFailure(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncOnRenderFailureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncOnRenderFailure(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncOnRenderFailureRaw(context, request, cq));
    }
    ::grpc::Status NextChunk(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest& request, ::octaneapi::NextChunkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::NextChunkResponse>> AsyncNextChunk(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::NextChunkResponse>>(AsyncNextChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::NextChunkResponse>> PrepareAsyncNextChunk(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::NextChunkResponse>>(PrepareAsyncNextChunkRaw(context, request, cq));
    }
    ::grpc::Status Checked(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncChecked(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncCheckedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncChecked(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncCheckedRaw(context, request, cq));
    }
    ::grpc::Status ComboBoxChanged(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncComboBoxChanged(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncComboBoxChangedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncComboBoxChanged(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncComboBoxChangedRaw(context, request, cq));
    }
    ::grpc::Status ApiLog(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncApiLog(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncApiLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncApiLog(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncApiLogRaw(context, request, cq));
    }
    ::grpc::Status OnMainWindowClose(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncOnMainWindowClose(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncOnMainWindowCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncOnMainWindowClose(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncOnMainWindowCloseRaw(context, request, cq));
    }
    ::grpc::Status MouseEvent(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncMouseEvent(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncMouseEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncMouseEvent(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncMouseEventRaw(context, request, cq));
    }
    ::grpc::Status DbViewClosing(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncDbViewClosing(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncDbViewClosingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncDbViewClosing(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncDbViewClosingRaw(context, request, cq));
    }
    ::grpc::Status NumericBoxChanged(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncNumericBoxChanged(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncNumericBoxChangedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncNumericBoxChanged(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncNumericBoxChangedRaw(context, request, cq));
    }
    ::grpc::Status Callback1(::grpc::ClientContext* context, const ::octaneapi::Callback1Request& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncCallback1(::grpc::ClientContext* context, const ::octaneapi::Callback1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncCallback1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncCallback1(::grpc::ClientContext* context, const ::octaneapi::Callback1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncCallback1Raw(context, request, cq));
    }
    ::grpc::Status Callback2(::grpc::ClientContext* context, const ::octaneapi::Callback2Request& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncCallback2(::grpc::ClientContext* context, const ::octaneapi::Callback2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncCallback2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncCallback2(::grpc::ClientContext* context, const ::octaneapi::Callback2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncCallback2Raw(context, request, cq));
    }
    ::grpc::Status ApiProjectManager_AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::octaneapi::AssetMissingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>> AsyncApiProjectManager_AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>>(AsyncApiProjectManager_AssetMissingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>> PrepareAsyncApiProjectManager_AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>>(PrepareAsyncApiProjectManager_AssetMissingRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest& request, ::octaneapi::UpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status AsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest& request, ::octaneapi::UpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>> AsyncAsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>>(AsyncAsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>> PrepareAsyncAsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>>(PrepareAsyncAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::octaneapi::AssetMissingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>> AsyncAssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>>(AsyncAssetMissingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>> PrepareAsyncAssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>>(PrepareAsyncAssetMissingRaw(context, request, cq));
    }
    ::grpc::Status NumRows(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::NumRowsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::NumRowsResponse>> AsyncNumRows(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::NumRowsResponse>>(AsyncNumRowsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::NumRowsResponse>> PrepareAsyncNumRows(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::NumRowsResponse>>(PrepareAsyncNumRowsRaw(context, request, cq));
    }
    ::grpc::Status Content(::grpc::ClientContext* context, const ::octaneapi::ContentRequest& request, ::octaneapi::ContentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ContentResponse>> AsyncContent(::grpc::ClientContext* context, const ::octaneapi::ContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ContentResponse>>(AsyncContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ContentResponse>> PrepareAsyncContent(::grpc::ClientContext* context, const ::octaneapi::ContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ContentResponse>>(PrepareAsyncContentRaw(context, request, cq));
    }
    ::grpc::Status ButtonClicked(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncButtonClicked(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncButtonClickedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncButtonClicked(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncButtonClickedRaw(context, request, cq));
    }
    ::grpc::Status SelectionChanged(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncSelectionChanged(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncSelectionChangedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncSelectionChanged(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncSelectionChangedRaw(context, request, cq));
    }
    ::grpc::Status TextEditorChanged(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncTextEditorChanged(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncTextEditorChangedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncTextEditorChanged(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncTextEditorChangedRaw(context, request, cq));
    }
    ::grpc::Status OnWindowClose(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest& request, ::octaneapi::CallbackAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> AsyncOnWindowClose(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(AsyncOnWindowCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>> PrepareAsyncOnWindowClose(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>>(PrepareAsyncOnWindowCloseRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Start(::grpc::ClientContext* context, const ::octaneapi::StartRequest* request, ::octaneapi::StartResponse* response, std::function<void(::grpc::Status)>) override;
      void Start(::grpc::ClientContext* context, const ::octaneapi::StartRequest* request, ::octaneapi::StartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::octaneapi::StopRequest* request, ::octaneapi::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::octaneapi::StopRequest* request, ::octaneapi::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PerformBlocking(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void PerformBlocking(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LoadRenderStateProject(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest* request, ::octaneapi::LoadRenderStateProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void LoadRenderStateProject(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest* request, ::octaneapi::LoadRenderStateProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OnDaemonUpdate(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void OnDaemonUpdate(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OnStatusUpdate(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void OnStatusUpdate(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TriggerFunc(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void TriggerFunc(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EvaluateFunc(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void EvaluateFunc(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CleanupFunc(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void CleanupFunc(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DestroyFunc(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void DestroyFunc(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ColorChanged(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void ColorChanged(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateFunc(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest* request, ::octaneapi::CreateFuncResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateFunc(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest* request, ::octaneapi::CreateFuncResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InitFunc(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest* request, ::octaneapi::InitFuncResponse* response, std::function<void(::grpc::Status)>) override;
      void InitFunc(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest* request, ::octaneapi::InitFuncResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ChangeManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void ChangeManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ChangeManagerTimeObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void ChangeManagerTimeObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ProjectManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void ProjectManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SelectionManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void SelectionManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsReady(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest* request, ::octaneapi::IsReadyResponse* response, std::function<void(::grpc::Status)>) override;
      void IsReady(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest* request, ::octaneapi::IsReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Notify(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest* request, ::octaneapi::NotificationResponse* response, std::function<void(::grpc::Status)>) override;
      void Notify(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest* request, ::octaneapi::NotificationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CommandModuleRunFunc(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void CommandModuleRunFunc(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ObserverCallback(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void ObserverCallback(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DbViewLoaded(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void DbViewLoaded(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Finish(::grpc::ClientContext* context, const ::octaneapi::FinishRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void Finish(::grpc::ClientContext* context, const ::octaneapi::FinishRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OnTileBlended(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void OnTileBlended(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OnNewStatistics(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void OnNewStatistics(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OnNewImage(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void OnNewImage(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OnOcioError(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void OnOcioError(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OnRenderFailure(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void OnRenderFailure(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NextChunk(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest* request, ::octaneapi::NextChunkResponse* response, std::function<void(::grpc::Status)>) override;
      void NextChunk(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest* request, ::octaneapi::NextChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Checked(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void Checked(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ComboBoxChanged(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void ComboBoxChanged(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ApiLog(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void ApiLog(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OnMainWindowClose(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void OnMainWindowClose(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MouseEvent(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void MouseEvent(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DbViewClosing(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void DbViewClosing(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NumericBoxChanged(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void NumericBoxChanged(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Callback1(::grpc::ClientContext* context, const ::octaneapi::Callback1Request* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void Callback1(::grpc::ClientContext* context, const ::octaneapi::Callback1Request* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Callback2(::grpc::ClientContext* context, const ::octaneapi::Callback2Request* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void Callback2(::grpc::ClientContext* context, const ::octaneapi::Callback2Request* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ApiProjectManager_AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response, std::function<void(::grpc::Status)>) override;
      void ApiProjectManager_AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Update(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest* request, ::octaneapi::UpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest* request, ::octaneapi::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest* request, ::octaneapi::UpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void AsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest* request, ::octaneapi::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response, std::function<void(::grpc::Status)>) override;
      void AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NumRows(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::NumRowsResponse* response, std::function<void(::grpc::Status)>) override;
      void NumRows(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::NumRowsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Content(::grpc::ClientContext* context, const ::octaneapi::ContentRequest* request, ::octaneapi::ContentResponse* response, std::function<void(::grpc::Status)>) override;
      void Content(::grpc::ClientContext* context, const ::octaneapi::ContentRequest* request, ::octaneapi::ContentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ButtonClicked(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void ButtonClicked(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SelectionChanged(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void SelectionChanged(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TextEditorChanged(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void TextEditorChanged(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OnWindowClose(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)>) override;
      void OnWindowClose(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::StartResponse>* AsyncStartRaw(::grpc::ClientContext* context, const ::octaneapi::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::StartResponse>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::octaneapi::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::octaneapi::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::octaneapi::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncPerformBlockingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncPerformBlockingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::LoadRenderStateProjectResponse>* AsyncLoadRenderStateProjectRaw(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::LoadRenderStateProjectResponse>* PrepareAsyncLoadRenderStateProjectRaw(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncOnDaemonUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncOnDaemonUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncOnStatusUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncOnStatusUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncTriggerFuncRaw(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncTriggerFuncRaw(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncEvaluateFuncRaw(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncEvaluateFuncRaw(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncCleanupFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncCleanupFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncDestroyFuncRaw(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncDestroyFuncRaw(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncColorChangedRaw(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncColorChangedRaw(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CreateFuncResponse>* AsyncCreateFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CreateFuncResponse>* PrepareAsyncCreateFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::InitFuncResponse>* AsyncInitFuncRaw(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::InitFuncResponse>* PrepareAsyncInitFuncRaw(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncChangeManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncChangeManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncChangeManagerTimeObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncChangeManagerTimeObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncProjectManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncProjectManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncSelectionManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncSelectionManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::IsReadyResponse>* AsyncIsReadyRaw(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::IsReadyResponse>* PrepareAsyncIsReadyRaw(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::NotificationResponse>* AsyncNotifyRaw(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::NotificationResponse>* PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncCommandModuleRunFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncCommandModuleRunFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncObserverCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncObserverCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncDbViewLoadedRaw(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncDbViewLoadedRaw(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncFinishRaw(::grpc::ClientContext* context, const ::octaneapi::FinishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncFinishRaw(::grpc::ClientContext* context, const ::octaneapi::FinishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncOnTileBlendedRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncOnTileBlendedRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncOnNewStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncOnNewStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncOnNewImageRaw(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncOnNewImageRaw(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncOnOcioErrorRaw(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncOnOcioErrorRaw(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncOnRenderFailureRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncOnRenderFailureRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::NextChunkResponse>* AsyncNextChunkRaw(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::NextChunkResponse>* PrepareAsyncNextChunkRaw(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncCheckedRaw(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncCheckedRaw(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncComboBoxChangedRaw(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncComboBoxChangedRaw(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncApiLogRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncApiLogRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncOnMainWindowCloseRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncOnMainWindowCloseRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncMouseEventRaw(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncMouseEventRaw(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncDbViewClosingRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncDbViewClosingRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncNumericBoxChangedRaw(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncNumericBoxChangedRaw(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncCallback1Raw(::grpc::ClientContext* context, const ::octaneapi::Callback1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncCallback1Raw(::grpc::ClientContext* context, const ::octaneapi::Callback1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncCallback2Raw(::grpc::ClientContext* context, const ::octaneapi::Callback2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncCallback2Raw(::grpc::ClientContext* context, const ::octaneapi::Callback2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>* AsyncApiProjectManager_AssetMissingRaw(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>* PrepareAsyncApiProjectManager_AssetMissingRaw(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>* AsyncAsyncUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>* PrepareAsyncAsyncUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>* AsyncAssetMissingRaw(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>* PrepareAsyncAssetMissingRaw(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::NumRowsResponse>* AsyncNumRowsRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::NumRowsResponse>* PrepareAsyncNumRowsRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ContentResponse>* AsyncContentRaw(::grpc::ClientContext* context, const ::octaneapi::ContentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ContentResponse>* PrepareAsyncContentRaw(::grpc::ClientContext* context, const ::octaneapi::ContentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncButtonClickedRaw(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncButtonClickedRaw(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncSelectionChangedRaw(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncSelectionChangedRaw(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncTextEditorChangedRaw(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncTextEditorChangedRaw(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* AsyncOnWindowCloseRaw(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* PrepareAsyncOnWindowCloseRaw(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Start_;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
    const ::grpc::internal::RpcMethod rpcmethod_PerformBlocking_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadRenderStateProject_;
    const ::grpc::internal::RpcMethod rpcmethod_OnDaemonUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_OnStatusUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerFunc_;
    const ::grpc::internal::RpcMethod rpcmethod_EvaluateFunc_;
    const ::grpc::internal::RpcMethod rpcmethod_CleanupFunc_;
    const ::grpc::internal::RpcMethod rpcmethod_DestroyFunc_;
    const ::grpc::internal::RpcMethod rpcmethod_ColorChanged_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateFunc_;
    const ::grpc::internal::RpcMethod rpcmethod_InitFunc_;
    const ::grpc::internal::RpcMethod rpcmethod_ChangeManagerObserver_;
    const ::grpc::internal::RpcMethod rpcmethod_ChangeManagerTimeObserver_;
    const ::grpc::internal::RpcMethod rpcmethod_ProjectManagerObserver_;
    const ::grpc::internal::RpcMethod rpcmethod_SelectionManagerObserver_;
    const ::grpc::internal::RpcMethod rpcmethod_IsReady_;
    const ::grpc::internal::RpcMethod rpcmethod_Notify_;
    const ::grpc::internal::RpcMethod rpcmethod_CommandModuleRunFunc_;
    const ::grpc::internal::RpcMethod rpcmethod_ObserverCallback_;
    const ::grpc::internal::RpcMethod rpcmethod_DbViewLoaded_;
    const ::grpc::internal::RpcMethod rpcmethod_Finish_;
    const ::grpc::internal::RpcMethod rpcmethod_OnTileBlended_;
    const ::grpc::internal::RpcMethod rpcmethod_OnNewStatistics_;
    const ::grpc::internal::RpcMethod rpcmethod_OnNewImage_;
    const ::grpc::internal::RpcMethod rpcmethod_OnOcioError_;
    const ::grpc::internal::RpcMethod rpcmethod_OnRenderFailure_;
    const ::grpc::internal::RpcMethod rpcmethod_NextChunk_;
    const ::grpc::internal::RpcMethod rpcmethod_Checked_;
    const ::grpc::internal::RpcMethod rpcmethod_ComboBoxChanged_;
    const ::grpc::internal::RpcMethod rpcmethod_ApiLog_;
    const ::grpc::internal::RpcMethod rpcmethod_OnMainWindowClose_;
    const ::grpc::internal::RpcMethod rpcmethod_MouseEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_DbViewClosing_;
    const ::grpc::internal::RpcMethod rpcmethod_NumericBoxChanged_;
    const ::grpc::internal::RpcMethod rpcmethod_Callback1_;
    const ::grpc::internal::RpcMethod rpcmethod_Callback2_;
    const ::grpc::internal::RpcMethod rpcmethod_ApiProjectManager_AssetMissing_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_AsyncUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_AssetMissing_;
    const ::grpc::internal::RpcMethod rpcmethod_NumRows_;
    const ::grpc::internal::RpcMethod rpcmethod_Content_;
    const ::grpc::internal::RpcMethod rpcmethod_ButtonClicked_;
    const ::grpc::internal::RpcMethod rpcmethod_SelectionChanged_;
    const ::grpc::internal::RpcMethod rpcmethod_TextEditorChanged_;
    const ::grpc::internal::RpcMethod rpcmethod_OnWindowClose_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Start(::grpc::ServerContext* context, const ::octaneapi::StartRequest* request, ::octaneapi::StartResponse* response);
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::octaneapi::StopRequest* request, ::octaneapi::StopResponse* response);
    virtual ::grpc::Status PerformBlocking(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status LoadRenderStateProject(::grpc::ServerContext* context, const ::octaneapi::LoadRenderStateProjectRequest* request, ::octaneapi::LoadRenderStateProjectResponse* response);
    virtual ::grpc::Status OnDaemonUpdate(::grpc::ServerContext* context, const ::octaneapi::DaemonUpdateRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status OnStatusUpdate(::grpc::ServerContext* context, const ::octaneapi::StatusUpdateRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status TriggerFunc(::grpc::ServerContext* context, const ::octaneapi::TriggerFuncRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status EvaluateFunc(::grpc::ServerContext* context, const ::octaneapi::EvaluateFuncRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status CleanupFunc(::grpc::ServerContext* context, const ::octaneapi::CleanupFuncRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status DestroyFunc(::grpc::ServerContext* context, const ::octaneapi::DestroyFuncRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status ColorChanged(::grpc::ServerContext* context, const ::octaneapi::ColorChangedRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status CreateFunc(::grpc::ServerContext* context, const ::octaneapi::CreateFuncRequest* request, ::octaneapi::CreateFuncResponse* response);
    virtual ::grpc::Status InitFunc(::grpc::ServerContext* context, const ::octaneapi::InitFuncRequest* request, ::octaneapi::InitFuncResponse* response);
    virtual ::grpc::Status ChangeManagerObserver(::grpc::ServerContext* context, const ::octaneapi::ChangeManagerObserverRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status ChangeManagerTimeObserver(::grpc::ServerContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status ProjectManagerObserver(::grpc::ServerContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status SelectionManagerObserver(::grpc::ServerContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status IsReady(::grpc::ServerContext* context, const ::octaneapi::IsReadyRequest* request, ::octaneapi::IsReadyResponse* response);
    virtual ::grpc::Status Notify(::grpc::ServerContext* context, const ::octaneapi::NotificationRequest* request, ::octaneapi::NotificationResponse* response);
    virtual ::grpc::Status CommandModuleRunFunc(::grpc::ServerContext* context, const ::octaneapi::CommandModuleRunFuncRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status ObserverCallback(::grpc::ServerContext* context, const ::octaneapi::ObserverCallbackRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status DbViewLoaded(::grpc::ServerContext* context, const ::octaneapi::DbViewLoadedRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status Finish(::grpc::ServerContext* context, const ::octaneapi::FinishRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status OnTileBlended(::grpc::ServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status OnNewStatistics(::grpc::ServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status OnNewImage(::grpc::ServerContext* context, const ::octaneapi::OnNewImageRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status OnOcioError(::grpc::ServerContext* context, const ::octaneapi::OnOcioErrorRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status OnRenderFailure(::grpc::ServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status NextChunk(::grpc::ServerContext* context, const ::octaneapi::NextChunkRequest* request, ::octaneapi::NextChunkResponse* response);
    virtual ::grpc::Status Checked(::grpc::ServerContext* context, const ::octaneapi::CheckedRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status ComboBoxChanged(::grpc::ServerContext* context, const ::octaneapi::ComboBoxChangedRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status ApiLog(::grpc::ServerContext* context, const ::octaneapi::ApiLogRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status OnMainWindowClose(::grpc::ServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status MouseEvent(::grpc::ServerContext* context, const ::octaneapi::MouseEventRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status DbViewClosing(::grpc::ServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status NumericBoxChanged(::grpc::ServerContext* context, const ::octaneapi::NumericBoxChangedRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status Callback1(::grpc::ServerContext* context, const ::octaneapi::Callback1Request* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status Callback2(::grpc::ServerContext* context, const ::octaneapi::Callback2Request* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status ApiProjectManager_AssetMissing(::grpc::ServerContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::octaneapi::UpdateRequest* request, ::octaneapi::UpdateResponse* response);
    virtual ::grpc::Status AsyncUpdate(::grpc::ServerContext* context, const ::octaneapi::AsyncUpdateRequest* request, ::octaneapi::UpdateResponse* response);
    virtual ::grpc::Status AssetMissing(::grpc::ServerContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response);
    virtual ::grpc::Status NumRows(::grpc::ServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::NumRowsResponse* response);
    virtual ::grpc::Status Content(::grpc::ServerContext* context, const ::octaneapi::ContentRequest* request, ::octaneapi::ContentResponse* response);
    virtual ::grpc::Status ButtonClicked(::grpc::ServerContext* context, const ::octaneapi::ButtonClickedRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status SelectionChanged(::grpc::ServerContext* context, const ::octaneapi::SelectionChangedRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status TextEditorChanged(::grpc::ServerContext* context, const ::octaneapi::TextEditorChangedRequest* request, ::octaneapi::CallbackAck* response);
    virtual ::grpc::Status OnWindowClose(::grpc::ServerContext* context, const ::octaneapi::OnWindowCloseRequest* request, ::octaneapi::CallbackAck* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Start() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::octaneapi::StartRequest* /*request*/, ::octaneapi::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::octaneapi::StartRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::StartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::octaneapi::StopRequest* /*request*/, ::octaneapi::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::octaneapi::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::StopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PerformBlocking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PerformBlocking() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PerformBlocking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PerformBlocking(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPerformBlocking(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadRenderStateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadRenderStateProject() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LoadRenderStateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadRenderStateProject(::grpc::ServerContext* /*context*/, const ::octaneapi::LoadRenderStateProjectRequest* /*request*/, ::octaneapi::LoadRenderStateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadRenderStateProject(::grpc::ServerContext* context, ::octaneapi::LoadRenderStateProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::LoadRenderStateProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnDaemonUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnDaemonUpdate() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_OnDaemonUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnDaemonUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::DaemonUpdateRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnDaemonUpdate(::grpc::ServerContext* context, ::octaneapi::DaemonUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnStatusUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnStatusUpdate() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_OnStatusUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStatusUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::StatusUpdateRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnStatusUpdate(::grpc::ServerContext* context, ::octaneapi::StatusUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerFunc() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_TriggerFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::TriggerFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerFunc(::grpc::ServerContext* context, ::octaneapi::TriggerFuncRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EvaluateFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EvaluateFunc() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_EvaluateFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EvaluateFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::EvaluateFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEvaluateFunc(::grpc::ServerContext* context, ::octaneapi::EvaluateFuncRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CleanupFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CleanupFunc() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CleanupFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CleanupFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCleanupFunc(::grpc::ServerContext* context, ::octaneapi::CleanupFuncRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DestroyFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DestroyFunc() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DestroyFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::DestroyFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyFunc(::grpc::ServerContext* context, ::octaneapi::DestroyFuncRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ColorChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ColorChanged() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ColorChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ColorChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::ColorChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestColorChanged(::grpc::ServerContext* context, ::octaneapi::ColorChangedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateFunc() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_CreateFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CreateFuncRequest* /*request*/, ::octaneapi::CreateFuncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFunc(::grpc::ServerContext* context, ::octaneapi::CreateFuncRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CreateFuncResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InitFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InitFunc() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_InitFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::InitFuncRequest* /*request*/, ::octaneapi::InitFuncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitFunc(::grpc::ServerContext* context, ::octaneapi::InitFuncRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::InitFuncResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChangeManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChangeManagerObserver() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ChangeManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ChangeManagerObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeManagerObserver(::grpc::ServerContext* context, ::octaneapi::ChangeManagerObserverRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChangeManagerTimeObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChangeManagerTimeObserver() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_ChangeManagerTimeObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeManagerTimeObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ChangeManagerTimeObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeManagerTimeObserver(::grpc::ServerContext* context, ::octaneapi::ChangeManagerTimeObserverRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProjectManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProjectManagerObserver() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_ProjectManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProjectManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProjectManagerObserver(::grpc::ServerContext* context, ::octaneapi::ObserverRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SelectionManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SelectionManagerObserver() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_SelectionManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectionManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectionManagerObserver(::grpc::ServerContext* context, ::octaneapi::ObserverRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsReady() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_IsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsReady(::grpc::ServerContext* /*context*/, const ::octaneapi::IsReadyRequest* /*request*/, ::octaneapi::IsReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsReady(::grpc::ServerContext* context, ::octaneapi::IsReadyRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::IsReadyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Notify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Notify() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_Notify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Notify(::grpc::ServerContext* /*context*/, const ::octaneapi::NotificationRequest* /*request*/, ::octaneapi::NotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotify(::grpc::ServerContext* context, ::octaneapi::NotificationRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::NotificationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CommandModuleRunFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CommandModuleRunFunc() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_CommandModuleRunFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommandModuleRunFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CommandModuleRunFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommandModuleRunFunc(::grpc::ServerContext* context, ::octaneapi::CommandModuleRunFuncRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ObserverCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ObserverCallback() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_ObserverCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserverCallback(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestObserverCallback(::grpc::ServerContext* context, ::octaneapi::ObserverCallbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DbViewLoaded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DbViewLoaded() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_DbViewLoaded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbViewLoaded(::grpc::ServerContext* /*context*/, const ::octaneapi::DbViewLoadedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDbViewLoaded(::grpc::ServerContext* context, ::octaneapi::DbViewLoadedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Finish() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finish(::grpc::ServerContext* /*context*/, const ::octaneapi::FinishRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinish(::grpc::ServerContext* context, ::octaneapi::FinishRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnTileBlended : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnTileBlended() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_OnTileBlended() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnTileBlended(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnTileBlended(::grpc::ServerContext* context, ::octaneapi::BasicCallbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnNewStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnNewStatistics() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_OnNewStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnNewStatistics(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnNewStatistics(::grpc::ServerContext* context, ::octaneapi::BasicCallbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnNewImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnNewImage() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_OnNewImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnNewImage(::grpc::ServerContext* /*context*/, const ::octaneapi::OnNewImageRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnNewImage(::grpc::ServerContext* context, ::octaneapi::OnNewImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnOcioError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnOcioError() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_OnOcioError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnOcioError(::grpc::ServerContext* /*context*/, const ::octaneapi::OnOcioErrorRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnOcioError(::grpc::ServerContext* context, ::octaneapi::OnOcioErrorRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnRenderFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnRenderFailure() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_OnRenderFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnRenderFailure(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnRenderFailure(::grpc::ServerContext* context, ::octaneapi::BasicCallbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NextChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NextChunk() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_NextChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextChunk(::grpc::ServerContext* /*context*/, const ::octaneapi::NextChunkRequest* /*request*/, ::octaneapi::NextChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNextChunk(::grpc::ServerContext* context, ::octaneapi::NextChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::NextChunkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Checked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Checked() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_Checked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Checked(::grpc::ServerContext* /*context*/, const ::octaneapi::CheckedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChecked(::grpc::ServerContext* context, ::octaneapi::CheckedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ComboBoxChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ComboBoxChanged() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_ComboBoxChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComboBoxChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::ComboBoxChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComboBoxChanged(::grpc::ServerContext* context, ::octaneapi::ComboBoxChangedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ApiLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ApiLog() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_ApiLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApiLog(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApiLog(::grpc::ServerContext* context, ::octaneapi::ApiLogRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnMainWindowClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnMainWindowClose() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_OnMainWindowClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnMainWindowClose(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnMainWindowClose(::grpc::ServerContext* context, ::octaneapi::BasicCallbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MouseEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MouseEvent() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_MouseEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MouseEvent(::grpc::ServerContext* /*context*/, const ::octaneapi::MouseEventRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMouseEvent(::grpc::ServerContext* context, ::octaneapi::MouseEventRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DbViewClosing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DbViewClosing() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_DbViewClosing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbViewClosing(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDbViewClosing(::grpc::ServerContext* context, ::octaneapi::BasicCallbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NumericBoxChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NumericBoxChanged() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_NumericBoxChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NumericBoxChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::NumericBoxChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNumericBoxChanged(::grpc::ServerContext* context, ::octaneapi::NumericBoxChangedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Callback1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Callback1() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_Callback1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Callback1(::grpc::ServerContext* /*context*/, const ::octaneapi::Callback1Request* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallback1(::grpc::ServerContext* context, ::octaneapi::Callback1Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Callback2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Callback2() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_Callback2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Callback2(::grpc::ServerContext* /*context*/, const ::octaneapi::Callback2Request* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallback2(::grpc::ServerContext* context, ::octaneapi::Callback2Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ApiProjectManager_AssetMissing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ApiProjectManager_AssetMissing() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_ApiProjectManager_AssetMissing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApiProjectManager_AssetMissing(::grpc::ServerContext* /*context*/, const ::octaneapi::AssetMissingRequest* /*request*/, ::octaneapi::AssetMissingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApiProjectManager_AssetMissing(::grpc::ServerContext* context, ::octaneapi::AssetMissingRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::AssetMissingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(39);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::octaneapi::UpdateRequest* /*request*/, ::octaneapi::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::octaneapi::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::UpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AsyncUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AsyncUpdate() {
      ::grpc::Service::MarkMethodAsync(40);
    }
    ~WithAsyncMethod_AsyncUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AsyncUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::AsyncUpdateRequest* /*request*/, ::octaneapi::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAsyncUpdate(::grpc::ServerContext* context, ::octaneapi::AsyncUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::UpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AssetMissing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AssetMissing() {
      ::grpc::Service::MarkMethodAsync(41);
    }
    ~WithAsyncMethod_AssetMissing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssetMissing(::grpc::ServerContext* /*context*/, const ::octaneapi::AssetMissingRequest* /*request*/, ::octaneapi::AssetMissingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAssetMissing(::grpc::ServerContext* context, ::octaneapi::AssetMissingRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::AssetMissingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NumRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NumRows() {
      ::grpc::Service::MarkMethodAsync(42);
    }
    ~WithAsyncMethod_NumRows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NumRows(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::NumRowsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNumRows(::grpc::ServerContext* context, ::octaneapi::BasicCallbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::NumRowsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Content : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Content() {
      ::grpc::Service::MarkMethodAsync(43);
    }
    ~WithAsyncMethod_Content() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Content(::grpc::ServerContext* /*context*/, const ::octaneapi::ContentRequest* /*request*/, ::octaneapi::ContentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestContent(::grpc::ServerContext* context, ::octaneapi::ContentRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ContentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ButtonClicked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ButtonClicked() {
      ::grpc::Service::MarkMethodAsync(44);
    }
    ~WithAsyncMethod_ButtonClicked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ButtonClicked(::grpc::ServerContext* /*context*/, const ::octaneapi::ButtonClickedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestButtonClicked(::grpc::ServerContext* context, ::octaneapi::ButtonClickedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SelectionChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SelectionChanged() {
      ::grpc::Service::MarkMethodAsync(45);
    }
    ~WithAsyncMethod_SelectionChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectionChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::SelectionChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectionChanged(::grpc::ServerContext* context, ::octaneapi::SelectionChangedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TextEditorChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TextEditorChanged() {
      ::grpc::Service::MarkMethodAsync(46);
    }
    ~WithAsyncMethod_TextEditorChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextEditorChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::TextEditorChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTextEditorChanged(::grpc::ServerContext* context, ::octaneapi::TextEditorChangedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnWindowClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnWindowClose() {
      ::grpc::Service::MarkMethodAsync(47);
    }
    ~WithAsyncMethod_OnWindowClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnWindowClose(::grpc::ServerContext* /*context*/, const ::octaneapi::OnWindowCloseRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnWindowClose(::grpc::ServerContext* context, ::octaneapi::OnWindowCloseRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CallbackAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Start<WithAsyncMethod_Stop<WithAsyncMethod_PerformBlocking<WithAsyncMethod_LoadRenderStateProject<WithAsyncMethod_OnDaemonUpdate<WithAsyncMethod_OnStatusUpdate<WithAsyncMethod_TriggerFunc<WithAsyncMethod_EvaluateFunc<WithAsyncMethod_CleanupFunc<WithAsyncMethod_DestroyFunc<WithAsyncMethod_ColorChanged<WithAsyncMethod_CreateFunc<WithAsyncMethod_InitFunc<WithAsyncMethod_ChangeManagerObserver<WithAsyncMethod_ChangeManagerTimeObserver<WithAsyncMethod_ProjectManagerObserver<WithAsyncMethod_SelectionManagerObserver<WithAsyncMethod_IsReady<WithAsyncMethod_Notify<WithAsyncMethod_CommandModuleRunFunc<WithAsyncMethod_ObserverCallback<WithAsyncMethod_DbViewLoaded<WithAsyncMethod_Finish<WithAsyncMethod_OnTileBlended<WithAsyncMethod_OnNewStatistics<WithAsyncMethod_OnNewImage<WithAsyncMethod_OnOcioError<WithAsyncMethod_OnRenderFailure<WithAsyncMethod_NextChunk<WithAsyncMethod_Checked<WithAsyncMethod_ComboBoxChanged<WithAsyncMethod_ApiLog<WithAsyncMethod_OnMainWindowClose<WithAsyncMethod_MouseEvent<WithAsyncMethod_DbViewClosing<WithAsyncMethod_NumericBoxChanged<WithAsyncMethod_Callback1<WithAsyncMethod_Callback2<WithAsyncMethod_ApiProjectManager_AssetMissing<WithAsyncMethod_Update<WithAsyncMethod_AsyncUpdate<WithAsyncMethod_AssetMissing<WithAsyncMethod_NumRows<WithAsyncMethod_Content<WithAsyncMethod_ButtonClicked<WithAsyncMethod_SelectionChanged<WithAsyncMethod_TextEditorChanged<WithAsyncMethod_OnWindowClose<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Start() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::StartRequest, ::octaneapi::StartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::StartRequest* request, ::octaneapi::StartResponse* response) { return this->Start(context, request, response); }));}
    void SetMessageAllocatorFor_Start(
        ::grpc::MessageAllocator< ::octaneapi::StartRequest, ::octaneapi::StartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::StartRequest, ::octaneapi::StartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::octaneapi::StartRequest* /*request*/, ::octaneapi::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Start(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::StartRequest* /*request*/, ::octaneapi::StartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Stop() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::StopRequest, ::octaneapi::StopResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::StopRequest* request, ::octaneapi::StopResponse* response) { return this->Stop(context, request, response); }));}
    void SetMessageAllocatorFor_Stop(
        ::grpc::MessageAllocator< ::octaneapi::StopRequest, ::octaneapi::StopResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::StopRequest, ::octaneapi::StopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::octaneapi::StopRequest* /*request*/, ::octaneapi::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::StopRequest* /*request*/, ::octaneapi::StopResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PerformBlocking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PerformBlocking() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CallbackAck* response) { return this->PerformBlocking(context, request, response); }));}
    void SetMessageAllocatorFor_PerformBlocking(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PerformBlocking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PerformBlocking(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PerformBlocking(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LoadRenderStateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadRenderStateProject() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::LoadRenderStateProjectRequest, ::octaneapi::LoadRenderStateProjectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::LoadRenderStateProjectRequest* request, ::octaneapi::LoadRenderStateProjectResponse* response) { return this->LoadRenderStateProject(context, request, response); }));}
    void SetMessageAllocatorFor_LoadRenderStateProject(
        ::grpc::MessageAllocator< ::octaneapi::LoadRenderStateProjectRequest, ::octaneapi::LoadRenderStateProjectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::LoadRenderStateProjectRequest, ::octaneapi::LoadRenderStateProjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LoadRenderStateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadRenderStateProject(::grpc::ServerContext* /*context*/, const ::octaneapi::LoadRenderStateProjectRequest* /*request*/, ::octaneapi::LoadRenderStateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadRenderStateProject(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::LoadRenderStateProjectRequest* /*request*/, ::octaneapi::LoadRenderStateProjectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OnDaemonUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OnDaemonUpdate() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::DaemonUpdateRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::DaemonUpdateRequest* request, ::octaneapi::CallbackAck* response) { return this->OnDaemonUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_OnDaemonUpdate(
        ::grpc::MessageAllocator< ::octaneapi::DaemonUpdateRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::DaemonUpdateRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OnDaemonUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnDaemonUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::DaemonUpdateRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnDaemonUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::DaemonUpdateRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OnStatusUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OnStatusUpdate() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::StatusUpdateRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::StatusUpdateRequest* request, ::octaneapi::CallbackAck* response) { return this->OnStatusUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_OnStatusUpdate(
        ::grpc::MessageAllocator< ::octaneapi::StatusUpdateRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::StatusUpdateRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OnStatusUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStatusUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::StatusUpdateRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnStatusUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::StatusUpdateRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerFunc() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::TriggerFuncRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::TriggerFuncRequest* request, ::octaneapi::CallbackAck* response) { return this->TriggerFunc(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerFunc(
        ::grpc::MessageAllocator< ::octaneapi::TriggerFuncRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::TriggerFuncRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::TriggerFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerFunc(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::TriggerFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EvaluateFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EvaluateFunc() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::EvaluateFuncRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::EvaluateFuncRequest* request, ::octaneapi::CallbackAck* response) { return this->EvaluateFunc(context, request, response); }));}
    void SetMessageAllocatorFor_EvaluateFunc(
        ::grpc::MessageAllocator< ::octaneapi::EvaluateFuncRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::EvaluateFuncRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EvaluateFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EvaluateFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::EvaluateFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EvaluateFunc(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::EvaluateFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CleanupFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CleanupFunc() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::CleanupFuncRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::CleanupFuncRequest* request, ::octaneapi::CallbackAck* response) { return this->CleanupFunc(context, request, response); }));}
    void SetMessageAllocatorFor_CleanupFunc(
        ::grpc::MessageAllocator< ::octaneapi::CleanupFuncRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::CleanupFuncRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CleanupFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CleanupFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CleanupFunc(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::CleanupFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DestroyFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DestroyFunc() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::DestroyFuncRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::DestroyFuncRequest* request, ::octaneapi::CallbackAck* response) { return this->DestroyFunc(context, request, response); }));}
    void SetMessageAllocatorFor_DestroyFunc(
        ::grpc::MessageAllocator< ::octaneapi::DestroyFuncRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::DestroyFuncRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DestroyFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::DestroyFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DestroyFunc(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::DestroyFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ColorChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ColorChanged() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ColorChangedRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ColorChangedRequest* request, ::octaneapi::CallbackAck* response) { return this->ColorChanged(context, request, response); }));}
    void SetMessageAllocatorFor_ColorChanged(
        ::grpc::MessageAllocator< ::octaneapi::ColorChangedRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ColorChangedRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ColorChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ColorChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::ColorChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ColorChanged(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ColorChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateFunc() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::CreateFuncRequest, ::octaneapi::CreateFuncResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::CreateFuncRequest* request, ::octaneapi::CreateFuncResponse* response) { return this->CreateFunc(context, request, response); }));}
    void SetMessageAllocatorFor_CreateFunc(
        ::grpc::MessageAllocator< ::octaneapi::CreateFuncRequest, ::octaneapi::CreateFuncResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::CreateFuncRequest, ::octaneapi::CreateFuncResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CreateFuncRequest* /*request*/, ::octaneapi::CreateFuncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFunc(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::CreateFuncRequest* /*request*/, ::octaneapi::CreateFuncResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InitFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InitFunc() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::InitFuncRequest, ::octaneapi::InitFuncResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::InitFuncRequest* request, ::octaneapi::InitFuncResponse* response) { return this->InitFunc(context, request, response); }));}
    void SetMessageAllocatorFor_InitFunc(
        ::grpc::MessageAllocator< ::octaneapi::InitFuncRequest, ::octaneapi::InitFuncResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::InitFuncRequest, ::octaneapi::InitFuncResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InitFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::InitFuncRequest* /*request*/, ::octaneapi::InitFuncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitFunc(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::InitFuncRequest* /*request*/, ::octaneapi::InitFuncResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ChangeManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ChangeManagerObserver() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ChangeManagerObserverRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ChangeManagerObserverRequest* request, ::octaneapi::CallbackAck* response) { return this->ChangeManagerObserver(context, request, response); }));}
    void SetMessageAllocatorFor_ChangeManagerObserver(
        ::grpc::MessageAllocator< ::octaneapi::ChangeManagerObserverRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ChangeManagerObserverRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ChangeManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ChangeManagerObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChangeManagerObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ChangeManagerObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ChangeManagerTimeObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ChangeManagerTimeObserver() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ChangeManagerTimeObserverRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest* request, ::octaneapi::CallbackAck* response) { return this->ChangeManagerTimeObserver(context, request, response); }));}
    void SetMessageAllocatorFor_ChangeManagerTimeObserver(
        ::grpc::MessageAllocator< ::octaneapi::ChangeManagerTimeObserverRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ChangeManagerTimeObserverRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ChangeManagerTimeObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeManagerTimeObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ChangeManagerTimeObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChangeManagerTimeObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ChangeManagerTimeObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ProjectManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProjectManagerObserver() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response) { return this->ProjectManagerObserver(context, request, response); }));}
    void SetMessageAllocatorFor_ProjectManagerObserver(
        ::grpc::MessageAllocator< ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProjectManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProjectManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProjectManagerObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SelectionManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SelectionManagerObserver() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response) { return this->SelectionManagerObserver(context, request, response); }));}
    void SetMessageAllocatorFor_SelectionManagerObserver(
        ::grpc::MessageAllocator< ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SelectionManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectionManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SelectionManagerObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsReady() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::IsReadyRequest, ::octaneapi::IsReadyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::IsReadyRequest* request, ::octaneapi::IsReadyResponse* response) { return this->IsReady(context, request, response); }));}
    void SetMessageAllocatorFor_IsReady(
        ::grpc::MessageAllocator< ::octaneapi::IsReadyRequest, ::octaneapi::IsReadyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::IsReadyRequest, ::octaneapi::IsReadyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsReady(::grpc::ServerContext* /*context*/, const ::octaneapi::IsReadyRequest* /*request*/, ::octaneapi::IsReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsReady(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::IsReadyRequest* /*request*/, ::octaneapi::IsReadyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Notify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Notify() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::NotificationRequest, ::octaneapi::NotificationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::NotificationRequest* request, ::octaneapi::NotificationResponse* response) { return this->Notify(context, request, response); }));}
    void SetMessageAllocatorFor_Notify(
        ::grpc::MessageAllocator< ::octaneapi::NotificationRequest, ::octaneapi::NotificationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::NotificationRequest, ::octaneapi::NotificationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Notify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Notify(::grpc::ServerContext* /*context*/, const ::octaneapi::NotificationRequest* /*request*/, ::octaneapi::NotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Notify(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::NotificationRequest* /*request*/, ::octaneapi::NotificationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CommandModuleRunFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CommandModuleRunFunc() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::CommandModuleRunFuncRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::CommandModuleRunFuncRequest* request, ::octaneapi::CallbackAck* response) { return this->CommandModuleRunFunc(context, request, response); }));}
    void SetMessageAllocatorFor_CommandModuleRunFunc(
        ::grpc::MessageAllocator< ::octaneapi::CommandModuleRunFuncRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::CommandModuleRunFuncRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CommandModuleRunFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommandModuleRunFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CommandModuleRunFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CommandModuleRunFunc(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::CommandModuleRunFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ObserverCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ObserverCallback() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ObserverCallbackRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ObserverCallbackRequest* request, ::octaneapi::CallbackAck* response) { return this->ObserverCallback(context, request, response); }));}
    void SetMessageAllocatorFor_ObserverCallback(
        ::grpc::MessageAllocator< ::octaneapi::ObserverCallbackRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ObserverCallbackRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ObserverCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserverCallback(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ObserverCallback(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ObserverCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DbViewLoaded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DbViewLoaded() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::DbViewLoadedRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::DbViewLoadedRequest* request, ::octaneapi::CallbackAck* response) { return this->DbViewLoaded(context, request, response); }));}
    void SetMessageAllocatorFor_DbViewLoaded(
        ::grpc::MessageAllocator< ::octaneapi::DbViewLoadedRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::DbViewLoadedRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DbViewLoaded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbViewLoaded(::grpc::ServerContext* /*context*/, const ::octaneapi::DbViewLoadedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DbViewLoaded(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::DbViewLoadedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Finish() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::FinishRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::FinishRequest* request, ::octaneapi::CallbackAck* response) { return this->Finish(context, request, response); }));}
    void SetMessageAllocatorFor_Finish(
        ::grpc::MessageAllocator< ::octaneapi::FinishRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::FinishRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finish(::grpc::ServerContext* /*context*/, const ::octaneapi::FinishRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Finish(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::FinishRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OnTileBlended : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OnTileBlended() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response) { return this->OnTileBlended(context, request, response); }));}
    void SetMessageAllocatorFor_OnTileBlended(
        ::grpc::MessageAllocator< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OnTileBlended() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnTileBlended(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnTileBlended(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OnNewStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OnNewStatistics() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response) { return this->OnNewStatistics(context, request, response); }));}
    void SetMessageAllocatorFor_OnNewStatistics(
        ::grpc::MessageAllocator< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OnNewStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnNewStatistics(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnNewStatistics(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OnNewImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OnNewImage() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::OnNewImageRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::OnNewImageRequest* request, ::octaneapi::CallbackAck* response) { return this->OnNewImage(context, request, response); }));}
    void SetMessageAllocatorFor_OnNewImage(
        ::grpc::MessageAllocator< ::octaneapi::OnNewImageRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::OnNewImageRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OnNewImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnNewImage(::grpc::ServerContext* /*context*/, const ::octaneapi::OnNewImageRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnNewImage(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::OnNewImageRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OnOcioError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OnOcioError() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::OnOcioErrorRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::OnOcioErrorRequest* request, ::octaneapi::CallbackAck* response) { return this->OnOcioError(context, request, response); }));}
    void SetMessageAllocatorFor_OnOcioError(
        ::grpc::MessageAllocator< ::octaneapi::OnOcioErrorRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::OnOcioErrorRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OnOcioError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnOcioError(::grpc::ServerContext* /*context*/, const ::octaneapi::OnOcioErrorRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnOcioError(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::OnOcioErrorRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OnRenderFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OnRenderFailure() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response) { return this->OnRenderFailure(context, request, response); }));}
    void SetMessageAllocatorFor_OnRenderFailure(
        ::grpc::MessageAllocator< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OnRenderFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnRenderFailure(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnRenderFailure(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NextChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NextChunk() {
      ::grpc::Service::MarkMethodCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::NextChunkRequest, ::octaneapi::NextChunkResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::NextChunkRequest* request, ::octaneapi::NextChunkResponse* response) { return this->NextChunk(context, request, response); }));}
    void SetMessageAllocatorFor_NextChunk(
        ::grpc::MessageAllocator< ::octaneapi::NextChunkRequest, ::octaneapi::NextChunkResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::NextChunkRequest, ::octaneapi::NextChunkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NextChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextChunk(::grpc::ServerContext* /*context*/, const ::octaneapi::NextChunkRequest* /*request*/, ::octaneapi::NextChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NextChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::NextChunkRequest* /*request*/, ::octaneapi::NextChunkResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Checked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Checked() {
      ::grpc::Service::MarkMethodCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::CheckedRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::CheckedRequest* request, ::octaneapi::CallbackAck* response) { return this->Checked(context, request, response); }));}
    void SetMessageAllocatorFor_Checked(
        ::grpc::MessageAllocator< ::octaneapi::CheckedRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::CheckedRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Checked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Checked(::grpc::ServerContext* /*context*/, const ::octaneapi::CheckedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Checked(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::CheckedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ComboBoxChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ComboBoxChanged() {
      ::grpc::Service::MarkMethodCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ComboBoxChangedRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ComboBoxChangedRequest* request, ::octaneapi::CallbackAck* response) { return this->ComboBoxChanged(context, request, response); }));}
    void SetMessageAllocatorFor_ComboBoxChanged(
        ::grpc::MessageAllocator< ::octaneapi::ComboBoxChangedRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ComboBoxChangedRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ComboBoxChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComboBoxChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::ComboBoxChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ComboBoxChanged(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ComboBoxChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ApiLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ApiLog() {
      ::grpc::Service::MarkMethodCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiLogRequest* request, ::octaneapi::CallbackAck* response) { return this->ApiLog(context, request, response); }));}
    void SetMessageAllocatorFor_ApiLog(
        ::grpc::MessageAllocator< ::octaneapi::ApiLogRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ApiLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApiLog(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApiLog(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiLogRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OnMainWindowClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OnMainWindowClose() {
      ::grpc::Service::MarkMethodCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response) { return this->OnMainWindowClose(context, request, response); }));}
    void SetMessageAllocatorFor_OnMainWindowClose(
        ::grpc::MessageAllocator< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OnMainWindowClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnMainWindowClose(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnMainWindowClose(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MouseEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MouseEvent() {
      ::grpc::Service::MarkMethodCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::MouseEventRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::MouseEventRequest* request, ::octaneapi::CallbackAck* response) { return this->MouseEvent(context, request, response); }));}
    void SetMessageAllocatorFor_MouseEvent(
        ::grpc::MessageAllocator< ::octaneapi::MouseEventRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::MouseEventRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MouseEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MouseEvent(::grpc::ServerContext* /*context*/, const ::octaneapi::MouseEventRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MouseEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::MouseEventRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DbViewClosing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DbViewClosing() {
      ::grpc::Service::MarkMethodCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response) { return this->DbViewClosing(context, request, response); }));}
    void SetMessageAllocatorFor_DbViewClosing(
        ::grpc::MessageAllocator< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(34);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DbViewClosing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbViewClosing(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DbViewClosing(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NumericBoxChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NumericBoxChanged() {
      ::grpc::Service::MarkMethodCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::NumericBoxChangedRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::NumericBoxChangedRequest* request, ::octaneapi::CallbackAck* response) { return this->NumericBoxChanged(context, request, response); }));}
    void SetMessageAllocatorFor_NumericBoxChanged(
        ::grpc::MessageAllocator< ::octaneapi::NumericBoxChangedRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(35);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::NumericBoxChangedRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NumericBoxChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NumericBoxChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::NumericBoxChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NumericBoxChanged(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::NumericBoxChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Callback1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Callback1() {
      ::grpc::Service::MarkMethodCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::Callback1Request, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::Callback1Request* request, ::octaneapi::CallbackAck* response) { return this->Callback1(context, request, response); }));}
    void SetMessageAllocatorFor_Callback1(
        ::grpc::MessageAllocator< ::octaneapi::Callback1Request, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(36);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::Callback1Request, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Callback1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Callback1(::grpc::ServerContext* /*context*/, const ::octaneapi::Callback1Request* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Callback1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::Callback1Request* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Callback2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Callback2() {
      ::grpc::Service::MarkMethodCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::Callback2Request, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::Callback2Request* request, ::octaneapi::CallbackAck* response) { return this->Callback2(context, request, response); }));}
    void SetMessageAllocatorFor_Callback2(
        ::grpc::MessageAllocator< ::octaneapi::Callback2Request, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(37);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::Callback2Request, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Callback2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Callback2(::grpc::ServerContext* /*context*/, const ::octaneapi::Callback2Request* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Callback2(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::Callback2Request* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ApiProjectManager_AssetMissing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ApiProjectManager_AssetMissing() {
      ::grpc::Service::MarkMethodCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response) { return this->ApiProjectManager_AssetMissing(context, request, response); }));}
    void SetMessageAllocatorFor_ApiProjectManager_AssetMissing(
        ::grpc::MessageAllocator< ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(38);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ApiProjectManager_AssetMissing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApiProjectManager_AssetMissing(::grpc::ServerContext* /*context*/, const ::octaneapi::AssetMissingRequest* /*request*/, ::octaneapi::AssetMissingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApiProjectManager_AssetMissing(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::AssetMissingRequest* /*request*/, ::octaneapi::AssetMissingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Update() {
      ::grpc::Service::MarkMethodCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::UpdateRequest, ::octaneapi::UpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::UpdateRequest* request, ::octaneapi::UpdateResponse* response) { return this->Update(context, request, response); }));}
    void SetMessageAllocatorFor_Update(
        ::grpc::MessageAllocator< ::octaneapi::UpdateRequest, ::octaneapi::UpdateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(39);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::UpdateRequest, ::octaneapi::UpdateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::octaneapi::UpdateRequest* /*request*/, ::octaneapi::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::UpdateRequest* /*request*/, ::octaneapi::UpdateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AsyncUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AsyncUpdate() {
      ::grpc::Service::MarkMethodCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::AsyncUpdateRequest, ::octaneapi::UpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::AsyncUpdateRequest* request, ::octaneapi::UpdateResponse* response) { return this->AsyncUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_AsyncUpdate(
        ::grpc::MessageAllocator< ::octaneapi::AsyncUpdateRequest, ::octaneapi::UpdateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(40);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::AsyncUpdateRequest, ::octaneapi::UpdateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AsyncUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AsyncUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::AsyncUpdateRequest* /*request*/, ::octaneapi::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AsyncUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::AsyncUpdateRequest* /*request*/, ::octaneapi::UpdateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AssetMissing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AssetMissing() {
      ::grpc::Service::MarkMethodCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response) { return this->AssetMissing(context, request, response); }));}
    void SetMessageAllocatorFor_AssetMissing(
        ::grpc::MessageAllocator< ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(41);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AssetMissing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssetMissing(::grpc::ServerContext* /*context*/, const ::octaneapi::AssetMissingRequest* /*request*/, ::octaneapi::AssetMissingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AssetMissing(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::AssetMissingRequest* /*request*/, ::octaneapi::AssetMissingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NumRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NumRows() {
      ::grpc::Service::MarkMethodCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::BasicCallbackRequest, ::octaneapi::NumRowsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::NumRowsResponse* response) { return this->NumRows(context, request, response); }));}
    void SetMessageAllocatorFor_NumRows(
        ::grpc::MessageAllocator< ::octaneapi::BasicCallbackRequest, ::octaneapi::NumRowsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(42);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::BasicCallbackRequest, ::octaneapi::NumRowsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NumRows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NumRows(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::NumRowsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NumRows(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::NumRowsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Content : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Content() {
      ::grpc::Service::MarkMethodCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ContentRequest, ::octaneapi::ContentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ContentRequest* request, ::octaneapi::ContentResponse* response) { return this->Content(context, request, response); }));}
    void SetMessageAllocatorFor_Content(
        ::grpc::MessageAllocator< ::octaneapi::ContentRequest, ::octaneapi::ContentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(43);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ContentRequest, ::octaneapi::ContentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Content() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Content(::grpc::ServerContext* /*context*/, const ::octaneapi::ContentRequest* /*request*/, ::octaneapi::ContentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Content(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ContentRequest* /*request*/, ::octaneapi::ContentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ButtonClicked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ButtonClicked() {
      ::grpc::Service::MarkMethodCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ButtonClickedRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ButtonClickedRequest* request, ::octaneapi::CallbackAck* response) { return this->ButtonClicked(context, request, response); }));}
    void SetMessageAllocatorFor_ButtonClicked(
        ::grpc::MessageAllocator< ::octaneapi::ButtonClickedRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(44);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ButtonClickedRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ButtonClicked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ButtonClicked(::grpc::ServerContext* /*context*/, const ::octaneapi::ButtonClickedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ButtonClicked(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ButtonClickedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SelectionChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SelectionChanged() {
      ::grpc::Service::MarkMethodCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::SelectionChangedRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::SelectionChangedRequest* request, ::octaneapi::CallbackAck* response) { return this->SelectionChanged(context, request, response); }));}
    void SetMessageAllocatorFor_SelectionChanged(
        ::grpc::MessageAllocator< ::octaneapi::SelectionChangedRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(45);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::SelectionChangedRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SelectionChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectionChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::SelectionChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SelectionChanged(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::SelectionChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TextEditorChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TextEditorChanged() {
      ::grpc::Service::MarkMethodCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::TextEditorChangedRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::TextEditorChangedRequest* request, ::octaneapi::CallbackAck* response) { return this->TextEditorChanged(context, request, response); }));}
    void SetMessageAllocatorFor_TextEditorChanged(
        ::grpc::MessageAllocator< ::octaneapi::TextEditorChangedRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(46);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::TextEditorChangedRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TextEditorChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextEditorChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::TextEditorChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TextEditorChanged(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::TextEditorChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OnWindowClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OnWindowClose() {
      ::grpc::Service::MarkMethodCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::OnWindowCloseRequest, ::octaneapi::CallbackAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::OnWindowCloseRequest* request, ::octaneapi::CallbackAck* response) { return this->OnWindowClose(context, request, response); }));}
    void SetMessageAllocatorFor_OnWindowClose(
        ::grpc::MessageAllocator< ::octaneapi::OnWindowCloseRequest, ::octaneapi::CallbackAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(47);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::OnWindowCloseRequest, ::octaneapi::CallbackAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OnWindowClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnWindowClose(::grpc::ServerContext* /*context*/, const ::octaneapi::OnWindowCloseRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnWindowClose(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::OnWindowCloseRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Start<WithCallbackMethod_Stop<WithCallbackMethod_PerformBlocking<WithCallbackMethod_LoadRenderStateProject<WithCallbackMethod_OnDaemonUpdate<WithCallbackMethod_OnStatusUpdate<WithCallbackMethod_TriggerFunc<WithCallbackMethod_EvaluateFunc<WithCallbackMethod_CleanupFunc<WithCallbackMethod_DestroyFunc<WithCallbackMethod_ColorChanged<WithCallbackMethod_CreateFunc<WithCallbackMethod_InitFunc<WithCallbackMethod_ChangeManagerObserver<WithCallbackMethod_ChangeManagerTimeObserver<WithCallbackMethod_ProjectManagerObserver<WithCallbackMethod_SelectionManagerObserver<WithCallbackMethod_IsReady<WithCallbackMethod_Notify<WithCallbackMethod_CommandModuleRunFunc<WithCallbackMethod_ObserverCallback<WithCallbackMethod_DbViewLoaded<WithCallbackMethod_Finish<WithCallbackMethod_OnTileBlended<WithCallbackMethod_OnNewStatistics<WithCallbackMethod_OnNewImage<WithCallbackMethod_OnOcioError<WithCallbackMethod_OnRenderFailure<WithCallbackMethod_NextChunk<WithCallbackMethod_Checked<WithCallbackMethod_ComboBoxChanged<WithCallbackMethod_ApiLog<WithCallbackMethod_OnMainWindowClose<WithCallbackMethod_MouseEvent<WithCallbackMethod_DbViewClosing<WithCallbackMethod_NumericBoxChanged<WithCallbackMethod_Callback1<WithCallbackMethod_Callback2<WithCallbackMethod_ApiProjectManager_AssetMissing<WithCallbackMethod_Update<WithCallbackMethod_AsyncUpdate<WithCallbackMethod_AssetMissing<WithCallbackMethod_NumRows<WithCallbackMethod_Content<WithCallbackMethod_ButtonClicked<WithCallbackMethod_SelectionChanged<WithCallbackMethod_TextEditorChanged<WithCallbackMethod_OnWindowClose<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Start() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::octaneapi::StartRequest* /*request*/, ::octaneapi::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::octaneapi::StopRequest* /*request*/, ::octaneapi::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PerformBlocking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PerformBlocking() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PerformBlocking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PerformBlocking(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadRenderStateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadRenderStateProject() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LoadRenderStateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadRenderStateProject(::grpc::ServerContext* /*context*/, const ::octaneapi::LoadRenderStateProjectRequest* /*request*/, ::octaneapi::LoadRenderStateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnDaemonUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnDaemonUpdate() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_OnDaemonUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnDaemonUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::DaemonUpdateRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnStatusUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnStatusUpdate() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_OnStatusUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStatusUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::StatusUpdateRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerFunc() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_TriggerFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::TriggerFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EvaluateFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EvaluateFunc() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_EvaluateFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EvaluateFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::EvaluateFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CleanupFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CleanupFunc() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CleanupFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CleanupFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DestroyFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DestroyFunc() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DestroyFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::DestroyFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ColorChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ColorChanged() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ColorChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ColorChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::ColorChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateFunc() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_CreateFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CreateFuncRequest* /*request*/, ::octaneapi::CreateFuncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InitFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InitFunc() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_InitFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::InitFuncRequest* /*request*/, ::octaneapi::InitFuncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChangeManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChangeManagerObserver() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ChangeManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ChangeManagerObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChangeManagerTimeObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChangeManagerTimeObserver() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_ChangeManagerTimeObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeManagerTimeObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ChangeManagerTimeObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProjectManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProjectManagerObserver() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_ProjectManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProjectManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SelectionManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SelectionManagerObserver() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_SelectionManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectionManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsReady() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_IsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsReady(::grpc::ServerContext* /*context*/, const ::octaneapi::IsReadyRequest* /*request*/, ::octaneapi::IsReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Notify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Notify() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_Notify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Notify(::grpc::ServerContext* /*context*/, const ::octaneapi::NotificationRequest* /*request*/, ::octaneapi::NotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CommandModuleRunFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CommandModuleRunFunc() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_CommandModuleRunFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommandModuleRunFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CommandModuleRunFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ObserverCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ObserverCallback() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_ObserverCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserverCallback(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DbViewLoaded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DbViewLoaded() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_DbViewLoaded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbViewLoaded(::grpc::ServerContext* /*context*/, const ::octaneapi::DbViewLoadedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Finish() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finish(::grpc::ServerContext* /*context*/, const ::octaneapi::FinishRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnTileBlended : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnTileBlended() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_OnTileBlended() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnTileBlended(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnNewStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnNewStatistics() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_OnNewStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnNewStatistics(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnNewImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnNewImage() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_OnNewImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnNewImage(::grpc::ServerContext* /*context*/, const ::octaneapi::OnNewImageRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnOcioError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnOcioError() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_OnOcioError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnOcioError(::grpc::ServerContext* /*context*/, const ::octaneapi::OnOcioErrorRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnRenderFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnRenderFailure() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_OnRenderFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnRenderFailure(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NextChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NextChunk() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_NextChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextChunk(::grpc::ServerContext* /*context*/, const ::octaneapi::NextChunkRequest* /*request*/, ::octaneapi::NextChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Checked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Checked() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_Checked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Checked(::grpc::ServerContext* /*context*/, const ::octaneapi::CheckedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ComboBoxChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ComboBoxChanged() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_ComboBoxChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComboBoxChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::ComboBoxChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ApiLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ApiLog() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_ApiLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApiLog(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnMainWindowClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnMainWindowClose() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_OnMainWindowClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnMainWindowClose(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MouseEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MouseEvent() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_MouseEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MouseEvent(::grpc::ServerContext* /*context*/, const ::octaneapi::MouseEventRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DbViewClosing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DbViewClosing() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_DbViewClosing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbViewClosing(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NumericBoxChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NumericBoxChanged() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_NumericBoxChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NumericBoxChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::NumericBoxChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Callback1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Callback1() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_Callback1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Callback1(::grpc::ServerContext* /*context*/, const ::octaneapi::Callback1Request* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Callback2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Callback2() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_Callback2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Callback2(::grpc::ServerContext* /*context*/, const ::octaneapi::Callback2Request* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ApiProjectManager_AssetMissing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ApiProjectManager_AssetMissing() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_ApiProjectManager_AssetMissing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApiProjectManager_AssetMissing(::grpc::ServerContext* /*context*/, const ::octaneapi::AssetMissingRequest* /*request*/, ::octaneapi::AssetMissingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(39);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::octaneapi::UpdateRequest* /*request*/, ::octaneapi::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AsyncUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AsyncUpdate() {
      ::grpc::Service::MarkMethodGeneric(40);
    }
    ~WithGenericMethod_AsyncUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AsyncUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::AsyncUpdateRequest* /*request*/, ::octaneapi::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AssetMissing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AssetMissing() {
      ::grpc::Service::MarkMethodGeneric(41);
    }
    ~WithGenericMethod_AssetMissing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssetMissing(::grpc::ServerContext* /*context*/, const ::octaneapi::AssetMissingRequest* /*request*/, ::octaneapi::AssetMissingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NumRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NumRows() {
      ::grpc::Service::MarkMethodGeneric(42);
    }
    ~WithGenericMethod_NumRows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NumRows(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::NumRowsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Content : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Content() {
      ::grpc::Service::MarkMethodGeneric(43);
    }
    ~WithGenericMethod_Content() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Content(::grpc::ServerContext* /*context*/, const ::octaneapi::ContentRequest* /*request*/, ::octaneapi::ContentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ButtonClicked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ButtonClicked() {
      ::grpc::Service::MarkMethodGeneric(44);
    }
    ~WithGenericMethod_ButtonClicked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ButtonClicked(::grpc::ServerContext* /*context*/, const ::octaneapi::ButtonClickedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SelectionChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SelectionChanged() {
      ::grpc::Service::MarkMethodGeneric(45);
    }
    ~WithGenericMethod_SelectionChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectionChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::SelectionChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TextEditorChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TextEditorChanged() {
      ::grpc::Service::MarkMethodGeneric(46);
    }
    ~WithGenericMethod_TextEditorChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextEditorChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::TextEditorChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnWindowClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnWindowClose() {
      ::grpc::Service::MarkMethodGeneric(47);
    }
    ~WithGenericMethod_OnWindowClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnWindowClose(::grpc::ServerContext* /*context*/, const ::octaneapi::OnWindowCloseRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Start() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::octaneapi::StartRequest* /*request*/, ::octaneapi::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::octaneapi::StopRequest* /*request*/, ::octaneapi::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PerformBlocking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PerformBlocking() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PerformBlocking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PerformBlocking(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPerformBlocking(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadRenderStateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadRenderStateProject() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LoadRenderStateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadRenderStateProject(::grpc::ServerContext* /*context*/, const ::octaneapi::LoadRenderStateProjectRequest* /*request*/, ::octaneapi::LoadRenderStateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadRenderStateProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnDaemonUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnDaemonUpdate() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_OnDaemonUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnDaemonUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::DaemonUpdateRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnDaemonUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnStatusUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnStatusUpdate() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_OnStatusUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStatusUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::StatusUpdateRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnStatusUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerFunc() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_TriggerFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::TriggerFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerFunc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EvaluateFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EvaluateFunc() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_EvaluateFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EvaluateFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::EvaluateFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEvaluateFunc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CleanupFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CleanupFunc() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CleanupFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CleanupFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCleanupFunc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DestroyFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DestroyFunc() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DestroyFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::DestroyFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyFunc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ColorChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ColorChanged() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ColorChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ColorChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::ColorChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestColorChanged(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateFunc() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_CreateFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CreateFuncRequest* /*request*/, ::octaneapi::CreateFuncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFunc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InitFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InitFunc() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_InitFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::InitFuncRequest* /*request*/, ::octaneapi::InitFuncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitFunc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChangeManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChangeManagerObserver() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ChangeManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ChangeManagerObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeManagerObserver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChangeManagerTimeObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChangeManagerTimeObserver() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_ChangeManagerTimeObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeManagerTimeObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ChangeManagerTimeObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeManagerTimeObserver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProjectManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProjectManagerObserver() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_ProjectManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProjectManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProjectManagerObserver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SelectionManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SelectionManagerObserver() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_SelectionManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectionManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectionManagerObserver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsReady() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_IsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsReady(::grpc::ServerContext* /*context*/, const ::octaneapi::IsReadyRequest* /*request*/, ::octaneapi::IsReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsReady(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Notify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Notify() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_Notify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Notify(::grpc::ServerContext* /*context*/, const ::octaneapi::NotificationRequest* /*request*/, ::octaneapi::NotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotify(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CommandModuleRunFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CommandModuleRunFunc() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_CommandModuleRunFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommandModuleRunFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CommandModuleRunFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommandModuleRunFunc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ObserverCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ObserverCallback() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_ObserverCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserverCallback(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestObserverCallback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DbViewLoaded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DbViewLoaded() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_DbViewLoaded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbViewLoaded(::grpc::ServerContext* /*context*/, const ::octaneapi::DbViewLoadedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDbViewLoaded(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Finish() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finish(::grpc::ServerContext* /*context*/, const ::octaneapi::FinishRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinish(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnTileBlended : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnTileBlended() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_OnTileBlended() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnTileBlended(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnTileBlended(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnNewStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnNewStatistics() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_OnNewStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnNewStatistics(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnNewStatistics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnNewImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnNewImage() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_OnNewImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnNewImage(::grpc::ServerContext* /*context*/, const ::octaneapi::OnNewImageRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnNewImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnOcioError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnOcioError() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_OnOcioError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnOcioError(::grpc::ServerContext* /*context*/, const ::octaneapi::OnOcioErrorRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnOcioError(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnRenderFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnRenderFailure() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_OnRenderFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnRenderFailure(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnRenderFailure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NextChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NextChunk() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_NextChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextChunk(::grpc::ServerContext* /*context*/, const ::octaneapi::NextChunkRequest* /*request*/, ::octaneapi::NextChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNextChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Checked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Checked() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_Checked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Checked(::grpc::ServerContext* /*context*/, const ::octaneapi::CheckedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChecked(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ComboBoxChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ComboBoxChanged() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_ComboBoxChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComboBoxChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::ComboBoxChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComboBoxChanged(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ApiLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ApiLog() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_ApiLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApiLog(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApiLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnMainWindowClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnMainWindowClose() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_OnMainWindowClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnMainWindowClose(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnMainWindowClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MouseEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MouseEvent() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_MouseEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MouseEvent(::grpc::ServerContext* /*context*/, const ::octaneapi::MouseEventRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMouseEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DbViewClosing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DbViewClosing() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_DbViewClosing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbViewClosing(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDbViewClosing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NumericBoxChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NumericBoxChanged() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_NumericBoxChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NumericBoxChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::NumericBoxChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNumericBoxChanged(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Callback1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Callback1() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_Callback1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Callback1(::grpc::ServerContext* /*context*/, const ::octaneapi::Callback1Request* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallback1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Callback2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Callback2() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_Callback2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Callback2(::grpc::ServerContext* /*context*/, const ::octaneapi::Callback2Request* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallback2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ApiProjectManager_AssetMissing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ApiProjectManager_AssetMissing() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_ApiProjectManager_AssetMissing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApiProjectManager_AssetMissing(::grpc::ServerContext* /*context*/, const ::octaneapi::AssetMissingRequest* /*request*/, ::octaneapi::AssetMissingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApiProjectManager_AssetMissing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(39);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::octaneapi::UpdateRequest* /*request*/, ::octaneapi::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AsyncUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AsyncUpdate() {
      ::grpc::Service::MarkMethodRaw(40);
    }
    ~WithRawMethod_AsyncUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AsyncUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::AsyncUpdateRequest* /*request*/, ::octaneapi::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAsyncUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AssetMissing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AssetMissing() {
      ::grpc::Service::MarkMethodRaw(41);
    }
    ~WithRawMethod_AssetMissing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssetMissing(::grpc::ServerContext* /*context*/, const ::octaneapi::AssetMissingRequest* /*request*/, ::octaneapi::AssetMissingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAssetMissing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NumRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NumRows() {
      ::grpc::Service::MarkMethodRaw(42);
    }
    ~WithRawMethod_NumRows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NumRows(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::NumRowsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNumRows(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Content : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Content() {
      ::grpc::Service::MarkMethodRaw(43);
    }
    ~WithRawMethod_Content() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Content(::grpc::ServerContext* /*context*/, const ::octaneapi::ContentRequest* /*request*/, ::octaneapi::ContentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestContent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ButtonClicked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ButtonClicked() {
      ::grpc::Service::MarkMethodRaw(44);
    }
    ~WithRawMethod_ButtonClicked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ButtonClicked(::grpc::ServerContext* /*context*/, const ::octaneapi::ButtonClickedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestButtonClicked(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SelectionChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SelectionChanged() {
      ::grpc::Service::MarkMethodRaw(45);
    }
    ~WithRawMethod_SelectionChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectionChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::SelectionChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectionChanged(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TextEditorChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TextEditorChanged() {
      ::grpc::Service::MarkMethodRaw(46);
    }
    ~WithRawMethod_TextEditorChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextEditorChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::TextEditorChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTextEditorChanged(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnWindowClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnWindowClose() {
      ::grpc::Service::MarkMethodRaw(47);
    }
    ~WithRawMethod_OnWindowClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnWindowClose(::grpc::ServerContext* /*context*/, const ::octaneapi::OnWindowCloseRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnWindowClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Start() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Start(context, request, response); }));
    }
    ~WithRawCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::octaneapi::StartRequest* /*request*/, ::octaneapi::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Stop() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Stop(context, request, response); }));
    }
    ~WithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::octaneapi::StopRequest* /*request*/, ::octaneapi::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PerformBlocking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PerformBlocking() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PerformBlocking(context, request, response); }));
    }
    ~WithRawCallbackMethod_PerformBlocking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PerformBlocking(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PerformBlocking(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadRenderStateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadRenderStateProject() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadRenderStateProject(context, request, response); }));
    }
    ~WithRawCallbackMethod_LoadRenderStateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadRenderStateProject(::grpc::ServerContext* /*context*/, const ::octaneapi::LoadRenderStateProjectRequest* /*request*/, ::octaneapi::LoadRenderStateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadRenderStateProject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OnDaemonUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OnDaemonUpdate() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OnDaemonUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_OnDaemonUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnDaemonUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::DaemonUpdateRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnDaemonUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OnStatusUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OnStatusUpdate() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OnStatusUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_OnStatusUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStatusUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::StatusUpdateRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnStatusUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerFunc() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerFunc(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::TriggerFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerFunc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EvaluateFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EvaluateFunc() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EvaluateFunc(context, request, response); }));
    }
    ~WithRawCallbackMethod_EvaluateFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EvaluateFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::EvaluateFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EvaluateFunc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CleanupFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CleanupFunc() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CleanupFunc(context, request, response); }));
    }
    ~WithRawCallbackMethod_CleanupFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CleanupFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CleanupFunc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DestroyFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DestroyFunc() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DestroyFunc(context, request, response); }));
    }
    ~WithRawCallbackMethod_DestroyFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::DestroyFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DestroyFunc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ColorChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ColorChanged() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ColorChanged(context, request, response); }));
    }
    ~WithRawCallbackMethod_ColorChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ColorChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::ColorChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ColorChanged(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateFunc() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateFunc(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CreateFuncRequest* /*request*/, ::octaneapi::CreateFuncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFunc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InitFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InitFunc() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InitFunc(context, request, response); }));
    }
    ~WithRawCallbackMethod_InitFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::InitFuncRequest* /*request*/, ::octaneapi::InitFuncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitFunc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ChangeManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ChangeManagerObserver() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ChangeManagerObserver(context, request, response); }));
    }
    ~WithRawCallbackMethod_ChangeManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ChangeManagerObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChangeManagerObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ChangeManagerTimeObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ChangeManagerTimeObserver() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ChangeManagerTimeObserver(context, request, response); }));
    }
    ~WithRawCallbackMethod_ChangeManagerTimeObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeManagerTimeObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ChangeManagerTimeObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChangeManagerTimeObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProjectManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProjectManagerObserver() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProjectManagerObserver(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProjectManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProjectManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProjectManagerObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SelectionManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SelectionManagerObserver() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SelectionManagerObserver(context, request, response); }));
    }
    ~WithRawCallbackMethod_SelectionManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectionManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SelectionManagerObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsReady() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsReady(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsReady(::grpc::ServerContext* /*context*/, const ::octaneapi::IsReadyRequest* /*request*/, ::octaneapi::IsReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsReady(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Notify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Notify() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Notify(context, request, response); }));
    }
    ~WithRawCallbackMethod_Notify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Notify(::grpc::ServerContext* /*context*/, const ::octaneapi::NotificationRequest* /*request*/, ::octaneapi::NotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Notify(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CommandModuleRunFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CommandModuleRunFunc() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CommandModuleRunFunc(context, request, response); }));
    }
    ~WithRawCallbackMethod_CommandModuleRunFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommandModuleRunFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CommandModuleRunFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CommandModuleRunFunc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ObserverCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ObserverCallback() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ObserverCallback(context, request, response); }));
    }
    ~WithRawCallbackMethod_ObserverCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ObserverCallback(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ObserverCallback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DbViewLoaded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DbViewLoaded() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DbViewLoaded(context, request, response); }));
    }
    ~WithRawCallbackMethod_DbViewLoaded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbViewLoaded(::grpc::ServerContext* /*context*/, const ::octaneapi::DbViewLoadedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DbViewLoaded(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Finish() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Finish(context, request, response); }));
    }
    ~WithRawCallbackMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finish(::grpc::ServerContext* /*context*/, const ::octaneapi::FinishRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Finish(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OnTileBlended : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OnTileBlended() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OnTileBlended(context, request, response); }));
    }
    ~WithRawCallbackMethod_OnTileBlended() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnTileBlended(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnTileBlended(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OnNewStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OnNewStatistics() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OnNewStatistics(context, request, response); }));
    }
    ~WithRawCallbackMethod_OnNewStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnNewStatistics(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnNewStatistics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OnNewImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OnNewImage() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OnNewImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_OnNewImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnNewImage(::grpc::ServerContext* /*context*/, const ::octaneapi::OnNewImageRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnNewImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OnOcioError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OnOcioError() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OnOcioError(context, request, response); }));
    }
    ~WithRawCallbackMethod_OnOcioError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnOcioError(::grpc::ServerContext* /*context*/, const ::octaneapi::OnOcioErrorRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnOcioError(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OnRenderFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OnRenderFailure() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OnRenderFailure(context, request, response); }));
    }
    ~WithRawCallbackMethod_OnRenderFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnRenderFailure(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnRenderFailure(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NextChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NextChunk() {
      ::grpc::Service::MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NextChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_NextChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextChunk(::grpc::ServerContext* /*context*/, const ::octaneapi::NextChunkRequest* /*request*/, ::octaneapi::NextChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NextChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Checked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Checked() {
      ::grpc::Service::MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Checked(context, request, response); }));
    }
    ~WithRawCallbackMethod_Checked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Checked(::grpc::ServerContext* /*context*/, const ::octaneapi::CheckedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Checked(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ComboBoxChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ComboBoxChanged() {
      ::grpc::Service::MarkMethodRawCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ComboBoxChanged(context, request, response); }));
    }
    ~WithRawCallbackMethod_ComboBoxChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComboBoxChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::ComboBoxChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ComboBoxChanged(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ApiLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ApiLog() {
      ::grpc::Service::MarkMethodRawCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ApiLog(context, request, response); }));
    }
    ~WithRawCallbackMethod_ApiLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApiLog(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApiLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OnMainWindowClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OnMainWindowClose() {
      ::grpc::Service::MarkMethodRawCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OnMainWindowClose(context, request, response); }));
    }
    ~WithRawCallbackMethod_OnMainWindowClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnMainWindowClose(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnMainWindowClose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MouseEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MouseEvent() {
      ::grpc::Service::MarkMethodRawCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MouseEvent(context, request, response); }));
    }
    ~WithRawCallbackMethod_MouseEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MouseEvent(::grpc::ServerContext* /*context*/, const ::octaneapi::MouseEventRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MouseEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DbViewClosing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DbViewClosing() {
      ::grpc::Service::MarkMethodRawCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DbViewClosing(context, request, response); }));
    }
    ~WithRawCallbackMethod_DbViewClosing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DbViewClosing(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DbViewClosing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NumericBoxChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NumericBoxChanged() {
      ::grpc::Service::MarkMethodRawCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NumericBoxChanged(context, request, response); }));
    }
    ~WithRawCallbackMethod_NumericBoxChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NumericBoxChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::NumericBoxChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NumericBoxChanged(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Callback1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Callback1() {
      ::grpc::Service::MarkMethodRawCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Callback1(context, request, response); }));
    }
    ~WithRawCallbackMethod_Callback1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Callback1(::grpc::ServerContext* /*context*/, const ::octaneapi::Callback1Request* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Callback1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Callback2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Callback2() {
      ::grpc::Service::MarkMethodRawCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Callback2(context, request, response); }));
    }
    ~WithRawCallbackMethod_Callback2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Callback2(::grpc::ServerContext* /*context*/, const ::octaneapi::Callback2Request* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Callback2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ApiProjectManager_AssetMissing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ApiProjectManager_AssetMissing() {
      ::grpc::Service::MarkMethodRawCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ApiProjectManager_AssetMissing(context, request, response); }));
    }
    ~WithRawCallbackMethod_ApiProjectManager_AssetMissing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApiProjectManager_AssetMissing(::grpc::ServerContext* /*context*/, const ::octaneapi::AssetMissingRequest* /*request*/, ::octaneapi::AssetMissingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApiProjectManager_AssetMissing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Update() {
      ::grpc::Service::MarkMethodRawCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Update(context, request, response); }));
    }
    ~WithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::octaneapi::UpdateRequest* /*request*/, ::octaneapi::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AsyncUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AsyncUpdate() {
      ::grpc::Service::MarkMethodRawCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AsyncUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_AsyncUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AsyncUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::AsyncUpdateRequest* /*request*/, ::octaneapi::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AsyncUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AssetMissing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AssetMissing() {
      ::grpc::Service::MarkMethodRawCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AssetMissing(context, request, response); }));
    }
    ~WithRawCallbackMethod_AssetMissing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssetMissing(::grpc::ServerContext* /*context*/, const ::octaneapi::AssetMissingRequest* /*request*/, ::octaneapi::AssetMissingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AssetMissing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NumRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NumRows() {
      ::grpc::Service::MarkMethodRawCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NumRows(context, request, response); }));
    }
    ~WithRawCallbackMethod_NumRows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NumRows(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::NumRowsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NumRows(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Content : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Content() {
      ::grpc::Service::MarkMethodRawCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Content(context, request, response); }));
    }
    ~WithRawCallbackMethod_Content() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Content(::grpc::ServerContext* /*context*/, const ::octaneapi::ContentRequest* /*request*/, ::octaneapi::ContentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Content(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ButtonClicked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ButtonClicked() {
      ::grpc::Service::MarkMethodRawCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ButtonClicked(context, request, response); }));
    }
    ~WithRawCallbackMethod_ButtonClicked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ButtonClicked(::grpc::ServerContext* /*context*/, const ::octaneapi::ButtonClickedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ButtonClicked(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SelectionChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SelectionChanged() {
      ::grpc::Service::MarkMethodRawCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SelectionChanged(context, request, response); }));
    }
    ~WithRawCallbackMethod_SelectionChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectionChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::SelectionChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SelectionChanged(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TextEditorChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TextEditorChanged() {
      ::grpc::Service::MarkMethodRawCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TextEditorChanged(context, request, response); }));
    }
    ~WithRawCallbackMethod_TextEditorChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextEditorChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::TextEditorChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TextEditorChanged(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OnWindowClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OnWindowClose() {
      ::grpc::Service::MarkMethodRawCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OnWindowClose(context, request, response); }));
    }
    ~WithRawCallbackMethod_OnWindowClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnWindowClose(::grpc::ServerContext* /*context*/, const ::octaneapi::OnWindowCloseRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OnWindowClose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Start() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::StartRequest, ::octaneapi::StartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::StartRequest, ::octaneapi::StartResponse>* streamer) {
                       return this->StreamedStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::octaneapi::StartRequest* /*request*/, ::octaneapi::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::StartRequest,::octaneapi::StartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::StopRequest, ::octaneapi::StopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::StopRequest, ::octaneapi::StopResponse>* streamer) {
                       return this->StreamedStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::octaneapi::StopRequest* /*request*/, ::octaneapi::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::StopRequest,::octaneapi::StopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PerformBlocking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PerformBlocking() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedPerformBlocking(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PerformBlocking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PerformBlocking(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPerformBlocking(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadRenderStateProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadRenderStateProject() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::LoadRenderStateProjectRequest, ::octaneapi::LoadRenderStateProjectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::LoadRenderStateProjectRequest, ::octaneapi::LoadRenderStateProjectResponse>* streamer) {
                       return this->StreamedLoadRenderStateProject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadRenderStateProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadRenderStateProject(::grpc::ServerContext* /*context*/, const ::octaneapi::LoadRenderStateProjectRequest* /*request*/, ::octaneapi::LoadRenderStateProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadRenderStateProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::LoadRenderStateProjectRequest,::octaneapi::LoadRenderStateProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnDaemonUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OnDaemonUpdate() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::DaemonUpdateRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::DaemonUpdateRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedOnDaemonUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OnDaemonUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnDaemonUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::DaemonUpdateRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnDaemonUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::DaemonUpdateRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnStatusUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OnStatusUpdate() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::StatusUpdateRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::StatusUpdateRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedOnStatusUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OnStatusUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnStatusUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::StatusUpdateRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnStatusUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::StatusUpdateRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerFunc() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::TriggerFuncRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::TriggerFuncRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedTriggerFunc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::TriggerFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerFunc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::TriggerFuncRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EvaluateFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EvaluateFunc() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::EvaluateFuncRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::EvaluateFuncRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedEvaluateFunc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EvaluateFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EvaluateFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::EvaluateFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEvaluateFunc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::EvaluateFuncRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CleanupFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CleanupFunc() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::CleanupFuncRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::CleanupFuncRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedCleanupFunc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CleanupFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CleanupFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CleanupFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCleanupFunc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::CleanupFuncRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DestroyFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DestroyFunc() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::DestroyFuncRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::DestroyFuncRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedDestroyFunc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DestroyFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DestroyFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::DestroyFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDestroyFunc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::DestroyFuncRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ColorChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ColorChanged() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ColorChangedRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ColorChangedRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedColorChanged(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ColorChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ColorChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::ColorChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedColorChanged(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ColorChangedRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateFunc() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::CreateFuncRequest, ::octaneapi::CreateFuncResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::CreateFuncRequest, ::octaneapi::CreateFuncResponse>* streamer) {
                       return this->StreamedCreateFunc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CreateFuncRequest* /*request*/, ::octaneapi::CreateFuncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateFunc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::CreateFuncRequest,::octaneapi::CreateFuncResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InitFunc() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::InitFuncRequest, ::octaneapi::InitFuncResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::InitFuncRequest, ::octaneapi::InitFuncResponse>* streamer) {
                       return this->StreamedInitFunc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InitFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::InitFuncRequest* /*request*/, ::octaneapi::InitFuncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitFunc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::InitFuncRequest,::octaneapi::InitFuncResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChangeManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ChangeManagerObserver() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ChangeManagerObserverRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ChangeManagerObserverRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedChangeManagerObserver(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ChangeManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChangeManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ChangeManagerObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChangeManagerObserver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ChangeManagerObserverRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChangeManagerTimeObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ChangeManagerTimeObserver() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ChangeManagerTimeObserverRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ChangeManagerTimeObserverRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedChangeManagerTimeObserver(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ChangeManagerTimeObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChangeManagerTimeObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ChangeManagerTimeObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChangeManagerTimeObserver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ChangeManagerTimeObserverRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProjectManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProjectManagerObserver() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedProjectManagerObserver(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProjectManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProjectManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProjectManagerObserver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ObserverRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SelectionManagerObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SelectionManagerObserver() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedSelectionManagerObserver(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SelectionManagerObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SelectionManagerObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSelectionManagerObserver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ObserverRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsReady() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::IsReadyRequest, ::octaneapi::IsReadyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::IsReadyRequest, ::octaneapi::IsReadyResponse>* streamer) {
                       return this->StreamedIsReady(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsReady(::grpc::ServerContext* /*context*/, const ::octaneapi::IsReadyRequest* /*request*/, ::octaneapi::IsReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsReady(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::IsReadyRequest,::octaneapi::IsReadyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Notify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Notify() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::NotificationRequest, ::octaneapi::NotificationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::NotificationRequest, ::octaneapi::NotificationResponse>* streamer) {
                       return this->StreamedNotify(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Notify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Notify(::grpc::ServerContext* /*context*/, const ::octaneapi::NotificationRequest* /*request*/, ::octaneapi::NotificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNotify(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::NotificationRequest,::octaneapi::NotificationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CommandModuleRunFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CommandModuleRunFunc() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::CommandModuleRunFuncRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::CommandModuleRunFuncRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedCommandModuleRunFunc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CommandModuleRunFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CommandModuleRunFunc(::grpc::ServerContext* /*context*/, const ::octaneapi::CommandModuleRunFuncRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommandModuleRunFunc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::CommandModuleRunFuncRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ObserverCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ObserverCallback() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ObserverCallbackRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ObserverCallbackRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedObserverCallback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ObserverCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ObserverCallback(::grpc::ServerContext* /*context*/, const ::octaneapi::ObserverCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedObserverCallback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ObserverCallbackRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DbViewLoaded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DbViewLoaded() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::DbViewLoadedRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::DbViewLoadedRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedDbViewLoaded(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DbViewLoaded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DbViewLoaded(::grpc::ServerContext* /*context*/, const ::octaneapi::DbViewLoadedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDbViewLoaded(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::DbViewLoadedRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Finish() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::FinishRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::FinishRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedFinish(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Finish(::grpc::ServerContext* /*context*/, const ::octaneapi::FinishRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFinish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::FinishRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnTileBlended : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OnTileBlended() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedOnTileBlended(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OnTileBlended() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnTileBlended(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnTileBlended(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::BasicCallbackRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnNewStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OnNewStatistics() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedOnNewStatistics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OnNewStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnNewStatistics(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnNewStatistics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::BasicCallbackRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnNewImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OnNewImage() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::OnNewImageRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::OnNewImageRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedOnNewImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OnNewImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnNewImage(::grpc::ServerContext* /*context*/, const ::octaneapi::OnNewImageRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnNewImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::OnNewImageRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnOcioError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OnOcioError() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::OnOcioErrorRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::OnOcioErrorRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedOnOcioError(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OnOcioError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnOcioError(::grpc::ServerContext* /*context*/, const ::octaneapi::OnOcioErrorRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnOcioError(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::OnOcioErrorRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnRenderFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OnRenderFailure() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedOnRenderFailure(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OnRenderFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnRenderFailure(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnRenderFailure(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::BasicCallbackRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NextChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NextChunk() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::NextChunkRequest, ::octaneapi::NextChunkResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::NextChunkRequest, ::octaneapi::NextChunkResponse>* streamer) {
                       return this->StreamedNextChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NextChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NextChunk(::grpc::ServerContext* /*context*/, const ::octaneapi::NextChunkRequest* /*request*/, ::octaneapi::NextChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNextChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::NextChunkRequest,::octaneapi::NextChunkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Checked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Checked() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::CheckedRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::CheckedRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedChecked(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Checked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Checked(::grpc::ServerContext* /*context*/, const ::octaneapi::CheckedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChecked(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::CheckedRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ComboBoxChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ComboBoxChanged() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ComboBoxChangedRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ComboBoxChangedRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedComboBoxChanged(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ComboBoxChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ComboBoxChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::ComboBoxChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedComboBoxChanged(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ComboBoxChangedRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ApiLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ApiLog() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiLogRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiLogRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedApiLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ApiLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ApiLog(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedApiLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiLogRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnMainWindowClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OnMainWindowClose() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedOnMainWindowClose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OnMainWindowClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnMainWindowClose(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnMainWindowClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::BasicCallbackRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MouseEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MouseEvent() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::MouseEventRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::MouseEventRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedMouseEvent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MouseEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MouseEvent(::grpc::ServerContext* /*context*/, const ::octaneapi::MouseEventRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMouseEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::MouseEventRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DbViewClosing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DbViewClosing() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedDbViewClosing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DbViewClosing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DbViewClosing(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDbViewClosing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::BasicCallbackRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NumericBoxChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NumericBoxChanged() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::NumericBoxChangedRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::NumericBoxChangedRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedNumericBoxChanged(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NumericBoxChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NumericBoxChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::NumericBoxChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNumericBoxChanged(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::NumericBoxChangedRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Callback1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Callback1() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::Callback1Request, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::Callback1Request, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedCallback1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Callback1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Callback1(::grpc::ServerContext* /*context*/, const ::octaneapi::Callback1Request* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCallback1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::Callback1Request,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Callback2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Callback2() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::Callback2Request, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::Callback2Request, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedCallback2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Callback2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Callback2(::grpc::ServerContext* /*context*/, const ::octaneapi::Callback2Request* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCallback2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::Callback2Request,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ApiProjectManager_AssetMissing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ApiProjectManager_AssetMissing() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse>* streamer) {
                       return this->StreamedApiProjectManager_AssetMissing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ApiProjectManager_AssetMissing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ApiProjectManager_AssetMissing(::grpc::ServerContext* /*context*/, const ::octaneapi::AssetMissingRequest* /*request*/, ::octaneapi::AssetMissingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedApiProjectManager_AssetMissing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::AssetMissingRequest,::octaneapi::AssetMissingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(39,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::UpdateRequest, ::octaneapi::UpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::UpdateRequest, ::octaneapi::UpdateResponse>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::octaneapi::UpdateRequest* /*request*/, ::octaneapi::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::UpdateRequest,::octaneapi::UpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AsyncUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AsyncUpdate() {
      ::grpc::Service::MarkMethodStreamed(40,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::AsyncUpdateRequest, ::octaneapi::UpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::AsyncUpdateRequest, ::octaneapi::UpdateResponse>* streamer) {
                       return this->StreamedAsyncUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AsyncUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AsyncUpdate(::grpc::ServerContext* /*context*/, const ::octaneapi::AsyncUpdateRequest* /*request*/, ::octaneapi::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAsyncUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::AsyncUpdateRequest,::octaneapi::UpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AssetMissing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AssetMissing() {
      ::grpc::Service::MarkMethodStreamed(41,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse>* streamer) {
                       return this->StreamedAssetMissing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AssetMissing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AssetMissing(::grpc::ServerContext* /*context*/, const ::octaneapi::AssetMissingRequest* /*request*/, ::octaneapi::AssetMissingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAssetMissing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::AssetMissingRequest,::octaneapi::AssetMissingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NumRows : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NumRows() {
      ::grpc::Service::MarkMethodStreamed(42,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::BasicCallbackRequest, ::octaneapi::NumRowsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::BasicCallbackRequest, ::octaneapi::NumRowsResponse>* streamer) {
                       return this->StreamedNumRows(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NumRows() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NumRows(::grpc::ServerContext* /*context*/, const ::octaneapi::BasicCallbackRequest* /*request*/, ::octaneapi::NumRowsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNumRows(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::BasicCallbackRequest,::octaneapi::NumRowsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Content : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Content() {
      ::grpc::Service::MarkMethodStreamed(43,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ContentRequest, ::octaneapi::ContentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ContentRequest, ::octaneapi::ContentResponse>* streamer) {
                       return this->StreamedContent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Content() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Content(::grpc::ServerContext* /*context*/, const ::octaneapi::ContentRequest* /*request*/, ::octaneapi::ContentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedContent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ContentRequest,::octaneapi::ContentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ButtonClicked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ButtonClicked() {
      ::grpc::Service::MarkMethodStreamed(44,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ButtonClickedRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ButtonClickedRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedButtonClicked(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ButtonClicked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ButtonClicked(::grpc::ServerContext* /*context*/, const ::octaneapi::ButtonClickedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedButtonClicked(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ButtonClickedRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SelectionChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SelectionChanged() {
      ::grpc::Service::MarkMethodStreamed(45,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::SelectionChangedRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::SelectionChangedRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedSelectionChanged(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SelectionChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SelectionChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::SelectionChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSelectionChanged(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::SelectionChangedRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TextEditorChanged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TextEditorChanged() {
      ::grpc::Service::MarkMethodStreamed(46,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::TextEditorChangedRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::TextEditorChangedRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedTextEditorChanged(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TextEditorChanged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TextEditorChanged(::grpc::ServerContext* /*context*/, const ::octaneapi::TextEditorChangedRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTextEditorChanged(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::TextEditorChangedRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnWindowClose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OnWindowClose() {
      ::grpc::Service::MarkMethodStreamed(47,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::OnWindowCloseRequest, ::octaneapi::CallbackAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::OnWindowCloseRequest, ::octaneapi::CallbackAck>* streamer) {
                       return this->StreamedOnWindowClose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OnWindowClose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnWindowClose(::grpc::ServerContext* /*context*/, const ::octaneapi::OnWindowCloseRequest* /*request*/, ::octaneapi::CallbackAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnWindowClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::OnWindowCloseRequest,::octaneapi::CallbackAck>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_PerformBlocking<WithStreamedUnaryMethod_LoadRenderStateProject<WithStreamedUnaryMethod_OnDaemonUpdate<WithStreamedUnaryMethod_OnStatusUpdate<WithStreamedUnaryMethod_TriggerFunc<WithStreamedUnaryMethod_EvaluateFunc<WithStreamedUnaryMethod_CleanupFunc<WithStreamedUnaryMethod_DestroyFunc<WithStreamedUnaryMethod_ColorChanged<WithStreamedUnaryMethod_CreateFunc<WithStreamedUnaryMethod_InitFunc<WithStreamedUnaryMethod_ChangeManagerObserver<WithStreamedUnaryMethod_ChangeManagerTimeObserver<WithStreamedUnaryMethod_ProjectManagerObserver<WithStreamedUnaryMethod_SelectionManagerObserver<WithStreamedUnaryMethod_IsReady<WithStreamedUnaryMethod_Notify<WithStreamedUnaryMethod_CommandModuleRunFunc<WithStreamedUnaryMethod_ObserverCallback<WithStreamedUnaryMethod_DbViewLoaded<WithStreamedUnaryMethod_Finish<WithStreamedUnaryMethod_OnTileBlended<WithStreamedUnaryMethod_OnNewStatistics<WithStreamedUnaryMethod_OnNewImage<WithStreamedUnaryMethod_OnOcioError<WithStreamedUnaryMethod_OnRenderFailure<WithStreamedUnaryMethod_NextChunk<WithStreamedUnaryMethod_Checked<WithStreamedUnaryMethod_ComboBoxChanged<WithStreamedUnaryMethod_ApiLog<WithStreamedUnaryMethod_OnMainWindowClose<WithStreamedUnaryMethod_MouseEvent<WithStreamedUnaryMethod_DbViewClosing<WithStreamedUnaryMethod_NumericBoxChanged<WithStreamedUnaryMethod_Callback1<WithStreamedUnaryMethod_Callback2<WithStreamedUnaryMethod_ApiProjectManager_AssetMissing<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_AsyncUpdate<WithStreamedUnaryMethod_AssetMissing<WithStreamedUnaryMethod_NumRows<WithStreamedUnaryMethod_Content<WithStreamedUnaryMethod_ButtonClicked<WithStreamedUnaryMethod_SelectionChanged<WithStreamedUnaryMethod_TextEditorChanged<WithStreamedUnaryMethod_OnWindowClose<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_PerformBlocking<WithStreamedUnaryMethod_LoadRenderStateProject<WithStreamedUnaryMethod_OnDaemonUpdate<WithStreamedUnaryMethod_OnStatusUpdate<WithStreamedUnaryMethod_TriggerFunc<WithStreamedUnaryMethod_EvaluateFunc<WithStreamedUnaryMethod_CleanupFunc<WithStreamedUnaryMethod_DestroyFunc<WithStreamedUnaryMethod_ColorChanged<WithStreamedUnaryMethod_CreateFunc<WithStreamedUnaryMethod_InitFunc<WithStreamedUnaryMethod_ChangeManagerObserver<WithStreamedUnaryMethod_ChangeManagerTimeObserver<WithStreamedUnaryMethod_ProjectManagerObserver<WithStreamedUnaryMethod_SelectionManagerObserver<WithStreamedUnaryMethod_IsReady<WithStreamedUnaryMethod_Notify<WithStreamedUnaryMethod_CommandModuleRunFunc<WithStreamedUnaryMethod_ObserverCallback<WithStreamedUnaryMethod_DbViewLoaded<WithStreamedUnaryMethod_Finish<WithStreamedUnaryMethod_OnTileBlended<WithStreamedUnaryMethod_OnNewStatistics<WithStreamedUnaryMethod_OnNewImage<WithStreamedUnaryMethod_OnOcioError<WithStreamedUnaryMethod_OnRenderFailure<WithStreamedUnaryMethod_NextChunk<WithStreamedUnaryMethod_Checked<WithStreamedUnaryMethod_ComboBoxChanged<WithStreamedUnaryMethod_ApiLog<WithStreamedUnaryMethod_OnMainWindowClose<WithStreamedUnaryMethod_MouseEvent<WithStreamedUnaryMethod_DbViewClosing<WithStreamedUnaryMethod_NumericBoxChanged<WithStreamedUnaryMethod_Callback1<WithStreamedUnaryMethod_Callback2<WithStreamedUnaryMethod_ApiProjectManager_AssetMissing<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_AsyncUpdate<WithStreamedUnaryMethod_AssetMissing<WithStreamedUnaryMethod_NumRows<WithStreamedUnaryMethod_Content<WithStreamedUnaryMethod_ButtonClicked<WithStreamedUnaryMethod_SelectionChanged<WithStreamedUnaryMethod_TextEditorChanged<WithStreamedUnaryMethod_OnWindowClose<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

class StreamCallbackService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.StreamCallbackService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::octaneapi::StreamCallbackRequest>> callbackChannel(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::octaneapi::StreamCallbackRequest>>(callbackChannelRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::octaneapi::StreamCallbackRequest>> AsynccallbackChannel(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::octaneapi::StreamCallbackRequest>>(AsynccallbackChannelRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::octaneapi::StreamCallbackRequest>> PrepareAsynccallbackChannel(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::octaneapi::StreamCallbackRequest>>(PrepareAsynccallbackChannelRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void callbackChannel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::octaneapi::StreamCallbackRequest>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::octaneapi::StreamCallbackRequest>* callbackChannelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::octaneapi::StreamCallbackRequest>* AsynccallbackChannelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::octaneapi::StreamCallbackRequest>* PrepareAsynccallbackChannelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::octaneapi::StreamCallbackRequest>> callbackChannel(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::octaneapi::StreamCallbackRequest>>(callbackChannelRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::octaneapi::StreamCallbackRequest>> AsynccallbackChannel(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::octaneapi::StreamCallbackRequest>>(AsynccallbackChannelRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::octaneapi::StreamCallbackRequest>> PrepareAsynccallbackChannel(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::octaneapi::StreamCallbackRequest>>(PrepareAsynccallbackChannelRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void callbackChannel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::octaneapi::StreamCallbackRequest>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::octaneapi::StreamCallbackRequest>* callbackChannelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) override;
    ::grpc::ClientAsyncReader< ::octaneapi::StreamCallbackRequest>* AsynccallbackChannelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::octaneapi::StreamCallbackRequest>* PrepareAsynccallbackChannelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_callbackChannel_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status callbackChannel(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::octaneapi::StreamCallbackRequest>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_callbackChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_callbackChannel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_callbackChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status callbackChannel(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::octaneapi::StreamCallbackRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcallbackChannel(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncWriter< ::octaneapi::StreamCallbackRequest>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_callbackChannel<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_callbackChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_callbackChannel() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::google::protobuf::Empty, ::octaneapi::StreamCallbackRequest>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request) { return this->callbackChannel(context, request); }));
    }
    ~WithCallbackMethod_callbackChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status callbackChannel(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::octaneapi::StreamCallbackRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::octaneapi::StreamCallbackRequest>* callbackChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_callbackChannel<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_callbackChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_callbackChannel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_callbackChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status callbackChannel(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::octaneapi::StreamCallbackRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_callbackChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_callbackChannel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_callbackChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status callbackChannel(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::octaneapi::StreamCallbackRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcallbackChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_callbackChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_callbackChannel() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->callbackChannel(context, request); }));
    }
    ~WithRawCallbackMethod_callbackChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status callbackChannel(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::octaneapi::StreamCallbackRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* callbackChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_callbackChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_callbackChannel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::google::protobuf::Empty, ::octaneapi::StreamCallbackRequest>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::google::protobuf::Empty, ::octaneapi::StreamCallbackRequest>* streamer) {
                       return this->StreamedcallbackChannel(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_callbackChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status callbackChannel(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::octaneapi::StreamCallbackRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedcallbackChannel(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::protobuf::Empty,::octaneapi::StreamCallbackRequest>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_callbackChannel<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_callbackChannel<Service > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_callback_2eproto__INCLUDED
