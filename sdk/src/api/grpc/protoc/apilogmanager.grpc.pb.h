// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apilogmanager.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apilogmanager_2eproto__INCLUDED
#define GRPC_apilogmanager_2eproto__INCLUDED

#include "apilogmanager.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiLogManager' from 'apilogmanager.h'
class ApiLogManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiLogManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Registers a callback that gets called every time there is a log message
    virtual ::grpc::Status registerLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest& request, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>> AsyncregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>>(AsyncregisterLogCallbackProcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>> PrepareAsyncregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>>(PrepareAsyncregisterLogCallbackProcRaw(context, request, cq));
    }
    // / Removes a previously registered log callback
    virtual ::grpc::Status unregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest& request, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>> AsyncunregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>>(AsyncunregisterLogCallbackProcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>> PrepareAsyncunregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>>(PrepareAsyncunregisterLogCallbackProcRaw(context, request, cq));
    }
    // / Opens the Octane log into a separate window
    virtual ::grpc::Status openOctaneLogWindow(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncopenOctaneLogWindow(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncopenOctaneLogWindowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncopenOctaneLogWindow(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncopenOctaneLogWindowRaw(context, request, cq));
    }
    // / Writes the specified text to the Octane log
    virtual ::grpc::Status log(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asynclog(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsynclogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsynclog(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsynclogRaw(context, request, cq));
    }
    // / Writes the specified text to the Octane log
    virtual ::grpc::Status logError(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsynclogError(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsynclogErrorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsynclogError(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsynclogErrorRaw(context, request, cq));
    }
    // / Writes the specified text to the Octane log
    virtual ::grpc::Status logFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsynclogFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsynclogFmtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsynclogFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsynclogFmtRaw(context, request, cq));
    }
    // / Writes the specified text to the Octane log
    virtual ::grpc::Status logErrorFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsynclogErrorFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsynclogErrorFmtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsynclogErrorFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsynclogErrorFmtRaw(context, request, cq));
    }
    // / Returns TRUE if a flag with the passed in name was registered
    virtual ::grpc::Status isFlagRegistered(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest& request, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>> AsyncisFlagRegistered(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>>(AsyncisFlagRegisteredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>> PrepareAsyncisFlagRegistered(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>>(PrepareAsyncisFlagRegisteredRaw(context, request, cq));
    }
    // / Sets a log flag to the specified value
    virtual ::grpc::Status setFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest& request, ::octaneapi::ApiLogManager_setFlagResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_setFlagResponse>> AsyncsetFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_setFlagResponse>>(AsyncsetFlagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_setFlagResponse>> PrepareAsyncsetFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_setFlagResponse>>(PrepareAsyncsetFlagRaw(context, request, cq));
    }
    // / Registers a new log flag
    virtual ::grpc::Status __registerLogFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest& request, ::octaneapi::ApiLogManager___registerLogFlagResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager___registerLogFlagResponse>> Async__registerLogFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager___registerLogFlagResponse>>(Async__registerLogFlagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager___registerLogFlagResponse>> PrepareAsync__registerLogFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager___registerLogFlagResponse>>(PrepareAsync__registerLogFlagRaw(context, request, cq));
    }
    // / You should not call this function directly
    virtual ::grpc::Status __logFmtPrefix(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Async__logFmtPrefix(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(Async__logFmtPrefixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsync__logFmtPrefix(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsync__logFmtPrefixRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Registers a callback that gets called every time there is a log message
      virtual void registerLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registerLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Removes a previously registered log callback
      virtual void unregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Opens the Octane log into a separate window
      virtual void openOctaneLogWindow(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void openOctaneLogWindow(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Writes the specified text to the Octane log
      virtual void log(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void log(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Writes the specified text to the Octane log
      virtual void logError(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void logError(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Writes the specified text to the Octane log
      virtual void logFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void logFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Writes the specified text to the Octane log
      virtual void logErrorFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void logErrorFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if a flag with the passed in name was registered
      virtual void isFlagRegistered(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* request, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isFlagRegistered(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* request, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Sets a log flag to the specified value
      virtual void setFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest* request, ::octaneapi::ApiLogManager_setFlagResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest* request, ::octaneapi::ApiLogManager_setFlagResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Registers a new log flag
      virtual void __registerLogFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest* request, ::octaneapi::ApiLogManager___registerLogFlagResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void __registerLogFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest* request, ::octaneapi::ApiLogManager___registerLogFlagResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / You should not call this function directly
      virtual void __logFmtPrefix(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void __logFmtPrefix(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>* AsyncregisterLogCallbackProcRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>* PrepareAsyncregisterLogCallbackProcRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>* AsyncunregisterLogCallbackProcRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>* PrepareAsyncunregisterLogCallbackProcRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncopenOctaneLogWindowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncopenOctaneLogWindowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsynclogRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsynclogRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsynclogErrorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsynclogErrorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsynclogFmtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsynclogFmtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsynclogErrorFmtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsynclogErrorFmtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>* AsyncisFlagRegisteredRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>* PrepareAsyncisFlagRegisteredRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_setFlagResponse>* AsyncsetFlagRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager_setFlagResponse>* PrepareAsyncsetFlagRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager___registerLogFlagResponse>* Async__registerLogFlagRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiLogManager___registerLogFlagResponse>* PrepareAsync__registerLogFlagRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* Async__logFmtPrefixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsync__logFmtPrefixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status registerLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest& request, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>> AsyncregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>>(AsyncregisterLogCallbackProcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>> PrepareAsyncregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>>(PrepareAsyncregisterLogCallbackProcRaw(context, request, cq));
    }
    ::grpc::Status unregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest& request, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>> AsyncunregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>>(AsyncunregisterLogCallbackProcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>> PrepareAsyncunregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>>(PrepareAsyncunregisterLogCallbackProcRaw(context, request, cq));
    }
    ::grpc::Status openOctaneLogWindow(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncopenOctaneLogWindow(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncopenOctaneLogWindowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncopenOctaneLogWindow(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncopenOctaneLogWindowRaw(context, request, cq));
    }
    ::grpc::Status log(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asynclog(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsynclogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsynclog(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsynclogRaw(context, request, cq));
    }
    ::grpc::Status logError(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsynclogError(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsynclogErrorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsynclogError(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsynclogErrorRaw(context, request, cq));
    }
    ::grpc::Status logFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsynclogFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsynclogFmtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsynclogFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsynclogFmtRaw(context, request, cq));
    }
    ::grpc::Status logErrorFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsynclogErrorFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsynclogErrorFmtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsynclogErrorFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsynclogErrorFmtRaw(context, request, cq));
    }
    ::grpc::Status isFlagRegistered(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest& request, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>> AsyncisFlagRegistered(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>>(AsyncisFlagRegisteredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>> PrepareAsyncisFlagRegistered(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>>(PrepareAsyncisFlagRegisteredRaw(context, request, cq));
    }
    ::grpc::Status setFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest& request, ::octaneapi::ApiLogManager_setFlagResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_setFlagResponse>> AsyncsetFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_setFlagResponse>>(AsyncsetFlagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_setFlagResponse>> PrepareAsyncsetFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_setFlagResponse>>(PrepareAsyncsetFlagRaw(context, request, cq));
    }
    ::grpc::Status __registerLogFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest& request, ::octaneapi::ApiLogManager___registerLogFlagResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager___registerLogFlagResponse>> Async__registerLogFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager___registerLogFlagResponse>>(Async__registerLogFlagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager___registerLogFlagResponse>> PrepareAsync__registerLogFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager___registerLogFlagResponse>>(PrepareAsync__registerLogFlagRaw(context, request, cq));
    }
    ::grpc::Status __logFmtPrefix(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Async__logFmtPrefix(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(Async__logFmtPrefixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsync__logFmtPrefix(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsync__logFmtPrefixRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void registerLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* response, std::function<void(::grpc::Status)>) override;
      void registerLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void unregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* response, std::function<void(::grpc::Status)>) override;
      void unregisterLogCallbackProc(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void openOctaneLogWindow(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void openOctaneLogWindow(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void log(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void log(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void logError(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void logError(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void logFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void logFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void logErrorFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void logErrorFmt(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isFlagRegistered(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* request, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* response, std::function<void(::grpc::Status)>) override;
      void isFlagRegistered(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* request, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest* request, ::octaneapi::ApiLogManager_setFlagResponse* response, std::function<void(::grpc::Status)>) override;
      void setFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest* request, ::octaneapi::ApiLogManager_setFlagResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void __registerLogFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest* request, ::octaneapi::ApiLogManager___registerLogFlagResponse* response, std::function<void(::grpc::Status)>) override;
      void __registerLogFlag(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest* request, ::octaneapi::ApiLogManager___registerLogFlagResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void __logFmtPrefix(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void __logFmtPrefix(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>* AsyncregisterLogCallbackProcRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>* PrepareAsyncregisterLogCallbackProcRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>* AsyncunregisterLogCallbackProcRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>* PrepareAsyncunregisterLogCallbackProcRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncopenOctaneLogWindowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncopenOctaneLogWindowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsynclogRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsynclogRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsynclogErrorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsynclogErrorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsynclogFmtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsynclogFmtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logFmtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsynclogErrorFmtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsynclogErrorFmtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>* AsyncisFlagRegisteredRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>* PrepareAsyncisFlagRegisteredRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_setFlagResponse>* AsyncsetFlagRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager_setFlagResponse>* PrepareAsyncsetFlagRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager_setFlagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager___registerLogFlagResponse>* Async__registerLogFlagRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiLogManager___registerLogFlagResponse>* PrepareAsync__registerLogFlagRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Async__logFmtPrefixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsync__logFmtPrefixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_registerLogCallbackProc_;
    const ::grpc::internal::RpcMethod rpcmethod_unregisterLogCallbackProc_;
    const ::grpc::internal::RpcMethod rpcmethod_openOctaneLogWindow_;
    const ::grpc::internal::RpcMethod rpcmethod_log_;
    const ::grpc::internal::RpcMethod rpcmethod_logError_;
    const ::grpc::internal::RpcMethod rpcmethod_logFmt_;
    const ::grpc::internal::RpcMethod rpcmethod_logErrorFmt_;
    const ::grpc::internal::RpcMethod rpcmethod_isFlagRegistered_;
    const ::grpc::internal::RpcMethod rpcmethod_setFlag_;
    const ::grpc::internal::RpcMethod rpcmethod___registerLogFlag_;
    const ::grpc::internal::RpcMethod rpcmethod___logFmtPrefix_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Registers a callback that gets called every time there is a log message
    virtual ::grpc::Status registerLogCallbackProc(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* response);
    // / Removes a previously registered log callback
    virtual ::grpc::Status unregisterLogCallbackProc(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* response);
    // / Opens the Octane log into a separate window
    virtual ::grpc::Status openOctaneLogWindow(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* request, ::google::protobuf::Empty* response);
    // / Writes the specified text to the Octane log
    virtual ::grpc::Status log(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_logRequest* request, ::google::protobuf::Empty* response);
    // / Writes the specified text to the Octane log
    virtual ::grpc::Status logError(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_logErrorRequest* request, ::google::protobuf::Empty* response);
    // / Writes the specified text to the Octane log
    virtual ::grpc::Status logFmt(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_logFmtRequest* request, ::google::protobuf::Empty* response);
    // / Writes the specified text to the Octane log
    virtual ::grpc::Status logErrorFmt(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest* request, ::google::protobuf::Empty* response);
    // / Returns TRUE if a flag with the passed in name was registered
    virtual ::grpc::Status isFlagRegistered(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* request, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* response);
    // / Sets a log flag to the specified value
    virtual ::grpc::Status setFlag(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager_setFlagRequest* request, ::octaneapi::ApiLogManager_setFlagResponse* response);
    // / Registers a new log flag
    virtual ::grpc::Status __registerLogFlag(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest* request, ::octaneapi::ApiLogManager___registerLogFlagResponse* response);
    // / You should not call this function directly
    virtual ::grpc::Status __logFmtPrefix(::grpc::ServerContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_registerLogCallbackProc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_registerLogCallbackProc() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_registerLogCallbackProc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerLogCallbackProc(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* /*request*/, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterLogCallbackProc(::grpc::ServerContext* context, ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unregisterLogCallbackProc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unregisterLogCallbackProc() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_unregisterLogCallbackProc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterLogCallbackProc(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* /*request*/, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunregisterLogCallbackProc(::grpc::ServerContext* context, ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_openOctaneLogWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_openOctaneLogWindow() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_openOctaneLogWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status openOctaneLogWindow(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestopenOctaneLogWindow(::grpc::ServerContext* context, ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_log() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status log(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlog(::grpc::ServerContext* context, ::octaneapi::ApiLogManager_logRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_logError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_logError() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_logError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logError(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlogError(::grpc::ServerContext* context, ::octaneapi::ApiLogManager_logErrorRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_logFmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_logFmt() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_logFmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logFmt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logFmtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlogFmt(::grpc::ServerContext* context, ::octaneapi::ApiLogManager_logFmtRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_logErrorFmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_logErrorFmt() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_logErrorFmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logErrorFmt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logErrorFmtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlogErrorFmt(::grpc::ServerContext* context, ::octaneapi::ApiLogManager_logErrorFmtRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isFlagRegistered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isFlagRegistered() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_isFlagRegistered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isFlagRegistered(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* /*request*/, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisFlagRegistered(::grpc::ServerContext* context, ::octaneapi::ApiLogManager_isFlagRegisteredRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiLogManager_isFlagRegisteredResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setFlag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setFlag() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_setFlag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFlag(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_setFlagRequest* /*request*/, ::octaneapi::ApiLogManager_setFlagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetFlag(::grpc::ServerContext* context, ::octaneapi::ApiLogManager_setFlagRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiLogManager_setFlagResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod___registerLogFlag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod___registerLogFlag() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod___registerLogFlag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status __registerLogFlag(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager___registerLogFlagRequest* /*request*/, ::octaneapi::ApiLogManager___registerLogFlagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request__registerLogFlag(::grpc::ServerContext* context, ::octaneapi::ApiLogManager___registerLogFlagRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiLogManager___registerLogFlagResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod___logFmtPrefix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod___logFmtPrefix() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod___logFmtPrefix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status __logFmtPrefix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request__logFmtPrefix(::grpc::ServerContext* context, ::octaneapi::ApiLogManager___logFmtPrefixRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_registerLogCallbackProc<WithAsyncMethod_unregisterLogCallbackProc<WithAsyncMethod_openOctaneLogWindow<WithAsyncMethod_log<WithAsyncMethod_logError<WithAsyncMethod_logFmt<WithAsyncMethod_logErrorFmt<WithAsyncMethod_isFlagRegistered<WithAsyncMethod_setFlag<WithAsyncMethod___registerLogFlag<WithAsyncMethod___logFmtPrefix<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_registerLogCallbackProc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_registerLogCallbackProc() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_registerLogCallbackProcRequest, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* response) { return this->registerLogCallbackProc(context, request, response); }));}
    void SetMessageAllocatorFor_registerLogCallbackProc(
        ::grpc::MessageAllocator< ::octaneapi::ApiLogManager_registerLogCallbackProcRequest, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_registerLogCallbackProcRequest, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_registerLogCallbackProc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerLogCallbackProc(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* /*request*/, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerLogCallbackProc(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* /*request*/, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_unregisterLogCallbackProc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_unregisterLogCallbackProc() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* request, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* response) { return this->unregisterLogCallbackProc(context, request, response); }));}
    void SetMessageAllocatorFor_unregisterLogCallbackProc(
        ::grpc::MessageAllocator< ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_unregisterLogCallbackProc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterLogCallbackProc(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* /*request*/, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unregisterLogCallbackProc(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* /*request*/, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_openOctaneLogWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_openOctaneLogWindow() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_openOctaneLogWindowRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* request, ::google::protobuf::Empty* response) { return this->openOctaneLogWindow(context, request, response); }));}
    void SetMessageAllocatorFor_openOctaneLogWindow(
        ::grpc::MessageAllocator< ::octaneapi::ApiLogManager_openOctaneLogWindowRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_openOctaneLogWindowRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_openOctaneLogWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status openOctaneLogWindow(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* openOctaneLogWindow(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_log() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_logRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiLogManager_logRequest* request, ::google::protobuf::Empty* response) { return this->log(context, request, response); }));}
    void SetMessageAllocatorFor_log(
        ::grpc::MessageAllocator< ::octaneapi::ApiLogManager_logRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_logRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status log(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* log(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiLogManager_logRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_logError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_logError() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_logErrorRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiLogManager_logErrorRequest* request, ::google::protobuf::Empty* response) { return this->logError(context, request, response); }));}
    void SetMessageAllocatorFor_logError(
        ::grpc::MessageAllocator< ::octaneapi::ApiLogManager_logErrorRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_logErrorRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_logError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logError(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* logError(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiLogManager_logErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_logFmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_logFmt() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_logFmtRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiLogManager_logFmtRequest* request, ::google::protobuf::Empty* response) { return this->logFmt(context, request, response); }));}
    void SetMessageAllocatorFor_logFmt(
        ::grpc::MessageAllocator< ::octaneapi::ApiLogManager_logFmtRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_logFmtRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_logFmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logFmt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logFmtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* logFmt(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiLogManager_logFmtRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_logErrorFmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_logErrorFmt() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_logErrorFmtRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiLogManager_logErrorFmtRequest* request, ::google::protobuf::Empty* response) { return this->logErrorFmt(context, request, response); }));}
    void SetMessageAllocatorFor_logErrorFmt(
        ::grpc::MessageAllocator< ::octaneapi::ApiLogManager_logErrorFmtRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_logErrorFmtRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_logErrorFmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logErrorFmt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logErrorFmtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* logErrorFmt(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiLogManager_logErrorFmtRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isFlagRegistered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isFlagRegistered() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_isFlagRegisteredRequest, ::octaneapi::ApiLogManager_isFlagRegisteredResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* request, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* response) { return this->isFlagRegistered(context, request, response); }));}
    void SetMessageAllocatorFor_isFlagRegistered(
        ::grpc::MessageAllocator< ::octaneapi::ApiLogManager_isFlagRegisteredRequest, ::octaneapi::ApiLogManager_isFlagRegisteredResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_isFlagRegisteredRequest, ::octaneapi::ApiLogManager_isFlagRegisteredResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isFlagRegistered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isFlagRegistered(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* /*request*/, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isFlagRegistered(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* /*request*/, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setFlag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setFlag() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_setFlagRequest, ::octaneapi::ApiLogManager_setFlagResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiLogManager_setFlagRequest* request, ::octaneapi::ApiLogManager_setFlagResponse* response) { return this->setFlag(context, request, response); }));}
    void SetMessageAllocatorFor_setFlag(
        ::grpc::MessageAllocator< ::octaneapi::ApiLogManager_setFlagRequest, ::octaneapi::ApiLogManager_setFlagResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager_setFlagRequest, ::octaneapi::ApiLogManager_setFlagResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setFlag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFlag(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_setFlagRequest* /*request*/, ::octaneapi::ApiLogManager_setFlagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setFlag(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiLogManager_setFlagRequest* /*request*/, ::octaneapi::ApiLogManager_setFlagResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod___registerLogFlag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod___registerLogFlag() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager___registerLogFlagRequest, ::octaneapi::ApiLogManager___registerLogFlagResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiLogManager___registerLogFlagRequest* request, ::octaneapi::ApiLogManager___registerLogFlagResponse* response) { return this->__registerLogFlag(context, request, response); }));}
    void SetMessageAllocatorFor___registerLogFlag(
        ::grpc::MessageAllocator< ::octaneapi::ApiLogManager___registerLogFlagRequest, ::octaneapi::ApiLogManager___registerLogFlagResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager___registerLogFlagRequest, ::octaneapi::ApiLogManager___registerLogFlagResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod___registerLogFlag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status __registerLogFlag(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager___registerLogFlagRequest* /*request*/, ::octaneapi::ApiLogManager___registerLogFlagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* __registerLogFlag(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiLogManager___registerLogFlagRequest* /*request*/, ::octaneapi::ApiLogManager___registerLogFlagResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod___logFmtPrefix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod___logFmtPrefix() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager___logFmtPrefixRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* request, ::google::protobuf::Empty* response) { return this->__logFmtPrefix(context, request, response); }));}
    void SetMessageAllocatorFor___logFmtPrefix(
        ::grpc::MessageAllocator< ::octaneapi::ApiLogManager___logFmtPrefixRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiLogManager___logFmtPrefixRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod___logFmtPrefix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status __logFmtPrefix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* __logFmtPrefix(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_registerLogCallbackProc<WithCallbackMethod_unregisterLogCallbackProc<WithCallbackMethod_openOctaneLogWindow<WithCallbackMethod_log<WithCallbackMethod_logError<WithCallbackMethod_logFmt<WithCallbackMethod_logErrorFmt<WithCallbackMethod_isFlagRegistered<WithCallbackMethod_setFlag<WithCallbackMethod___registerLogFlag<WithCallbackMethod___logFmtPrefix<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_registerLogCallbackProc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_registerLogCallbackProc() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_registerLogCallbackProc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerLogCallbackProc(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* /*request*/, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unregisterLogCallbackProc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unregisterLogCallbackProc() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_unregisterLogCallbackProc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterLogCallbackProc(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* /*request*/, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_openOctaneLogWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_openOctaneLogWindow() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_openOctaneLogWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status openOctaneLogWindow(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_log() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status log(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_logError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_logError() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_logError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logError(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_logFmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_logFmt() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_logFmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logFmt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logFmtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_logErrorFmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_logErrorFmt() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_logErrorFmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logErrorFmt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logErrorFmtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isFlagRegistered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isFlagRegistered() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_isFlagRegistered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isFlagRegistered(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* /*request*/, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setFlag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setFlag() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_setFlag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFlag(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_setFlagRequest* /*request*/, ::octaneapi::ApiLogManager_setFlagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod___registerLogFlag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod___registerLogFlag() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod___registerLogFlag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status __registerLogFlag(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager___registerLogFlagRequest* /*request*/, ::octaneapi::ApiLogManager___registerLogFlagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod___logFmtPrefix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod___logFmtPrefix() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod___logFmtPrefix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status __logFmtPrefix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerLogCallbackProc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_registerLogCallbackProc() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_registerLogCallbackProc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerLogCallbackProc(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* /*request*/, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterLogCallbackProc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unregisterLogCallbackProc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unregisterLogCallbackProc() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_unregisterLogCallbackProc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterLogCallbackProc(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* /*request*/, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunregisterLogCallbackProc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_openOctaneLogWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_openOctaneLogWindow() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_openOctaneLogWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status openOctaneLogWindow(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestopenOctaneLogWindow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_log() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status log(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_logError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_logError() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_logError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logError(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlogError(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_logFmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_logFmt() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_logFmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logFmt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logFmtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlogFmt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_logErrorFmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_logErrorFmt() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_logErrorFmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logErrorFmt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logErrorFmtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlogErrorFmt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isFlagRegistered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isFlagRegistered() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_isFlagRegistered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isFlagRegistered(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* /*request*/, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisFlagRegistered(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setFlag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setFlag() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_setFlag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFlag(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_setFlagRequest* /*request*/, ::octaneapi::ApiLogManager_setFlagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetFlag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod___registerLogFlag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod___registerLogFlag() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod___registerLogFlag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status __registerLogFlag(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager___registerLogFlagRequest* /*request*/, ::octaneapi::ApiLogManager___registerLogFlagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request__registerLogFlag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod___logFmtPrefix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod___logFmtPrefix() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod___logFmtPrefix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status __logFmtPrefix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Request__logFmtPrefix(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_registerLogCallbackProc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_registerLogCallbackProc() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->registerLogCallbackProc(context, request, response); }));
    }
    ~WithRawCallbackMethod_registerLogCallbackProc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerLogCallbackProc(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* /*request*/, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerLogCallbackProc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_unregisterLogCallbackProc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_unregisterLogCallbackProc() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unregisterLogCallbackProc(context, request, response); }));
    }
    ~WithRawCallbackMethod_unregisterLogCallbackProc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterLogCallbackProc(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* /*request*/, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unregisterLogCallbackProc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_openOctaneLogWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_openOctaneLogWindow() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->openOctaneLogWindow(context, request, response); }));
    }
    ~WithRawCallbackMethod_openOctaneLogWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status openOctaneLogWindow(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* openOctaneLogWindow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_log() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->log(context, request, response); }));
    }
    ~WithRawCallbackMethod_log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status log(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* log(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_logError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_logError() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->logError(context, request, response); }));
    }
    ~WithRawCallbackMethod_logError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logError(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* logError(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_logFmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_logFmt() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->logFmt(context, request, response); }));
    }
    ~WithRawCallbackMethod_logFmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logFmt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logFmtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* logFmt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_logErrorFmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_logErrorFmt() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->logErrorFmt(context, request, response); }));
    }
    ~WithRawCallbackMethod_logErrorFmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logErrorFmt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logErrorFmtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* logErrorFmt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isFlagRegistered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isFlagRegistered() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isFlagRegistered(context, request, response); }));
    }
    ~WithRawCallbackMethod_isFlagRegistered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isFlagRegistered(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* /*request*/, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isFlagRegistered(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setFlag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setFlag() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setFlag(context, request, response); }));
    }
    ~WithRawCallbackMethod_setFlag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setFlag(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_setFlagRequest* /*request*/, ::octaneapi::ApiLogManager_setFlagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setFlag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod___registerLogFlag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod___registerLogFlag() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->__registerLogFlag(context, request, response); }));
    }
    ~WithRawCallbackMethod___registerLogFlag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status __registerLogFlag(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager___registerLogFlagRequest* /*request*/, ::octaneapi::ApiLogManager___registerLogFlagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* __registerLogFlag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod___logFmtPrefix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod___logFmtPrefix() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->__logFmtPrefix(context, request, response); }));
    }
    ~WithRawCallbackMethod___logFmtPrefix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status __logFmtPrefix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* __logFmtPrefix(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerLogCallbackProc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_registerLogCallbackProc() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiLogManager_registerLogCallbackProcRequest, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiLogManager_registerLogCallbackProcRequest, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse>* streamer) {
                       return this->StreamedregisterLogCallbackProc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_registerLogCallbackProc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerLogCallbackProc(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_registerLogCallbackProcRequest* /*request*/, ::octaneapi::ApiLogManager_registerLogCallbackProcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterLogCallbackProc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiLogManager_registerLogCallbackProcRequest,::octaneapi::ApiLogManager_registerLogCallbackProcResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unregisterLogCallbackProc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unregisterLogCallbackProc() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>* streamer) {
                       return this->StreamedunregisterLogCallbackProc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_unregisterLogCallbackProc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unregisterLogCallbackProc(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest* /*request*/, ::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedunregisterLogCallbackProc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiLogManager_unregisterLogCallbackProcRequest,::octaneapi::ApiLogManager_unregisterLogCallbackProcResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_openOctaneLogWindow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_openOctaneLogWindow() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiLogManager_openOctaneLogWindowRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiLogManager_openOctaneLogWindowRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedopenOctaneLogWindow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_openOctaneLogWindow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status openOctaneLogWindow(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_openOctaneLogWindowRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedopenOctaneLogWindow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiLogManager_openOctaneLogWindowRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_log() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiLogManager_logRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiLogManager_logRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedlog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status log(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiLogManager_logRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_logError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_logError() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiLogManager_logErrorRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiLogManager_logErrorRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedlogError(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_logError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status logError(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlogError(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiLogManager_logErrorRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_logFmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_logFmt() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiLogManager_logFmtRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiLogManager_logFmtRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedlogFmt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_logFmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status logFmt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logFmtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlogFmt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiLogManager_logFmtRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_logErrorFmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_logErrorFmt() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiLogManager_logErrorFmtRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiLogManager_logErrorFmtRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedlogErrorFmt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_logErrorFmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status logErrorFmt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_logErrorFmtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlogErrorFmt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiLogManager_logErrorFmtRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isFlagRegistered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isFlagRegistered() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiLogManager_isFlagRegisteredRequest, ::octaneapi::ApiLogManager_isFlagRegisteredResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiLogManager_isFlagRegisteredRequest, ::octaneapi::ApiLogManager_isFlagRegisteredResponse>* streamer) {
                       return this->StreamedisFlagRegistered(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isFlagRegistered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isFlagRegistered(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_isFlagRegisteredRequest* /*request*/, ::octaneapi::ApiLogManager_isFlagRegisteredResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisFlagRegistered(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiLogManager_isFlagRegisteredRequest,::octaneapi::ApiLogManager_isFlagRegisteredResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setFlag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setFlag() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiLogManager_setFlagRequest, ::octaneapi::ApiLogManager_setFlagResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiLogManager_setFlagRequest, ::octaneapi::ApiLogManager_setFlagResponse>* streamer) {
                       return this->StreamedsetFlag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setFlag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setFlag(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager_setFlagRequest* /*request*/, ::octaneapi::ApiLogManager_setFlagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetFlag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiLogManager_setFlagRequest,::octaneapi::ApiLogManager_setFlagResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod___registerLogFlag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod___registerLogFlag() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiLogManager___registerLogFlagRequest, ::octaneapi::ApiLogManager___registerLogFlagResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiLogManager___registerLogFlagRequest, ::octaneapi::ApiLogManager___registerLogFlagResponse>* streamer) {
                       return this->Streamed__registerLogFlag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod___registerLogFlag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status __registerLogFlag(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager___registerLogFlagRequest* /*request*/, ::octaneapi::ApiLogManager___registerLogFlagResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamed__registerLogFlag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiLogManager___registerLogFlagRequest,::octaneapi::ApiLogManager___registerLogFlagResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod___logFmtPrefix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod___logFmtPrefix() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiLogManager___logFmtPrefixRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiLogManager___logFmtPrefixRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamed__logFmtPrefix(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod___logFmtPrefix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status __logFmtPrefix(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiLogManager___logFmtPrefixRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamed__logFmtPrefix(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiLogManager___logFmtPrefixRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_registerLogCallbackProc<WithStreamedUnaryMethod_unregisterLogCallbackProc<WithStreamedUnaryMethod_openOctaneLogWindow<WithStreamedUnaryMethod_log<WithStreamedUnaryMethod_logError<WithStreamedUnaryMethod_logFmt<WithStreamedUnaryMethod_logErrorFmt<WithStreamedUnaryMethod_isFlagRegistered<WithStreamedUnaryMethod_setFlag<WithStreamedUnaryMethod___registerLogFlag<WithStreamedUnaryMethod___logFmtPrefix<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_registerLogCallbackProc<WithStreamedUnaryMethod_unregisterLogCallbackProc<WithStreamedUnaryMethod_openOctaneLogWindow<WithStreamedUnaryMethod_log<WithStreamedUnaryMethod_logError<WithStreamedUnaryMethod_logFmt<WithStreamedUnaryMethod_logErrorFmt<WithStreamedUnaryMethod_isFlagRegistered<WithStreamedUnaryMethod_setFlag<WithStreamedUnaryMethod___registerLogFlag<WithStreamedUnaryMethod___logFmtPrefix<Service > > > > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apilogmanager_2eproto__INCLUDED
