// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: callback.proto

#include "callback.pb.h"
#include "callback.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* CallbackHandler_method_names[] = {
  "/octaneapi.CallbackHandler/Start",
  "/octaneapi.CallbackHandler/Stop",
  "/octaneapi.CallbackHandler/PerformBlocking",
  "/octaneapi.CallbackHandler/LoadRenderStateProject",
  "/octaneapi.CallbackHandler/OnDaemonUpdate",
  "/octaneapi.CallbackHandler/OnStatusUpdate",
  "/octaneapi.CallbackHandler/TriggerFunc",
  "/octaneapi.CallbackHandler/EvaluateFunc",
  "/octaneapi.CallbackHandler/CleanupFunc",
  "/octaneapi.CallbackHandler/DestroyFunc",
  "/octaneapi.CallbackHandler/ColorChanged",
  "/octaneapi.CallbackHandler/CreateFunc",
  "/octaneapi.CallbackHandler/InitFunc",
  "/octaneapi.CallbackHandler/ChangeManagerObserver",
  "/octaneapi.CallbackHandler/ChangeManagerTimeObserver",
  "/octaneapi.CallbackHandler/ProjectManagerObserver",
  "/octaneapi.CallbackHandler/SelectionManagerObserver",
  "/octaneapi.CallbackHandler/IsReady",
  "/octaneapi.CallbackHandler/Notify",
  "/octaneapi.CallbackHandler/CommandModuleRunFunc",
  "/octaneapi.CallbackHandler/ObserverCallback",
  "/octaneapi.CallbackHandler/DbViewLoaded",
  "/octaneapi.CallbackHandler/Finish",
  "/octaneapi.CallbackHandler/OnTileBlended",
  "/octaneapi.CallbackHandler/OnNewStatistics",
  "/octaneapi.CallbackHandler/OnNewImage",
  "/octaneapi.CallbackHandler/OnOcioError",
  "/octaneapi.CallbackHandler/OnRenderFailure",
  "/octaneapi.CallbackHandler/NextChunk",
  "/octaneapi.CallbackHandler/Checked",
  "/octaneapi.CallbackHandler/ComboBoxChanged",
  "/octaneapi.CallbackHandler/ApiLog",
  "/octaneapi.CallbackHandler/OnMainWindowClose",
  "/octaneapi.CallbackHandler/MouseEvent",
  "/octaneapi.CallbackHandler/DbViewClosing",
  "/octaneapi.CallbackHandler/NumericBoxChanged",
  "/octaneapi.CallbackHandler/Callback1",
  "/octaneapi.CallbackHandler/Callback2",
  "/octaneapi.CallbackHandler/ApiProjectManager_AssetMissing",
  "/octaneapi.CallbackHandler/Update",
  "/octaneapi.CallbackHandler/AsyncUpdate",
  "/octaneapi.CallbackHandler/AssetMissing",
  "/octaneapi.CallbackHandler/NumRows",
  "/octaneapi.CallbackHandler/Content",
  "/octaneapi.CallbackHandler/ButtonClicked",
  "/octaneapi.CallbackHandler/SelectionChanged",
  "/octaneapi.CallbackHandler/TextEditorChanged",
  "/octaneapi.CallbackHandler/OnWindowClose",
};

std::unique_ptr< CallbackHandler::Stub> CallbackHandler::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CallbackHandler::Stub> stub(new CallbackHandler::Stub(channel, options));
  return stub;
}

CallbackHandler::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Start_(CallbackHandler_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(CallbackHandler_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PerformBlocking_(CallbackHandler_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadRenderStateProject_(CallbackHandler_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnDaemonUpdate_(CallbackHandler_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnStatusUpdate_(CallbackHandler_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TriggerFunc_(CallbackHandler_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EvaluateFunc_(CallbackHandler_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CleanupFunc_(CallbackHandler_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyFunc_(CallbackHandler_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ColorChanged_(CallbackHandler_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateFunc_(CallbackHandler_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InitFunc_(CallbackHandler_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeManagerObserver_(CallbackHandler_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeManagerTimeObserver_(CallbackHandler_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProjectManagerObserver_(CallbackHandler_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectionManagerObserver_(CallbackHandler_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsReady_(CallbackHandler_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Notify_(CallbackHandler_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CommandModuleRunFunc_(CallbackHandler_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ObserverCallback_(CallbackHandler_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DbViewLoaded_(CallbackHandler_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Finish_(CallbackHandler_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnTileBlended_(CallbackHandler_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnNewStatistics_(CallbackHandler_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnNewImage_(CallbackHandler_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnOcioError_(CallbackHandler_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnRenderFailure_(CallbackHandler_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NextChunk_(CallbackHandler_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Checked_(CallbackHandler_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ComboBoxChanged_(CallbackHandler_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ApiLog_(CallbackHandler_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnMainWindowClose_(CallbackHandler_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MouseEvent_(CallbackHandler_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DbViewClosing_(CallbackHandler_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NumericBoxChanged_(CallbackHandler_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Callback1_(CallbackHandler_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Callback2_(CallbackHandler_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ApiProjectManager_AssetMissing_(CallbackHandler_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(CallbackHandler_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AsyncUpdate_(CallbackHandler_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AssetMissing_(CallbackHandler_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NumRows_(CallbackHandler_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Content_(CallbackHandler_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ButtonClicked_(CallbackHandler_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectionChanged_(CallbackHandler_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TextEditorChanged_(CallbackHandler_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnWindowClose_(CallbackHandler_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CallbackHandler::Stub::Start(::grpc::ClientContext* context, const ::octaneapi::StartRequest& request, ::octaneapi::StartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::StartRequest, ::octaneapi::StartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Start_, context, request, response);
}

void CallbackHandler::Stub::async::Start(::grpc::ClientContext* context, const ::octaneapi::StartRequest* request, ::octaneapi::StartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::StartRequest, ::octaneapi::StartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::Start(::grpc::ClientContext* context, const ::octaneapi::StartRequest* request, ::octaneapi::StartResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::StartResponse>* CallbackHandler::Stub::PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::octaneapi::StartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::StartResponse, ::octaneapi::StartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::StartResponse>* CallbackHandler::Stub::AsyncStartRaw(::grpc::ClientContext* context, const ::octaneapi::StartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::Stop(::grpc::ClientContext* context, const ::octaneapi::StopRequest& request, ::octaneapi::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::StopRequest, ::octaneapi::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void CallbackHandler::Stub::async::Stop(::grpc::ClientContext* context, const ::octaneapi::StopRequest* request, ::octaneapi::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::StopRequest, ::octaneapi::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::Stop(::grpc::ClientContext* context, const ::octaneapi::StopRequest* request, ::octaneapi::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::StopResponse>* CallbackHandler::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::octaneapi::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::StopResponse, ::octaneapi::StopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::StopResponse>* CallbackHandler::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::octaneapi::StopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::PerformBlocking(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PerformBlocking_, context, request, response);
}

void CallbackHandler::Stub::async::PerformBlocking(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PerformBlocking_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::PerformBlocking(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PerformBlocking_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncPerformBlockingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PerformBlocking_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncPerformBlockingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPerformBlockingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::LoadRenderStateProject(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest& request, ::octaneapi::LoadRenderStateProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::LoadRenderStateProjectRequest, ::octaneapi::LoadRenderStateProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoadRenderStateProject_, context, request, response);
}

void CallbackHandler::Stub::async::LoadRenderStateProject(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest* request, ::octaneapi::LoadRenderStateProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::LoadRenderStateProjectRequest, ::octaneapi::LoadRenderStateProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadRenderStateProject_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::LoadRenderStateProject(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest* request, ::octaneapi::LoadRenderStateProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadRenderStateProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::LoadRenderStateProjectResponse>* CallbackHandler::Stub::PrepareAsyncLoadRenderStateProjectRaw(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::LoadRenderStateProjectResponse, ::octaneapi::LoadRenderStateProjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoadRenderStateProject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::LoadRenderStateProjectResponse>* CallbackHandler::Stub::AsyncLoadRenderStateProjectRaw(::grpc::ClientContext* context, const ::octaneapi::LoadRenderStateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoadRenderStateProjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::OnDaemonUpdate(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::DaemonUpdateRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OnDaemonUpdate_, context, request, response);
}

void CallbackHandler::Stub::async::OnDaemonUpdate(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::DaemonUpdateRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnDaemonUpdate_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::OnDaemonUpdate(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnDaemonUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncOnDaemonUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::DaemonUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OnDaemonUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncOnDaemonUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::DaemonUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOnDaemonUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::OnStatusUpdate(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::StatusUpdateRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OnStatusUpdate_, context, request, response);
}

void CallbackHandler::Stub::async::OnStatusUpdate(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::StatusUpdateRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnStatusUpdate_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::OnStatusUpdate(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnStatusUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncOnStatusUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::StatusUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OnStatusUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncOnStatusUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::StatusUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOnStatusUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::TriggerFunc(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::TriggerFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TriggerFunc_, context, request, response);
}

void CallbackHandler::Stub::async::TriggerFunc(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::TriggerFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerFunc_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::TriggerFunc(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TriggerFunc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncTriggerFuncRaw(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::TriggerFuncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TriggerFunc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncTriggerFuncRaw(::grpc::ClientContext* context, const ::octaneapi::TriggerFuncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTriggerFuncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::EvaluateFunc(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::EvaluateFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EvaluateFunc_, context, request, response);
}

void CallbackHandler::Stub::async::EvaluateFunc(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::EvaluateFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EvaluateFunc_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::EvaluateFunc(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EvaluateFunc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncEvaluateFuncRaw(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::EvaluateFuncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EvaluateFunc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncEvaluateFuncRaw(::grpc::ClientContext* context, const ::octaneapi::EvaluateFuncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEvaluateFuncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::CleanupFunc(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::CleanupFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CleanupFunc_, context, request, response);
}

void CallbackHandler::Stub::async::CleanupFunc(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::CleanupFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CleanupFunc_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::CleanupFunc(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CleanupFunc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncCleanupFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::CleanupFuncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CleanupFunc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncCleanupFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CleanupFuncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCleanupFuncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::DestroyFunc(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::DestroyFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyFunc_, context, request, response);
}

void CallbackHandler::Stub::async::DestroyFunc(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::DestroyFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyFunc_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::DestroyFunc(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyFunc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncDestroyFuncRaw(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::DestroyFuncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyFunc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncDestroyFuncRaw(::grpc::ClientContext* context, const ::octaneapi::DestroyFuncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyFuncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::ColorChanged(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ColorChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ColorChanged_, context, request, response);
}

void CallbackHandler::Stub::async::ColorChanged(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ColorChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ColorChanged_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::ColorChanged(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ColorChanged_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncColorChangedRaw(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::ColorChangedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ColorChanged_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncColorChangedRaw(::grpc::ClientContext* context, const ::octaneapi::ColorChangedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncColorChangedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::CreateFunc(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest& request, ::octaneapi::CreateFuncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::CreateFuncRequest, ::octaneapi::CreateFuncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateFunc_, context, request, response);
}

void CallbackHandler::Stub::async::CreateFunc(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest* request, ::octaneapi::CreateFuncResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::CreateFuncRequest, ::octaneapi::CreateFuncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFunc_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::CreateFunc(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest* request, ::octaneapi::CreateFuncResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFunc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CreateFuncResponse>* CallbackHandler::Stub::PrepareAsyncCreateFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CreateFuncResponse, ::octaneapi::CreateFuncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateFunc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CreateFuncResponse>* CallbackHandler::Stub::AsyncCreateFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CreateFuncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateFuncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::InitFunc(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest& request, ::octaneapi::InitFuncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::InitFuncRequest, ::octaneapi::InitFuncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitFunc_, context, request, response);
}

void CallbackHandler::Stub::async::InitFunc(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest* request, ::octaneapi::InitFuncResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::InitFuncRequest, ::octaneapi::InitFuncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitFunc_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::InitFunc(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest* request, ::octaneapi::InitFuncResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitFunc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::InitFuncResponse>* CallbackHandler::Stub::PrepareAsyncInitFuncRaw(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::InitFuncResponse, ::octaneapi::InitFuncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitFunc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::InitFuncResponse>* CallbackHandler::Stub::AsyncInitFuncRaw(::grpc::ClientContext* context, const ::octaneapi::InitFuncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitFuncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::ChangeManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ChangeManagerObserverRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangeManagerObserver_, context, request, response);
}

void CallbackHandler::Stub::async::ChangeManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ChangeManagerObserverRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeManagerObserver_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::ChangeManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeManagerObserver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncChangeManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::ChangeManagerObserverRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangeManagerObserver_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncChangeManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerObserverRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangeManagerObserverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::ChangeManagerTimeObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ChangeManagerTimeObserverRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangeManagerTimeObserver_, context, request, response);
}

void CallbackHandler::Stub::async::ChangeManagerTimeObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ChangeManagerTimeObserverRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeManagerTimeObserver_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::ChangeManagerTimeObserver(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeManagerTimeObserver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncChangeManagerTimeObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::ChangeManagerTimeObserverRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangeManagerTimeObserver_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncChangeManagerTimeObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangeManagerTimeObserverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::ProjectManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProjectManagerObserver_, context, request, response);
}

void CallbackHandler::Stub::async::ProjectManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProjectManagerObserver_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::ProjectManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProjectManagerObserver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncProjectManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::ObserverRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProjectManagerObserver_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncProjectManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProjectManagerObserverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::SelectionManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SelectionManagerObserver_, context, request, response);
}

void CallbackHandler::Stub::async::SelectionManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectionManagerObserver_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::SelectionManagerObserver(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectionManagerObserver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncSelectionManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::ObserverRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SelectionManagerObserver_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncSelectionManagerObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSelectionManagerObserverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::IsReady(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest& request, ::octaneapi::IsReadyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::IsReadyRequest, ::octaneapi::IsReadyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsReady_, context, request, response);
}

void CallbackHandler::Stub::async::IsReady(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest* request, ::octaneapi::IsReadyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::IsReadyRequest, ::octaneapi::IsReadyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsReady_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::IsReady(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest* request, ::octaneapi::IsReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsReady_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::IsReadyResponse>* CallbackHandler::Stub::PrepareAsyncIsReadyRaw(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::IsReadyResponse, ::octaneapi::IsReadyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsReady_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::IsReadyResponse>* CallbackHandler::Stub::AsyncIsReadyRaw(::grpc::ClientContext* context, const ::octaneapi::IsReadyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsReadyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::Notify(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest& request, ::octaneapi::NotificationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::NotificationRequest, ::octaneapi::NotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Notify_, context, request, response);
}

void CallbackHandler::Stub::async::Notify(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest* request, ::octaneapi::NotificationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::NotificationRequest, ::octaneapi::NotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Notify_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::Notify(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest* request, ::octaneapi::NotificationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Notify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::NotificationResponse>* CallbackHandler::Stub::PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::NotificationResponse, ::octaneapi::NotificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Notify_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::NotificationResponse>* CallbackHandler::Stub::AsyncNotifyRaw(::grpc::ClientContext* context, const ::octaneapi::NotificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::CommandModuleRunFunc(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::CommandModuleRunFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CommandModuleRunFunc_, context, request, response);
}

void CallbackHandler::Stub::async::CommandModuleRunFunc(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::CommandModuleRunFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CommandModuleRunFunc_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::CommandModuleRunFunc(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CommandModuleRunFunc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncCommandModuleRunFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::CommandModuleRunFuncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CommandModuleRunFunc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncCommandModuleRunFuncRaw(::grpc::ClientContext* context, const ::octaneapi::CommandModuleRunFuncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCommandModuleRunFuncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::ObserverCallback(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ObserverCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ObserverCallback_, context, request, response);
}

void CallbackHandler::Stub::async::ObserverCallback(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ObserverCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ObserverCallback_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::ObserverCallback(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ObserverCallback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncObserverCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::ObserverCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ObserverCallback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncObserverCallbackRaw(::grpc::ClientContext* context, const ::octaneapi::ObserverCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncObserverCallbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::DbViewLoaded(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::DbViewLoadedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DbViewLoaded_, context, request, response);
}

void CallbackHandler::Stub::async::DbViewLoaded(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::DbViewLoadedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DbViewLoaded_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::DbViewLoaded(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DbViewLoaded_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncDbViewLoadedRaw(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::DbViewLoadedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DbViewLoaded_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncDbViewLoadedRaw(::grpc::ClientContext* context, const ::octaneapi::DbViewLoadedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDbViewLoadedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::Finish(::grpc::ClientContext* context, const ::octaneapi::FinishRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::FinishRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Finish_, context, request, response);
}

void CallbackHandler::Stub::async::Finish(::grpc::ClientContext* context, const ::octaneapi::FinishRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::FinishRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Finish_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::Finish(::grpc::ClientContext* context, const ::octaneapi::FinishRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Finish_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncFinishRaw(::grpc::ClientContext* context, const ::octaneapi::FinishRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::FinishRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Finish_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncFinishRaw(::grpc::ClientContext* context, const ::octaneapi::FinishRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFinishRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::OnTileBlended(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OnTileBlended_, context, request, response);
}

void CallbackHandler::Stub::async::OnTileBlended(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnTileBlended_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::OnTileBlended(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnTileBlended_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncOnTileBlendedRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::BasicCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OnTileBlended_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncOnTileBlendedRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOnTileBlendedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::OnNewStatistics(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OnNewStatistics_, context, request, response);
}

void CallbackHandler::Stub::async::OnNewStatistics(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnNewStatistics_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::OnNewStatistics(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnNewStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncOnNewStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::BasicCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OnNewStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncOnNewStatisticsRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOnNewStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::OnNewImage(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::OnNewImageRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OnNewImage_, context, request, response);
}

void CallbackHandler::Stub::async::OnNewImage(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::OnNewImageRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnNewImage_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::OnNewImage(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnNewImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncOnNewImageRaw(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::OnNewImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OnNewImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncOnNewImageRaw(::grpc::ClientContext* context, const ::octaneapi::OnNewImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOnNewImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::OnOcioError(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::OnOcioErrorRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OnOcioError_, context, request, response);
}

void CallbackHandler::Stub::async::OnOcioError(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::OnOcioErrorRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnOcioError_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::OnOcioError(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnOcioError_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncOnOcioErrorRaw(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::OnOcioErrorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OnOcioError_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncOnOcioErrorRaw(::grpc::ClientContext* context, const ::octaneapi::OnOcioErrorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOnOcioErrorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::OnRenderFailure(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OnRenderFailure_, context, request, response);
}

void CallbackHandler::Stub::async::OnRenderFailure(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnRenderFailure_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::OnRenderFailure(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnRenderFailure_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncOnRenderFailureRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::BasicCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OnRenderFailure_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncOnRenderFailureRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOnRenderFailureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::NextChunk(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest& request, ::octaneapi::NextChunkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::NextChunkRequest, ::octaneapi::NextChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NextChunk_, context, request, response);
}

void CallbackHandler::Stub::async::NextChunk(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest* request, ::octaneapi::NextChunkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::NextChunkRequest, ::octaneapi::NextChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NextChunk_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::NextChunk(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest* request, ::octaneapi::NextChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NextChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::NextChunkResponse>* CallbackHandler::Stub::PrepareAsyncNextChunkRaw(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::NextChunkResponse, ::octaneapi::NextChunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NextChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::NextChunkResponse>* CallbackHandler::Stub::AsyncNextChunkRaw(::grpc::ClientContext* context, const ::octaneapi::NextChunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNextChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::Checked(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::CheckedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Checked_, context, request, response);
}

void CallbackHandler::Stub::async::Checked(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::CheckedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Checked_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::Checked(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Checked_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncCheckedRaw(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::CheckedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Checked_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncCheckedRaw(::grpc::ClientContext* context, const ::octaneapi::CheckedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::ComboBoxChanged(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ComboBoxChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ComboBoxChanged_, context, request, response);
}

void CallbackHandler::Stub::async::ComboBoxChanged(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ComboBoxChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ComboBoxChanged_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::ComboBoxChanged(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ComboBoxChanged_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncComboBoxChangedRaw(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::ComboBoxChangedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ComboBoxChanged_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncComboBoxChangedRaw(::grpc::ClientContext* context, const ::octaneapi::ComboBoxChangedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncComboBoxChangedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::ApiLog(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiLogRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ApiLog_, context, request, response);
}

void CallbackHandler::Stub::async::ApiLog(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiLogRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApiLog_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::ApiLog(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApiLog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncApiLogRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::ApiLogRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ApiLog_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncApiLogRaw(::grpc::ClientContext* context, const ::octaneapi::ApiLogRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncApiLogRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::OnMainWindowClose(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OnMainWindowClose_, context, request, response);
}

void CallbackHandler::Stub::async::OnMainWindowClose(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnMainWindowClose_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::OnMainWindowClose(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnMainWindowClose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncOnMainWindowCloseRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::BasicCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OnMainWindowClose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncOnMainWindowCloseRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOnMainWindowCloseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::MouseEvent(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::MouseEventRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MouseEvent_, context, request, response);
}

void CallbackHandler::Stub::async::MouseEvent(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::MouseEventRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MouseEvent_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::MouseEvent(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MouseEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncMouseEventRaw(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::MouseEventRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MouseEvent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncMouseEventRaw(::grpc::ClientContext* context, const ::octaneapi::MouseEventRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMouseEventRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::DbViewClosing(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DbViewClosing_, context, request, response);
}

void CallbackHandler::Stub::async::DbViewClosing(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DbViewClosing_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::DbViewClosing(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DbViewClosing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncDbViewClosingRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::BasicCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DbViewClosing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncDbViewClosingRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDbViewClosingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::NumericBoxChanged(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::NumericBoxChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NumericBoxChanged_, context, request, response);
}

void CallbackHandler::Stub::async::NumericBoxChanged(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::NumericBoxChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NumericBoxChanged_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::NumericBoxChanged(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NumericBoxChanged_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncNumericBoxChangedRaw(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::NumericBoxChangedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NumericBoxChanged_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncNumericBoxChangedRaw(::grpc::ClientContext* context, const ::octaneapi::NumericBoxChangedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNumericBoxChangedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::Callback1(::grpc::ClientContext* context, const ::octaneapi::Callback1Request& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::Callback1Request, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Callback1_, context, request, response);
}

void CallbackHandler::Stub::async::Callback1(::grpc::ClientContext* context, const ::octaneapi::Callback1Request* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::Callback1Request, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Callback1_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::Callback1(::grpc::ClientContext* context, const ::octaneapi::Callback1Request* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Callback1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncCallback1Raw(::grpc::ClientContext* context, const ::octaneapi::Callback1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::Callback1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Callback1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncCallback1Raw(::grpc::ClientContext* context, const ::octaneapi::Callback1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCallback1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::Callback2(::grpc::ClientContext* context, const ::octaneapi::Callback2Request& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::Callback2Request, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Callback2_, context, request, response);
}

void CallbackHandler::Stub::async::Callback2(::grpc::ClientContext* context, const ::octaneapi::Callback2Request* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::Callback2Request, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Callback2_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::Callback2(::grpc::ClientContext* context, const ::octaneapi::Callback2Request* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Callback2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncCallback2Raw(::grpc::ClientContext* context, const ::octaneapi::Callback2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::Callback2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Callback2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncCallback2Raw(::grpc::ClientContext* context, const ::octaneapi::Callback2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCallback2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::ApiProjectManager_AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::octaneapi::AssetMissingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ApiProjectManager_AssetMissing_, context, request, response);
}

void CallbackHandler::Stub::async::ApiProjectManager_AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApiProjectManager_AssetMissing_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::ApiProjectManager_AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApiProjectManager_AssetMissing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>* CallbackHandler::Stub::PrepareAsyncApiProjectManager_AssetMissingRaw(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::AssetMissingResponse, ::octaneapi::AssetMissingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ApiProjectManager_AssetMissing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>* CallbackHandler::Stub::AsyncApiProjectManager_AssetMissingRaw(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncApiProjectManager_AssetMissingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::Update(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest& request, ::octaneapi::UpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::UpdateRequest, ::octaneapi::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void CallbackHandler::Stub::async::Update(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest* request, ::octaneapi::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::UpdateRequest, ::octaneapi::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::Update(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest* request, ::octaneapi::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>* CallbackHandler::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::UpdateResponse, ::octaneapi::UpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>* CallbackHandler::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::AsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest& request, ::octaneapi::UpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::AsyncUpdateRequest, ::octaneapi::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AsyncUpdate_, context, request, response);
}

void CallbackHandler::Stub::async::AsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest* request, ::octaneapi::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::AsyncUpdateRequest, ::octaneapi::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AsyncUpdate_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::AsyncUpdate(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest* request, ::octaneapi::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AsyncUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>* CallbackHandler::Stub::PrepareAsyncAsyncUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::UpdateResponse, ::octaneapi::AsyncUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AsyncUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::UpdateResponse>* CallbackHandler::Stub::AsyncAsyncUpdateRaw(::grpc::ClientContext* context, const ::octaneapi::AsyncUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::octaneapi::AssetMissingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AssetMissing_, context, request, response);
}

void CallbackHandler::Stub::async::AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssetMissing_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::AssetMissing(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssetMissing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>* CallbackHandler::Stub::PrepareAsyncAssetMissingRaw(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::AssetMissingResponse, ::octaneapi::AssetMissingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AssetMissing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::AssetMissingResponse>* CallbackHandler::Stub::AsyncAssetMissingRaw(::grpc::ClientContext* context, const ::octaneapi::AssetMissingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAssetMissingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::NumRows(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::octaneapi::NumRowsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::BasicCallbackRequest, ::octaneapi::NumRowsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NumRows_, context, request, response);
}

void CallbackHandler::Stub::async::NumRows(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::NumRowsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::BasicCallbackRequest, ::octaneapi::NumRowsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NumRows_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::NumRows(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::NumRowsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NumRows_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::NumRowsResponse>* CallbackHandler::Stub::PrepareAsyncNumRowsRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::NumRowsResponse, ::octaneapi::BasicCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NumRows_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::NumRowsResponse>* CallbackHandler::Stub::AsyncNumRowsRaw(::grpc::ClientContext* context, const ::octaneapi::BasicCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNumRowsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::Content(::grpc::ClientContext* context, const ::octaneapi::ContentRequest& request, ::octaneapi::ContentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ContentRequest, ::octaneapi::ContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Content_, context, request, response);
}

void CallbackHandler::Stub::async::Content(::grpc::ClientContext* context, const ::octaneapi::ContentRequest* request, ::octaneapi::ContentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ContentRequest, ::octaneapi::ContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Content_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::Content(::grpc::ClientContext* context, const ::octaneapi::ContentRequest* request, ::octaneapi::ContentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Content_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ContentResponse>* CallbackHandler::Stub::PrepareAsyncContentRaw(::grpc::ClientContext* context, const ::octaneapi::ContentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ContentResponse, ::octaneapi::ContentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Content_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ContentResponse>* CallbackHandler::Stub::AsyncContentRaw(::grpc::ClientContext* context, const ::octaneapi::ContentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncContentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::ButtonClicked(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ButtonClickedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ButtonClicked_, context, request, response);
}

void CallbackHandler::Stub::async::ButtonClicked(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ButtonClickedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ButtonClicked_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::ButtonClicked(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ButtonClicked_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncButtonClickedRaw(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::ButtonClickedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ButtonClicked_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncButtonClickedRaw(::grpc::ClientContext* context, const ::octaneapi::ButtonClickedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncButtonClickedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::SelectionChanged(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::SelectionChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SelectionChanged_, context, request, response);
}

void CallbackHandler::Stub::async::SelectionChanged(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::SelectionChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectionChanged_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::SelectionChanged(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SelectionChanged_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncSelectionChangedRaw(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::SelectionChangedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SelectionChanged_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncSelectionChangedRaw(::grpc::ClientContext* context, const ::octaneapi::SelectionChangedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSelectionChangedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::TextEditorChanged(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::TextEditorChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TextEditorChanged_, context, request, response);
}

void CallbackHandler::Stub::async::TextEditorChanged(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::TextEditorChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TextEditorChanged_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::TextEditorChanged(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TextEditorChanged_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncTextEditorChangedRaw(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::TextEditorChangedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TextEditorChanged_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncTextEditorChangedRaw(::grpc::ClientContext* context, const ::octaneapi::TextEditorChangedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTextEditorChangedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CallbackHandler::Stub::OnWindowClose(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest& request, ::octaneapi::CallbackAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::OnWindowCloseRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OnWindowClose_, context, request, response);
}

void CallbackHandler::Stub::async::OnWindowClose(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest* request, ::octaneapi::CallbackAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::OnWindowCloseRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnWindowClose_, context, request, response, std::move(f));
}

void CallbackHandler::Stub::async::OnWindowClose(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest* request, ::octaneapi::CallbackAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OnWindowClose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::PrepareAsyncOnWindowCloseRaw(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CallbackAck, ::octaneapi::OnWindowCloseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OnWindowClose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CallbackAck>* CallbackHandler::Stub::AsyncOnWindowCloseRaw(::grpc::ClientContext* context, const ::octaneapi::OnWindowCloseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOnWindowCloseRaw(context, request, cq);
  result->StartCall();
  return result;
}

CallbackHandler::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::StartRequest, ::octaneapi::StartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::StartRequest* req,
             ::octaneapi::StartResponse* resp) {
               return service->Start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::StopRequest, ::octaneapi::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::StopRequest* req,
             ::octaneapi::StopResponse* resp) {
               return service->Stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::google::protobuf::Empty, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::octaneapi::CallbackAck* resp) {
               return service->PerformBlocking(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::LoadRenderStateProjectRequest, ::octaneapi::LoadRenderStateProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::LoadRenderStateProjectRequest* req,
             ::octaneapi::LoadRenderStateProjectResponse* resp) {
               return service->LoadRenderStateProject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::DaemonUpdateRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::DaemonUpdateRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->OnDaemonUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::StatusUpdateRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::StatusUpdateRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->OnStatusUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::TriggerFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::TriggerFuncRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->TriggerFunc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::EvaluateFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::EvaluateFuncRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->EvaluateFunc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::CleanupFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::CleanupFuncRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->CleanupFunc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::DestroyFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::DestroyFuncRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->DestroyFunc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::ColorChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ColorChangedRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->ColorChanged(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::CreateFuncRequest, ::octaneapi::CreateFuncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::CreateFuncRequest* req,
             ::octaneapi::CreateFuncResponse* resp) {
               return service->CreateFunc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::InitFuncRequest, ::octaneapi::InitFuncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::InitFuncRequest* req,
             ::octaneapi::InitFuncResponse* resp) {
               return service->InitFunc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::ChangeManagerObserverRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ChangeManagerObserverRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->ChangeManagerObserver(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::ChangeManagerTimeObserverRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ChangeManagerTimeObserverRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->ChangeManagerTimeObserver(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ObserverRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->ProjectManagerObserver(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::ObserverRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ObserverRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->SelectionManagerObserver(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::IsReadyRequest, ::octaneapi::IsReadyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::IsReadyRequest* req,
             ::octaneapi::IsReadyResponse* resp) {
               return service->IsReady(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::NotificationRequest, ::octaneapi::NotificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::NotificationRequest* req,
             ::octaneapi::NotificationResponse* resp) {
               return service->Notify(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::CommandModuleRunFuncRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::CommandModuleRunFuncRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->CommandModuleRunFunc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::ObserverCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ObserverCallbackRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->ObserverCallback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::DbViewLoadedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::DbViewLoadedRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->DbViewLoaded(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::FinishRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::FinishRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->Finish(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::BasicCallbackRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->OnTileBlended(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::BasicCallbackRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->OnNewStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::OnNewImageRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::OnNewImageRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->OnNewImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::OnOcioErrorRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::OnOcioErrorRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->OnOcioError(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::BasicCallbackRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->OnRenderFailure(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::NextChunkRequest, ::octaneapi::NextChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::NextChunkRequest* req,
             ::octaneapi::NextChunkResponse* resp) {
               return service->NextChunk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::CheckedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::CheckedRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->Checked(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::ComboBoxChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ComboBoxChangedRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->ComboBoxChanged(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::ApiLogRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiLogRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->ApiLog(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::BasicCallbackRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->OnMainWindowClose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::MouseEventRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::MouseEventRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->MouseEvent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::BasicCallbackRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::BasicCallbackRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->DbViewClosing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::NumericBoxChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::NumericBoxChangedRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->NumericBoxChanged(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::Callback1Request, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::Callback1Request* req,
             ::octaneapi::CallbackAck* resp) {
               return service->Callback1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::Callback2Request, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::Callback2Request* req,
             ::octaneapi::CallbackAck* resp) {
               return service->Callback2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::AssetMissingRequest* req,
             ::octaneapi::AssetMissingResponse* resp) {
               return service->ApiProjectManager_AssetMissing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::UpdateRequest, ::octaneapi::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::UpdateRequest* req,
             ::octaneapi::UpdateResponse* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::AsyncUpdateRequest, ::octaneapi::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::AsyncUpdateRequest* req,
             ::octaneapi::UpdateResponse* resp) {
               return service->AsyncUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::AssetMissingRequest, ::octaneapi::AssetMissingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::AssetMissingRequest* req,
             ::octaneapi::AssetMissingResponse* resp) {
               return service->AssetMissing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::BasicCallbackRequest, ::octaneapi::NumRowsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::BasicCallbackRequest* req,
             ::octaneapi::NumRowsResponse* resp) {
               return service->NumRows(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::ContentRequest, ::octaneapi::ContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ContentRequest* req,
             ::octaneapi::ContentResponse* resp) {
               return service->Content(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::ButtonClickedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ButtonClickedRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->ButtonClicked(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::SelectionChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::SelectionChangedRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->SelectionChanged(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::TextEditorChangedRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::TextEditorChangedRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->TextEditorChanged(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallbackHandler_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallbackHandler::Service, ::octaneapi::OnWindowCloseRequest, ::octaneapi::CallbackAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallbackHandler::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::OnWindowCloseRequest* req,
             ::octaneapi::CallbackAck* resp) {
               return service->OnWindowClose(ctx, req, resp);
             }, this)));
}

CallbackHandler::Service::~Service() {
}

::grpc::Status CallbackHandler::Service::Start(::grpc::ServerContext* context, const ::octaneapi::StartRequest* request, ::octaneapi::StartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::Stop(::grpc::ServerContext* context, const ::octaneapi::StopRequest* request, ::octaneapi::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::PerformBlocking(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::LoadRenderStateProject(::grpc::ServerContext* context, const ::octaneapi::LoadRenderStateProjectRequest* request, ::octaneapi::LoadRenderStateProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::OnDaemonUpdate(::grpc::ServerContext* context, const ::octaneapi::DaemonUpdateRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::OnStatusUpdate(::grpc::ServerContext* context, const ::octaneapi::StatusUpdateRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::TriggerFunc(::grpc::ServerContext* context, const ::octaneapi::TriggerFuncRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::EvaluateFunc(::grpc::ServerContext* context, const ::octaneapi::EvaluateFuncRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::CleanupFunc(::grpc::ServerContext* context, const ::octaneapi::CleanupFuncRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::DestroyFunc(::grpc::ServerContext* context, const ::octaneapi::DestroyFuncRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::ColorChanged(::grpc::ServerContext* context, const ::octaneapi::ColorChangedRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::CreateFunc(::grpc::ServerContext* context, const ::octaneapi::CreateFuncRequest* request, ::octaneapi::CreateFuncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::InitFunc(::grpc::ServerContext* context, const ::octaneapi::InitFuncRequest* request, ::octaneapi::InitFuncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::ChangeManagerObserver(::grpc::ServerContext* context, const ::octaneapi::ChangeManagerObserverRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::ChangeManagerTimeObserver(::grpc::ServerContext* context, const ::octaneapi::ChangeManagerTimeObserverRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::ProjectManagerObserver(::grpc::ServerContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::SelectionManagerObserver(::grpc::ServerContext* context, const ::octaneapi::ObserverRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::IsReady(::grpc::ServerContext* context, const ::octaneapi::IsReadyRequest* request, ::octaneapi::IsReadyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::Notify(::grpc::ServerContext* context, const ::octaneapi::NotificationRequest* request, ::octaneapi::NotificationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::CommandModuleRunFunc(::grpc::ServerContext* context, const ::octaneapi::CommandModuleRunFuncRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::ObserverCallback(::grpc::ServerContext* context, const ::octaneapi::ObserverCallbackRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::DbViewLoaded(::grpc::ServerContext* context, const ::octaneapi::DbViewLoadedRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::Finish(::grpc::ServerContext* context, const ::octaneapi::FinishRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::OnTileBlended(::grpc::ServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::OnNewStatistics(::grpc::ServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::OnNewImage(::grpc::ServerContext* context, const ::octaneapi::OnNewImageRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::OnOcioError(::grpc::ServerContext* context, const ::octaneapi::OnOcioErrorRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::OnRenderFailure(::grpc::ServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::NextChunk(::grpc::ServerContext* context, const ::octaneapi::NextChunkRequest* request, ::octaneapi::NextChunkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::Checked(::grpc::ServerContext* context, const ::octaneapi::CheckedRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::ComboBoxChanged(::grpc::ServerContext* context, const ::octaneapi::ComboBoxChangedRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::ApiLog(::grpc::ServerContext* context, const ::octaneapi::ApiLogRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::OnMainWindowClose(::grpc::ServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::MouseEvent(::grpc::ServerContext* context, const ::octaneapi::MouseEventRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::DbViewClosing(::grpc::ServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::NumericBoxChanged(::grpc::ServerContext* context, const ::octaneapi::NumericBoxChangedRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::Callback1(::grpc::ServerContext* context, const ::octaneapi::Callback1Request* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::Callback2(::grpc::ServerContext* context, const ::octaneapi::Callback2Request* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::ApiProjectManager_AssetMissing(::grpc::ServerContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::Update(::grpc::ServerContext* context, const ::octaneapi::UpdateRequest* request, ::octaneapi::UpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::AsyncUpdate(::grpc::ServerContext* context, const ::octaneapi::AsyncUpdateRequest* request, ::octaneapi::UpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::AssetMissing(::grpc::ServerContext* context, const ::octaneapi::AssetMissingRequest* request, ::octaneapi::AssetMissingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::NumRows(::grpc::ServerContext* context, const ::octaneapi::BasicCallbackRequest* request, ::octaneapi::NumRowsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::Content(::grpc::ServerContext* context, const ::octaneapi::ContentRequest* request, ::octaneapi::ContentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::ButtonClicked(::grpc::ServerContext* context, const ::octaneapi::ButtonClickedRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::SelectionChanged(::grpc::ServerContext* context, const ::octaneapi::SelectionChangedRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::TextEditorChanged(::grpc::ServerContext* context, const ::octaneapi::TextEditorChangedRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallbackHandler::Service::OnWindowClose(::grpc::ServerContext* context, const ::octaneapi::OnWindowCloseRequest* request, ::octaneapi::CallbackAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamCallbackService_method_names[] = {
  "/octaneapi.StreamCallbackService/callbackChannel",
};

std::unique_ptr< StreamCallbackService::Stub> StreamCallbackService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamCallbackService::Stub> stub(new StreamCallbackService::Stub(channel, options));
  return stub;
}

StreamCallbackService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_callbackChannel_(StreamCallbackService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::octaneapi::StreamCallbackRequest>* StreamCallbackService::Stub::callbackChannelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::octaneapi::StreamCallbackRequest>::Create(channel_.get(), rpcmethod_callbackChannel_, context, request);
}

void StreamCallbackService::Stub::async::callbackChannel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::octaneapi::StreamCallbackRequest>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::octaneapi::StreamCallbackRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_callbackChannel_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::octaneapi::StreamCallbackRequest>* StreamCallbackService::Stub::AsynccallbackChannelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::octaneapi::StreamCallbackRequest>::Create(channel_.get(), cq, rpcmethod_callbackChannel_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::octaneapi::StreamCallbackRequest>* StreamCallbackService::Stub::PrepareAsynccallbackChannelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::octaneapi::StreamCallbackRequest>::Create(channel_.get(), cq, rpcmethod_callbackChannel_, context, request, false, nullptr);
}

StreamCallbackService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamCallbackService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StreamCallbackService::Service, ::google::protobuf::Empty, ::octaneapi::StreamCallbackRequest>(
          [](StreamCallbackService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::octaneapi::StreamCallbackRequest>* writer) {
               return service->callbackChannel(ctx, req, writer);
             }, this)));
}

StreamCallbackService::Service::~Service() {
}

::grpc::Status StreamCallbackService::Service::callbackChannel(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::octaneapi::StreamCallbackRequest>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

