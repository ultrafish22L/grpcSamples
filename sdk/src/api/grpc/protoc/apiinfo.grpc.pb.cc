// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apiinfo.proto

#include "apiinfo.pb.h"
#include "apiinfo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiInfoService_method_names[] = {
  "/octaneapi.ApiInfoService/octaneVersion",
  "/octaneapi.ApiInfoService/octaneName",
  "/octaneapi.ApiInfoService/isDemoVersion",
  "/octaneapi.ApiInfoService/isSubscriptionVersion",
  "/octaneapi.ApiInfoService/tierIdx",
  "/octaneapi.ApiInfoService/osVersionInfo",
  "/octaneapi.ApiInfoService/driverVersionInfo",
  "/octaneapi.ApiInfoService/cpuInfo",
  "/octaneapi.ApiInfoService/texCacheFolder",
  "/octaneapi.ApiInfoService/getAttributeTypes",
  "/octaneapi.ApiInfoService/getPinTypes",
  "/octaneapi.ApiInfoService/getGraphTypes",
  "/octaneapi.ApiInfoService/getNodeTypes",
  "/octaneapi.ApiInfoService/nodeInfo",
  "/octaneapi.ApiInfoService/graphInfo",
  "/octaneapi.ApiInfoService/nodeIconImage",
  "/octaneapi.ApiInfoService/graphIconImage",
  "/octaneapi.ApiInfoService/attributeInfo",
  "/octaneapi.ApiInfoService/attributeInfo1",
  "/octaneapi.ApiInfoService/attributeInfo2",
  "/octaneapi.ApiInfoService/nodePinInfo",
  "/octaneapi.ApiInfoService/getAttributeTypeName",
  "/octaneapi.ApiInfoService/getPinTypeName",
  "/octaneapi.ApiInfoService/getPinTypeColor",
  "/octaneapi.ApiInfoService/getGraphTypeName",
  "/octaneapi.ApiInfoService/getNodeTypeName",
  "/octaneapi.ApiInfoService/getItemTypeName",
  "/octaneapi.ApiInfoService/getAttributeName",
  "/octaneapi.ApiInfoService/getAttributeId",
  "/octaneapi.ApiInfoService/getAttributeIdName",
  "/octaneapi.ApiInfoService/getAttributeIdName1",
  "/octaneapi.ApiInfoService/getPinName",
  "/octaneapi.ApiInfoService/getPinId",
  "/octaneapi.ApiInfoService/getPinIdName",
  "/octaneapi.ApiInfoService/getPinIdName1",
  "/octaneapi.ApiInfoService/getTextureValueTypeName",
  "/octaneapi.ApiInfoService/getTextureValueTypeForOslType",
  "/octaneapi.ApiInfoService/getCompatibleTypes",
  "/octaneapi.ApiInfoService/renderPassInfo",
  "/octaneapi.ApiInfoService/getAllRenderPassIds",
  "/octaneapi.ApiInfoService/getRenderPassIdFromRenderAovNode",
  "/octaneapi.ApiInfoService/getRenderAovInfoFromRenderAovNode",
  "/octaneapi.ApiInfoService/renderPassName",
  "/octaneapi.ApiInfoService/renderPassShortName",
  "/octaneapi.ApiInfoService/renderPassIdToPinId",
  "/octaneapi.ApiInfoService/renderPassGroupName",
  "/octaneapi.ApiInfoService/pinIdToRenderPassId",
  "/octaneapi.ApiInfoService/findPinIdForRenderPassId",
  "/octaneapi.ApiInfoService/findRenderPassIdForPinId",
};

std::unique_ptr< ApiInfoService::Stub> ApiInfoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiInfoService::Stub> stub(new ApiInfoService::Stub(channel, options));
  return stub;
}

ApiInfoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_octaneVersion_(ApiInfoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_octaneName_(ApiInfoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isDemoVersion_(ApiInfoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isSubscriptionVersion_(ApiInfoService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_tierIdx_(ApiInfoService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_osVersionInfo_(ApiInfoService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_driverVersionInfo_(ApiInfoService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_cpuInfo_(ApiInfoService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_texCacheFolder_(ApiInfoService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAttributeTypes_(ApiInfoService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPinTypes_(ApiInfoService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGraphTypes_(ApiInfoService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNodeTypes_(ApiInfoService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nodeInfo_(ApiInfoService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_graphInfo_(ApiInfoService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nodeIconImage_(ApiInfoService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_graphIconImage_(ApiInfoService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_attributeInfo_(ApiInfoService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_attributeInfo1_(ApiInfoService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_attributeInfo2_(ApiInfoService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nodePinInfo_(ApiInfoService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAttributeTypeName_(ApiInfoService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPinTypeName_(ApiInfoService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPinTypeColor_(ApiInfoService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGraphTypeName_(ApiInfoService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNodeTypeName_(ApiInfoService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getItemTypeName_(ApiInfoService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAttributeName_(ApiInfoService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAttributeId_(ApiInfoService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAttributeIdName_(ApiInfoService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAttributeIdName1_(ApiInfoService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPinName_(ApiInfoService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPinId_(ApiInfoService_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPinIdName_(ApiInfoService_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPinIdName1_(ApiInfoService_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTextureValueTypeName_(ApiInfoService_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTextureValueTypeForOslType_(ApiInfoService_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCompatibleTypes_(ApiInfoService_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_renderPassInfo_(ApiInfoService_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAllRenderPassIds_(ApiInfoService_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRenderPassIdFromRenderAovNode_(ApiInfoService_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRenderAovInfoFromRenderAovNode_(ApiInfoService_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_renderPassName_(ApiInfoService_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_renderPassShortName_(ApiInfoService_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_renderPassIdToPinId_(ApiInfoService_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_renderPassGroupName_(ApiInfoService_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pinIdToRenderPassId_(ApiInfoService_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_findPinIdForRenderPassId_(ApiInfoService_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_findRenderPassIdForPinId_(ApiInfoService_method_names[48], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiInfoService::Stub::octaneVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest& request, ::octaneapi::ApiInfo_octaneVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_octaneVersionRequest, ::octaneapi::ApiInfo_octaneVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_octaneVersion_, context, request, response);
}

void ApiInfoService::Stub::async::octaneVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest* request, ::octaneapi::ApiInfo_octaneVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_octaneVersionRequest, ::octaneapi::ApiInfo_octaneVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_octaneVersion_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::octaneVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest* request, ::octaneapi::ApiInfo_octaneVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_octaneVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneVersionResponse>* ApiInfoService::Stub::PrepareAsyncoctaneVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_octaneVersionResponse, ::octaneapi::ApiInfo_octaneVersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_octaneVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneVersionResponse>* ApiInfoService::Stub::AsyncoctaneVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncoctaneVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::octaneName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest& request, ::octaneapi::ApiInfo_octaneNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_octaneNameRequest, ::octaneapi::ApiInfo_octaneNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_octaneName_, context, request, response);
}

void ApiInfoService::Stub::async::octaneName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest* request, ::octaneapi::ApiInfo_octaneNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_octaneNameRequest, ::octaneapi::ApiInfo_octaneNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_octaneName_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::octaneName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest* request, ::octaneapi::ApiInfo_octaneNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_octaneName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneNameResponse>* ApiInfoService::Stub::PrepareAsyncoctaneNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_octaneNameResponse, ::octaneapi::ApiInfo_octaneNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_octaneName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_octaneNameResponse>* ApiInfoService::Stub::AsyncoctaneNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_octaneNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncoctaneNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::isDemoVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest& request, ::octaneapi::ApiInfo_isDemoVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_isDemoVersionRequest, ::octaneapi::ApiInfo_isDemoVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isDemoVersion_, context, request, response);
}

void ApiInfoService::Stub::async::isDemoVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest* request, ::octaneapi::ApiInfo_isDemoVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_isDemoVersionRequest, ::octaneapi::ApiInfo_isDemoVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isDemoVersion_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::isDemoVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest* request, ::octaneapi::ApiInfo_isDemoVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isDemoVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isDemoVersionResponse>* ApiInfoService::Stub::PrepareAsyncisDemoVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_isDemoVersionResponse, ::octaneapi::ApiInfo_isDemoVersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isDemoVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isDemoVersionResponse>* ApiInfoService::Stub::AsyncisDemoVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisDemoVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::isSubscriptionVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest& request, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_isSubscriptionVersionRequest, ::octaneapi::ApiInfo_isSubscriptionVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isSubscriptionVersion_, context, request, response);
}

void ApiInfoService::Stub::async::isSubscriptionVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* request, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_isSubscriptionVersionRequest, ::octaneapi::ApiInfo_isSubscriptionVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isSubscriptionVersion_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::isSubscriptionVersion(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* request, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isSubscriptionVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>* ApiInfoService::Stub::PrepareAsyncisSubscriptionVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_isSubscriptionVersionResponse, ::octaneapi::ApiInfo_isSubscriptionVersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isSubscriptionVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_isSubscriptionVersionResponse>* ApiInfoService::Stub::AsyncisSubscriptionVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisSubscriptionVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::tierIdx(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest& request, ::octaneapi::ApiInfo_tierIdxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_tierIdxRequest, ::octaneapi::ApiInfo_tierIdxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_tierIdx_, context, request, response);
}

void ApiInfoService::Stub::async::tierIdx(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest* request, ::octaneapi::ApiInfo_tierIdxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_tierIdxRequest, ::octaneapi::ApiInfo_tierIdxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_tierIdx_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::tierIdx(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest* request, ::octaneapi::ApiInfo_tierIdxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_tierIdx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_tierIdxResponse>* ApiInfoService::Stub::PrepareAsynctierIdxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_tierIdxResponse, ::octaneapi::ApiInfo_tierIdxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_tierIdx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_tierIdxResponse>* ApiInfoService::Stub::AsynctierIdxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_tierIdxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctierIdxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::osVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest& request, ::octaneapi::ApiInfo_osVersionInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_osVersionInfoRequest, ::octaneapi::ApiInfo_osVersionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_osVersionInfo_, context, request, response);
}

void ApiInfoService::Stub::async::osVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest* request, ::octaneapi::ApiInfo_osVersionInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_osVersionInfoRequest, ::octaneapi::ApiInfo_osVersionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_osVersionInfo_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::osVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest* request, ::octaneapi::ApiInfo_osVersionInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_osVersionInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_osVersionInfoResponse>* ApiInfoService::Stub::PrepareAsyncosVersionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_osVersionInfoResponse, ::octaneapi::ApiInfo_osVersionInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_osVersionInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_osVersionInfoResponse>* ApiInfoService::Stub::AsyncosVersionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncosVersionInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::driverVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest& request, ::octaneapi::ApiInfo_driverVersionInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_driverVersionInfoRequest, ::octaneapi::ApiInfo_driverVersionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_driverVersionInfo_, context, request, response);
}

void ApiInfoService::Stub::async::driverVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest* request, ::octaneapi::ApiInfo_driverVersionInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_driverVersionInfoRequest, ::octaneapi::ApiInfo_driverVersionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_driverVersionInfo_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::driverVersionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest* request, ::octaneapi::ApiInfo_driverVersionInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_driverVersionInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_driverVersionInfoResponse>* ApiInfoService::Stub::PrepareAsyncdriverVersionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_driverVersionInfoResponse, ::octaneapi::ApiInfo_driverVersionInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_driverVersionInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_driverVersionInfoResponse>* ApiInfoService::Stub::AsyncdriverVersionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdriverVersionInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::cpuInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest& request, ::octaneapi::ApiInfo_cpuInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_cpuInfoRequest, ::octaneapi::ApiInfo_cpuInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_cpuInfo_, context, request, response);
}

void ApiInfoService::Stub::async::cpuInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest* request, ::octaneapi::ApiInfo_cpuInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_cpuInfoRequest, ::octaneapi::ApiInfo_cpuInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_cpuInfo_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::cpuInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest* request, ::octaneapi::ApiInfo_cpuInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_cpuInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_cpuInfoResponse>* ApiInfoService::Stub::PrepareAsynccpuInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_cpuInfoResponse, ::octaneapi::ApiInfo_cpuInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_cpuInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_cpuInfoResponse>* ApiInfoService::Stub::AsynccpuInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccpuInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::texCacheFolder(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest& request, ::octaneapi::ApiInfo_texCacheFolderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_texCacheFolderRequest, ::octaneapi::ApiInfo_texCacheFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_texCacheFolder_, context, request, response);
}

void ApiInfoService::Stub::async::texCacheFolder(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest* request, ::octaneapi::ApiInfo_texCacheFolderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_texCacheFolderRequest, ::octaneapi::ApiInfo_texCacheFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_texCacheFolder_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::texCacheFolder(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest* request, ::octaneapi::ApiInfo_texCacheFolderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_texCacheFolder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_texCacheFolderResponse>* ApiInfoService::Stub::PrepareAsynctexCacheFolderRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_texCacheFolderResponse, ::octaneapi::ApiInfo_texCacheFolderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_texCacheFolder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_texCacheFolderResponse>* ApiInfoService::Stub::AsynctexCacheFolderRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctexCacheFolderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getAttributeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest& request, ::octaneapi::ApiInfo_getAttributeTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getAttributeTypesRequest, ::octaneapi::ApiInfo_getAttributeTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAttributeTypes_, context, request, response);
}

void ApiInfoService::Stub::async::getAttributeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest* request, ::octaneapi::ApiInfo_getAttributeTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getAttributeTypesRequest, ::octaneapi::ApiInfo_getAttributeTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAttributeTypes_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getAttributeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest* request, ::octaneapi::ApiInfo_getAttributeTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAttributeTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypesResponse>* ApiInfoService::Stub::PrepareAsyncgetAttributeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getAttributeTypesResponse, ::octaneapi::ApiInfo_getAttributeTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAttributeTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypesResponse>* ApiInfoService::Stub::AsyncgetAttributeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAttributeTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getPinTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest& request, ::octaneapi::ApiInfo_getPinTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getPinTypesRequest, ::octaneapi::ApiInfo_getPinTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPinTypes_, context, request, response);
}

void ApiInfoService::Stub::async::getPinTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest* request, ::octaneapi::ApiInfo_getPinTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getPinTypesRequest, ::octaneapi::ApiInfo_getPinTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPinTypes_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getPinTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest* request, ::octaneapi::ApiInfo_getPinTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPinTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypesResponse>* ApiInfoService::Stub::PrepareAsyncgetPinTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getPinTypesResponse, ::octaneapi::ApiInfo_getPinTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPinTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypesResponse>* ApiInfoService::Stub::AsyncgetPinTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPinTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getGraphTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest& request, ::octaneapi::ApiInfo_getGraphTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getGraphTypesRequest, ::octaneapi::ApiInfo_getGraphTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getGraphTypes_, context, request, response);
}

void ApiInfoService::Stub::async::getGraphTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest* request, ::octaneapi::ApiInfo_getGraphTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getGraphTypesRequest, ::octaneapi::ApiInfo_getGraphTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGraphTypes_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getGraphTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest* request, ::octaneapi::ApiInfo_getGraphTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGraphTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypesResponse>* ApiInfoService::Stub::PrepareAsyncgetGraphTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getGraphTypesResponse, ::octaneapi::ApiInfo_getGraphTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getGraphTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypesResponse>* ApiInfoService::Stub::AsyncgetGraphTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetGraphTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest& request, ::octaneapi::ApiInfo_getNodeTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getNodeTypesRequest, ::octaneapi::ApiInfo_getNodeTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNodeTypes_, context, request, response);
}

void ApiInfoService::Stub::async::getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest* request, ::octaneapi::ApiInfo_getNodeTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getNodeTypesRequest, ::octaneapi::ApiInfo_getNodeTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNodeTypes_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getNodeTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest* request, ::octaneapi::ApiInfo_getNodeTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNodeTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypesResponse>* ApiInfoService::Stub::PrepareAsyncgetNodeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getNodeTypesResponse, ::octaneapi::ApiInfo_getNodeTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNodeTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypesResponse>* ApiInfoService::Stub::AsyncgetNodeTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNodeTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::nodeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest& request, ::octaneapi::ApiInfo_nodeInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_nodeInfoRequest, ::octaneapi::ApiInfo_nodeInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_nodeInfo_, context, request, response);
}

void ApiInfoService::Stub::async::nodeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest* request, ::octaneapi::ApiInfo_nodeInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_nodeInfoRequest, ::octaneapi::ApiInfo_nodeInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_nodeInfo_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::nodeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest* request, ::octaneapi::ApiInfo_nodeInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_nodeInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeInfoResponse>* ApiInfoService::Stub::PrepareAsyncnodeInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_nodeInfoResponse, ::octaneapi::ApiInfo_nodeInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_nodeInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeInfoResponse>* ApiInfoService::Stub::AsyncnodeInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnodeInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::graphInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest& request, ::octaneapi::ApiInfo_graphInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_graphInfoRequest, ::octaneapi::ApiInfo_graphInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_graphInfo_, context, request, response);
}

void ApiInfoService::Stub::async::graphInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest* request, ::octaneapi::ApiInfo_graphInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_graphInfoRequest, ::octaneapi::ApiInfo_graphInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_graphInfo_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::graphInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest* request, ::octaneapi::ApiInfo_graphInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_graphInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphInfoResponse>* ApiInfoService::Stub::PrepareAsyncgraphInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_graphInfoResponse, ::octaneapi::ApiInfo_graphInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_graphInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphInfoResponse>* ApiInfoService::Stub::AsyncgraphInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgraphInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::nodeIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest& request, ::octaneapi::ApiInfo_nodeIconImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_nodeIconImageRequest, ::octaneapi::ApiInfo_nodeIconImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_nodeIconImage_, context, request, response);
}

void ApiInfoService::Stub::async::nodeIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest* request, ::octaneapi::ApiInfo_nodeIconImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_nodeIconImageRequest, ::octaneapi::ApiInfo_nodeIconImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_nodeIconImage_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::nodeIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest* request, ::octaneapi::ApiInfo_nodeIconImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_nodeIconImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeIconImageResponse>* ApiInfoService::Stub::PrepareAsyncnodeIconImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_nodeIconImageResponse, ::octaneapi::ApiInfo_nodeIconImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_nodeIconImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodeIconImageResponse>* ApiInfoService::Stub::AsyncnodeIconImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnodeIconImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::graphIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest& request, ::octaneapi::ApiInfo_graphIconImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_graphIconImageRequest, ::octaneapi::ApiInfo_graphIconImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_graphIconImage_, context, request, response);
}

void ApiInfoService::Stub::async::graphIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest* request, ::octaneapi::ApiInfo_graphIconImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_graphIconImageRequest, ::octaneapi::ApiInfo_graphIconImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_graphIconImage_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::graphIconImage(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest* request, ::octaneapi::ApiInfo_graphIconImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_graphIconImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphIconImageResponse>* ApiInfoService::Stub::PrepareAsyncgraphIconImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_graphIconImageResponse, ::octaneapi::ApiInfo_graphIconImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_graphIconImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_graphIconImageResponse>* ApiInfoService::Stub::AsyncgraphIconImageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgraphIconImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::attributeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest& request, ::octaneapi::ApiInfo_attributeInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_attributeInfoRequest, ::octaneapi::ApiInfo_attributeInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_attributeInfo_, context, request, response);
}

void ApiInfoService::Stub::async::attributeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest* request, ::octaneapi::ApiInfo_attributeInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_attributeInfoRequest, ::octaneapi::ApiInfo_attributeInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_attributeInfo_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::attributeInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest* request, ::octaneapi::ApiInfo_attributeInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_attributeInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfoResponse>* ApiInfoService::Stub::PrepareAsyncattributeInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_attributeInfoResponse, ::octaneapi::ApiInfo_attributeInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_attributeInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfoResponse>* ApiInfoService::Stub::AsyncattributeInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncattributeInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::attributeInfo1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request& request, ::octaneapi::ApiInfo_attributeInfo1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_attributeInfo1Request, ::octaneapi::ApiInfo_attributeInfo1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_attributeInfo1_, context, request, response);
}

void ApiInfoService::Stub::async::attributeInfo1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request* request, ::octaneapi::ApiInfo_attributeInfo1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_attributeInfo1Request, ::octaneapi::ApiInfo_attributeInfo1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_attributeInfo1_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::attributeInfo1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request* request, ::octaneapi::ApiInfo_attributeInfo1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_attributeInfo1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo1Response>* ApiInfoService::Stub::PrepareAsyncattributeInfo1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_attributeInfo1Response, ::octaneapi::ApiInfo_attributeInfo1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_attributeInfo1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo1Response>* ApiInfoService::Stub::AsyncattributeInfo1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncattributeInfo1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::attributeInfo2(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request& request, ::octaneapi::ApiInfo_attributeInfo2Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_attributeInfo2Request, ::octaneapi::ApiInfo_attributeInfo2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_attributeInfo2_, context, request, response);
}

void ApiInfoService::Stub::async::attributeInfo2(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request* request, ::octaneapi::ApiInfo_attributeInfo2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_attributeInfo2Request, ::octaneapi::ApiInfo_attributeInfo2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_attributeInfo2_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::attributeInfo2(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request* request, ::octaneapi::ApiInfo_attributeInfo2Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_attributeInfo2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo2Response>* ApiInfoService::Stub::PrepareAsyncattributeInfo2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_attributeInfo2Response, ::octaneapi::ApiInfo_attributeInfo2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_attributeInfo2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_attributeInfo2Response>* ApiInfoService::Stub::AsyncattributeInfo2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncattributeInfo2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::nodePinInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest& request, ::octaneapi::ApiInfo_nodePinInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_nodePinInfoRequest, ::octaneapi::ApiInfo_nodePinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_nodePinInfo_, context, request, response);
}

void ApiInfoService::Stub::async::nodePinInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest* request, ::octaneapi::ApiInfo_nodePinInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_nodePinInfoRequest, ::octaneapi::ApiInfo_nodePinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_nodePinInfo_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::nodePinInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest* request, ::octaneapi::ApiInfo_nodePinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_nodePinInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodePinInfoResponse>* ApiInfoService::Stub::PrepareAsyncnodePinInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_nodePinInfoResponse, ::octaneapi::ApiInfo_nodePinInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_nodePinInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_nodePinInfoResponse>* ApiInfoService::Stub::AsyncnodePinInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnodePinInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getAttributeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest& request, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getAttributeTypeNameRequest, ::octaneapi::ApiInfo_getAttributeTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAttributeTypeName_, context, request, response);
}

void ApiInfoService::Stub::async::getAttributeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* request, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getAttributeTypeNameRequest, ::octaneapi::ApiInfo_getAttributeTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAttributeTypeName_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getAttributeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* request, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAttributeTypeName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>* ApiInfoService::Stub::PrepareAsyncgetAttributeTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getAttributeTypeNameResponse, ::octaneapi::ApiInfo_getAttributeTypeNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAttributeTypeName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeTypeNameResponse>* ApiInfoService::Stub::AsyncgetAttributeTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAttributeTypeNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getPinTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest& request, ::octaneapi::ApiInfo_getPinTypeNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getPinTypeNameRequest, ::octaneapi::ApiInfo_getPinTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPinTypeName_, context, request, response);
}

void ApiInfoService::Stub::async::getPinTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest* request, ::octaneapi::ApiInfo_getPinTypeNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getPinTypeNameRequest, ::octaneapi::ApiInfo_getPinTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPinTypeName_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getPinTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest* request, ::octaneapi::ApiInfo_getPinTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPinTypeName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeNameResponse>* ApiInfoService::Stub::PrepareAsyncgetPinTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getPinTypeNameResponse, ::octaneapi::ApiInfo_getPinTypeNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPinTypeName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeNameResponse>* ApiInfoService::Stub::AsyncgetPinTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPinTypeNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getPinTypeColor(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest& request, ::octaneapi::ApiInfo_getPinTypeColorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getPinTypeColorRequest, ::octaneapi::ApiInfo_getPinTypeColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPinTypeColor_, context, request, response);
}

void ApiInfoService::Stub::async::getPinTypeColor(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest* request, ::octaneapi::ApiInfo_getPinTypeColorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getPinTypeColorRequest, ::octaneapi::ApiInfo_getPinTypeColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPinTypeColor_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getPinTypeColor(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest* request, ::octaneapi::ApiInfo_getPinTypeColorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPinTypeColor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeColorResponse>* ApiInfoService::Stub::PrepareAsyncgetPinTypeColorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getPinTypeColorResponse, ::octaneapi::ApiInfo_getPinTypeColorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPinTypeColor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinTypeColorResponse>* ApiInfoService::Stub::AsyncgetPinTypeColorRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPinTypeColorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getGraphTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest& request, ::octaneapi::ApiInfo_getGraphTypeNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getGraphTypeNameRequest, ::octaneapi::ApiInfo_getGraphTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getGraphTypeName_, context, request, response);
}

void ApiInfoService::Stub::async::getGraphTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* request, ::octaneapi::ApiInfo_getGraphTypeNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getGraphTypeNameRequest, ::octaneapi::ApiInfo_getGraphTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGraphTypeName_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getGraphTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* request, ::octaneapi::ApiInfo_getGraphTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGraphTypeName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypeNameResponse>* ApiInfoService::Stub::PrepareAsyncgetGraphTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getGraphTypeNameResponse, ::octaneapi::ApiInfo_getGraphTypeNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getGraphTypeName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getGraphTypeNameResponse>* ApiInfoService::Stub::AsyncgetGraphTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetGraphTypeNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getNodeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest& request, ::octaneapi::ApiInfo_getNodeTypeNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getNodeTypeNameRequest, ::octaneapi::ApiInfo_getNodeTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNodeTypeName_, context, request, response);
}

void ApiInfoService::Stub::async::getNodeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* request, ::octaneapi::ApiInfo_getNodeTypeNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getNodeTypeNameRequest, ::octaneapi::ApiInfo_getNodeTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNodeTypeName_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getNodeTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* request, ::octaneapi::ApiInfo_getNodeTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNodeTypeName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypeNameResponse>* ApiInfoService::Stub::PrepareAsyncgetNodeTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getNodeTypeNameResponse, ::octaneapi::ApiInfo_getNodeTypeNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNodeTypeName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getNodeTypeNameResponse>* ApiInfoService::Stub::AsyncgetNodeTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNodeTypeNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getItemTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest& request, ::octaneapi::ApiInfo_getItemTypeNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getItemTypeNameRequest, ::octaneapi::ApiInfo_getItemTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getItemTypeName_, context, request, response);
}

void ApiInfoService::Stub::async::getItemTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest* request, ::octaneapi::ApiInfo_getItemTypeNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getItemTypeNameRequest, ::octaneapi::ApiInfo_getItemTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getItemTypeName_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getItemTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest* request, ::octaneapi::ApiInfo_getItemTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getItemTypeName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getItemTypeNameResponse>* ApiInfoService::Stub::PrepareAsyncgetItemTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getItemTypeNameResponse, ::octaneapi::ApiInfo_getItemTypeNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getItemTypeName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getItemTypeNameResponse>* ApiInfoService::Stub::AsyncgetItemTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetItemTypeNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getAttributeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest& request, ::octaneapi::ApiInfo_getAttributeNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getAttributeNameRequest, ::octaneapi::ApiInfo_getAttributeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAttributeName_, context, request, response);
}

void ApiInfoService::Stub::async::getAttributeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest* request, ::octaneapi::ApiInfo_getAttributeNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getAttributeNameRequest, ::octaneapi::ApiInfo_getAttributeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAttributeName_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getAttributeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest* request, ::octaneapi::ApiInfo_getAttributeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAttributeName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeNameResponse>* ApiInfoService::Stub::PrepareAsyncgetAttributeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getAttributeNameResponse, ::octaneapi::ApiInfo_getAttributeNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAttributeName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeNameResponse>* ApiInfoService::Stub::AsyncgetAttributeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAttributeNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getAttributeId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest& request, ::octaneapi::ApiInfo_getAttributeIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getAttributeIdRequest, ::octaneapi::ApiInfo_getAttributeIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAttributeId_, context, request, response);
}

void ApiInfoService::Stub::async::getAttributeId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest* request, ::octaneapi::ApiInfo_getAttributeIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getAttributeIdRequest, ::octaneapi::ApiInfo_getAttributeIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAttributeId_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getAttributeId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest* request, ::octaneapi::ApiInfo_getAttributeIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAttributeId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdResponse>* ApiInfoService::Stub::PrepareAsyncgetAttributeIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getAttributeIdResponse, ::octaneapi::ApiInfo_getAttributeIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAttributeId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdResponse>* ApiInfoService::Stub::AsyncgetAttributeIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAttributeIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getAttributeIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest& request, ::octaneapi::ApiInfo_getAttributeIdNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getAttributeIdNameRequest, ::octaneapi::ApiInfo_getAttributeIdNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAttributeIdName_, context, request, response);
}

void ApiInfoService::Stub::async::getAttributeIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* request, ::octaneapi::ApiInfo_getAttributeIdNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getAttributeIdNameRequest, ::octaneapi::ApiInfo_getAttributeIdNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAttributeIdName_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getAttributeIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* request, ::octaneapi::ApiInfo_getAttributeIdNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAttributeIdName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdNameResponse>* ApiInfoService::Stub::PrepareAsyncgetAttributeIdNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getAttributeIdNameResponse, ::octaneapi::ApiInfo_getAttributeIdNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAttributeIdName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdNameResponse>* ApiInfoService::Stub::AsyncgetAttributeIdNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAttributeIdNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getAttributeIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request& request, ::octaneapi::ApiInfo_getAttributeIdName1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getAttributeIdName1Request, ::octaneapi::ApiInfo_getAttributeIdName1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAttributeIdName1_, context, request, response);
}

void ApiInfoService::Stub::async::getAttributeIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request* request, ::octaneapi::ApiInfo_getAttributeIdName1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getAttributeIdName1Request, ::octaneapi::ApiInfo_getAttributeIdName1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAttributeIdName1_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getAttributeIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request* request, ::octaneapi::ApiInfo_getAttributeIdName1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAttributeIdName1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdName1Response>* ApiInfoService::Stub::PrepareAsyncgetAttributeIdName1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getAttributeIdName1Response, ::octaneapi::ApiInfo_getAttributeIdName1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAttributeIdName1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAttributeIdName1Response>* ApiInfoService::Stub::AsyncgetAttributeIdName1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAttributeIdName1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getPinName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest& request, ::octaneapi::ApiInfo_getPinNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getPinNameRequest, ::octaneapi::ApiInfo_getPinNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPinName_, context, request, response);
}

void ApiInfoService::Stub::async::getPinName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest* request, ::octaneapi::ApiInfo_getPinNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getPinNameRequest, ::octaneapi::ApiInfo_getPinNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPinName_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getPinName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest* request, ::octaneapi::ApiInfo_getPinNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPinName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinNameResponse>* ApiInfoService::Stub::PrepareAsyncgetPinNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getPinNameResponse, ::octaneapi::ApiInfo_getPinNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPinName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinNameResponse>* ApiInfoService::Stub::AsyncgetPinNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPinNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest& request, ::octaneapi::ApiInfo_getPinIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getPinIdRequest, ::octaneapi::ApiInfo_getPinIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPinId_, context, request, response);
}

void ApiInfoService::Stub::async::getPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest* request, ::octaneapi::ApiInfo_getPinIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getPinIdRequest, ::octaneapi::ApiInfo_getPinIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPinId_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest* request, ::octaneapi::ApiInfo_getPinIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPinId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdResponse>* ApiInfoService::Stub::PrepareAsyncgetPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getPinIdResponse, ::octaneapi::ApiInfo_getPinIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPinId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdResponse>* ApiInfoService::Stub::AsyncgetPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPinIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getPinIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest& request, ::octaneapi::ApiInfo_getPinIdNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getPinIdNameRequest, ::octaneapi::ApiInfo_getPinIdNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPinIdName_, context, request, response);
}

void ApiInfoService::Stub::async::getPinIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest* request, ::octaneapi::ApiInfo_getPinIdNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getPinIdNameRequest, ::octaneapi::ApiInfo_getPinIdNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPinIdName_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getPinIdName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest* request, ::octaneapi::ApiInfo_getPinIdNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPinIdName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdNameResponse>* ApiInfoService::Stub::PrepareAsyncgetPinIdNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getPinIdNameResponse, ::octaneapi::ApiInfo_getPinIdNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPinIdName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdNameResponse>* ApiInfoService::Stub::AsyncgetPinIdNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPinIdNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getPinIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request& request, ::octaneapi::ApiInfo_getPinIdName1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getPinIdName1Request, ::octaneapi::ApiInfo_getPinIdName1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPinIdName1_, context, request, response);
}

void ApiInfoService::Stub::async::getPinIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request* request, ::octaneapi::ApiInfo_getPinIdName1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getPinIdName1Request, ::octaneapi::ApiInfo_getPinIdName1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPinIdName1_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getPinIdName1(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request* request, ::octaneapi::ApiInfo_getPinIdName1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPinIdName1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdName1Response>* ApiInfoService::Stub::PrepareAsyncgetPinIdName1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getPinIdName1Response, ::octaneapi::ApiInfo_getPinIdName1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPinIdName1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getPinIdName1Response>* ApiInfoService::Stub::AsyncgetPinIdName1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPinIdName1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getTextureValueTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest& request, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getTextureValueTypeNameRequest, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getTextureValueTypeName_, context, request, response);
}

void ApiInfoService::Stub::async::getTextureValueTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getTextureValueTypeNameRequest, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTextureValueTypeName_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getTextureValueTypeName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTextureValueTypeName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>* ApiInfoService::Stub::PrepareAsyncgetTextureValueTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse, ::octaneapi::ApiInfo_getTextureValueTypeNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getTextureValueTypeName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeNameResponse>* ApiInfoService::Stub::AsyncgetTextureValueTypeNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTextureValueTypeNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getTextureValueTypeForOslType(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest& request, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getTextureValueTypeForOslType_, context, request, response);
}

void ApiInfoService::Stub::async::getTextureValueTypeForOslType(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTextureValueTypeForOslType_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getTextureValueTypeForOslType(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTextureValueTypeForOslType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>* ApiInfoService::Stub::PrepareAsyncgetTextureValueTypeForOslTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getTextureValueTypeForOslType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse>* ApiInfoService::Stub::AsyncgetTextureValueTypeForOslTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTextureValueTypeForOslTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getCompatibleTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest& request, ::octaneapi::ApiInfo_getCompatibleTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getCompatibleTypesRequest, ::octaneapi::ApiInfo_getCompatibleTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getCompatibleTypes_, context, request, response);
}

void ApiInfoService::Stub::async::getCompatibleTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* request, ::octaneapi::ApiInfo_getCompatibleTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getCompatibleTypesRequest, ::octaneapi::ApiInfo_getCompatibleTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCompatibleTypes_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getCompatibleTypes(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* request, ::octaneapi::ApiInfo_getCompatibleTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCompatibleTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getCompatibleTypesResponse>* ApiInfoService::Stub::PrepareAsyncgetCompatibleTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getCompatibleTypesResponse, ::octaneapi::ApiInfo_getCompatibleTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getCompatibleTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getCompatibleTypesResponse>* ApiInfoService::Stub::AsyncgetCompatibleTypesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetCompatibleTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::renderPassInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest& request, ::octaneapi::ApiInfo_renderPassInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_renderPassInfoRequest, ::octaneapi::ApiInfo_renderPassInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_renderPassInfo_, context, request, response);
}

void ApiInfoService::Stub::async::renderPassInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest* request, ::octaneapi::ApiInfo_renderPassInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_renderPassInfoRequest, ::octaneapi::ApiInfo_renderPassInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderPassInfo_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::renderPassInfo(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest* request, ::octaneapi::ApiInfo_renderPassInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderPassInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassInfoResponse>* ApiInfoService::Stub::PrepareAsyncrenderPassInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_renderPassInfoResponse, ::octaneapi::ApiInfo_renderPassInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_renderPassInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassInfoResponse>* ApiInfoService::Stub::AsyncrenderPassInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrenderPassInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getAllRenderPassIds(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest& request, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getAllRenderPassIdsRequest, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAllRenderPassIds_, context, request, response);
}

void ApiInfoService::Stub::async::getAllRenderPassIds(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* request, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getAllRenderPassIdsRequest, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllRenderPassIds_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getAllRenderPassIds(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* request, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllRenderPassIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>* ApiInfoService::Stub::PrepareAsyncgetAllRenderPassIdsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse, ::octaneapi::ApiInfo_getAllRenderPassIdsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAllRenderPassIds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getAllRenderPassIdsResponse>* ApiInfoService::Stub::AsyncgetAllRenderPassIdsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAllRenderPassIdsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getRenderPassIdFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest& request, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRenderPassIdFromRenderAovNode_, context, request, response);
}

void ApiInfoService::Stub::async::getRenderPassIdFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderPassIdFromRenderAovNode_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getRenderPassIdFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderPassIdFromRenderAovNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>* ApiInfoService::Stub::PrepareAsyncgetRenderPassIdFromRenderAovNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRenderPassIdFromRenderAovNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse>* ApiInfoService::Stub::AsyncgetRenderPassIdFromRenderAovNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRenderPassIdFromRenderAovNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::getRenderAovInfoFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest& request, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRenderAovInfoFromRenderAovNode_, context, request, response);
}

void ApiInfoService::Stub::async::getRenderAovInfoFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderAovInfoFromRenderAovNode_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::getRenderAovInfoFromRenderAovNode(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRenderAovInfoFromRenderAovNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>* ApiInfoService::Stub::PrepareAsyncgetRenderAovInfoFromRenderAovNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRenderAovInfoFromRenderAovNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse>* ApiInfoService::Stub::AsyncgetRenderAovInfoFromRenderAovNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRenderAovInfoFromRenderAovNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::renderPassName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest& request, ::octaneapi::ApiInfo_renderPassNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_renderPassNameRequest, ::octaneapi::ApiInfo_renderPassNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_renderPassName_, context, request, response);
}

void ApiInfoService::Stub::async::renderPassName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest* request, ::octaneapi::ApiInfo_renderPassNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_renderPassNameRequest, ::octaneapi::ApiInfo_renderPassNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderPassName_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::renderPassName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest* request, ::octaneapi::ApiInfo_renderPassNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderPassName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassNameResponse>* ApiInfoService::Stub::PrepareAsyncrenderPassNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_renderPassNameResponse, ::octaneapi::ApiInfo_renderPassNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_renderPassName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassNameResponse>* ApiInfoService::Stub::AsyncrenderPassNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrenderPassNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::renderPassShortName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest& request, ::octaneapi::ApiInfo_renderPassShortNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_renderPassShortNameRequest, ::octaneapi::ApiInfo_renderPassShortNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_renderPassShortName_, context, request, response);
}

void ApiInfoService::Stub::async::renderPassShortName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest* request, ::octaneapi::ApiInfo_renderPassShortNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_renderPassShortNameRequest, ::octaneapi::ApiInfo_renderPassShortNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderPassShortName_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::renderPassShortName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest* request, ::octaneapi::ApiInfo_renderPassShortNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderPassShortName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassShortNameResponse>* ApiInfoService::Stub::PrepareAsyncrenderPassShortNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_renderPassShortNameResponse, ::octaneapi::ApiInfo_renderPassShortNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_renderPassShortName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassShortNameResponse>* ApiInfoService::Stub::AsyncrenderPassShortNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrenderPassShortNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::renderPassIdToPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest& request, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_renderPassIdToPinIdRequest, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_renderPassIdToPinId_, context, request, response);
}

void ApiInfoService::Stub::async::renderPassIdToPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* request, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_renderPassIdToPinIdRequest, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderPassIdToPinId_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::renderPassIdToPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* request, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderPassIdToPinId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>* ApiInfoService::Stub::PrepareAsyncrenderPassIdToPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse, ::octaneapi::ApiInfo_renderPassIdToPinIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_renderPassIdToPinId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassIdToPinIdResponse>* ApiInfoService::Stub::AsyncrenderPassIdToPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrenderPassIdToPinIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::renderPassGroupName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest& request, ::octaneapi::ApiInfo_renderPassGroupNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_renderPassGroupNameRequest, ::octaneapi::ApiInfo_renderPassGroupNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_renderPassGroupName_, context, request, response);
}

void ApiInfoService::Stub::async::renderPassGroupName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* request, ::octaneapi::ApiInfo_renderPassGroupNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_renderPassGroupNameRequest, ::octaneapi::ApiInfo_renderPassGroupNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderPassGroupName_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::renderPassGroupName(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* request, ::octaneapi::ApiInfo_renderPassGroupNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_renderPassGroupName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassGroupNameResponse>* ApiInfoService::Stub::PrepareAsyncrenderPassGroupNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_renderPassGroupNameResponse, ::octaneapi::ApiInfo_renderPassGroupNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_renderPassGroupName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_renderPassGroupNameResponse>* ApiInfoService::Stub::AsyncrenderPassGroupNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrenderPassGroupNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::pinIdToRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest& request, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pinIdToRenderPassId_, context, request, response);
}

void ApiInfoService::Stub::async::pinIdToRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* request, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pinIdToRenderPassId_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::pinIdToRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* request, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pinIdToRenderPassId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>* ApiInfoService::Stub::PrepareAsyncpinIdToRenderPassIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse, ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pinIdToRenderPassId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse>* ApiInfoService::Stub::AsyncpinIdToRenderPassIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpinIdToRenderPassIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::findPinIdForRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest& request, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_findPinIdForRenderPassId_, context, request, response);
}

void ApiInfoService::Stub::async::findPinIdForRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* request, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findPinIdForRenderPassId_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::findPinIdForRenderPassId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* request, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findPinIdForRenderPassId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>* ApiInfoService::Stub::PrepareAsyncfindPinIdForRenderPassIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse, ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_findPinIdForRenderPassId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse>* ApiInfoService::Stub::AsyncfindPinIdForRenderPassIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfindPinIdForRenderPassIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiInfoService::Stub::findRenderPassIdForPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest& request, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_findRenderPassIdForPinId_, context, request, response);
}

void ApiInfoService::Stub::async::findRenderPassIdForPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* request, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findRenderPassIdForPinId_, context, request, response, std::move(f));
}

void ApiInfoService::Stub::async::findRenderPassIdForPinId(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* request, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findRenderPassIdForPinId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>* ApiInfoService::Stub::PrepareAsyncfindRenderPassIdForPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse, ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_findRenderPassIdForPinId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse>* ApiInfoService::Stub::AsyncfindRenderPassIdForPinIdRaw(::grpc::ClientContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfindRenderPassIdForPinIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiInfoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_octaneVersionRequest, ::octaneapi::ApiInfo_octaneVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_octaneVersionRequest* req,
             ::octaneapi::ApiInfo_octaneVersionResponse* resp) {
               return service->octaneVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_octaneNameRequest, ::octaneapi::ApiInfo_octaneNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_octaneNameRequest* req,
             ::octaneapi::ApiInfo_octaneNameResponse* resp) {
               return service->octaneName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_isDemoVersionRequest, ::octaneapi::ApiInfo_isDemoVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_isDemoVersionRequest* req,
             ::octaneapi::ApiInfo_isDemoVersionResponse* resp) {
               return service->isDemoVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_isSubscriptionVersionRequest, ::octaneapi::ApiInfo_isSubscriptionVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* req,
             ::octaneapi::ApiInfo_isSubscriptionVersionResponse* resp) {
               return service->isSubscriptionVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_tierIdxRequest, ::octaneapi::ApiInfo_tierIdxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_tierIdxRequest* req,
             ::octaneapi::ApiInfo_tierIdxResponse* resp) {
               return service->tierIdx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_osVersionInfoRequest, ::octaneapi::ApiInfo_osVersionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_osVersionInfoRequest* req,
             ::octaneapi::ApiInfo_osVersionInfoResponse* resp) {
               return service->osVersionInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_driverVersionInfoRequest, ::octaneapi::ApiInfo_driverVersionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_driverVersionInfoRequest* req,
             ::octaneapi::ApiInfo_driverVersionInfoResponse* resp) {
               return service->driverVersionInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_cpuInfoRequest, ::octaneapi::ApiInfo_cpuInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_cpuInfoRequest* req,
             ::octaneapi::ApiInfo_cpuInfoResponse* resp) {
               return service->cpuInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_texCacheFolderRequest, ::octaneapi::ApiInfo_texCacheFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_texCacheFolderRequest* req,
             ::octaneapi::ApiInfo_texCacheFolderResponse* resp) {
               return service->texCacheFolder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getAttributeTypesRequest, ::octaneapi::ApiInfo_getAttributeTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getAttributeTypesRequest* req,
             ::octaneapi::ApiInfo_getAttributeTypesResponse* resp) {
               return service->getAttributeTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getPinTypesRequest, ::octaneapi::ApiInfo_getPinTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getPinTypesRequest* req,
             ::octaneapi::ApiInfo_getPinTypesResponse* resp) {
               return service->getPinTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getGraphTypesRequest, ::octaneapi::ApiInfo_getGraphTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getGraphTypesRequest* req,
             ::octaneapi::ApiInfo_getGraphTypesResponse* resp) {
               return service->getGraphTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getNodeTypesRequest, ::octaneapi::ApiInfo_getNodeTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getNodeTypesRequest* req,
             ::octaneapi::ApiInfo_getNodeTypesResponse* resp) {
               return service->getNodeTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_nodeInfoRequest, ::octaneapi::ApiInfo_nodeInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_nodeInfoRequest* req,
             ::octaneapi::ApiInfo_nodeInfoResponse* resp) {
               return service->nodeInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_graphInfoRequest, ::octaneapi::ApiInfo_graphInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_graphInfoRequest* req,
             ::octaneapi::ApiInfo_graphInfoResponse* resp) {
               return service->graphInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_nodeIconImageRequest, ::octaneapi::ApiInfo_nodeIconImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_nodeIconImageRequest* req,
             ::octaneapi::ApiInfo_nodeIconImageResponse* resp) {
               return service->nodeIconImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_graphIconImageRequest, ::octaneapi::ApiInfo_graphIconImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_graphIconImageRequest* req,
             ::octaneapi::ApiInfo_graphIconImageResponse* resp) {
               return service->graphIconImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_attributeInfoRequest, ::octaneapi::ApiInfo_attributeInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_attributeInfoRequest* req,
             ::octaneapi::ApiInfo_attributeInfoResponse* resp) {
               return service->attributeInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_attributeInfo1Request, ::octaneapi::ApiInfo_attributeInfo1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_attributeInfo1Request* req,
             ::octaneapi::ApiInfo_attributeInfo1Response* resp) {
               return service->attributeInfo1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_attributeInfo2Request, ::octaneapi::ApiInfo_attributeInfo2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_attributeInfo2Request* req,
             ::octaneapi::ApiInfo_attributeInfo2Response* resp) {
               return service->attributeInfo2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_nodePinInfoRequest, ::octaneapi::ApiInfo_nodePinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_nodePinInfoRequest* req,
             ::octaneapi::ApiInfo_nodePinInfoResponse* resp) {
               return service->nodePinInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getAttributeTypeNameRequest, ::octaneapi::ApiInfo_getAttributeTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* req,
             ::octaneapi::ApiInfo_getAttributeTypeNameResponse* resp) {
               return service->getAttributeTypeName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getPinTypeNameRequest, ::octaneapi::ApiInfo_getPinTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getPinTypeNameRequest* req,
             ::octaneapi::ApiInfo_getPinTypeNameResponse* resp) {
               return service->getPinTypeName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getPinTypeColorRequest, ::octaneapi::ApiInfo_getPinTypeColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getPinTypeColorRequest* req,
             ::octaneapi::ApiInfo_getPinTypeColorResponse* resp) {
               return service->getPinTypeColor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getGraphTypeNameRequest, ::octaneapi::ApiInfo_getGraphTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getGraphTypeNameRequest* req,
             ::octaneapi::ApiInfo_getGraphTypeNameResponse* resp) {
               return service->getGraphTypeName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getNodeTypeNameRequest, ::octaneapi::ApiInfo_getNodeTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getNodeTypeNameRequest* req,
             ::octaneapi::ApiInfo_getNodeTypeNameResponse* resp) {
               return service->getNodeTypeName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getItemTypeNameRequest, ::octaneapi::ApiInfo_getItemTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getItemTypeNameRequest* req,
             ::octaneapi::ApiInfo_getItemTypeNameResponse* resp) {
               return service->getItemTypeName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getAttributeNameRequest, ::octaneapi::ApiInfo_getAttributeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getAttributeNameRequest* req,
             ::octaneapi::ApiInfo_getAttributeNameResponse* resp) {
               return service->getAttributeName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getAttributeIdRequest, ::octaneapi::ApiInfo_getAttributeIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getAttributeIdRequest* req,
             ::octaneapi::ApiInfo_getAttributeIdResponse* resp) {
               return service->getAttributeId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getAttributeIdNameRequest, ::octaneapi::ApiInfo_getAttributeIdNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getAttributeIdNameRequest* req,
             ::octaneapi::ApiInfo_getAttributeIdNameResponse* resp) {
               return service->getAttributeIdName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getAttributeIdName1Request, ::octaneapi::ApiInfo_getAttributeIdName1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getAttributeIdName1Request* req,
             ::octaneapi::ApiInfo_getAttributeIdName1Response* resp) {
               return service->getAttributeIdName1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getPinNameRequest, ::octaneapi::ApiInfo_getPinNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getPinNameRequest* req,
             ::octaneapi::ApiInfo_getPinNameResponse* resp) {
               return service->getPinName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getPinIdRequest, ::octaneapi::ApiInfo_getPinIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getPinIdRequest* req,
             ::octaneapi::ApiInfo_getPinIdResponse* resp) {
               return service->getPinId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getPinIdNameRequest, ::octaneapi::ApiInfo_getPinIdNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getPinIdNameRequest* req,
             ::octaneapi::ApiInfo_getPinIdNameResponse* resp) {
               return service->getPinIdName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getPinIdName1Request, ::octaneapi::ApiInfo_getPinIdName1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getPinIdName1Request* req,
             ::octaneapi::ApiInfo_getPinIdName1Response* resp) {
               return service->getPinIdName1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getTextureValueTypeNameRequest, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* req,
             ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* resp) {
               return service->getTextureValueTypeName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* req,
             ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* resp) {
               return service->getTextureValueTypeForOslType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getCompatibleTypesRequest, ::octaneapi::ApiInfo_getCompatibleTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getCompatibleTypesRequest* req,
             ::octaneapi::ApiInfo_getCompatibleTypesResponse* resp) {
               return service->getCompatibleTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_renderPassInfoRequest, ::octaneapi::ApiInfo_renderPassInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_renderPassInfoRequest* req,
             ::octaneapi::ApiInfo_renderPassInfoResponse* resp) {
               return service->renderPassInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getAllRenderPassIdsRequest, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* req,
             ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* resp) {
               return service->getAllRenderPassIds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* req,
             ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* resp) {
               return service->getRenderPassIdFromRenderAovNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* req,
             ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* resp) {
               return service->getRenderAovInfoFromRenderAovNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_renderPassNameRequest, ::octaneapi::ApiInfo_renderPassNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_renderPassNameRequest* req,
             ::octaneapi::ApiInfo_renderPassNameResponse* resp) {
               return service->renderPassName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_renderPassShortNameRequest, ::octaneapi::ApiInfo_renderPassShortNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_renderPassShortNameRequest* req,
             ::octaneapi::ApiInfo_renderPassShortNameResponse* resp) {
               return service->renderPassShortName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_renderPassIdToPinIdRequest, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* req,
             ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* resp) {
               return service->renderPassIdToPinId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_renderPassGroupNameRequest, ::octaneapi::ApiInfo_renderPassGroupNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_renderPassGroupNameRequest* req,
             ::octaneapi::ApiInfo_renderPassGroupNameResponse* resp) {
               return service->renderPassGroupName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* req,
             ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* resp) {
               return service->pinIdToRenderPassId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* req,
             ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* resp) {
               return service->findPinIdForRenderPassId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiInfoService_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiInfoService::Service, ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* req,
             ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* resp) {
               return service->findRenderPassIdForPinId(ctx, req, resp);
             }, this)));
}

ApiInfoService::Service::~Service() {
}

::grpc::Status ApiInfoService::Service::octaneVersion(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_octaneVersionRequest* request, ::octaneapi::ApiInfo_octaneVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::octaneName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_octaneNameRequest* request, ::octaneapi::ApiInfo_octaneNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::isDemoVersion(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_isDemoVersionRequest* request, ::octaneapi::ApiInfo_isDemoVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::isSubscriptionVersion(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_isSubscriptionVersionRequest* request, ::octaneapi::ApiInfo_isSubscriptionVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::tierIdx(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_tierIdxRequest* request, ::octaneapi::ApiInfo_tierIdxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::osVersionInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_osVersionInfoRequest* request, ::octaneapi::ApiInfo_osVersionInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::driverVersionInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_driverVersionInfoRequest* request, ::octaneapi::ApiInfo_driverVersionInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::cpuInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_cpuInfoRequest* request, ::octaneapi::ApiInfo_cpuInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::texCacheFolder(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_texCacheFolderRequest* request, ::octaneapi::ApiInfo_texCacheFolderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getAttributeTypes(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getAttributeTypesRequest* request, ::octaneapi::ApiInfo_getAttributeTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getPinTypes(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getPinTypesRequest* request, ::octaneapi::ApiInfo_getPinTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getGraphTypes(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getGraphTypesRequest* request, ::octaneapi::ApiInfo_getGraphTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getNodeTypes(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getNodeTypesRequest* request, ::octaneapi::ApiInfo_getNodeTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::nodeInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_nodeInfoRequest* request, ::octaneapi::ApiInfo_nodeInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::graphInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_graphInfoRequest* request, ::octaneapi::ApiInfo_graphInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::nodeIconImage(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_nodeIconImageRequest* request, ::octaneapi::ApiInfo_nodeIconImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::graphIconImage(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_graphIconImageRequest* request, ::octaneapi::ApiInfo_graphIconImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::attributeInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_attributeInfoRequest* request, ::octaneapi::ApiInfo_attributeInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::attributeInfo1(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_attributeInfo1Request* request, ::octaneapi::ApiInfo_attributeInfo1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::attributeInfo2(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_attributeInfo2Request* request, ::octaneapi::ApiInfo_attributeInfo2Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::nodePinInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_nodePinInfoRequest* request, ::octaneapi::ApiInfo_nodePinInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getAttributeTypeName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getAttributeTypeNameRequest* request, ::octaneapi::ApiInfo_getAttributeTypeNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getPinTypeName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getPinTypeNameRequest* request, ::octaneapi::ApiInfo_getPinTypeNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getPinTypeColor(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getPinTypeColorRequest* request, ::octaneapi::ApiInfo_getPinTypeColorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getGraphTypeName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getGraphTypeNameRequest* request, ::octaneapi::ApiInfo_getGraphTypeNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getNodeTypeName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getNodeTypeNameRequest* request, ::octaneapi::ApiInfo_getNodeTypeNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getItemTypeName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getItemTypeNameRequest* request, ::octaneapi::ApiInfo_getItemTypeNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getAttributeName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getAttributeNameRequest* request, ::octaneapi::ApiInfo_getAttributeNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getAttributeId(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getAttributeIdRequest* request, ::octaneapi::ApiInfo_getAttributeIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getAttributeIdName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getAttributeIdNameRequest* request, ::octaneapi::ApiInfo_getAttributeIdNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getAttributeIdName1(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getAttributeIdName1Request* request, ::octaneapi::ApiInfo_getAttributeIdName1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getPinName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getPinNameRequest* request, ::octaneapi::ApiInfo_getPinNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getPinId(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getPinIdRequest* request, ::octaneapi::ApiInfo_getPinIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getPinIdName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getPinIdNameRequest* request, ::octaneapi::ApiInfo_getPinIdNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getPinIdName1(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getPinIdName1Request* request, ::octaneapi::ApiInfo_getPinIdName1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getTextureValueTypeName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeNameRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getTextureValueTypeForOslType(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeRequest* request, ::octaneapi::ApiInfo_getTextureValueTypeForOslTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getCompatibleTypes(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getCompatibleTypesRequest* request, ::octaneapi::ApiInfo_getCompatibleTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::renderPassInfo(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_renderPassInfoRequest* request, ::octaneapi::ApiInfo_renderPassInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getAllRenderPassIds(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getAllRenderPassIdsRequest* request, ::octaneapi::ApiInfo_getAllRenderPassIdsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getRenderPassIdFromRenderAovNode(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderPassIdFromRenderAovNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::getRenderAovInfoFromRenderAovNode(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeRequest* request, ::octaneapi::ApiInfo_getRenderAovInfoFromRenderAovNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::renderPassName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_renderPassNameRequest* request, ::octaneapi::ApiInfo_renderPassNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::renderPassShortName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_renderPassShortNameRequest* request, ::octaneapi::ApiInfo_renderPassShortNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::renderPassIdToPinId(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_renderPassIdToPinIdRequest* request, ::octaneapi::ApiInfo_renderPassIdToPinIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::renderPassGroupName(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_renderPassGroupNameRequest* request, ::octaneapi::ApiInfo_renderPassGroupNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::pinIdToRenderPassId(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_pinIdToRenderPassIdRequest* request, ::octaneapi::ApiInfo_pinIdToRenderPassIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::findPinIdForRenderPassId(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_findPinIdForRenderPassIdRequest* request, ::octaneapi::ApiInfo_findPinIdForRenderPassIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiInfoService::Service::findRenderPassIdForPinId(::grpc::ServerContext* context, const ::octaneapi::ApiInfo_findRenderPassIdForPinIdRequest* request, ::octaneapi::ApiInfo_findRenderPassIdForPinIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

