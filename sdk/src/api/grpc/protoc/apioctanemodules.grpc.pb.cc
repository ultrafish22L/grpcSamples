// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apioctanemodules.proto

#include "apioctanemodules.pb.h"
#include "apioctanemodules.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiOctaneModulesService_method_names[] = {
  "/octaneapi.ApiOctaneModulesService/setDirectory",
  "/octaneapi.ApiOctaneModulesService/getDirectory",
  "/octaneapi.ApiOctaneModulesService/getModuleInfo",
  "/octaneapi.ApiOctaneModulesService/getNodegraphModules",
  "/octaneapi.ApiOctaneModulesService/getCommandModules",
  "/octaneapi.ApiOctaneModulesService/runCommandModule",
};

std::unique_ptr< ApiOctaneModulesService::Stub> ApiOctaneModulesService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiOctaneModulesService::Stub> stub(new ApiOctaneModulesService::Stub(channel, options));
  return stub;
}

ApiOctaneModulesService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_setDirectory_(ApiOctaneModulesService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDirectory_(ApiOctaneModulesService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getModuleInfo_(ApiOctaneModulesService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNodegraphModules_(ApiOctaneModulesService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCommandModules_(ApiOctaneModulesService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_runCommandModule_(ApiOctaneModulesService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiOctaneModulesService::Stub::setDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest& request, ::octaneapi::ApiOctaneModules_setDirectoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiOctaneModules_setDirectoryRequest, ::octaneapi::ApiOctaneModules_setDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setDirectory_, context, request, response);
}

void ApiOctaneModulesService::Stub::async::setDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* request, ::octaneapi::ApiOctaneModules_setDirectoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiOctaneModules_setDirectoryRequest, ::octaneapi::ApiOctaneModules_setDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDirectory_, context, request, response, std::move(f));
}

void ApiOctaneModulesService::Stub::async::setDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* request, ::octaneapi::ApiOctaneModules_setDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_setDirectoryResponse>* ApiOctaneModulesService::Stub::PrepareAsyncsetDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiOctaneModules_setDirectoryResponse, ::octaneapi::ApiOctaneModules_setDirectoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setDirectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_setDirectoryResponse>* ApiOctaneModulesService::Stub::AsyncsetDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetDirectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiOctaneModulesService::Stub::getDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest& request, ::octaneapi::ApiOctaneModules_getDirectoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiOctaneModules_getDirectoryRequest, ::octaneapi::ApiOctaneModules_getDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDirectory_, context, request, response);
}

void ApiOctaneModulesService::Stub::async::getDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* request, ::octaneapi::ApiOctaneModules_getDirectoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiOctaneModules_getDirectoryRequest, ::octaneapi::ApiOctaneModules_getDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDirectory_, context, request, response, std::move(f));
}

void ApiOctaneModulesService::Stub::async::getDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* request, ::octaneapi::ApiOctaneModules_getDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getDirectoryResponse>* ApiOctaneModulesService::Stub::PrepareAsyncgetDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiOctaneModules_getDirectoryResponse, ::octaneapi::ApiOctaneModules_getDirectoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDirectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getDirectoryResponse>* ApiOctaneModulesService::Stub::AsyncgetDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDirectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiOctaneModulesService::Stub::getModuleInfo(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest& request, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiOctaneModules_getModuleInfoRequest, ::octaneapi::ApiOctaneModules_getModuleInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getModuleInfo_, context, request, response);
}

void ApiOctaneModulesService::Stub::async::getModuleInfo(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* request, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiOctaneModules_getModuleInfoRequest, ::octaneapi::ApiOctaneModules_getModuleInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getModuleInfo_, context, request, response, std::move(f));
}

void ApiOctaneModulesService::Stub::async::getModuleInfo(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* request, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getModuleInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>* ApiOctaneModulesService::Stub::PrepareAsyncgetModuleInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiOctaneModules_getModuleInfoResponse, ::octaneapi::ApiOctaneModules_getModuleInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getModuleInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getModuleInfoResponse>* ApiOctaneModulesService::Stub::AsyncgetModuleInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetModuleInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiOctaneModulesService::Stub::getNodegraphModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest& request, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNodegraphModules_, context, request, response);
}

void ApiOctaneModulesService::Stub::async::getNodegraphModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* request, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNodegraphModules_, context, request, response, std::move(f));
}

void ApiOctaneModulesService::Stub::async::getNodegraphModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* request, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNodegraphModules_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>* ApiOctaneModulesService::Stub::PrepareAsyncgetNodegraphModulesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse, ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNodegraphModules_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse>* ApiOctaneModulesService::Stub::AsyncgetNodegraphModulesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNodegraphModulesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiOctaneModulesService::Stub::getCommandModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest& request, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiOctaneModules_getCommandModulesRequest, ::octaneapi::ApiOctaneModules_getCommandModulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getCommandModules_, context, request, response);
}

void ApiOctaneModulesService::Stub::async::getCommandModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* request, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiOctaneModules_getCommandModulesRequest, ::octaneapi::ApiOctaneModules_getCommandModulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCommandModules_, context, request, response, std::move(f));
}

void ApiOctaneModulesService::Stub::async::getCommandModules(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* request, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCommandModules_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>* ApiOctaneModulesService::Stub::PrepareAsyncgetCommandModulesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiOctaneModules_getCommandModulesResponse, ::octaneapi::ApiOctaneModules_getCommandModulesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getCommandModules_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_getCommandModulesResponse>* ApiOctaneModulesService::Stub::AsyncgetCommandModulesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetCommandModulesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiOctaneModulesService::Stub::runCommandModule(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest& request, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiOctaneModules_runCommandModuleRequest, ::octaneapi::ApiOctaneModules_runCommandModuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_runCommandModule_, context, request, response);
}

void ApiOctaneModulesService::Stub::async::runCommandModule(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* request, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiOctaneModules_runCommandModuleRequest, ::octaneapi::ApiOctaneModules_runCommandModuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_runCommandModule_, context, request, response, std::move(f));
}

void ApiOctaneModulesService::Stub::async::runCommandModule(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* request, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_runCommandModule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>* ApiOctaneModulesService::Stub::PrepareAsyncrunCommandModuleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiOctaneModules_runCommandModuleResponse, ::octaneapi::ApiOctaneModules_runCommandModuleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_runCommandModule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOctaneModules_runCommandModuleResponse>* ApiOctaneModulesService::Stub::AsyncrunCommandModuleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrunCommandModuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiOctaneModulesService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiOctaneModulesService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiOctaneModulesService::Service, ::octaneapi::ApiOctaneModules_setDirectoryRequest, ::octaneapi::ApiOctaneModules_setDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiOctaneModulesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiOctaneModules_setDirectoryRequest* req,
             ::octaneapi::ApiOctaneModules_setDirectoryResponse* resp) {
               return service->setDirectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiOctaneModulesService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiOctaneModulesService::Service, ::octaneapi::ApiOctaneModules_getDirectoryRequest, ::octaneapi::ApiOctaneModules_getDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiOctaneModulesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiOctaneModules_getDirectoryRequest* req,
             ::octaneapi::ApiOctaneModules_getDirectoryResponse* resp) {
               return service->getDirectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiOctaneModulesService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiOctaneModulesService::Service, ::octaneapi::ApiOctaneModules_getModuleInfoRequest, ::octaneapi::ApiOctaneModules_getModuleInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiOctaneModulesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* req,
             ::octaneapi::ApiOctaneModules_getModuleInfoResponse* resp) {
               return service->getModuleInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiOctaneModulesService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiOctaneModulesService::Service, ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiOctaneModulesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* req,
             ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* resp) {
               return service->getNodegraphModules(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiOctaneModulesService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiOctaneModulesService::Service, ::octaneapi::ApiOctaneModules_getCommandModulesRequest, ::octaneapi::ApiOctaneModules_getCommandModulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiOctaneModulesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* req,
             ::octaneapi::ApiOctaneModules_getCommandModulesResponse* resp) {
               return service->getCommandModules(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiOctaneModulesService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiOctaneModulesService::Service, ::octaneapi::ApiOctaneModules_runCommandModuleRequest, ::octaneapi::ApiOctaneModules_runCommandModuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiOctaneModulesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* req,
             ::octaneapi::ApiOctaneModules_runCommandModuleResponse* resp) {
               return service->runCommandModule(ctx, req, resp);
             }, this)));
}

ApiOctaneModulesService::Service::~Service() {
}

::grpc::Status ApiOctaneModulesService::Service::setDirectory(::grpc::ServerContext* context, const ::octaneapi::ApiOctaneModules_setDirectoryRequest* request, ::octaneapi::ApiOctaneModules_setDirectoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiOctaneModulesService::Service::getDirectory(::grpc::ServerContext* context, const ::octaneapi::ApiOctaneModules_getDirectoryRequest* request, ::octaneapi::ApiOctaneModules_getDirectoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiOctaneModulesService::Service::getModuleInfo(::grpc::ServerContext* context, const ::octaneapi::ApiOctaneModules_getModuleInfoRequest* request, ::octaneapi::ApiOctaneModules_getModuleInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiOctaneModulesService::Service::getNodegraphModules(::grpc::ServerContext* context, const ::octaneapi::ApiOctaneModules_getNodegraphModulesRequest* request, ::octaneapi::ApiOctaneModules_getNodegraphModulesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiOctaneModulesService::Service::getCommandModules(::grpc::ServerContext* context, const ::octaneapi::ApiOctaneModules_getCommandModulesRequest* request, ::octaneapi::ApiOctaneModules_getCommandModulesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiOctaneModulesService::Service::runCommandModule(::grpc::ServerContext* context, const ::octaneapi::ApiOctaneModules_runCommandModuleRequest* request, ::octaneapi::ApiOctaneModules_runCommandModuleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

