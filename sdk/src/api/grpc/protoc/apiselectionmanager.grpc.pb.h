// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apiselectionmanager.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apiselectionmanager_2eproto__INCLUDED
#define GRPC_apiselectionmanager_2eproto__INCLUDED

#include "apiselectionmanager.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiSelectionManager' from 'apiselectionmanager.h'
class ApiSelectionManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiSelectionManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Returns TRUE if the specified item is currently selected
    virtual ::grpc::Status isItemSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest& request, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>> AsyncisItemSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>>(AsyncisItemSelectedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>> PrepareAsyncisItemSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>>(PrepareAsyncisItemSelectedRaw(context, request, cq));
    }
    // / Returns TRUE if the specified pin is currently selected on the specified node
    virtual ::grpc::Status isPinSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest& request, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>> AsyncisPinSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>>(AsyncisPinSelectedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>> PrepareAsyncisPinSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>>(PrepareAsyncisPinSelectedRaw(context, request, cq));
    }
    // / Returns TRUE if the specified pin is currently selected on the specified node
    virtual ::grpc::Status isPinSelected1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request& request, ::octaneapi::ApiSelectionManager_isPinSelected1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelected1Response>> AsyncisPinSelected1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelected1Response>>(AsyncisPinSelected1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelected1Response>> PrepareAsyncisPinSelected1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelected1Response>>(PrepareAsyncisPinSelected1Raw(context, request, cq));
    }
    // / Returns TRUE if the specified pin is currently selected on the specified node
    virtual ::grpc::Status isPinSelectedIx(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest& request, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>> AsyncisPinSelectedIx(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>>(AsyncisPinSelectedIxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>> PrepareAsyncisPinSelectedIx(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>>(PrepareAsyncisPinSelectedIxRaw(context, request, cq));
    }
    // / Returns the number of selected items
    virtual ::grpc::Status selectedItemCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest& request, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>> AsyncselectedItemCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>>(AsyncselectedItemCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>> PrepareAsyncselectedItemCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>>(PrepareAsyncselectedItemCountRaw(context, request, cq));
    }
    // / Returns the number of selected pins
    virtual ::grpc::Status selectedPinCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest& request, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>> AsyncselectedPinCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>>(AsyncselectedPinCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>> PrepareAsyncselectedPinCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>>(PrepareAsyncselectedPinCountRaw(context, request, cq));
    }
    // / Copies the set of currently selected items into the specified array
    virtual ::grpc::Status getSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest& request, ::octaneapi::ApiSelectionManager_getSelectionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_getSelectionResponse>> AsyncgetSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_getSelectionResponse>>(AsyncgetSelectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_getSelectionResponse>> PrepareAsyncgetSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_getSelectionResponse>>(PrepareAsyncgetSelectionRaw(context, request, cq));
    }
    // / Copies the set of currently selected pins into the specified array
    virtual ::grpc::Status getSelection1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request& request, ::octaneapi::ApiSelectionManager_getSelection1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_getSelection1Response>> AsyncgetSelection1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_getSelection1Response>>(AsyncgetSelection1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_getSelection1Response>> PrepareAsyncgetSelection1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_getSelection1Response>>(PrepareAsyncgetSelection1Raw(context, request, cq));
    }
    // / De-selects everything and sends a selection change event if something actually got
    // / deselected
    virtual ::grpc::Status clearSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncclearSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncclearSelectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncclearSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncclearSelectionRaw(context, request, cq));
    }
    // / Replaces the complete current selection with a new item/pin selection and sends a selection
    // / change event
    virtual ::grpc::Status setSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetSelectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetSelectionRaw(context, request, cq));
    }
    // / Adds an item to the current selection and sends a change event if the selection changed
    virtual ::grpc::Status select(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncselectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncselectRaw(context, request, cq));
    }
    // / Adds a pin to the current selection and sends a change event if the selection changed
    virtual ::grpc::Status select1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(Asyncselect1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncselect1Raw(context, request, cq));
    }
    // / Removed an item from the current selection and sends a change event if the selection changed
    virtual ::grpc::Status deselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncdeselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdeselectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdeselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdeselectRaw(context, request, cq));
    }
    // / Removes a pin from the current selection and sends a change event if the selection changed
    virtual ::grpc::Status deselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncdeselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(Asyncdeselect1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdeselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdeselect1Raw(context, request, cq));
    }
    // / If the old item was selected, the new item will be selected and the old item deselected
    virtual ::grpc::Status swapSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncswapSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncswapSelectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncswapSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncswapSelectionRaw(context, request, cq));
    }
    // / Adds a selection changed observer
    virtual ::grpc::Status addSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest& request, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>> AsyncaddSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>>(AsyncaddSelectionObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>> PrepareAsyncaddSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>>(PrepareAsyncaddSelectionObserverRaw(context, request, cq));
    }
    // / Removes a selection observer
    virtual ::grpc::Status removeSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncremoveSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncremoveSelectionObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncremoveSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncremoveSelectionObserverRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Returns TRUE if the specified item is currently selected
      virtual void isItemSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* request, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isItemSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* request, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if the specified pin is currently selected on the specified node
      virtual void isPinSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isPinSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if the specified pin is currently selected on the specified node
      virtual void isPinSelected1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* request, ::octaneapi::ApiSelectionManager_isPinSelected1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isPinSelected1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* request, ::octaneapi::ApiSelectionManager_isPinSelected1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if the specified pin is currently selected on the specified node
      virtual void isPinSelectedIx(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isPinSelectedIx(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the number of selected items
      virtual void selectedItemCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* request, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void selectedItemCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* request, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the number of selected pins
      virtual void selectedPinCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* request, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void selectedPinCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* request, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Copies the set of currently selected items into the specified array
      virtual void getSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest* request, ::octaneapi::ApiSelectionManager_getSelectionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest* request, ::octaneapi::ApiSelectionManager_getSelectionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Copies the set of currently selected pins into the specified array
      virtual void getSelection1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request* request, ::octaneapi::ApiSelectionManager_getSelection1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getSelection1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request* request, ::octaneapi::ApiSelectionManager_getSelection1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / De-selects everything and sends a selection change event if something actually got
      // / deselected
      virtual void clearSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void clearSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Replaces the complete current selection with a new item/pin selection and sends a selection
      // / change event
      virtual void setSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Adds an item to the current selection and sends a change event if the selection changed
      virtual void select(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void select(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Adds a pin to the current selection and sends a change event if the selection changed
      virtual void select1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void select1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Removed an item from the current selection and sends a change event if the selection changed
      virtual void deselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Removes a pin from the current selection and sends a change event if the selection changed
      virtual void deselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / If the old item was selected, the new item will be selected and the old item deselected
      virtual void swapSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void swapSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Adds a selection changed observer
      virtual void addSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* request, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* request, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Removes a selection observer
      virtual void removeSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void removeSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>* AsyncisItemSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>* PrepareAsyncisItemSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>* AsyncisPinSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>* PrepareAsyncisPinSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelected1Response>* AsyncisPinSelected1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelected1Response>* PrepareAsyncisPinSelected1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>* AsyncisPinSelectedIxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>* PrepareAsyncisPinSelectedIxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>* AsyncselectedItemCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>* PrepareAsyncselectedItemCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>* AsyncselectedPinCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>* PrepareAsyncselectedPinCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_getSelectionResponse>* AsyncgetSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_getSelectionResponse>* PrepareAsyncgetSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_getSelection1Response>* AsyncgetSelection1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_getSelection1Response>* PrepareAsyncgetSelection1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncclearSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncclearSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncselectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncselectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* Asyncselect1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncselect1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdeselectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdeselectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* Asyncdeselect1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdeselect1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncswapSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncswapSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>* AsyncaddSelectionObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>* PrepareAsyncaddSelectionObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncremoveSelectionObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncremoveSelectionObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status isItemSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest& request, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>> AsyncisItemSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>>(AsyncisItemSelectedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>> PrepareAsyncisItemSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>>(PrepareAsyncisItemSelectedRaw(context, request, cq));
    }
    ::grpc::Status isPinSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest& request, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>> AsyncisPinSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>>(AsyncisPinSelectedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>> PrepareAsyncisPinSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>>(PrepareAsyncisPinSelectedRaw(context, request, cq));
    }
    ::grpc::Status isPinSelected1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request& request, ::octaneapi::ApiSelectionManager_isPinSelected1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelected1Response>> AsyncisPinSelected1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelected1Response>>(AsyncisPinSelected1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelected1Response>> PrepareAsyncisPinSelected1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelected1Response>>(PrepareAsyncisPinSelected1Raw(context, request, cq));
    }
    ::grpc::Status isPinSelectedIx(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest& request, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>> AsyncisPinSelectedIx(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>>(AsyncisPinSelectedIxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>> PrepareAsyncisPinSelectedIx(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>>(PrepareAsyncisPinSelectedIxRaw(context, request, cq));
    }
    ::grpc::Status selectedItemCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest& request, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>> AsyncselectedItemCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>>(AsyncselectedItemCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>> PrepareAsyncselectedItemCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>>(PrepareAsyncselectedItemCountRaw(context, request, cq));
    }
    ::grpc::Status selectedPinCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest& request, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>> AsyncselectedPinCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>>(AsyncselectedPinCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>> PrepareAsyncselectedPinCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>>(PrepareAsyncselectedPinCountRaw(context, request, cq));
    }
    ::grpc::Status getSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest& request, ::octaneapi::ApiSelectionManager_getSelectionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelectionResponse>> AsyncgetSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelectionResponse>>(AsyncgetSelectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelectionResponse>> PrepareAsyncgetSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelectionResponse>>(PrepareAsyncgetSelectionRaw(context, request, cq));
    }
    ::grpc::Status getSelection1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request& request, ::octaneapi::ApiSelectionManager_getSelection1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelection1Response>> AsyncgetSelection1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelection1Response>>(AsyncgetSelection1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelection1Response>> PrepareAsyncgetSelection1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelection1Response>>(PrepareAsyncgetSelection1Raw(context, request, cq));
    }
    ::grpc::Status clearSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncclearSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncclearSelectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncclearSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncclearSelectionRaw(context, request, cq));
    }
    ::grpc::Status setSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetSelectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetSelectionRaw(context, request, cq));
    }
    ::grpc::Status select(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncselectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncselectRaw(context, request, cq));
    }
    ::grpc::Status select1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(Asyncselect1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncselect1Raw(context, request, cq));
    }
    ::grpc::Status deselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncdeselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdeselectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdeselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdeselectRaw(context, request, cq));
    }
    ::grpc::Status deselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncdeselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(Asyncdeselect1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdeselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdeselect1Raw(context, request, cq));
    }
    ::grpc::Status swapSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncswapSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncswapSelectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncswapSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncswapSelectionRaw(context, request, cq));
    }
    ::grpc::Status addSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest& request, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>> AsyncaddSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>>(AsyncaddSelectionObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>> PrepareAsyncaddSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>>(PrepareAsyncaddSelectionObserverRaw(context, request, cq));
    }
    ::grpc::Status removeSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncremoveSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncremoveSelectionObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncremoveSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncremoveSelectionObserverRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void isItemSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* request, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* response, std::function<void(::grpc::Status)>) override;
      void isItemSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* request, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isPinSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* response, std::function<void(::grpc::Status)>) override;
      void isPinSelected(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isPinSelected1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* request, ::octaneapi::ApiSelectionManager_isPinSelected1Response* response, std::function<void(::grpc::Status)>) override;
      void isPinSelected1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* request, ::octaneapi::ApiSelectionManager_isPinSelected1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isPinSelectedIx(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* response, std::function<void(::grpc::Status)>) override;
      void isPinSelectedIx(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void selectedItemCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* request, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* response, std::function<void(::grpc::Status)>) override;
      void selectedItemCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* request, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void selectedPinCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* request, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* response, std::function<void(::grpc::Status)>) override;
      void selectedPinCount(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* request, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest* request, ::octaneapi::ApiSelectionManager_getSelectionResponse* response, std::function<void(::grpc::Status)>) override;
      void getSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest* request, ::octaneapi::ApiSelectionManager_getSelectionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getSelection1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request* request, ::octaneapi::ApiSelectionManager_getSelection1Response* response, std::function<void(::grpc::Status)>) override;
      void getSelection1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request* request, ::octaneapi::ApiSelectionManager_getSelection1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void clearSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void clearSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void setSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void select(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void select(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void select1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void select1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void deselect(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void deselect1(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void swapSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void swapSelection(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void addSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* request, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* response, std::function<void(::grpc::Status)>) override;
      void addSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* request, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void removeSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void removeSelectionObserver(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>* AsyncisItemSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>* PrepareAsyncisItemSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>* AsyncisPinSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>* PrepareAsyncisPinSelectedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelected1Response>* AsyncisPinSelected1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelected1Response>* PrepareAsyncisPinSelected1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>* AsyncisPinSelectedIxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>* PrepareAsyncisPinSelectedIxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>* AsyncselectedItemCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>* PrepareAsyncselectedItemCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>* AsyncselectedPinCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>* PrepareAsyncselectedPinCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelectionResponse>* AsyncgetSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelectionResponse>* PrepareAsyncgetSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelection1Response>* AsyncgetSelection1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_getSelection1Response>* PrepareAsyncgetSelection1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncclearSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncclearSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncselectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncselectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_selectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Asyncselect1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncselect1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_select1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdeselectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdeselectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Asyncdeselect1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdeselect1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncswapSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncswapSelectionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>* AsyncaddSelectionObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>* PrepareAsyncaddSelectionObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncremoveSelectionObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncremoveSelectionObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_isItemSelected_;
    const ::grpc::internal::RpcMethod rpcmethod_isPinSelected_;
    const ::grpc::internal::RpcMethod rpcmethod_isPinSelected1_;
    const ::grpc::internal::RpcMethod rpcmethod_isPinSelectedIx_;
    const ::grpc::internal::RpcMethod rpcmethod_selectedItemCount_;
    const ::grpc::internal::RpcMethod rpcmethod_selectedPinCount_;
    const ::grpc::internal::RpcMethod rpcmethod_getSelection_;
    const ::grpc::internal::RpcMethod rpcmethod_getSelection1_;
    const ::grpc::internal::RpcMethod rpcmethod_clearSelection_;
    const ::grpc::internal::RpcMethod rpcmethod_setSelection_;
    const ::grpc::internal::RpcMethod rpcmethod_select_;
    const ::grpc::internal::RpcMethod rpcmethod_select1_;
    const ::grpc::internal::RpcMethod rpcmethod_deselect_;
    const ::grpc::internal::RpcMethod rpcmethod_deselect1_;
    const ::grpc::internal::RpcMethod rpcmethod_swapSelection_;
    const ::grpc::internal::RpcMethod rpcmethod_addSelectionObserver_;
    const ::grpc::internal::RpcMethod rpcmethod_removeSelectionObserver_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Returns TRUE if the specified item is currently selected
    virtual ::grpc::Status isItemSelected(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* request, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* response);
    // / Returns TRUE if the specified pin is currently selected on the specified node
    virtual ::grpc::Status isPinSelected(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* response);
    // / Returns TRUE if the specified pin is currently selected on the specified node
    virtual ::grpc::Status isPinSelected1(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* request, ::octaneapi::ApiSelectionManager_isPinSelected1Response* response);
    // / Returns TRUE if the specified pin is currently selected on the specified node
    virtual ::grpc::Status isPinSelectedIx(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* response);
    // / Returns the number of selected items
    virtual ::grpc::Status selectedItemCount(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* request, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* response);
    // / Returns the number of selected pins
    virtual ::grpc::Status selectedPinCount(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* request, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* response);
    // / Copies the set of currently selected items into the specified array
    virtual ::grpc::Status getSelection(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest* request, ::octaneapi::ApiSelectionManager_getSelectionResponse* response);
    // / Copies the set of currently selected pins into the specified array
    virtual ::grpc::Status getSelection1(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request* request, ::octaneapi::ApiSelectionManager_getSelection1Response* response);
    // / De-selects everything and sends a selection change event if something actually got
    // / deselected
    virtual ::grpc::Status clearSelection(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* request, ::google::protobuf::Empty* response);
    // / Replaces the complete current selection with a new item/pin selection and sends a selection
    // / change event
    virtual ::grpc::Status setSelection(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest* request, ::google::protobuf::Empty* response);
    // / Adds an item to the current selection and sends a change event if the selection changed
    virtual ::grpc::Status select(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_selectRequest* request, ::google::protobuf::Empty* response);
    // / Adds a pin to the current selection and sends a change event if the selection changed
    virtual ::grpc::Status select1(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_select1Request* request, ::google::protobuf::Empty* response);
    // / Removed an item from the current selection and sends a change event if the selection changed
    virtual ::grpc::Status deselect(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest* request, ::google::protobuf::Empty* response);
    // / Removes a pin from the current selection and sends a change event if the selection changed
    virtual ::grpc::Status deselect1(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request* request, ::google::protobuf::Empty* response);
    // / If the old item was selected, the new item will be selected and the old item deselected
    virtual ::grpc::Status swapSelection(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* request, ::google::protobuf::Empty* response);
    // / Adds a selection changed observer
    virtual ::grpc::Status addSelectionObserver(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* request, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* response);
    // / Removes a selection observer
    virtual ::grpc::Status removeSelectionObserver(::grpc::ServerContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_isItemSelected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isItemSelected() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_isItemSelected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isItemSelected(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* /*request*/, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisItemSelected(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_isItemSelectedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSelectionManager_isItemSelectedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isPinSelected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isPinSelected() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_isPinSelected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelected(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisPinSelected(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_isPinSelectedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSelectionManager_isPinSelectedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isPinSelected1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isPinSelected1() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_isPinSelected1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelected1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelected1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisPinSelected1(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_isPinSelected1Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSelectionManager_isPinSelected1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isPinSelectedIx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isPinSelectedIx() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_isPinSelectedIx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelectedIx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisPinSelectedIx(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_selectedItemCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_selectedItemCount() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_selectedItemCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectedItemCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* /*request*/, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestselectedItemCount(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_selectedItemCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSelectionManager_selectedItemCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_selectedPinCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_selectedPinCount() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_selectedPinCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectedPinCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* /*request*/, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestselectedPinCount(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_selectedPinCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSelectionManager_selectedPinCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getSelection() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_getSelectionRequest* /*request*/, ::octaneapi::ApiSelectionManager_getSelectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSelection(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_getSelectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSelectionManager_getSelectionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getSelection1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getSelection1() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_getSelection1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSelection1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_getSelection1Request* /*request*/, ::octaneapi::ApiSelectionManager_getSelection1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSelection1(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_getSelection1Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSelectionManager_getSelection1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_clearSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_clearSelection() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_clearSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestclearSelection(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_clearSelectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setSelection() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_setSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_setSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetSelection(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_setSelectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_select() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status select(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestselect(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_selectRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_select1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_select1() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_select1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status select1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_select1Request* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestselect1(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_select1Request* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deselect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deselect() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_deselect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deselect(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_deselectRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdeselect(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_deselectRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deselect1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deselect1() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_deselect1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deselect1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_deselect1Request* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdeselect1(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_deselect1Request* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_swapSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_swapSelection() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_swapSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status swapSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestswapSelection(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_swapSelectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addSelectionObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addSelectionObserver() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_addSelectionObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addSelectionObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* /*request*/, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddSelectionObserver(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_removeSelectionObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_removeSelectionObserver() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_removeSelectionObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeSelectionObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveSelectionObserver(::grpc::ServerContext* context, ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_isItemSelected<WithAsyncMethod_isPinSelected<WithAsyncMethod_isPinSelected1<WithAsyncMethod_isPinSelectedIx<WithAsyncMethod_selectedItemCount<WithAsyncMethod_selectedPinCount<WithAsyncMethod_getSelection<WithAsyncMethod_getSelection1<WithAsyncMethod_clearSelection<WithAsyncMethod_setSelection<WithAsyncMethod_select<WithAsyncMethod_select1<WithAsyncMethod_deselect<WithAsyncMethod_deselect1<WithAsyncMethod_swapSelection<WithAsyncMethod_addSelectionObserver<WithAsyncMethod_removeSelectionObserver<Service > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_isItemSelected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isItemSelected() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_isItemSelectedRequest, ::octaneapi::ApiSelectionManager_isItemSelectedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* request, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* response) { return this->isItemSelected(context, request, response); }));}
    void SetMessageAllocatorFor_isItemSelected(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_isItemSelectedRequest, ::octaneapi::ApiSelectionManager_isItemSelectedResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_isItemSelectedRequest, ::octaneapi::ApiSelectionManager_isItemSelectedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isItemSelected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isItemSelected(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* /*request*/, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isItemSelected(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* /*request*/, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isPinSelected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isPinSelected() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_isPinSelectedRequest, ::octaneapi::ApiSelectionManager_isPinSelectedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* response) { return this->isPinSelected(context, request, response); }));}
    void SetMessageAllocatorFor_isPinSelected(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_isPinSelectedRequest, ::octaneapi::ApiSelectionManager_isPinSelectedResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_isPinSelectedRequest, ::octaneapi::ApiSelectionManager_isPinSelectedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isPinSelected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelected(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isPinSelected(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isPinSelected1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isPinSelected1() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_isPinSelected1Request, ::octaneapi::ApiSelectionManager_isPinSelected1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* request, ::octaneapi::ApiSelectionManager_isPinSelected1Response* response) { return this->isPinSelected1(context, request, response); }));}
    void SetMessageAllocatorFor_isPinSelected1(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_isPinSelected1Request, ::octaneapi::ApiSelectionManager_isPinSelected1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_isPinSelected1Request, ::octaneapi::ApiSelectionManager_isPinSelected1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isPinSelected1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelected1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelected1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isPinSelected1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelected1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isPinSelectedIx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isPinSelectedIx() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* request, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* response) { return this->isPinSelectedIx(context, request, response); }));}
    void SetMessageAllocatorFor_isPinSelectedIx(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isPinSelectedIx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelectedIx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isPinSelectedIx(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_selectedItemCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_selectedItemCount() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_selectedItemCountRequest, ::octaneapi::ApiSelectionManager_selectedItemCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* request, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* response) { return this->selectedItemCount(context, request, response); }));}
    void SetMessageAllocatorFor_selectedItemCount(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_selectedItemCountRequest, ::octaneapi::ApiSelectionManager_selectedItemCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_selectedItemCountRequest, ::octaneapi::ApiSelectionManager_selectedItemCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_selectedItemCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectedItemCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* /*request*/, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* selectedItemCount(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* /*request*/, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_selectedPinCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_selectedPinCount() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_selectedPinCountRequest, ::octaneapi::ApiSelectionManager_selectedPinCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* request, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* response) { return this->selectedPinCount(context, request, response); }));}
    void SetMessageAllocatorFor_selectedPinCount(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_selectedPinCountRequest, ::octaneapi::ApiSelectionManager_selectedPinCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_selectedPinCountRequest, ::octaneapi::ApiSelectionManager_selectedPinCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_selectedPinCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectedPinCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* /*request*/, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* selectedPinCount(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* /*request*/, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getSelection() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_getSelectionRequest, ::octaneapi::ApiSelectionManager_getSelectionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_getSelectionRequest* request, ::octaneapi::ApiSelectionManager_getSelectionResponse* response) { return this->getSelection(context, request, response); }));}
    void SetMessageAllocatorFor_getSelection(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_getSelectionRequest, ::octaneapi::ApiSelectionManager_getSelectionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_getSelectionRequest, ::octaneapi::ApiSelectionManager_getSelectionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_getSelectionRequest* /*request*/, ::octaneapi::ApiSelectionManager_getSelectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getSelection(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_getSelectionRequest* /*request*/, ::octaneapi::ApiSelectionManager_getSelectionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getSelection1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getSelection1() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_getSelection1Request, ::octaneapi::ApiSelectionManager_getSelection1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_getSelection1Request* request, ::octaneapi::ApiSelectionManager_getSelection1Response* response) { return this->getSelection1(context, request, response); }));}
    void SetMessageAllocatorFor_getSelection1(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_getSelection1Request, ::octaneapi::ApiSelectionManager_getSelection1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_getSelection1Request, ::octaneapi::ApiSelectionManager_getSelection1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getSelection1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSelection1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_getSelection1Request* /*request*/, ::octaneapi::ApiSelectionManager_getSelection1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getSelection1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_getSelection1Request* /*request*/, ::octaneapi::ApiSelectionManager_getSelection1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_clearSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_clearSelection() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_clearSelectionRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* request, ::google::protobuf::Empty* response) { return this->clearSelection(context, request, response); }));}
    void SetMessageAllocatorFor_clearSelection(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_clearSelectionRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_clearSelectionRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_clearSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clearSelection(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setSelection() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_setSelectionRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_setSelectionRequest* request, ::google::protobuf::Empty* response) { return this->setSelection(context, request, response); }));}
    void SetMessageAllocatorFor_setSelection(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_setSelectionRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_setSelectionRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_setSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setSelection(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_setSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_select() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_selectRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_selectRequest* request, ::google::protobuf::Empty* response) { return this->select(context, request, response); }));}
    void SetMessageAllocatorFor_select(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_selectRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_selectRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status select(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* select(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_select1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_select1() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_select1Request, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_select1Request* request, ::google::protobuf::Empty* response) { return this->select1(context, request, response); }));}
    void SetMessageAllocatorFor_select1(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_select1Request, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_select1Request, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_select1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status select1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_select1Request* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* select1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_select1Request* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deselect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deselect() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_deselectRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_deselectRequest* request, ::google::protobuf::Empty* response) { return this->deselect(context, request, response); }));}
    void SetMessageAllocatorFor_deselect(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_deselectRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_deselectRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deselect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deselect(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_deselectRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deselect(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_deselectRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deselect1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deselect1() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_deselect1Request, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_deselect1Request* request, ::google::protobuf::Empty* response) { return this->deselect1(context, request, response); }));}
    void SetMessageAllocatorFor_deselect1(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_deselect1Request, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_deselect1Request, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deselect1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deselect1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_deselect1Request* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deselect1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_deselect1Request* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_swapSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_swapSelection() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_swapSelectionRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* request, ::google::protobuf::Empty* response) { return this->swapSelection(context, request, response); }));}
    void SetMessageAllocatorFor_swapSelection(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_swapSelectionRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_swapSelectionRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_swapSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status swapSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* swapSelection(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_addSelectionObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addSelectionObserver() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_addSelectionObserverRequest, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* request, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* response) { return this->addSelectionObserver(context, request, response); }));}
    void SetMessageAllocatorFor_addSelectionObserver(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_addSelectionObserverRequest, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_addSelectionObserverRequest, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addSelectionObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addSelectionObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* /*request*/, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addSelectionObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* /*request*/, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_removeSelectionObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_removeSelectionObserver() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* request, ::google::protobuf::Empty* response) { return this->removeSelectionObserver(context, request, response); }));}
    void SetMessageAllocatorFor_removeSelectionObserver(
        ::grpc::MessageAllocator< ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_removeSelectionObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeSelectionObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* removeSelectionObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_isItemSelected<WithCallbackMethod_isPinSelected<WithCallbackMethod_isPinSelected1<WithCallbackMethod_isPinSelectedIx<WithCallbackMethod_selectedItemCount<WithCallbackMethod_selectedPinCount<WithCallbackMethod_getSelection<WithCallbackMethod_getSelection1<WithCallbackMethod_clearSelection<WithCallbackMethod_setSelection<WithCallbackMethod_select<WithCallbackMethod_select1<WithCallbackMethod_deselect<WithCallbackMethod_deselect1<WithCallbackMethod_swapSelection<WithCallbackMethod_addSelectionObserver<WithCallbackMethod_removeSelectionObserver<Service > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_isItemSelected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isItemSelected() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_isItemSelected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isItemSelected(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* /*request*/, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isPinSelected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isPinSelected() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_isPinSelected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelected(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isPinSelected1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isPinSelected1() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_isPinSelected1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelected1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelected1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isPinSelectedIx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isPinSelectedIx() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_isPinSelectedIx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelectedIx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_selectedItemCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_selectedItemCount() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_selectedItemCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectedItemCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* /*request*/, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_selectedPinCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_selectedPinCount() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_selectedPinCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectedPinCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* /*request*/, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getSelection() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_getSelectionRequest* /*request*/, ::octaneapi::ApiSelectionManager_getSelectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getSelection1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getSelection1() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_getSelection1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSelection1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_getSelection1Request* /*request*/, ::octaneapi::ApiSelectionManager_getSelection1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_clearSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_clearSelection() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_clearSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setSelection() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_setSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_setSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_select() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status select(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_select1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_select1() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_select1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status select1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_select1Request* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deselect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deselect() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_deselect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deselect(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_deselectRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deselect1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deselect1() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_deselect1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deselect1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_deselect1Request* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_swapSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_swapSelection() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_swapSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status swapSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addSelectionObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addSelectionObserver() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_addSelectionObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addSelectionObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* /*request*/, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_removeSelectionObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_removeSelectionObserver() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_removeSelectionObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeSelectionObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_isItemSelected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isItemSelected() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_isItemSelected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isItemSelected(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* /*request*/, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisItemSelected(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isPinSelected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isPinSelected() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_isPinSelected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelected(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisPinSelected(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isPinSelected1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isPinSelected1() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_isPinSelected1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelected1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelected1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisPinSelected1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isPinSelectedIx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isPinSelectedIx() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_isPinSelectedIx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelectedIx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisPinSelectedIx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_selectedItemCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_selectedItemCount() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_selectedItemCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectedItemCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* /*request*/, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestselectedItemCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_selectedPinCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_selectedPinCount() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_selectedPinCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectedPinCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* /*request*/, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestselectedPinCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getSelection() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_getSelectionRequest* /*request*/, ::octaneapi::ApiSelectionManager_getSelectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSelection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getSelection1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getSelection1() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_getSelection1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSelection1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_getSelection1Request* /*request*/, ::octaneapi::ApiSelectionManager_getSelection1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSelection1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_clearSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_clearSelection() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_clearSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestclearSelection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setSelection() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_setSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_setSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetSelection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_select() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status select(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestselect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_select1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_select1() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_select1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status select1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_select1Request* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestselect1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deselect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deselect() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_deselect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deselect(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_deselectRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdeselect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deselect1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deselect1() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_deselect1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deselect1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_deselect1Request* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdeselect1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_swapSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_swapSelection() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_swapSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status swapSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestswapSelection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addSelectionObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addSelectionObserver() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_addSelectionObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addSelectionObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* /*request*/, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddSelectionObserver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_removeSelectionObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_removeSelectionObserver() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_removeSelectionObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeSelectionObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveSelectionObserver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isItemSelected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isItemSelected() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isItemSelected(context, request, response); }));
    }
    ~WithRawCallbackMethod_isItemSelected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isItemSelected(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* /*request*/, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isItemSelected(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isPinSelected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isPinSelected() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isPinSelected(context, request, response); }));
    }
    ~WithRawCallbackMethod_isPinSelected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelected(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isPinSelected(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isPinSelected1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isPinSelected1() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isPinSelected1(context, request, response); }));
    }
    ~WithRawCallbackMethod_isPinSelected1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelected1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelected1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isPinSelected1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isPinSelectedIx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isPinSelectedIx() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isPinSelectedIx(context, request, response); }));
    }
    ~WithRawCallbackMethod_isPinSelectedIx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isPinSelectedIx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isPinSelectedIx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_selectedItemCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_selectedItemCount() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->selectedItemCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_selectedItemCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectedItemCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* /*request*/, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* selectedItemCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_selectedPinCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_selectedPinCount() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->selectedPinCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_selectedPinCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectedPinCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* /*request*/, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* selectedPinCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getSelection() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getSelection(context, request, response); }));
    }
    ~WithRawCallbackMethod_getSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_getSelectionRequest* /*request*/, ::octaneapi::ApiSelectionManager_getSelectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getSelection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getSelection1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getSelection1() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getSelection1(context, request, response); }));
    }
    ~WithRawCallbackMethod_getSelection1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSelection1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_getSelection1Request* /*request*/, ::octaneapi::ApiSelectionManager_getSelection1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getSelection1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_clearSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_clearSelection() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->clearSelection(context, request, response); }));
    }
    ~WithRawCallbackMethod_clearSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clearSelection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setSelection() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setSelection(context, request, response); }));
    }
    ~WithRawCallbackMethod_setSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_setSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setSelection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_select() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->select(context, request, response); }));
    }
    ~WithRawCallbackMethod_select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status select(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* select(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_select1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_select1() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->select1(context, request, response); }));
    }
    ~WithRawCallbackMethod_select1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status select1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_select1Request* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* select1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deselect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deselect() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deselect(context, request, response); }));
    }
    ~WithRawCallbackMethod_deselect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deselect(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_deselectRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deselect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deselect1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deselect1() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deselect1(context, request, response); }));
    }
    ~WithRawCallbackMethod_deselect1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deselect1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_deselect1Request* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deselect1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_swapSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_swapSelection() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->swapSelection(context, request, response); }));
    }
    ~WithRawCallbackMethod_swapSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status swapSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* swapSelection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addSelectionObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addSelectionObserver() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addSelectionObserver(context, request, response); }));
    }
    ~WithRawCallbackMethod_addSelectionObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addSelectionObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* /*request*/, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addSelectionObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_removeSelectionObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_removeSelectionObserver() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->removeSelectionObserver(context, request, response); }));
    }
    ~WithRawCallbackMethod_removeSelectionObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeSelectionObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* removeSelectionObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isItemSelected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isItemSelected() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_isItemSelectedRequest, ::octaneapi::ApiSelectionManager_isItemSelectedResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_isItemSelectedRequest, ::octaneapi::ApiSelectionManager_isItemSelectedResponse>* streamer) {
                       return this->StreamedisItemSelected(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isItemSelected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isItemSelected(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isItemSelectedRequest* /*request*/, ::octaneapi::ApiSelectionManager_isItemSelectedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisItemSelected(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_isItemSelectedRequest,::octaneapi::ApiSelectionManager_isItemSelectedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isPinSelected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isPinSelected() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_isPinSelectedRequest, ::octaneapi::ApiSelectionManager_isPinSelectedResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_isPinSelectedRequest, ::octaneapi::ApiSelectionManager_isPinSelectedResponse>* streamer) {
                       return this->StreamedisPinSelected(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isPinSelected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isPinSelected(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelectedRequest* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelectedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisPinSelected(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_isPinSelectedRequest,::octaneapi::ApiSelectionManager_isPinSelectedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isPinSelected1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isPinSelected1() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_isPinSelected1Request, ::octaneapi::ApiSelectionManager_isPinSelected1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_isPinSelected1Request, ::octaneapi::ApiSelectionManager_isPinSelected1Response>* streamer) {
                       return this->StreamedisPinSelected1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isPinSelected1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isPinSelected1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelected1Request* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelected1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisPinSelected1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_isPinSelected1Request,::octaneapi::ApiSelectionManager_isPinSelected1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isPinSelectedIx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isPinSelectedIx() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>* streamer) {
                       return this->StreamedisPinSelectedIx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isPinSelectedIx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isPinSelectedIx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest* /*request*/, ::octaneapi::ApiSelectionManager_isPinSelectedIxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisPinSelectedIx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_isPinSelectedIxRequest,::octaneapi::ApiSelectionManager_isPinSelectedIxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_selectedItemCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_selectedItemCount() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_selectedItemCountRequest, ::octaneapi::ApiSelectionManager_selectedItemCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_selectedItemCountRequest, ::octaneapi::ApiSelectionManager_selectedItemCountResponse>* streamer) {
                       return this->StreamedselectedItemCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_selectedItemCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status selectedItemCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectedItemCountRequest* /*request*/, ::octaneapi::ApiSelectionManager_selectedItemCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedselectedItemCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_selectedItemCountRequest,::octaneapi::ApiSelectionManager_selectedItemCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_selectedPinCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_selectedPinCount() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_selectedPinCountRequest, ::octaneapi::ApiSelectionManager_selectedPinCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_selectedPinCountRequest, ::octaneapi::ApiSelectionManager_selectedPinCountResponse>* streamer) {
                       return this->StreamedselectedPinCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_selectedPinCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status selectedPinCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectedPinCountRequest* /*request*/, ::octaneapi::ApiSelectionManager_selectedPinCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedselectedPinCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_selectedPinCountRequest,::octaneapi::ApiSelectionManager_selectedPinCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getSelection() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_getSelectionRequest, ::octaneapi::ApiSelectionManager_getSelectionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_getSelectionRequest, ::octaneapi::ApiSelectionManager_getSelectionResponse>* streamer) {
                       return this->StreamedgetSelection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_getSelectionRequest* /*request*/, ::octaneapi::ApiSelectionManager_getSelectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetSelection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_getSelectionRequest,::octaneapi::ApiSelectionManager_getSelectionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getSelection1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getSelection1() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_getSelection1Request, ::octaneapi::ApiSelectionManager_getSelection1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_getSelection1Request, ::octaneapi::ApiSelectionManager_getSelection1Response>* streamer) {
                       return this->StreamedgetSelection1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getSelection1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getSelection1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_getSelection1Request* /*request*/, ::octaneapi::ApiSelectionManager_getSelection1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetSelection1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_getSelection1Request,::octaneapi::ApiSelectionManager_getSelection1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_clearSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_clearSelection() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_clearSelectionRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_clearSelectionRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedclearSelection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_clearSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status clearSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_clearSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedclearSelection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_clearSelectionRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setSelection() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_setSelectionRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_setSelectionRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetSelection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_setSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetSelection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_setSelectionRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_select() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_selectRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_selectRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedselect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status select(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_selectRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedselect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_selectRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_select1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_select1() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_select1Request, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_select1Request, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedselect1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_select1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status select1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_select1Request* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedselect1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_select1Request,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deselect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deselect() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_deselectRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_deselectRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streameddeselect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deselect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deselect(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_deselectRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddeselect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_deselectRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deselect1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deselect1() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_deselect1Request, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_deselect1Request, ::google::protobuf::Empty>* streamer) {
                       return this->Streameddeselect1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deselect1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deselect1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_deselect1Request* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddeselect1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_deselect1Request,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_swapSelection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_swapSelection() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_swapSelectionRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_swapSelectionRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedswapSelection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_swapSelection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status swapSelection(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_swapSelectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedswapSelection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_swapSelectionRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addSelectionObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addSelectionObserver() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_addSelectionObserverRequest, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_addSelectionObserverRequest, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse>* streamer) {
                       return this->StreamedaddSelectionObserver(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addSelectionObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addSelectionObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_addSelectionObserverRequest* /*request*/, ::octaneapi::ApiSelectionManager_addSelectionObserverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddSelectionObserver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_addSelectionObserverRequest,::octaneapi::ApiSelectionManager_addSelectionObserverResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_removeSelectionObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_removeSelectionObserver() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedremoveSelectionObserver(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_removeSelectionObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status removeSelectionObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedremoveSelectionObserver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSelectionManager_removeSelectionObserverRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_isItemSelected<WithStreamedUnaryMethod_isPinSelected<WithStreamedUnaryMethod_isPinSelected1<WithStreamedUnaryMethod_isPinSelectedIx<WithStreamedUnaryMethod_selectedItemCount<WithStreamedUnaryMethod_selectedPinCount<WithStreamedUnaryMethod_getSelection<WithStreamedUnaryMethod_getSelection1<WithStreamedUnaryMethod_clearSelection<WithStreamedUnaryMethod_setSelection<WithStreamedUnaryMethod_select<WithStreamedUnaryMethod_select1<WithStreamedUnaryMethod_deselect<WithStreamedUnaryMethod_deselect1<WithStreamedUnaryMethod_swapSelection<WithStreamedUnaryMethod_addSelectionObserver<WithStreamedUnaryMethod_removeSelectionObserver<Service > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_isItemSelected<WithStreamedUnaryMethod_isPinSelected<WithStreamedUnaryMethod_isPinSelected1<WithStreamedUnaryMethod_isPinSelectedIx<WithStreamedUnaryMethod_selectedItemCount<WithStreamedUnaryMethod_selectedPinCount<WithStreamedUnaryMethod_getSelection<WithStreamedUnaryMethod_getSelection1<WithStreamedUnaryMethod_clearSelection<WithStreamedUnaryMethod_setSelection<WithStreamedUnaryMethod_select<WithStreamedUnaryMethod_select1<WithStreamedUnaryMethod_deselect<WithStreamedUnaryMethod_deselect1<WithStreamedUnaryMethod_swapSelection<WithStreamedUnaryMethod_addSelectionObserver<WithStreamedUnaryMethod_removeSelectionObserver<Service > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apiselectionmanager_2eproto__INCLUDED
