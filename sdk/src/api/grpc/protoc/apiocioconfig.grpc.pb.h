// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apiocioconfig.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apiocioconfig_2eproto__INCLUDED
#define GRPC_apiocioconfig_2eproto__INCLUDED

#include "apiocioconfig.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiOcioConfig' from 'apiocioconfig.h'
class ApiOcioConfigService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiOcioConfigService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Loads an OCIO config
    virtual ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_createRequest& request, ::octaneapi::ApiOcioConfig_createResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    virtual ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    // / 
    virtual ::grpc::Status clone(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest& request, ::octaneapi::ApiOcioConfig_cloneResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_cloneResponse>> Asyncclone(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_cloneResponse>>(AsynccloneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_cloneResponse>> PrepareAsyncclone(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_cloneResponse>>(PrepareAsynccloneRaw(context, request, cq));
    }
    // / Gets the number of roles in the config
    virtual ::grpc::Status getRoleCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest& request, ::octaneapi::ApiOcioConfig_getRoleCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleCountResponse>> AsyncgetRoleCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleCountResponse>>(AsyncgetRoleCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleCountResponse>> PrepareAsyncgetRoleCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleCountResponse>>(PrepareAsyncgetRoleCountRaw(context, request, cq));
    }
    // / Gets the name of a role
    virtual ::grpc::Status getRoleName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest& request, ::octaneapi::ApiOcioConfig_getRoleNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleNameResponse>> AsyncgetRoleName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleNameResponse>>(AsyncgetRoleNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleNameResponse>> PrepareAsyncgetRoleName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleNameResponse>>(PrepareAsyncgetRoleNameRaw(context, request, cq));
    }
    // / Gets the name of the color space for which a role is an alias
    virtual ::grpc::Status getRoleColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest& request, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>> AsyncgetRoleColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>>(AsyncgetRoleColorSpaceNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>> PrepareAsyncgetRoleColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>>(PrepareAsyncgetRoleColorSpaceNameRaw(context, request, cq));
    }
    // / Gets the number of color spaces in the config
    virtual ::grpc::Status getColorSpaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest& request, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>> AsyncgetColorSpaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>>(AsyncgetColorSpaceCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>> PrepareAsyncgetColorSpaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>>(PrepareAsyncgetColorSpaceCountRaw(context, request, cq));
    }
    // / Gets the name of a color space
    virtual ::grpc::Status getColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest& request, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>> AsyncgetColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>>(AsyncgetColorSpaceNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>> PrepareAsyncgetColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>>(PrepareAsyncgetColorSpaceNameRaw(context, request, cq));
    }
    // / Gets the number of components the family of a color space has
    virtual ::grpc::Status getColorSpaceFamilyComponentCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest& request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>> AsyncgetColorSpaceFamilyComponentCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>>(AsyncgetColorSpaceFamilyComponentCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>> PrepareAsyncgetColorSpaceFamilyComponentCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>>(PrepareAsyncgetColorSpaceFamilyComponentCountRaw(context, request, cq));
    }
    // / Gets a component of the family of a color space
    virtual ::grpc::Status getColorSpaceFamilyComponent(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest& request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>> AsyncgetColorSpaceFamilyComponent(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>>(AsyncgetColorSpaceFamilyComponentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>> PrepareAsyncgetColorSpaceFamilyComponent(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>>(PrepareAsyncgetColorSpaceFamilyComponentRaw(context, request, cq));
    }
    // / Gets the number of displays in the config
    virtual ::grpc::Status getDisplayCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest& request, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayCountResponse>> AsyncgetDisplayCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayCountResponse>>(AsyncgetDisplayCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayCountResponse>> PrepareAsyncgetDisplayCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayCountResponse>>(PrepareAsyncgetDisplayCountRaw(context, request, cq));
    }
    // / Gets the name of a display
    virtual ::grpc::Status getDisplayName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest& request, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayNameResponse>> AsyncgetDisplayName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayNameResponse>>(AsyncgetDisplayNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayNameResponse>> PrepareAsyncgetDisplayName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayNameResponse>>(PrepareAsyncgetDisplayNameRaw(context, request, cq));
    }
    // / Gets the number of views a display has
    virtual ::grpc::Status getDisplayViewCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest& request, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>> AsyncgetDisplayViewCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>>(AsyncgetDisplayViewCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>> PrepareAsyncgetDisplayViewCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>>(PrepareAsyncgetDisplayViewCountRaw(context, request, cq));
    }
    // / Gets the name of a view
    virtual ::grpc::Status getDisplayViewName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest& request, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>> AsyncgetDisplayViewName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>>(AsyncgetDisplayViewNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>> PrepareAsyncgetDisplayViewName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>>(PrepareAsyncgetDisplayViewNameRaw(context, request, cq));
    }
    // / Gets the number of looks in the config
    virtual ::grpc::Status getLookCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest& request, ::octaneapi::ApiOcioConfig_getLookCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getLookCountResponse>> AsyncgetLookCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getLookCountResponse>>(AsyncgetLookCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getLookCountResponse>> PrepareAsyncgetLookCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getLookCountResponse>>(PrepareAsyncgetLookCountRaw(context, request, cq));
    }
    // / Gets the name of a look
    virtual ::grpc::Status getLookName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest& request, ::octaneapi::ApiOcioConfig_getLookNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getLookNameResponse>> AsyncgetLookName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getLookNameResponse>>(AsyncgetLookNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getLookNameResponse>> PrepareAsyncgetLookName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getLookNameResponse>>(PrepareAsyncgetLookNameRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Loads an OCIO config
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_createRequest* request, ::octaneapi::ApiOcioConfig_createResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_createRequest* request, ::octaneapi::ApiOcioConfig_createResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / 
      virtual void clone(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest* request, ::octaneapi::ApiOcioConfig_cloneResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void clone(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest* request, ::octaneapi::ApiOcioConfig_cloneResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets the number of roles in the config
      virtual void getRoleCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest* request, ::octaneapi::ApiOcioConfig_getRoleCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getRoleCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest* request, ::octaneapi::ApiOcioConfig_getRoleCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets the name of a role
      virtual void getRoleName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest* request, ::octaneapi::ApiOcioConfig_getRoleNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getRoleName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest* request, ::octaneapi::ApiOcioConfig_getRoleNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets the name of the color space for which a role is an alias
      virtual void getRoleColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest* request, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getRoleColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest* request, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets the number of color spaces in the config
      virtual void getColorSpaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getColorSpaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets the name of a color space
      virtual void getColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets the number of components the family of a color space has
      virtual void getColorSpaceFamilyComponentCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getColorSpaceFamilyComponentCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets a component of the family of a color space
      virtual void getColorSpaceFamilyComponent(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getColorSpaceFamilyComponent(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets the number of displays in the config
      virtual void getDisplayCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest* request, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDisplayCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest* request, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets the name of a display
      virtual void getDisplayName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest* request, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDisplayName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest* request, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets the number of views a display has
      virtual void getDisplayViewCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest* request, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDisplayViewCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest* request, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets the name of a view
      virtual void getDisplayViewName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest* request, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDisplayViewName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest* request, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets the number of looks in the config
      virtual void getLookCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest* request, ::octaneapi::ApiOcioConfig_getLookCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getLookCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest* request, ::octaneapi::ApiOcioConfig_getLookCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets the name of a look
      virtual void getLookName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest* request, ::octaneapi::ApiOcioConfig_getLookNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getLookName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest* request, ::octaneapi::ApiOcioConfig_getLookNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_cloneResponse>* AsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_cloneResponse>* PrepareAsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleCountResponse>* AsyncgetRoleCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleCountResponse>* PrepareAsyncgetRoleCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleNameResponse>* AsyncgetRoleNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleNameResponse>* PrepareAsyncgetRoleNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>* AsyncgetRoleColorSpaceNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>* PrepareAsyncgetRoleColorSpaceNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>* AsyncgetColorSpaceCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>* PrepareAsyncgetColorSpaceCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>* AsyncgetColorSpaceNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>* PrepareAsyncgetColorSpaceNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>* AsyncgetColorSpaceFamilyComponentCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>* PrepareAsyncgetColorSpaceFamilyComponentCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>* AsyncgetColorSpaceFamilyComponentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>* PrepareAsyncgetColorSpaceFamilyComponentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayCountResponse>* AsyncgetDisplayCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayCountResponse>* PrepareAsyncgetDisplayCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayNameResponse>* AsyncgetDisplayNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayNameResponse>* PrepareAsyncgetDisplayNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>* AsyncgetDisplayViewCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>* PrepareAsyncgetDisplayViewCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>* AsyncgetDisplayViewNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>* PrepareAsyncgetDisplayViewNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getLookCountResponse>* AsyncgetLookCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getLookCountResponse>* PrepareAsyncgetLookCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getLookNameResponse>* AsyncgetLookNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiOcioConfig_getLookNameResponse>* PrepareAsyncgetLookNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_createRequest& request, ::octaneapi::ApiOcioConfig_createResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    ::grpc::Status clone(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest& request, ::octaneapi::ApiOcioConfig_cloneResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_cloneResponse>> Asyncclone(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_cloneResponse>>(AsynccloneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_cloneResponse>> PrepareAsyncclone(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_cloneResponse>>(PrepareAsynccloneRaw(context, request, cq));
    }
    ::grpc::Status getRoleCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest& request, ::octaneapi::ApiOcioConfig_getRoleCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleCountResponse>> AsyncgetRoleCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleCountResponse>>(AsyncgetRoleCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleCountResponse>> PrepareAsyncgetRoleCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleCountResponse>>(PrepareAsyncgetRoleCountRaw(context, request, cq));
    }
    ::grpc::Status getRoleName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest& request, ::octaneapi::ApiOcioConfig_getRoleNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleNameResponse>> AsyncgetRoleName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleNameResponse>>(AsyncgetRoleNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleNameResponse>> PrepareAsyncgetRoleName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleNameResponse>>(PrepareAsyncgetRoleNameRaw(context, request, cq));
    }
    ::grpc::Status getRoleColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest& request, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>> AsyncgetRoleColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>>(AsyncgetRoleColorSpaceNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>> PrepareAsyncgetRoleColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>>(PrepareAsyncgetRoleColorSpaceNameRaw(context, request, cq));
    }
    ::grpc::Status getColorSpaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest& request, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>> AsyncgetColorSpaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>>(AsyncgetColorSpaceCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>> PrepareAsyncgetColorSpaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>>(PrepareAsyncgetColorSpaceCountRaw(context, request, cq));
    }
    ::grpc::Status getColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest& request, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>> AsyncgetColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>>(AsyncgetColorSpaceNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>> PrepareAsyncgetColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>>(PrepareAsyncgetColorSpaceNameRaw(context, request, cq));
    }
    ::grpc::Status getColorSpaceFamilyComponentCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest& request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>> AsyncgetColorSpaceFamilyComponentCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>>(AsyncgetColorSpaceFamilyComponentCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>> PrepareAsyncgetColorSpaceFamilyComponentCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>>(PrepareAsyncgetColorSpaceFamilyComponentCountRaw(context, request, cq));
    }
    ::grpc::Status getColorSpaceFamilyComponent(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest& request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>> AsyncgetColorSpaceFamilyComponent(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>>(AsyncgetColorSpaceFamilyComponentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>> PrepareAsyncgetColorSpaceFamilyComponent(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>>(PrepareAsyncgetColorSpaceFamilyComponentRaw(context, request, cq));
    }
    ::grpc::Status getDisplayCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest& request, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayCountResponse>> AsyncgetDisplayCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayCountResponse>>(AsyncgetDisplayCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayCountResponse>> PrepareAsyncgetDisplayCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayCountResponse>>(PrepareAsyncgetDisplayCountRaw(context, request, cq));
    }
    ::grpc::Status getDisplayName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest& request, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayNameResponse>> AsyncgetDisplayName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayNameResponse>>(AsyncgetDisplayNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayNameResponse>> PrepareAsyncgetDisplayName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayNameResponse>>(PrepareAsyncgetDisplayNameRaw(context, request, cq));
    }
    ::grpc::Status getDisplayViewCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest& request, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>> AsyncgetDisplayViewCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>>(AsyncgetDisplayViewCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>> PrepareAsyncgetDisplayViewCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>>(PrepareAsyncgetDisplayViewCountRaw(context, request, cq));
    }
    ::grpc::Status getDisplayViewName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest& request, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>> AsyncgetDisplayViewName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>>(AsyncgetDisplayViewNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>> PrepareAsyncgetDisplayViewName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>>(PrepareAsyncgetDisplayViewNameRaw(context, request, cq));
    }
    ::grpc::Status getLookCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest& request, ::octaneapi::ApiOcioConfig_getLookCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getLookCountResponse>> AsyncgetLookCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getLookCountResponse>>(AsyncgetLookCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getLookCountResponse>> PrepareAsyncgetLookCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getLookCountResponse>>(PrepareAsyncgetLookCountRaw(context, request, cq));
    }
    ::grpc::Status getLookName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest& request, ::octaneapi::ApiOcioConfig_getLookNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getLookNameResponse>> AsyncgetLookName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getLookNameResponse>>(AsyncgetLookNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getLookNameResponse>> PrepareAsyncgetLookName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getLookNameResponse>>(PrepareAsyncgetLookNameRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_createRequest* request, ::octaneapi::ApiOcioConfig_createResponse* response, std::function<void(::grpc::Status)>) override;
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_createRequest* request, ::octaneapi::ApiOcioConfig_createResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void clone(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest* request, ::octaneapi::ApiOcioConfig_cloneResponse* response, std::function<void(::grpc::Status)>) override;
      void clone(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest* request, ::octaneapi::ApiOcioConfig_cloneResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getRoleCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest* request, ::octaneapi::ApiOcioConfig_getRoleCountResponse* response, std::function<void(::grpc::Status)>) override;
      void getRoleCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest* request, ::octaneapi::ApiOcioConfig_getRoleCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getRoleName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest* request, ::octaneapi::ApiOcioConfig_getRoleNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getRoleName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest* request, ::octaneapi::ApiOcioConfig_getRoleNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getRoleColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest* request, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getRoleColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest* request, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getColorSpaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* response, std::function<void(::grpc::Status)>) override;
      void getColorSpaceCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getColorSpaceName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getColorSpaceFamilyComponentCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* response, std::function<void(::grpc::Status)>) override;
      void getColorSpaceFamilyComponentCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getColorSpaceFamilyComponent(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* response, std::function<void(::grpc::Status)>) override;
      void getColorSpaceFamilyComponent(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getDisplayCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest* request, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* response, std::function<void(::grpc::Status)>) override;
      void getDisplayCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest* request, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getDisplayName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest* request, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getDisplayName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest* request, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getDisplayViewCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest* request, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* response, std::function<void(::grpc::Status)>) override;
      void getDisplayViewCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest* request, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getDisplayViewName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest* request, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getDisplayViewName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest* request, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getLookCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest* request, ::octaneapi::ApiOcioConfig_getLookCountResponse* response, std::function<void(::grpc::Status)>) override;
      void getLookCount(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest* request, ::octaneapi::ApiOcioConfig_getLookCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getLookName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest* request, ::octaneapi::ApiOcioConfig_getLookNameResponse* response, std::function<void(::grpc::Status)>) override;
      void getLookName(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest* request, ::octaneapi::ApiOcioConfig_getLookNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_cloneResponse>* AsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_cloneResponse>* PrepareAsynccloneRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleCountResponse>* AsyncgetRoleCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleCountResponse>* PrepareAsyncgetRoleCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleNameResponse>* AsyncgetRoleNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleNameResponse>* PrepareAsyncgetRoleNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>* AsyncgetRoleColorSpaceNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>* PrepareAsyncgetRoleColorSpaceNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>* AsyncgetColorSpaceCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>* PrepareAsyncgetColorSpaceCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>* AsyncgetColorSpaceNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>* PrepareAsyncgetColorSpaceNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>* AsyncgetColorSpaceFamilyComponentCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>* PrepareAsyncgetColorSpaceFamilyComponentCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>* AsyncgetColorSpaceFamilyComponentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>* PrepareAsyncgetColorSpaceFamilyComponentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayCountResponse>* AsyncgetDisplayCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayCountResponse>* PrepareAsyncgetDisplayCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayNameResponse>* AsyncgetDisplayNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayNameResponse>* PrepareAsyncgetDisplayNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>* AsyncgetDisplayViewCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>* PrepareAsyncgetDisplayViewCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>* AsyncgetDisplayViewNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>* PrepareAsyncgetDisplayViewNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getLookCountResponse>* AsyncgetLookCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getLookCountResponse>* PrepareAsyncgetLookCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getLookNameResponse>* AsyncgetLookNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiOcioConfig_getLookNameResponse>* PrepareAsyncgetLookNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_create_;
    const ::grpc::internal::RpcMethod rpcmethod_destroy_;
    const ::grpc::internal::RpcMethod rpcmethod_clone_;
    const ::grpc::internal::RpcMethod rpcmethod_getRoleCount_;
    const ::grpc::internal::RpcMethod rpcmethod_getRoleName_;
    const ::grpc::internal::RpcMethod rpcmethod_getRoleColorSpaceName_;
    const ::grpc::internal::RpcMethod rpcmethod_getColorSpaceCount_;
    const ::grpc::internal::RpcMethod rpcmethod_getColorSpaceName_;
    const ::grpc::internal::RpcMethod rpcmethod_getColorSpaceFamilyComponentCount_;
    const ::grpc::internal::RpcMethod rpcmethod_getColorSpaceFamilyComponent_;
    const ::grpc::internal::RpcMethod rpcmethod_getDisplayCount_;
    const ::grpc::internal::RpcMethod rpcmethod_getDisplayName_;
    const ::grpc::internal::RpcMethod rpcmethod_getDisplayViewCount_;
    const ::grpc::internal::RpcMethod rpcmethod_getDisplayViewName_;
    const ::grpc::internal::RpcMethod rpcmethod_getLookCount_;
    const ::grpc::internal::RpcMethod rpcmethod_getLookName_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Loads an OCIO config
    virtual ::grpc::Status create(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_createRequest* request, ::octaneapi::ApiOcioConfig_createResponse* response);
    virtual ::grpc::Status destroy(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest* request, ::google::protobuf::Empty* response);
    // / 
    virtual ::grpc::Status clone(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest* request, ::octaneapi::ApiOcioConfig_cloneResponse* response);
    // / Gets the number of roles in the config
    virtual ::grpc::Status getRoleCount(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest* request, ::octaneapi::ApiOcioConfig_getRoleCountResponse* response);
    // / Gets the name of a role
    virtual ::grpc::Status getRoleName(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest* request, ::octaneapi::ApiOcioConfig_getRoleNameResponse* response);
    // / Gets the name of the color space for which a role is an alias
    virtual ::grpc::Status getRoleColorSpaceName(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest* request, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* response);
    // / Gets the number of color spaces in the config
    virtual ::grpc::Status getColorSpaceCount(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* response);
    // / Gets the name of a color space
    virtual ::grpc::Status getColorSpaceName(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* response);
    // / Gets the number of components the family of a color space has
    virtual ::grpc::Status getColorSpaceFamilyComponentCount(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* response);
    // / Gets a component of the family of a color space
    virtual ::grpc::Status getColorSpaceFamilyComponent(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* response);
    // / Gets the number of displays in the config
    virtual ::grpc::Status getDisplayCount(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest* request, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* response);
    // / Gets the name of a display
    virtual ::grpc::Status getDisplayName(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest* request, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* response);
    // / Gets the number of views a display has
    virtual ::grpc::Status getDisplayViewCount(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest* request, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* response);
    // / Gets the name of a view
    virtual ::grpc::Status getDisplayViewName(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest* request, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* response);
    // / Gets the number of looks in the config
    virtual ::grpc::Status getLookCount(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest* request, ::octaneapi::ApiOcioConfig_getLookCountResponse* response);
    // / Gets the name of a look
    virtual ::grpc::Status getLookName(::grpc::ServerContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest* request, ::octaneapi::ApiOcioConfig_getLookNameResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_createRequest* /*request*/, ::octaneapi::ApiOcioConfig_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_createRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_createResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_destroy() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_destroyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_clone() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_cloneRequest* /*request*/, ::octaneapi::ApiOcioConfig_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclone(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_cloneRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_cloneResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getRoleCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getRoleCount() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getRoleCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRoleCount(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_getRoleCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_getRoleCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getRoleName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getRoleName() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getRoleName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRoleName(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_getRoleNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_getRoleNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getRoleColorSpaceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getRoleColorSpaceName() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_getRoleColorSpaceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleColorSpaceName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRoleColorSpaceName(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getColorSpaceCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getColorSpaceCount() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getColorSpaceCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetColorSpaceCount(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getColorSpaceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getColorSpaceName() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_getColorSpaceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetColorSpaceName(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getColorSpaceFamilyComponentCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getColorSpaceFamilyComponentCount() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getColorSpaceFamilyComponentCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceFamilyComponentCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetColorSpaceFamilyComponentCount(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getColorSpaceFamilyComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getColorSpaceFamilyComponent() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getColorSpaceFamilyComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceFamilyComponent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetColorSpaceFamilyComponent(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDisplayCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDisplayCount() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_getDisplayCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDisplayCount(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_getDisplayCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_getDisplayCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDisplayName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDisplayName() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_getDisplayName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDisplayName(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_getDisplayNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_getDisplayNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDisplayViewCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDisplayViewCount() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_getDisplayViewCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayViewCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDisplayViewCount(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDisplayViewName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDisplayViewName() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_getDisplayViewName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayViewName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDisplayViewName(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getLookCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getLookCount() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_getLookCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLookCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getLookCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getLookCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLookCount(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_getLookCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_getLookCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getLookName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getLookName() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_getLookName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLookName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getLookNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getLookNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLookName(::grpc::ServerContext* context, ::octaneapi::ApiOcioConfig_getLookNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiOcioConfig_getLookNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_create<WithAsyncMethod_destroy<WithAsyncMethod_clone<WithAsyncMethod_getRoleCount<WithAsyncMethod_getRoleName<WithAsyncMethod_getRoleColorSpaceName<WithAsyncMethod_getColorSpaceCount<WithAsyncMethod_getColorSpaceName<WithAsyncMethod_getColorSpaceFamilyComponentCount<WithAsyncMethod_getColorSpaceFamilyComponent<WithAsyncMethod_getDisplayCount<WithAsyncMethod_getDisplayName<WithAsyncMethod_getDisplayViewCount<WithAsyncMethod_getDisplayViewName<WithAsyncMethod_getLookCount<WithAsyncMethod_getLookName<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_create() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_createRequest, ::octaneapi::ApiOcioConfig_createResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_createRequest* request, ::octaneapi::ApiOcioConfig_createResponse* response) { return this->create(context, request, response); }));}
    void SetMessageAllocatorFor_create(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_createRequest, ::octaneapi::ApiOcioConfig_createResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_createRequest, ::octaneapi::ApiOcioConfig_createResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_createRequest* /*request*/, ::octaneapi::ApiOcioConfig_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_createRequest* /*request*/, ::octaneapi::ApiOcioConfig_createResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_destroyRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_destroyRequest* request, ::google::protobuf::Empty* response) { return this->destroy(context, request, response); }));}
    void SetMessageAllocatorFor_destroy(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_destroyRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_destroyRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_clone() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_cloneRequest, ::octaneapi::ApiOcioConfig_cloneResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_cloneRequest* request, ::octaneapi::ApiOcioConfig_cloneResponse* response) { return this->clone(context, request, response); }));}
    void SetMessageAllocatorFor_clone(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_cloneRequest, ::octaneapi::ApiOcioConfig_cloneResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_cloneRequest, ::octaneapi::ApiOcioConfig_cloneResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_cloneRequest* /*request*/, ::octaneapi::ApiOcioConfig_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clone(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_cloneRequest* /*request*/, ::octaneapi::ApiOcioConfig_cloneResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getRoleCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getRoleCount() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getRoleCountRequest, ::octaneapi::ApiOcioConfig_getRoleCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_getRoleCountRequest* request, ::octaneapi::ApiOcioConfig_getRoleCountResponse* response) { return this->getRoleCount(context, request, response); }));}
    void SetMessageAllocatorFor_getRoleCount(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_getRoleCountRequest, ::octaneapi::ApiOcioConfig_getRoleCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getRoleCountRequest, ::octaneapi::ApiOcioConfig_getRoleCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getRoleCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getRoleCount(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getRoleName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getRoleName() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getRoleNameRequest, ::octaneapi::ApiOcioConfig_getRoleNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_getRoleNameRequest* request, ::octaneapi::ApiOcioConfig_getRoleNameResponse* response) { return this->getRoleName(context, request, response); }));}
    void SetMessageAllocatorFor_getRoleName(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_getRoleNameRequest, ::octaneapi::ApiOcioConfig_getRoleNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getRoleNameRequest, ::octaneapi::ApiOcioConfig_getRoleNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getRoleName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getRoleName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getRoleColorSpaceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getRoleColorSpaceName() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest* request, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* response) { return this->getRoleColorSpaceName(context, request, response); }));}
    void SetMessageAllocatorFor_getRoleColorSpaceName(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getRoleColorSpaceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleColorSpaceName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getRoleColorSpaceName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getColorSpaceCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getColorSpaceCount() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* response) { return this->getColorSpaceCount(context, request, response); }));}
    void SetMessageAllocatorFor_getColorSpaceCount(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getColorSpaceCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getColorSpaceCount(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getColorSpaceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getColorSpaceName() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* response) { return this->getColorSpaceName(context, request, response); }));}
    void SetMessageAllocatorFor_getColorSpaceName(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getColorSpaceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getColorSpaceName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getColorSpaceFamilyComponentCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getColorSpaceFamilyComponentCount() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* response) { return this->getColorSpaceFamilyComponentCount(context, request, response); }));}
    void SetMessageAllocatorFor_getColorSpaceFamilyComponentCount(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getColorSpaceFamilyComponentCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceFamilyComponentCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getColorSpaceFamilyComponentCount(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getColorSpaceFamilyComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getColorSpaceFamilyComponent() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest* request, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* response) { return this->getColorSpaceFamilyComponent(context, request, response); }));}
    void SetMessageAllocatorFor_getColorSpaceFamilyComponent(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getColorSpaceFamilyComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceFamilyComponent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getColorSpaceFamilyComponent(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getDisplayCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getDisplayCount() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getDisplayCountRequest, ::octaneapi::ApiOcioConfig_getDisplayCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest* request, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* response) { return this->getDisplayCount(context, request, response); }));}
    void SetMessageAllocatorFor_getDisplayCount(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_getDisplayCountRequest, ::octaneapi::ApiOcioConfig_getDisplayCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getDisplayCountRequest, ::octaneapi::ApiOcioConfig_getDisplayCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getDisplayCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDisplayCount(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getDisplayName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getDisplayName() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getDisplayNameRequest, ::octaneapi::ApiOcioConfig_getDisplayNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest* request, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* response) { return this->getDisplayName(context, request, response); }));}
    void SetMessageAllocatorFor_getDisplayName(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_getDisplayNameRequest, ::octaneapi::ApiOcioConfig_getDisplayNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getDisplayNameRequest, ::octaneapi::ApiOcioConfig_getDisplayNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getDisplayName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDisplayName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getDisplayViewCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getDisplayViewCount() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest* request, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* response) { return this->getDisplayViewCount(context, request, response); }));}
    void SetMessageAllocatorFor_getDisplayViewCount(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getDisplayViewCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayViewCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDisplayViewCount(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getDisplayViewName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getDisplayViewName() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest* request, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* response) { return this->getDisplayViewName(context, request, response); }));}
    void SetMessageAllocatorFor_getDisplayViewName(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getDisplayViewName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayViewName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDisplayViewName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getLookCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getLookCount() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getLookCountRequest, ::octaneapi::ApiOcioConfig_getLookCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_getLookCountRequest* request, ::octaneapi::ApiOcioConfig_getLookCountResponse* response) { return this->getLookCount(context, request, response); }));}
    void SetMessageAllocatorFor_getLookCount(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_getLookCountRequest, ::octaneapi::ApiOcioConfig_getLookCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getLookCountRequest, ::octaneapi::ApiOcioConfig_getLookCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getLookCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLookCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getLookCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getLookCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getLookCount(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getLookCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getLookCountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getLookName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getLookName() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getLookNameRequest, ::octaneapi::ApiOcioConfig_getLookNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiOcioConfig_getLookNameRequest* request, ::octaneapi::ApiOcioConfig_getLookNameResponse* response) { return this->getLookName(context, request, response); }));}
    void SetMessageAllocatorFor_getLookName(
        ::grpc::MessageAllocator< ::octaneapi::ApiOcioConfig_getLookNameRequest, ::octaneapi::ApiOcioConfig_getLookNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiOcioConfig_getLookNameRequest, ::octaneapi::ApiOcioConfig_getLookNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getLookName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLookName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getLookNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getLookNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getLookName(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getLookNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getLookNameResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_create<WithCallbackMethod_destroy<WithCallbackMethod_clone<WithCallbackMethod_getRoleCount<WithCallbackMethod_getRoleName<WithCallbackMethod_getRoleColorSpaceName<WithCallbackMethod_getColorSpaceCount<WithCallbackMethod_getColorSpaceName<WithCallbackMethod_getColorSpaceFamilyComponentCount<WithCallbackMethod_getColorSpaceFamilyComponent<WithCallbackMethod_getDisplayCount<WithCallbackMethod_getDisplayName<WithCallbackMethod_getDisplayViewCount<WithCallbackMethod_getDisplayViewName<WithCallbackMethod_getLookCount<WithCallbackMethod_getLookName<Service > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_createRequest* /*request*/, ::octaneapi::ApiOcioConfig_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_destroy() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_clone() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_cloneRequest* /*request*/, ::octaneapi::ApiOcioConfig_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getRoleCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getRoleCount() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getRoleCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getRoleName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getRoleName() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getRoleName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getRoleColorSpaceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getRoleColorSpaceName() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_getRoleColorSpaceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleColorSpaceName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getColorSpaceCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getColorSpaceCount() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getColorSpaceCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getColorSpaceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getColorSpaceName() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_getColorSpaceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getColorSpaceFamilyComponentCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getColorSpaceFamilyComponentCount() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getColorSpaceFamilyComponentCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceFamilyComponentCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getColorSpaceFamilyComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getColorSpaceFamilyComponent() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getColorSpaceFamilyComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceFamilyComponent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDisplayCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDisplayCount() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_getDisplayCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDisplayName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDisplayName() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_getDisplayName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDisplayViewCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDisplayViewCount() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_getDisplayViewCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayViewCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDisplayViewName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDisplayViewName() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_getDisplayViewName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayViewName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getLookCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getLookCount() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_getLookCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLookCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getLookCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getLookCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getLookName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getLookName() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_getLookName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLookName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getLookNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getLookNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_createRequest* /*request*/, ::octaneapi::ApiOcioConfig_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_destroy() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_clone() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_cloneRequest* /*request*/, ::octaneapi::ApiOcioConfig_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getRoleCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getRoleCount() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getRoleCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRoleCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getRoleName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getRoleName() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getRoleName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRoleName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getRoleColorSpaceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getRoleColorSpaceName() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_getRoleColorSpaceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleColorSpaceName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRoleColorSpaceName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getColorSpaceCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getColorSpaceCount() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getColorSpaceCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetColorSpaceCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getColorSpaceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getColorSpaceName() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_getColorSpaceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetColorSpaceName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getColorSpaceFamilyComponentCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getColorSpaceFamilyComponentCount() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getColorSpaceFamilyComponentCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceFamilyComponentCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetColorSpaceFamilyComponentCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getColorSpaceFamilyComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getColorSpaceFamilyComponent() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getColorSpaceFamilyComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceFamilyComponent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetColorSpaceFamilyComponent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDisplayCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDisplayCount() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_getDisplayCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDisplayCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDisplayName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDisplayName() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_getDisplayName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDisplayName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDisplayViewCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDisplayViewCount() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_getDisplayViewCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayViewCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDisplayViewCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDisplayViewName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDisplayViewName() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_getDisplayViewName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayViewName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDisplayViewName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getLookCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getLookCount() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_getLookCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLookCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getLookCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getLookCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLookCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getLookName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getLookName() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_getLookName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLookName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getLookNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getLookNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLookName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_create() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->create(context, request, response); }));
    }
    ~WithRawCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_createRequest* /*request*/, ::octaneapi::ApiOcioConfig_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->destroy(context, request, response); }));
    }
    ~WithRawCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_clone() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->clone(context, request, response); }));
    }
    ~WithRawCallbackMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_cloneRequest* /*request*/, ::octaneapi::ApiOcioConfig_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clone(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getRoleCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getRoleCount() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getRoleCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_getRoleCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getRoleCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getRoleName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getRoleName() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getRoleName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getRoleName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getRoleName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getRoleColorSpaceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getRoleColorSpaceName() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getRoleColorSpaceName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getRoleColorSpaceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRoleColorSpaceName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getRoleColorSpaceName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getColorSpaceCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getColorSpaceCount() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getColorSpaceCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_getColorSpaceCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getColorSpaceCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getColorSpaceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getColorSpaceName() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getColorSpaceName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getColorSpaceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getColorSpaceName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getColorSpaceFamilyComponentCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getColorSpaceFamilyComponentCount() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getColorSpaceFamilyComponentCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_getColorSpaceFamilyComponentCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceFamilyComponentCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getColorSpaceFamilyComponentCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getColorSpaceFamilyComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getColorSpaceFamilyComponent() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getColorSpaceFamilyComponent(context, request, response); }));
    }
    ~WithRawCallbackMethod_getColorSpaceFamilyComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getColorSpaceFamilyComponent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getColorSpaceFamilyComponent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getDisplayCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getDisplayCount() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDisplayCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_getDisplayCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDisplayCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getDisplayName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getDisplayName() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDisplayName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getDisplayName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDisplayName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getDisplayViewCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getDisplayViewCount() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDisplayViewCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_getDisplayViewCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayViewCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDisplayViewCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getDisplayViewName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getDisplayViewName() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDisplayViewName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getDisplayViewName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDisplayViewName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDisplayViewName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getLookCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getLookCount() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getLookCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_getLookCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLookCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getLookCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getLookCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getLookCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getLookName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getLookName() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getLookName(context, request, response); }));
    }
    ~WithRawCallbackMethod_getLookName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLookName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getLookNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getLookNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getLookName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_createRequest, ::octaneapi::ApiOcioConfig_createResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_createRequest, ::octaneapi::ApiOcioConfig_createResponse>* streamer) {
                       return this->Streamedcreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_createRequest* /*request*/, ::octaneapi::ApiOcioConfig_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_createRequest,::octaneapi::ApiOcioConfig_createResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_destroy() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_destroyRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_destroyRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streameddestroy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddestroy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_destroyRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_clone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_clone() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_cloneRequest, ::octaneapi::ApiOcioConfig_cloneResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_cloneRequest, ::octaneapi::ApiOcioConfig_cloneResponse>* streamer) {
                       return this->Streamedclone(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_clone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status clone(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_cloneRequest* /*request*/, ::octaneapi::ApiOcioConfig_cloneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_cloneRequest,::octaneapi::ApiOcioConfig_cloneResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getRoleCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getRoleCount() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_getRoleCountRequest, ::octaneapi::ApiOcioConfig_getRoleCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_getRoleCountRequest, ::octaneapi::ApiOcioConfig_getRoleCountResponse>* streamer) {
                       return this->StreamedgetRoleCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getRoleCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRoleCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetRoleCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_getRoleCountRequest,::octaneapi::ApiOcioConfig_getRoleCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getRoleName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getRoleName() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_getRoleNameRequest, ::octaneapi::ApiOcioConfig_getRoleNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_getRoleNameRequest, ::octaneapi::ApiOcioConfig_getRoleNameResponse>* streamer) {
                       return this->StreamedgetRoleName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getRoleName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRoleName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetRoleName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_getRoleNameRequest,::octaneapi::ApiOcioConfig_getRoleNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getRoleColorSpaceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getRoleColorSpaceName() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>* streamer) {
                       return this->StreamedgetRoleColorSpaceName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getRoleColorSpaceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRoleColorSpaceName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetRoleColorSpaceName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_getRoleColorSpaceNameRequest,::octaneapi::ApiOcioConfig_getRoleColorSpaceNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getColorSpaceCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getColorSpaceCount() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>* streamer) {
                       return this->StreamedgetColorSpaceCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getColorSpaceCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getColorSpaceCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetColorSpaceCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_getColorSpaceCountRequest,::octaneapi::ApiOcioConfig_getColorSpaceCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getColorSpaceName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getColorSpaceName() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>* streamer) {
                       return this->StreamedgetColorSpaceName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getColorSpaceName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getColorSpaceName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetColorSpaceName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_getColorSpaceNameRequest,::octaneapi::ApiOcioConfig_getColorSpaceNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getColorSpaceFamilyComponentCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getColorSpaceFamilyComponentCount() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>* streamer) {
                       return this->StreamedgetColorSpaceFamilyComponentCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getColorSpaceFamilyComponentCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getColorSpaceFamilyComponentCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetColorSpaceFamilyComponentCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountRequest,::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getColorSpaceFamilyComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getColorSpaceFamilyComponent() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>* streamer) {
                       return this->StreamedgetColorSpaceFamilyComponent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getColorSpaceFamilyComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getColorSpaceFamilyComponent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest* /*request*/, ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetColorSpaceFamilyComponent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentRequest,::octaneapi::ApiOcioConfig_getColorSpaceFamilyComponentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDisplayCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDisplayCount() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_getDisplayCountRequest, ::octaneapi::ApiOcioConfig_getDisplayCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_getDisplayCountRequest, ::octaneapi::ApiOcioConfig_getDisplayCountResponse>* streamer) {
                       return this->StreamedgetDisplayCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDisplayCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDisplayCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDisplayCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_getDisplayCountRequest,::octaneapi::ApiOcioConfig_getDisplayCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDisplayName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDisplayName() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_getDisplayNameRequest, ::octaneapi::ApiOcioConfig_getDisplayNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_getDisplayNameRequest, ::octaneapi::ApiOcioConfig_getDisplayNameResponse>* streamer) {
                       return this->StreamedgetDisplayName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDisplayName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDisplayName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDisplayName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_getDisplayNameRequest,::octaneapi::ApiOcioConfig_getDisplayNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDisplayViewCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDisplayViewCount() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>* streamer) {
                       return this->StreamedgetDisplayViewCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDisplayViewCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDisplayViewCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayViewCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDisplayViewCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_getDisplayViewCountRequest,::octaneapi::ApiOcioConfig_getDisplayViewCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDisplayViewName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDisplayViewName() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>* streamer) {
                       return this->StreamedgetDisplayViewName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDisplayViewName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDisplayViewName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getDisplayViewNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDisplayViewName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_getDisplayViewNameRequest,::octaneapi::ApiOcioConfig_getDisplayViewNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getLookCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getLookCount() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_getLookCountRequest, ::octaneapi::ApiOcioConfig_getLookCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_getLookCountRequest, ::octaneapi::ApiOcioConfig_getLookCountResponse>* streamer) {
                       return this->StreamedgetLookCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getLookCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getLookCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getLookCountRequest* /*request*/, ::octaneapi::ApiOcioConfig_getLookCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetLookCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_getLookCountRequest,::octaneapi::ApiOcioConfig_getLookCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getLookName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getLookName() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiOcioConfig_getLookNameRequest, ::octaneapi::ApiOcioConfig_getLookNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiOcioConfig_getLookNameRequest, ::octaneapi::ApiOcioConfig_getLookNameResponse>* streamer) {
                       return this->StreamedgetLookName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getLookName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getLookName(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiOcioConfig_getLookNameRequest* /*request*/, ::octaneapi::ApiOcioConfig_getLookNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetLookName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiOcioConfig_getLookNameRequest,::octaneapi::ApiOcioConfig_getLookNameResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_clone<WithStreamedUnaryMethod_getRoleCount<WithStreamedUnaryMethod_getRoleName<WithStreamedUnaryMethod_getRoleColorSpaceName<WithStreamedUnaryMethod_getColorSpaceCount<WithStreamedUnaryMethod_getColorSpaceName<WithStreamedUnaryMethod_getColorSpaceFamilyComponentCount<WithStreamedUnaryMethod_getColorSpaceFamilyComponent<WithStreamedUnaryMethod_getDisplayCount<WithStreamedUnaryMethod_getDisplayName<WithStreamedUnaryMethod_getDisplayViewCount<WithStreamedUnaryMethod_getDisplayViewName<WithStreamedUnaryMethod_getLookCount<WithStreamedUnaryMethod_getLookName<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_clone<WithStreamedUnaryMethod_getRoleCount<WithStreamedUnaryMethod_getRoleName<WithStreamedUnaryMethod_getRoleColorSpaceName<WithStreamedUnaryMethod_getColorSpaceCount<WithStreamedUnaryMethod_getColorSpaceName<WithStreamedUnaryMethod_getColorSpaceFamilyComponentCount<WithStreamedUnaryMethod_getColorSpaceFamilyComponent<WithStreamedUnaryMethod_getDisplayCount<WithStreamedUnaryMethod_getDisplayName<WithStreamedUnaryMethod_getDisplayViewCount<WithStreamedUnaryMethod_getDisplayViewName<WithStreamedUnaryMethod_getLookCount<WithStreamedUnaryMethod_getLookName<Service > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apiocioconfig_2eproto__INCLUDED
