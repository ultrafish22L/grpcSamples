// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apisceneoutliner.proto

#include "apisceneoutliner.pb.h"
#include "apisceneoutliner.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiSceneOutlinerService_method_names[] = {
  "/octaneapi.ApiSceneOutlinerService/create",
  "/octaneapi.ApiSceneOutlinerService/destroy",
};

std::unique_ptr< ApiSceneOutlinerService::Stub> ApiSceneOutlinerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiSceneOutlinerService::Stub> stub(new ApiSceneOutlinerService::Stub(channel, options));
  return stub;
}

ApiSceneOutlinerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create_(ApiSceneOutlinerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(ApiSceneOutlinerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiSceneOutlinerService::Stub::create(::grpc::ClientContext* context, const ::octaneapi::ApiSceneOutliner_createRequest& request, ::octaneapi::ApiSceneOutliner_createResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSceneOutliner_createRequest, ::octaneapi::ApiSceneOutliner_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_, context, request, response);
}

void ApiSceneOutlinerService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiSceneOutliner_createRequest* request, ::octaneapi::ApiSceneOutliner_createResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSceneOutliner_createRequest, ::octaneapi::ApiSceneOutliner_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void ApiSceneOutlinerService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiSceneOutliner_createRequest* request, ::octaneapi::ApiSceneOutliner_createResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneOutliner_createResponse>* ApiSceneOutlinerService::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneOutliner_createRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSceneOutliner_createResponse, ::octaneapi::ApiSceneOutliner_createRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneOutliner_createResponse>* ApiSceneOutlinerService::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneOutliner_createRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSceneOutlinerService::Stub::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneOutliner_destroyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSceneOutliner_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void ApiSceneOutlinerService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneOutliner_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSceneOutliner_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void ApiSceneOutlinerService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneOutliner_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSceneOutlinerService::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneOutliner_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiSceneOutliner_destroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSceneOutlinerService::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneOutliner_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiSceneOutlinerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSceneOutlinerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSceneOutlinerService::Service, ::octaneapi::ApiSceneOutliner_createRequest, ::octaneapi::ApiSceneOutliner_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSceneOutlinerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSceneOutliner_createRequest* req,
             ::octaneapi::ApiSceneOutliner_createResponse* resp) {
               return service->create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSceneOutlinerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSceneOutlinerService::Service, ::octaneapi::ApiSceneOutliner_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSceneOutlinerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSceneOutliner_destroyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
}

ApiSceneOutlinerService::Service::~Service() {
}

::grpc::Status ApiSceneOutlinerService::Service::create(::grpc::ServerContext* context, const ::octaneapi::ApiSceneOutliner_createRequest* request, ::octaneapi::ApiSceneOutliner_createResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSceneOutlinerService::Service::destroy(::grpc::ServerContext* context, const ::octaneapi::ApiSceneOutliner_destroyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

