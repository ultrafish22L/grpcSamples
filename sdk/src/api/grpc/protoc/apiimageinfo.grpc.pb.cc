// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apiimageinfo.proto

#include "apiimageinfo.pb.h"
#include "apiimageinfo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ImageInfoService_method_names[] = {
  "/octaneapi.ImageInfoService/initFromFile",
  "/octaneapi.ImageInfoService/initFromBuffer",
  "/octaneapi.ImageInfoService/layerInfo",
  "/octaneapi.ImageInfoService/layerCount",
  "/octaneapi.ImageInfoService/size",
  "/octaneapi.ImageInfoService/isHdr",
  "/octaneapi.ImageInfoService/isCompressed",
};

std::unique_ptr< ImageInfoService::Stub> ImageInfoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ImageInfoService::Stub> stub(new ImageInfoService::Stub(channel, options));
  return stub;
}

ImageInfoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_initFromFile_(ImageInfoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_initFromBuffer_(ImageInfoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_layerInfo_(ImageInfoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_layerCount_(ImageInfoService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_size_(ImageInfoService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isHdr_(ImageInfoService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isCompressed_(ImageInfoService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ImageInfoService::Stub::initFromFile(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_initFromFileRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ImageInfo_initFromFileRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_initFromFile_, context, request, response);
}

void ImageInfoService::Stub::async::initFromFile(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_initFromFileRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ImageInfo_initFromFileRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_initFromFile_, context, request, response, std::move(f));
}

void ImageInfoService::Stub::async::initFromFile(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_initFromFileRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_initFromFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ImageInfoService::Stub::PrepareAsyncinitFromFileRaw(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_initFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ImageInfo_initFromFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_initFromFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ImageInfoService::Stub::AsyncinitFromFileRaw(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_initFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitFromFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ImageInfoService::Stub::initFromBuffer(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_initFromBufferRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ImageInfo_initFromBufferRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_initFromBuffer_, context, request, response);
}

void ImageInfoService::Stub::async::initFromBuffer(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_initFromBufferRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ImageInfo_initFromBufferRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_initFromBuffer_, context, request, response, std::move(f));
}

void ImageInfoService::Stub::async::initFromBuffer(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_initFromBufferRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_initFromBuffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ImageInfoService::Stub::PrepareAsyncinitFromBufferRaw(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_initFromBufferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ImageInfo_initFromBufferRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_initFromBuffer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ImageInfoService::Stub::AsyncinitFromBufferRaw(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_initFromBufferRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitFromBufferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ImageInfoService::Stub::layerInfo(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_layerInfoRequest& request, ::octaneapi::ImageInfo_layerInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ImageInfo_layerInfoRequest, ::octaneapi::ImageInfo_layerInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_layerInfo_, context, request, response);
}

void ImageInfoService::Stub::async::layerInfo(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_layerInfoRequest* request, ::octaneapi::ImageInfo_layerInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ImageInfo_layerInfoRequest, ::octaneapi::ImageInfo_layerInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_layerInfo_, context, request, response, std::move(f));
}

void ImageInfoService::Stub::async::layerInfo(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_layerInfoRequest* request, ::octaneapi::ImageInfo_layerInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_layerInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ImageInfo_layerInfoResponse>* ImageInfoService::Stub::PrepareAsynclayerInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_layerInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ImageInfo_layerInfoResponse, ::octaneapi::ImageInfo_layerInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_layerInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ImageInfo_layerInfoResponse>* ImageInfoService::Stub::AsynclayerInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_layerInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclayerInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ImageInfoService::Stub::layerCount(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_layerCountRequest& request, ::octaneapi::ImageInfo_layerCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ImageInfo_layerCountRequest, ::octaneapi::ImageInfo_layerCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_layerCount_, context, request, response);
}

void ImageInfoService::Stub::async::layerCount(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_layerCountRequest* request, ::octaneapi::ImageInfo_layerCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ImageInfo_layerCountRequest, ::octaneapi::ImageInfo_layerCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_layerCount_, context, request, response, std::move(f));
}

void ImageInfoService::Stub::async::layerCount(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_layerCountRequest* request, ::octaneapi::ImageInfo_layerCountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_layerCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ImageInfo_layerCountResponse>* ImageInfoService::Stub::PrepareAsynclayerCountRaw(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_layerCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ImageInfo_layerCountResponse, ::octaneapi::ImageInfo_layerCountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_layerCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ImageInfo_layerCountResponse>* ImageInfoService::Stub::AsynclayerCountRaw(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_layerCountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclayerCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ImageInfoService::Stub::size(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_sizeRequest& request, ::octaneapi::ImageInfo_sizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ImageInfo_sizeRequest, ::octaneapi::ImageInfo_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_size_, context, request, response);
}

void ImageInfoService::Stub::async::size(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_sizeRequest* request, ::octaneapi::ImageInfo_sizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ImageInfo_sizeRequest, ::octaneapi::ImageInfo_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_size_, context, request, response, std::move(f));
}

void ImageInfoService::Stub::async::size(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_sizeRequest* request, ::octaneapi::ImageInfo_sizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_size_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ImageInfo_sizeResponse>* ImageInfoService::Stub::PrepareAsyncsizeRaw(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_sizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ImageInfo_sizeResponse, ::octaneapi::ImageInfo_sizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_size_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ImageInfo_sizeResponse>* ImageInfoService::Stub::AsyncsizeRaw(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_sizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ImageInfoService::Stub::isHdr(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_isHdrRequest& request, ::octaneapi::ImageInfo_isHdrResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ImageInfo_isHdrRequest, ::octaneapi::ImageInfo_isHdrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isHdr_, context, request, response);
}

void ImageInfoService::Stub::async::isHdr(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_isHdrRequest* request, ::octaneapi::ImageInfo_isHdrResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ImageInfo_isHdrRequest, ::octaneapi::ImageInfo_isHdrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isHdr_, context, request, response, std::move(f));
}

void ImageInfoService::Stub::async::isHdr(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_isHdrRequest* request, ::octaneapi::ImageInfo_isHdrResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isHdr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ImageInfo_isHdrResponse>* ImageInfoService::Stub::PrepareAsyncisHdrRaw(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_isHdrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ImageInfo_isHdrResponse, ::octaneapi::ImageInfo_isHdrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isHdr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ImageInfo_isHdrResponse>* ImageInfoService::Stub::AsyncisHdrRaw(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_isHdrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisHdrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ImageInfoService::Stub::isCompressed(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_isCompressedRequest& request, ::octaneapi::ImageInfo_isCompressedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ImageInfo_isCompressedRequest, ::octaneapi::ImageInfo_isCompressedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isCompressed_, context, request, response);
}

void ImageInfoService::Stub::async::isCompressed(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_isCompressedRequest* request, ::octaneapi::ImageInfo_isCompressedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ImageInfo_isCompressedRequest, ::octaneapi::ImageInfo_isCompressedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isCompressed_, context, request, response, std::move(f));
}

void ImageInfoService::Stub::async::isCompressed(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_isCompressedRequest* request, ::octaneapi::ImageInfo_isCompressedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isCompressed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ImageInfo_isCompressedResponse>* ImageInfoService::Stub::PrepareAsyncisCompressedRaw(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_isCompressedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ImageInfo_isCompressedResponse, ::octaneapi::ImageInfo_isCompressedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isCompressed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ImageInfo_isCompressedResponse>* ImageInfoService::Stub::AsyncisCompressedRaw(::grpc::ClientContext* context, const ::octaneapi::ImageInfo_isCompressedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisCompressedRaw(context, request, cq);
  result->StartCall();
  return result;
}

ImageInfoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageInfoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageInfoService::Service, ::octaneapi::ImageInfo_initFromFileRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ImageInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ImageInfo_initFromFileRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->initFromFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageInfoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageInfoService::Service, ::octaneapi::ImageInfo_initFromBufferRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ImageInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ImageInfo_initFromBufferRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->initFromBuffer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageInfoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageInfoService::Service, ::octaneapi::ImageInfo_layerInfoRequest, ::octaneapi::ImageInfo_layerInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ImageInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ImageInfo_layerInfoRequest* req,
             ::octaneapi::ImageInfo_layerInfoResponse* resp) {
               return service->layerInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageInfoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageInfoService::Service, ::octaneapi::ImageInfo_layerCountRequest, ::octaneapi::ImageInfo_layerCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ImageInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ImageInfo_layerCountRequest* req,
             ::octaneapi::ImageInfo_layerCountResponse* resp) {
               return service->layerCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageInfoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageInfoService::Service, ::octaneapi::ImageInfo_sizeRequest, ::octaneapi::ImageInfo_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ImageInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ImageInfo_sizeRequest* req,
             ::octaneapi::ImageInfo_sizeResponse* resp) {
               return service->size(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageInfoService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageInfoService::Service, ::octaneapi::ImageInfo_isHdrRequest, ::octaneapi::ImageInfo_isHdrResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ImageInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ImageInfo_isHdrRequest* req,
             ::octaneapi::ImageInfo_isHdrResponse* resp) {
               return service->isHdr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageInfoService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageInfoService::Service, ::octaneapi::ImageInfo_isCompressedRequest, ::octaneapi::ImageInfo_isCompressedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ImageInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ImageInfo_isCompressedRequest* req,
             ::octaneapi::ImageInfo_isCompressedResponse* resp) {
               return service->isCompressed(ctx, req, resp);
             }, this)));
}

ImageInfoService::Service::~Service() {
}

::grpc::Status ImageInfoService::Service::initFromFile(::grpc::ServerContext* context, const ::octaneapi::ImageInfo_initFromFileRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageInfoService::Service::initFromBuffer(::grpc::ServerContext* context, const ::octaneapi::ImageInfo_initFromBufferRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageInfoService::Service::layerInfo(::grpc::ServerContext* context, const ::octaneapi::ImageInfo_layerInfoRequest* request, ::octaneapi::ImageInfo_layerInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageInfoService::Service::layerCount(::grpc::ServerContext* context, const ::octaneapi::ImageInfo_layerCountRequest* request, ::octaneapi::ImageInfo_layerCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageInfoService::Service::size(::grpc::ServerContext* context, const ::octaneapi::ImageInfo_sizeRequest* request, ::octaneapi::ImageInfo_sizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageInfoService::Service::isHdr(::grpc::ServerContext* context, const ::octaneapi::ImageInfo_isHdrRequest* request, ::octaneapi::ImageInfo_isHdrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageInfoService::Service::isCompressed(::grpc::ServerContext* context, const ::octaneapi::ImageInfo_isCompressedRequest* request, ::octaneapi::ImageInfo_isCompressedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* LayerInfoService_method_names[] = {
  "/octaneapi.LayerInfoService/hasTransparency",
  "/octaneapi.LayerInfoService/isGrayscale",
  "/octaneapi.LayerInfoService/name",
  "/octaneapi.LayerInfoService/type",
  "/octaneapi.LayerInfoService/prefCompressType",
};

std::unique_ptr< LayerInfoService::Stub> LayerInfoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LayerInfoService::Stub> stub(new LayerInfoService::Stub(channel, options));
  return stub;
}

LayerInfoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_hasTransparency_(LayerInfoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isGrayscale_(LayerInfoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_name_(LayerInfoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_type_(LayerInfoService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_prefCompressType_(LayerInfoService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LayerInfoService::Stub::hasTransparency(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_hasTransparencyRequest& request, ::octaneapi::LayerInfo_hasTransparencyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::LayerInfo_hasTransparencyRequest, ::octaneapi::LayerInfo_hasTransparencyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hasTransparency_, context, request, response);
}

void LayerInfoService::Stub::async::hasTransparency(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_hasTransparencyRequest* request, ::octaneapi::LayerInfo_hasTransparencyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::LayerInfo_hasTransparencyRequest, ::octaneapi::LayerInfo_hasTransparencyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasTransparency_, context, request, response, std::move(f));
}

void LayerInfoService::Stub::async::hasTransparency(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_hasTransparencyRequest* request, ::octaneapi::LayerInfo_hasTransparencyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasTransparency_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::LayerInfo_hasTransparencyResponse>* LayerInfoService::Stub::PrepareAsynchasTransparencyRaw(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_hasTransparencyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::LayerInfo_hasTransparencyResponse, ::octaneapi::LayerInfo_hasTransparencyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hasTransparency_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::LayerInfo_hasTransparencyResponse>* LayerInfoService::Stub::AsynchasTransparencyRaw(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_hasTransparencyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchasTransparencyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LayerInfoService::Stub::isGrayscale(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_isGrayscaleRequest& request, ::octaneapi::LayerInfo_isGrayscaleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::LayerInfo_isGrayscaleRequest, ::octaneapi::LayerInfo_isGrayscaleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isGrayscale_, context, request, response);
}

void LayerInfoService::Stub::async::isGrayscale(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_isGrayscaleRequest* request, ::octaneapi::LayerInfo_isGrayscaleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::LayerInfo_isGrayscaleRequest, ::octaneapi::LayerInfo_isGrayscaleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isGrayscale_, context, request, response, std::move(f));
}

void LayerInfoService::Stub::async::isGrayscale(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_isGrayscaleRequest* request, ::octaneapi::LayerInfo_isGrayscaleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isGrayscale_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::LayerInfo_isGrayscaleResponse>* LayerInfoService::Stub::PrepareAsyncisGrayscaleRaw(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_isGrayscaleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::LayerInfo_isGrayscaleResponse, ::octaneapi::LayerInfo_isGrayscaleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isGrayscale_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::LayerInfo_isGrayscaleResponse>* LayerInfoService::Stub::AsyncisGrayscaleRaw(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_isGrayscaleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisGrayscaleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LayerInfoService::Stub::name(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_nameRequest& request, ::octaneapi::LayerInfo_nameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::LayerInfo_nameRequest, ::octaneapi::LayerInfo_nameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_name_, context, request, response);
}

void LayerInfoService::Stub::async::name(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_nameRequest* request, ::octaneapi::LayerInfo_nameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::LayerInfo_nameRequest, ::octaneapi::LayerInfo_nameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_name_, context, request, response, std::move(f));
}

void LayerInfoService::Stub::async::name(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_nameRequest* request, ::octaneapi::LayerInfo_nameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_name_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::LayerInfo_nameResponse>* LayerInfoService::Stub::PrepareAsyncnameRaw(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_nameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::LayerInfo_nameResponse, ::octaneapi::LayerInfo_nameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_name_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::LayerInfo_nameResponse>* LayerInfoService::Stub::AsyncnameRaw(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_nameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LayerInfoService::Stub::type(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_typeRequest& request, ::octaneapi::LayerInfo_typeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::LayerInfo_typeRequest, ::octaneapi::LayerInfo_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_type_, context, request, response);
}

void LayerInfoService::Stub::async::type(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_typeRequest* request, ::octaneapi::LayerInfo_typeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::LayerInfo_typeRequest, ::octaneapi::LayerInfo_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_type_, context, request, response, std::move(f));
}

void LayerInfoService::Stub::async::type(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_typeRequest* request, ::octaneapi::LayerInfo_typeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_type_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::LayerInfo_typeResponse>* LayerInfoService::Stub::PrepareAsynctypeRaw(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_typeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::LayerInfo_typeResponse, ::octaneapi::LayerInfo_typeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_type_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::LayerInfo_typeResponse>* LayerInfoService::Stub::AsynctypeRaw(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_typeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LayerInfoService::Stub::prefCompressType(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_prefCompressTypeRequest& request, ::octaneapi::LayerInfo_prefCompressTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::LayerInfo_prefCompressTypeRequest, ::octaneapi::LayerInfo_prefCompressTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_prefCompressType_, context, request, response);
}

void LayerInfoService::Stub::async::prefCompressType(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_prefCompressTypeRequest* request, ::octaneapi::LayerInfo_prefCompressTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::LayerInfo_prefCompressTypeRequest, ::octaneapi::LayerInfo_prefCompressTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_prefCompressType_, context, request, response, std::move(f));
}

void LayerInfoService::Stub::async::prefCompressType(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_prefCompressTypeRequest* request, ::octaneapi::LayerInfo_prefCompressTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_prefCompressType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::LayerInfo_prefCompressTypeResponse>* LayerInfoService::Stub::PrepareAsyncprefCompressTypeRaw(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_prefCompressTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::LayerInfo_prefCompressTypeResponse, ::octaneapi::LayerInfo_prefCompressTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_prefCompressType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::LayerInfo_prefCompressTypeResponse>* LayerInfoService::Stub::AsyncprefCompressTypeRaw(::grpc::ClientContext* context, const ::octaneapi::LayerInfo_prefCompressTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncprefCompressTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

LayerInfoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LayerInfoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LayerInfoService::Service, ::octaneapi::LayerInfo_hasTransparencyRequest, ::octaneapi::LayerInfo_hasTransparencyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LayerInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::LayerInfo_hasTransparencyRequest* req,
             ::octaneapi::LayerInfo_hasTransparencyResponse* resp) {
               return service->hasTransparency(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LayerInfoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LayerInfoService::Service, ::octaneapi::LayerInfo_isGrayscaleRequest, ::octaneapi::LayerInfo_isGrayscaleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LayerInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::LayerInfo_isGrayscaleRequest* req,
             ::octaneapi::LayerInfo_isGrayscaleResponse* resp) {
               return service->isGrayscale(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LayerInfoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LayerInfoService::Service, ::octaneapi::LayerInfo_nameRequest, ::octaneapi::LayerInfo_nameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LayerInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::LayerInfo_nameRequest* req,
             ::octaneapi::LayerInfo_nameResponse* resp) {
               return service->name(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LayerInfoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LayerInfoService::Service, ::octaneapi::LayerInfo_typeRequest, ::octaneapi::LayerInfo_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LayerInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::LayerInfo_typeRequest* req,
             ::octaneapi::LayerInfo_typeResponse* resp) {
               return service->type(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LayerInfoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LayerInfoService::Service, ::octaneapi::LayerInfo_prefCompressTypeRequest, ::octaneapi::LayerInfo_prefCompressTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LayerInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::LayerInfo_prefCompressTypeRequest* req,
             ::octaneapi::LayerInfo_prefCompressTypeResponse* resp) {
               return service->prefCompressType(ctx, req, resp);
             }, this)));
}

LayerInfoService::Service::~Service() {
}

::grpc::Status LayerInfoService::Service::hasTransparency(::grpc::ServerContext* context, const ::octaneapi::LayerInfo_hasTransparencyRequest* request, ::octaneapi::LayerInfo_hasTransparencyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LayerInfoService::Service::isGrayscale(::grpc::ServerContext* context, const ::octaneapi::LayerInfo_isGrayscaleRequest* request, ::octaneapi::LayerInfo_isGrayscaleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LayerInfoService::Service::name(::grpc::ServerContext* context, const ::octaneapi::LayerInfo_nameRequest* request, ::octaneapi::LayerInfo_nameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LayerInfoService::Service::type(::grpc::ServerContext* context, const ::octaneapi::LayerInfo_typeRequest* request, ::octaneapi::LayerInfo_typeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LayerInfoService::Service::prefCompressType(::grpc::ServerContext* context, const ::octaneapi::LayerInfo_prefCompressTypeRequest* request, ::octaneapi::LayerInfo_prefCompressTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

