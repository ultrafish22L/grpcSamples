// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apitilegrid.proto

#include "apitilegrid.pb.h"
#include "apitilegrid.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiTileGridLoaderService_method_names[] = {
  "/octaneapi.ApiTileGridLoaderService/create",
  "/octaneapi.ApiTileGridLoaderService/destroy",
  "/octaneapi.ApiTileGridLoaderService/loadFromNodeItem",
  "/octaneapi.ApiTileGridLoaderService/saveToNodeItem",
  "/octaneapi.ApiTileGridLoaderService/applyStoredSettings",
  "/octaneapi.ApiTileGridLoaderService/inferSettingsFromFilename",
  "/octaneapi.ApiTileGridLoaderService/scanTiles",
  "/octaneapi.ApiTileGridLoaderService/automaticSizeGrid",
  "/octaneapi.ApiTileGridLoaderService/getSettings",
  "/octaneapi.ApiTileGridLoaderService/updateSettings",
  "/octaneapi.ApiTileGridLoaderService/getFiles",
  "/octaneapi.ApiTileGridLoaderService/setFiles",
  "/octaneapi.ApiTileGridLoaderService/hasFileInCell",
  "/octaneapi.ApiTileGridLoaderService/fileNameForCell",
  "/octaneapi.ApiTileGridLoaderService/count",
  "/octaneapi.ApiTileGridLoaderService/updatePattern",
  "/octaneapi.ApiTileGridLoaderService/hasEmptyPattern",
  "/octaneapi.ApiTileGridLoaderService/patternString",
  "/octaneapi.ApiTileGridLoaderService/hasPlaceholders",
  "/octaneapi.ApiTileGridLoaderService/hasIndex",
  "/octaneapi.ApiTileGridLoaderService/hasUDIM",
  "/octaneapi.ApiTileGridLoaderService/hasUv",
  "/octaneapi.ApiTileGridLoaderService/substitute",
};

std::unique_ptr< ApiTileGridLoaderService::Stub> ApiTileGridLoaderService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiTileGridLoaderService::Stub> stub(new ApiTileGridLoaderService::Stub(channel, options));
  return stub;
}

ApiTileGridLoaderService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create_(ApiTileGridLoaderService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(ApiTileGridLoaderService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadFromNodeItem_(ApiTileGridLoaderService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveToNodeItem_(ApiTileGridLoaderService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_applyStoredSettings_(ApiTileGridLoaderService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_inferSettingsFromFilename_(ApiTileGridLoaderService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_scanTiles_(ApiTileGridLoaderService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_automaticSizeGrid_(ApiTileGridLoaderService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getSettings_(ApiTileGridLoaderService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_updateSettings_(ApiTileGridLoaderService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getFiles_(ApiTileGridLoaderService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setFiles_(ApiTileGridLoaderService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hasFileInCell_(ApiTileGridLoaderService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_fileNameForCell_(ApiTileGridLoaderService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_count_(ApiTileGridLoaderService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_updatePattern_(ApiTileGridLoaderService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hasEmptyPattern_(ApiTileGridLoaderService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_patternString_(ApiTileGridLoaderService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hasPlaceholders_(ApiTileGridLoaderService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hasIndex_(ApiTileGridLoaderService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hasUDIM_(ApiTileGridLoaderService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hasUv_(ApiTileGridLoaderService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_substitute_(ApiTileGridLoaderService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiTileGridLoaderService::Stub::create(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest& request, ::octaneapi::ApiTileGridLoader_createResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_createRequest, ::octaneapi::ApiTileGridLoader_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest* request, ::octaneapi::ApiTileGridLoader_createResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_createRequest, ::octaneapi::ApiTileGridLoader_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest* request, ::octaneapi::ApiTileGridLoader_createResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_createResponse>* ApiTileGridLoaderService::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_createResponse, ::octaneapi::ApiTileGridLoader_createRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_createResponse>* ApiTileGridLoaderService::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_createRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTileGridLoader_destroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::loadFromNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadFromNodeItem_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::loadFromNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromNodeItem_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::loadFromNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromNodeItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::PrepareAsyncloadFromNodeItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadFromNodeItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::AsyncloadFromNodeItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadFromNodeItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::saveToNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest& request, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveToNodeItem_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::saveToNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* request, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToNodeItem_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::saveToNodeItem(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* request, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToNodeItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>* ApiTileGridLoaderService::Stub::PrepareAsyncsaveToNodeItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse, ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveToNodeItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse>* ApiTileGridLoaderService::Stub::AsyncsaveToNodeItemRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveToNodeItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::applyStoredSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_applyStoredSettings_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::applyStoredSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_applyStoredSettings_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::applyStoredSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_applyStoredSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::PrepareAsyncapplyStoredSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_applyStoredSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::AsyncapplyStoredSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncapplyStoredSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::inferSettingsFromFilename(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest& request, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_inferSettingsFromFilename_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::inferSettingsFromFilename(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* request, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_inferSettingsFromFilename_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::inferSettingsFromFilename(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* request, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_inferSettingsFromFilename_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>* ApiTileGridLoaderService::Stub::PrepareAsyncinferSettingsFromFilenameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_inferSettingsFromFilename_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse>* ApiTileGridLoaderService::Stub::AsyncinferSettingsFromFilenameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinferSettingsFromFilenameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::scanTiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_scanTilesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_scanTiles_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::scanTiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_scanTilesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_scanTiles_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::scanTiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_scanTiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::PrepareAsyncscanTilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTileGridLoader_scanTilesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_scanTiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::AsyncscanTilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncscanTilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::automaticSizeGrid(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_automaticSizeGrid_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::automaticSizeGrid(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_automaticSizeGrid_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::automaticSizeGrid(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_automaticSizeGrid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::PrepareAsyncautomaticSizeGridRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_automaticSizeGrid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::AsyncautomaticSizeGridRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncautomaticSizeGridRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::getSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest& request, ::octaneapi::ApiTileGridLoader_getSettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_getSettingsRequest, ::octaneapi::ApiTileGridLoader_getSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getSettings_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::getSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* request, ::octaneapi::ApiTileGridLoader_getSettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_getSettingsRequest, ::octaneapi::ApiTileGridLoader_getSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSettings_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::getSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* request, ::octaneapi::ApiTileGridLoader_getSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getSettingsResponse>* ApiTileGridLoaderService::Stub::PrepareAsyncgetSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_getSettingsResponse, ::octaneapi::ApiTileGridLoader_getSettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getSettingsResponse>* ApiTileGridLoaderService::Stub::AsyncgetSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::updateSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_updateSettingsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_updateSettings_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::updateSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_updateSettingsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updateSettings_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::updateSettings(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updateSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::PrepareAsyncupdateSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTileGridLoader_updateSettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_updateSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::AsyncupdateSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncupdateSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::getFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest& request, ::octaneapi::ApiTileGridLoader_getFilesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_getFilesRequest, ::octaneapi::ApiTileGridLoader_getFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getFiles_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::getFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest* request, ::octaneapi::ApiTileGridLoader_getFilesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_getFilesRequest, ::octaneapi::ApiTileGridLoader_getFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getFiles_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::getFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest* request, ::octaneapi::ApiTileGridLoader_getFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getFilesResponse>* ApiTileGridLoaderService::Stub::PrepareAsyncgetFilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_getFilesResponse, ::octaneapi::ApiTileGridLoader_getFilesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_getFilesResponse>* ApiTileGridLoaderService::Stub::AsyncgetFilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::setFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_setFilesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setFiles_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::setFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_setFilesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setFiles_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::setFiles(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::PrepareAsyncsetFilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTileGridLoader_setFilesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::AsyncsetFilesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::hasFileInCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest& request, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_hasFileInCellRequest, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hasFileInCell_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::hasFileInCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* request, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_hasFileInCellRequest, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasFileInCell_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::hasFileInCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* request, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasFileInCell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>* ApiTileGridLoaderService::Stub::PrepareAsynchasFileInCellRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse, ::octaneapi::ApiTileGridLoader_hasFileInCellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hasFileInCell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasFileInCellResponse>* ApiTileGridLoaderService::Stub::AsynchasFileInCellRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchasFileInCellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::fileNameForCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest& request, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_fileNameForCellRequest, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_fileNameForCell_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::fileNameForCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* request, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_fileNameForCellRequest, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_fileNameForCell_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::fileNameForCell(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* request, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_fileNameForCell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>* ApiTileGridLoaderService::Stub::PrepareAsyncfileNameForCellRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse, ::octaneapi::ApiTileGridLoader_fileNameForCellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_fileNameForCell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_fileNameForCellResponse>* ApiTileGridLoaderService::Stub::AsyncfileNameForCellRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfileNameForCellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::count(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest& request, ::octaneapi::ApiTileGridLoader_countResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_countRequest, ::octaneapi::ApiTileGridLoader_countResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_count_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::count(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest* request, ::octaneapi::ApiTileGridLoader_countResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_countRequest, ::octaneapi::ApiTileGridLoader_countResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_count_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::count(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest* request, ::octaneapi::ApiTileGridLoader_countResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_count_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_countResponse>* ApiTileGridLoaderService::Stub::PrepareAsynccountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_countResponse, ::octaneapi::ApiTileGridLoader_countRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_count_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_countResponse>* ApiTileGridLoaderService::Stub::AsynccountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_countRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::updatePattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_updatePatternRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_updatePattern_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::updatePattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_updatePatternRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updatePattern_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::updatePattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updatePattern_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::PrepareAsyncupdatePatternRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiTileGridLoader_updatePatternRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_updatePattern_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiTileGridLoaderService::Stub::AsyncupdatePatternRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncupdatePatternRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::hasEmptyPattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest& request, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hasEmptyPattern_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::hasEmptyPattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* request, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasEmptyPattern_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::hasEmptyPattern(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* request, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasEmptyPattern_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>* ApiTileGridLoaderService::Stub::PrepareAsynchasEmptyPatternRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse, ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hasEmptyPattern_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse>* ApiTileGridLoaderService::Stub::AsynchasEmptyPatternRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchasEmptyPatternRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::patternString(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest& request, ::octaneapi::ApiTileGridLoader_patternStringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_patternStringRequest, ::octaneapi::ApiTileGridLoader_patternStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_patternString_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::patternString(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest* request, ::octaneapi::ApiTileGridLoader_patternStringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_patternStringRequest, ::octaneapi::ApiTileGridLoader_patternStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_patternString_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::patternString(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest* request, ::octaneapi::ApiTileGridLoader_patternStringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_patternString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_patternStringResponse>* ApiTileGridLoaderService::Stub::PrepareAsyncpatternStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_patternStringResponse, ::octaneapi::ApiTileGridLoader_patternStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_patternString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_patternStringResponse>* ApiTileGridLoaderService::Stub::AsyncpatternStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpatternStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::hasPlaceholders(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest& request, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hasPlaceholders_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::hasPlaceholders(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* request, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasPlaceholders_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::hasPlaceholders(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* request, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasPlaceholders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>* ApiTileGridLoaderService::Stub::PrepareAsynchasPlaceholdersRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse, ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hasPlaceholders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse>* ApiTileGridLoaderService::Stub::AsynchasPlaceholdersRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchasPlaceholdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::hasIndex(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest& request, ::octaneapi::ApiTileGridLoader_hasIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_hasIndexRequest, ::octaneapi::ApiTileGridLoader_hasIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hasIndex_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::hasIndex(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* request, ::octaneapi::ApiTileGridLoader_hasIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_hasIndexRequest, ::octaneapi::ApiTileGridLoader_hasIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasIndex_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::hasIndex(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* request, ::octaneapi::ApiTileGridLoader_hasIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasIndexResponse>* ApiTileGridLoaderService::Stub::PrepareAsynchasIndexRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_hasIndexResponse, ::octaneapi::ApiTileGridLoader_hasIndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hasIndex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasIndexResponse>* ApiTileGridLoaderService::Stub::AsynchasIndexRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchasIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::hasUDIM(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest& request, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_hasUDIMRequest, ::octaneapi::ApiTileGridLoader_hasUDIMResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hasUDIM_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::hasUDIM(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* request, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_hasUDIMRequest, ::octaneapi::ApiTileGridLoader_hasUDIMResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasUDIM_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::hasUDIM(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* request, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasUDIM_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>* ApiTileGridLoaderService::Stub::PrepareAsynchasUDIMRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_hasUDIMResponse, ::octaneapi::ApiTileGridLoader_hasUDIMRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hasUDIM_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUDIMResponse>* ApiTileGridLoaderService::Stub::AsynchasUDIMRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchasUDIMRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::hasUv(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest& request, ::octaneapi::ApiTileGridLoader_hasUvResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_hasUvRequest, ::octaneapi::ApiTileGridLoader_hasUvResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hasUv_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::hasUv(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest* request, ::octaneapi::ApiTileGridLoader_hasUvResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_hasUvRequest, ::octaneapi::ApiTileGridLoader_hasUvResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasUv_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::hasUv(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest* request, ::octaneapi::ApiTileGridLoader_hasUvResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasUv_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUvResponse>* ApiTileGridLoaderService::Stub::PrepareAsynchasUvRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_hasUvResponse, ::octaneapi::ApiTileGridLoader_hasUvRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hasUv_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_hasUvResponse>* ApiTileGridLoaderService::Stub::AsynchasUvRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchasUvRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTileGridLoaderService::Stub::substitute(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest& request, ::octaneapi::ApiTileGridLoader_substituteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTileGridLoader_substituteRequest, ::octaneapi::ApiTileGridLoader_substituteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_substitute_, context, request, response);
}

void ApiTileGridLoaderService::Stub::async::substitute(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest* request, ::octaneapi::ApiTileGridLoader_substituteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTileGridLoader_substituteRequest, ::octaneapi::ApiTileGridLoader_substituteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_substitute_, context, request, response, std::move(f));
}

void ApiTileGridLoaderService::Stub::async::substitute(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest* request, ::octaneapi::ApiTileGridLoader_substituteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_substitute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_substituteResponse>* ApiTileGridLoaderService::Stub::PrepareAsyncsubstituteRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTileGridLoader_substituteResponse, ::octaneapi::ApiTileGridLoader_substituteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_substitute_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTileGridLoader_substituteResponse>* ApiTileGridLoaderService::Stub::AsyncsubstituteRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsubstituteRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiTileGridLoaderService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_createRequest, ::octaneapi::ApiTileGridLoader_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_createRequest* req,
             ::octaneapi::ApiTileGridLoader_createResponse* resp) {
               return service->create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_destroyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->loadFromNodeItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* req,
             ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* resp) {
               return service->saveToNodeItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->applyStoredSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* req,
             ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* resp) {
               return service->inferSettingsFromFilename(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_scanTilesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_scanTilesRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->scanTiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->automaticSizeGrid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_getSettingsRequest, ::octaneapi::ApiTileGridLoader_getSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_getSettingsRequest* req,
             ::octaneapi::ApiTileGridLoader_getSettingsResponse* resp) {
               return service->getSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_updateSettingsRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->updateSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_getFilesRequest, ::octaneapi::ApiTileGridLoader_getFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_getFilesRequest* req,
             ::octaneapi::ApiTileGridLoader_getFilesResponse* resp) {
               return service->getFiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_setFilesRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_setFilesRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setFiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_hasFileInCellRequest, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* req,
             ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* resp) {
               return service->hasFileInCell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_fileNameForCellRequest, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* req,
             ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* resp) {
               return service->fileNameForCell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_countRequest, ::octaneapi::ApiTileGridLoader_countResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_countRequest* req,
             ::octaneapi::ApiTileGridLoader_countResponse* resp) {
               return service->count(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_updatePatternRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_updatePatternRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->updatePattern(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* req,
             ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* resp) {
               return service->hasEmptyPattern(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_patternStringRequest, ::octaneapi::ApiTileGridLoader_patternStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_patternStringRequest* req,
             ::octaneapi::ApiTileGridLoader_patternStringResponse* resp) {
               return service->patternString(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* req,
             ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* resp) {
               return service->hasPlaceholders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_hasIndexRequest, ::octaneapi::ApiTileGridLoader_hasIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_hasIndexRequest* req,
             ::octaneapi::ApiTileGridLoader_hasIndexResponse* resp) {
               return service->hasIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_hasUDIMRequest, ::octaneapi::ApiTileGridLoader_hasUDIMResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* req,
             ::octaneapi::ApiTileGridLoader_hasUDIMResponse* resp) {
               return service->hasUDIM(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_hasUvRequest, ::octaneapi::ApiTileGridLoader_hasUvResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_hasUvRequest* req,
             ::octaneapi::ApiTileGridLoader_hasUvResponse* resp) {
               return service->hasUv(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTileGridLoaderService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTileGridLoaderService::Service, ::octaneapi::ApiTileGridLoader_substituteRequest, ::octaneapi::ApiTileGridLoader_substituteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTileGridLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTileGridLoader_substituteRequest* req,
             ::octaneapi::ApiTileGridLoader_substituteResponse* resp) {
               return service->substitute(ctx, req, resp);
             }, this)));
}

ApiTileGridLoaderService::Service::~Service() {
}

::grpc::Status ApiTileGridLoaderService::Service::create(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_createRequest* request, ::octaneapi::ApiTileGridLoader_createResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::destroy(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_destroyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::loadFromNodeItem(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_loadFromNodeItemRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::saveToNodeItem(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_saveToNodeItemRequest* request, ::octaneapi::ApiTileGridLoader_saveToNodeItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::applyStoredSettings(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_applyStoredSettingsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::inferSettingsFromFilename(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameRequest* request, ::octaneapi::ApiTileGridLoader_inferSettingsFromFilenameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::scanTiles(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_scanTilesRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::automaticSizeGrid(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_automaticSizeGridRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::getSettings(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_getSettingsRequest* request, ::octaneapi::ApiTileGridLoader_getSettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::updateSettings(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_updateSettingsRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::getFiles(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_getFilesRequest* request, ::octaneapi::ApiTileGridLoader_getFilesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::setFiles(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_setFilesRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::hasFileInCell(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_hasFileInCellRequest* request, ::octaneapi::ApiTileGridLoader_hasFileInCellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::fileNameForCell(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_fileNameForCellRequest* request, ::octaneapi::ApiTileGridLoader_fileNameForCellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::count(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_countRequest* request, ::octaneapi::ApiTileGridLoader_countResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::updatePattern(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_updatePatternRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::hasEmptyPattern(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_hasEmptyPatternRequest* request, ::octaneapi::ApiTileGridLoader_hasEmptyPatternResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::patternString(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_patternStringRequest* request, ::octaneapi::ApiTileGridLoader_patternStringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::hasPlaceholders(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_hasPlaceholdersRequest* request, ::octaneapi::ApiTileGridLoader_hasPlaceholdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::hasIndex(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_hasIndexRequest* request, ::octaneapi::ApiTileGridLoader_hasIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::hasUDIM(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_hasUDIMRequest* request, ::octaneapi::ApiTileGridLoader_hasUDIMResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::hasUv(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_hasUvRequest* request, ::octaneapi::ApiTileGridLoader_hasUvResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTileGridLoaderService::Service::substitute(::grpc::ServerContext* context, const ::octaneapi::ApiTileGridLoader_substituteRequest* request, ::octaneapi::ApiTileGridLoader_substituteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

