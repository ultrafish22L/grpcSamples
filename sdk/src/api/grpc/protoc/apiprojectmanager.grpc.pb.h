// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apiprojectmanager.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apiprojectmanager_2eproto__INCLUDED
#define GRPC_apiprojectmanager_2eproto__INCLUDED

#include "apiprojectmanager.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiProjectManager' from 'apiprojectmanager.h'
class ApiProjectManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiProjectManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Returns whether the project manager is valid
    virtual ::grpc::Status isValid(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest& request, ::octaneapi::ApiProjectManager_isValidResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_isValidResponse>> AsyncisValid(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_isValidResponse>>(AsyncisValidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_isValidResponse>> PrepareAsyncisValid(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_isValidResponse>>(PrepareAsyncisValidRaw(context, request, cq));
    }
    // / Returns the root node graph of the current project
    virtual ::grpc::Status rootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest& request, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>> AsyncrootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>>(AsyncrootNodeGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>> PrepareAsyncrootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>>(PrepareAsyncrootNodeGraphRaw(context, request, cq));
    }
    // / Returns the application preferences node (node type NT_LOCAL_APP_PREFS)
    virtual ::grpc::Status applicationPreferences(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest& request, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>> AsyncapplicationPreferences(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>>(AsyncapplicationPreferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>> PrepareAsyncapplicationPreferences(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>>(PrepareAsyncapplicationPreferencesRaw(context, request, cq));
    }
    // / Returns the project settings node (node type NT_PROJECT_SETTINGS)
    virtual ::grpc::Status projectSettings(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest& request, ::octaneapi::ApiProjectManager_projectSettingsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_projectSettingsResponse>> AsyncprojectSettings(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_projectSettingsResponse>>(AsyncprojectSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_projectSettingsResponse>> PrepareAsyncprojectSettings(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_projectSettingsResponse>>(PrepareAsyncprojectSettingsRaw(context, request, cq));
    }
    // / Returns the project metadata node (node type NT_METADATA)
    virtual ::grpc::Status projectMetadata(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest& request, ::octaneapi::ApiProjectManager_projectMetadataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_projectMetadataResponse>> AsyncprojectMetadata(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_projectMetadataResponse>>(AsyncprojectMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_projectMetadataResponse>> PrepareAsyncprojectMetadata(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_projectMetadataResponse>>(PrepareAsyncprojectMetadataRaw(context, request, cq));
    }
    // / Returns the preview render target of the current project
    virtual ::grpc::Status previewRenderTarget(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest& request, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>> AsyncpreviewRenderTarget(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>>(AsyncpreviewRenderTargetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>> PrepareAsyncpreviewRenderTarget(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>>(PrepareAsyncpreviewRenderTargetRaw(context, request, cq));
    }
    // / Returns the geometry of the material ball we use for previewing
    virtual ::grpc::Status materialBall(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest& request, ::octaneapi::ApiProjectManager_materialBallResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_materialBallResponse>> AsyncmaterialBall(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_materialBallResponse>>(AsyncmaterialBallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_materialBallResponse>> PrepareAsyncmaterialBall(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_materialBallResponse>>(PrepareAsyncmaterialBallRaw(context, request, cq));
    }
    // / Returns the absolute path to the current project
    virtual ::grpc::Status getCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest& request, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>> AsyncgetCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>>(AsyncgetCurrentProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>> PrepareAsyncgetCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>>(PrepareAsyncgetCurrentProjectRaw(context, request, cq));
    }
    // / Resets a project to a fresh new project
    virtual ::grpc::Status resetProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest& request, ::octaneapi::ApiProjectManager_resetProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_resetProjectResponse>> AsyncresetProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_resetProjectResponse>>(AsyncresetProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_resetProjectResponse>> PrepareAsyncresetProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_resetProjectResponse>>(PrepareAsyncresetProjectRaw(context, request, cq));
    }
    // / Loads a project into octane
    virtual ::grpc::Status loadProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest& request, ::octaneapi::ApiProjectManager_loadProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadProjectResponse>> AsyncloadProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadProjectResponse>>(AsyncloadProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadProjectResponse>> PrepareAsyncloadProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadProjectResponse>>(PrepareAsyncloadProjectRaw(context, request, cq));
    }
    // / Returns TRUE if the project is loaded from a package (
    virtual ::grpc::Status loadedFromPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest& request, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>> AsyncloadedFromPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>>(AsyncloadedFromPackageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>> PrepareAsyncloadedFromPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>>(PrepareAsyncloadedFromPackageRaw(context, request, cq));
    }
    // / Returns the OCS version that the current project was loaded from
    virtual ::grpc::Status loadedOcsVersion(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest& request, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>> AsyncloadedOcsVersion(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>>(AsyncloadedOcsVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>> PrepareAsyncloadedOcsVersion(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>>(PrepareAsyncloadedOcsVersionRaw(context, request, cq));
    }
    // / Saves a project
    virtual ::grpc::Status saveProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest& request, ::octaneapi::ApiProjectManager_saveProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectResponse>> AsyncsaveProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectResponse>>(AsyncsaveProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectResponse>> PrepareAsyncsaveProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectResponse>>(PrepareAsyncsaveProjectRaw(context, request, cq));
    }
    // / Saves a project under a different name
    virtual ::grpc::Status saveProjectAs(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest& request, ::octaneapi::ApiProjectManager_saveProjectAsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectAsResponse>> AsyncsaveProjectAs(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectAsResponse>>(AsyncsaveProjectAsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectAsResponse>> PrepareAsyncsaveProjectAs(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectAsResponse>>(PrepareAsyncsaveProjectAsRaw(context, request, cq));
    }
    // / Saves a project into an orbx package
    virtual ::grpc::Status saveProjectAsReferencePackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest& request, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>> AsyncsaveProjectAsReferencePackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>>(AsyncsaveProjectAsReferencePackageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>> PrepareAsyncsaveProjectAsReferencePackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>>(PrepareAsyncsaveProjectAsReferencePackageRaw(context, request, cq));
    }
    // / Unpacks a package into the provided directory
    virtual ::grpc::Status unpackPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest& request, ::octaneapi::ApiProjectManager_unpackPackageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_unpackPackageResponse>> AsyncunpackPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_unpackPackageResponse>>(AsyncunpackPackageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_unpackPackageResponse>> PrepareAsyncunpackPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_unpackPackageResponse>>(PrepareAsyncunpackPackageRaw(context, request, cq));
    }
    // / Adds a new observer for the project
    virtual ::grpc::Status addObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest& request, ::octaneapi::ApiProjectManager_addObserverResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_addObserverResponse>> AsyncaddObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_addObserverResponse>>(AsyncaddObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_addObserverResponse>> PrepareAsyncaddObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_addObserverResponse>>(PrepareAsyncaddObserverRaw(context, request, cq));
    }
    // / Removes an existing observer
    virtual ::grpc::Status removeObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncremoveObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncremoveObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncremoveObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncremoveObserverRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Returns whether the project manager is valid
      virtual void isValid(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest* request, ::octaneapi::ApiProjectManager_isValidResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isValid(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest* request, ::octaneapi::ApiProjectManager_isValidResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the root node graph of the current project
      virtual void rootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* request, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void rootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* request, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the application preferences node (node type NT_LOCAL_APP_PREFS)
      virtual void applicationPreferences(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* request, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void applicationPreferences(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* request, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the project settings node (node type NT_PROJECT_SETTINGS)
      virtual void projectSettings(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest* request, ::octaneapi::ApiProjectManager_projectSettingsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void projectSettings(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest* request, ::octaneapi::ApiProjectManager_projectSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the project metadata node (node type NT_METADATA)
      virtual void projectMetadata(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest* request, ::octaneapi::ApiProjectManager_projectMetadataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void projectMetadata(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest* request, ::octaneapi::ApiProjectManager_projectMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the preview render target of the current project
      virtual void previewRenderTarget(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* request, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void previewRenderTarget(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* request, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the geometry of the material ball we use for previewing
      virtual void materialBall(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest* request, ::octaneapi::ApiProjectManager_materialBallResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void materialBall(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest* request, ::octaneapi::ApiProjectManager_materialBallResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the absolute path to the current project
      virtual void getCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* request, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* request, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Resets a project to a fresh new project
      virtual void resetProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest* request, ::octaneapi::ApiProjectManager_resetProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void resetProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest* request, ::octaneapi::ApiProjectManager_resetProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Loads a project into octane
      virtual void loadProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest* request, ::octaneapi::ApiProjectManager_loadProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void loadProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest* request, ::octaneapi::ApiProjectManager_loadProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if the project is loaded from a package (
      virtual void loadedFromPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* request, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void loadedFromPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* request, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the OCS version that the current project was loaded from
      virtual void loadedOcsVersion(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* request, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void loadedOcsVersion(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* request, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Saves a project
      virtual void saveProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest* request, ::octaneapi::ApiProjectManager_saveProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void saveProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest* request, ::octaneapi::ApiProjectManager_saveProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Saves a project under a different name
      virtual void saveProjectAs(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void saveProjectAs(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Saves a project into an orbx package
      virtual void saveProjectAsReferencePackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void saveProjectAsReferencePackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Unpacks a package into the provided directory
      virtual void unpackPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest* request, ::octaneapi::ApiProjectManager_unpackPackageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unpackPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest* request, ::octaneapi::ApiProjectManager_unpackPackageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Adds a new observer for the project
      virtual void addObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest* request, ::octaneapi::ApiProjectManager_addObserverResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest* request, ::octaneapi::ApiProjectManager_addObserverResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Removes an existing observer
      virtual void removeObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void removeObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_isValidResponse>* AsyncisValidRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_isValidResponse>* PrepareAsyncisValidRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>* AsyncrootNodeGraphRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>* PrepareAsyncrootNodeGraphRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>* AsyncapplicationPreferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>* PrepareAsyncapplicationPreferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_projectSettingsResponse>* AsyncprojectSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_projectSettingsResponse>* PrepareAsyncprojectSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_projectMetadataResponse>* AsyncprojectMetadataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_projectMetadataResponse>* PrepareAsyncprojectMetadataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>* AsyncpreviewRenderTargetRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>* PrepareAsyncpreviewRenderTargetRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_materialBallResponse>* AsyncmaterialBallRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_materialBallResponse>* PrepareAsyncmaterialBallRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>* AsyncgetCurrentProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>* PrepareAsyncgetCurrentProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_resetProjectResponse>* AsyncresetProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_resetProjectResponse>* PrepareAsyncresetProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadProjectResponse>* AsyncloadProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadProjectResponse>* PrepareAsyncloadProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>* AsyncloadedFromPackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>* PrepareAsyncloadedFromPackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>* AsyncloadedOcsVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>* PrepareAsyncloadedOcsVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectResponse>* AsyncsaveProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectResponse>* PrepareAsyncsaveProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectAsResponse>* AsyncsaveProjectAsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectAsResponse>* PrepareAsyncsaveProjectAsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>* AsyncsaveProjectAsReferencePackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>* PrepareAsyncsaveProjectAsReferencePackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_unpackPackageResponse>* AsyncunpackPackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_unpackPackageResponse>* PrepareAsyncunpackPackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_addObserverResponse>* AsyncaddObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiProjectManager_addObserverResponse>* PrepareAsyncaddObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncremoveObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncremoveObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status isValid(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest& request, ::octaneapi::ApiProjectManager_isValidResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_isValidResponse>> AsyncisValid(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_isValidResponse>>(AsyncisValidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_isValidResponse>> PrepareAsyncisValid(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_isValidResponse>>(PrepareAsyncisValidRaw(context, request, cq));
    }
    ::grpc::Status rootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest& request, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>> AsyncrootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>>(AsyncrootNodeGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>> PrepareAsyncrootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>>(PrepareAsyncrootNodeGraphRaw(context, request, cq));
    }
    ::grpc::Status applicationPreferences(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest& request, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>> AsyncapplicationPreferences(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>>(AsyncapplicationPreferencesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>> PrepareAsyncapplicationPreferences(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>>(PrepareAsyncapplicationPreferencesRaw(context, request, cq));
    }
    ::grpc::Status projectSettings(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest& request, ::octaneapi::ApiProjectManager_projectSettingsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectSettingsResponse>> AsyncprojectSettings(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectSettingsResponse>>(AsyncprojectSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectSettingsResponse>> PrepareAsyncprojectSettings(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectSettingsResponse>>(PrepareAsyncprojectSettingsRaw(context, request, cq));
    }
    ::grpc::Status projectMetadata(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest& request, ::octaneapi::ApiProjectManager_projectMetadataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectMetadataResponse>> AsyncprojectMetadata(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectMetadataResponse>>(AsyncprojectMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectMetadataResponse>> PrepareAsyncprojectMetadata(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectMetadataResponse>>(PrepareAsyncprojectMetadataRaw(context, request, cq));
    }
    ::grpc::Status previewRenderTarget(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest& request, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>> AsyncpreviewRenderTarget(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>>(AsyncpreviewRenderTargetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>> PrepareAsyncpreviewRenderTarget(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>>(PrepareAsyncpreviewRenderTargetRaw(context, request, cq));
    }
    ::grpc::Status materialBall(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest& request, ::octaneapi::ApiProjectManager_materialBallResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_materialBallResponse>> AsyncmaterialBall(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_materialBallResponse>>(AsyncmaterialBallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_materialBallResponse>> PrepareAsyncmaterialBall(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_materialBallResponse>>(PrepareAsyncmaterialBallRaw(context, request, cq));
    }
    ::grpc::Status getCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest& request, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>> AsyncgetCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>>(AsyncgetCurrentProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>> PrepareAsyncgetCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>>(PrepareAsyncgetCurrentProjectRaw(context, request, cq));
    }
    ::grpc::Status resetProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest& request, ::octaneapi::ApiProjectManager_resetProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_resetProjectResponse>> AsyncresetProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_resetProjectResponse>>(AsyncresetProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_resetProjectResponse>> PrepareAsyncresetProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_resetProjectResponse>>(PrepareAsyncresetProjectRaw(context, request, cq));
    }
    ::grpc::Status loadProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest& request, ::octaneapi::ApiProjectManager_loadProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadProjectResponse>> AsyncloadProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadProjectResponse>>(AsyncloadProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadProjectResponse>> PrepareAsyncloadProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadProjectResponse>>(PrepareAsyncloadProjectRaw(context, request, cq));
    }
    ::grpc::Status loadedFromPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest& request, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>> AsyncloadedFromPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>>(AsyncloadedFromPackageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>> PrepareAsyncloadedFromPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>>(PrepareAsyncloadedFromPackageRaw(context, request, cq));
    }
    ::grpc::Status loadedOcsVersion(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest& request, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>> AsyncloadedOcsVersion(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>>(AsyncloadedOcsVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>> PrepareAsyncloadedOcsVersion(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>>(PrepareAsyncloadedOcsVersionRaw(context, request, cq));
    }
    ::grpc::Status saveProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest& request, ::octaneapi::ApiProjectManager_saveProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectResponse>> AsyncsaveProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectResponse>>(AsyncsaveProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectResponse>> PrepareAsyncsaveProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectResponse>>(PrepareAsyncsaveProjectRaw(context, request, cq));
    }
    ::grpc::Status saveProjectAs(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest& request, ::octaneapi::ApiProjectManager_saveProjectAsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsResponse>> AsyncsaveProjectAs(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsResponse>>(AsyncsaveProjectAsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsResponse>> PrepareAsyncsaveProjectAs(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsResponse>>(PrepareAsyncsaveProjectAsRaw(context, request, cq));
    }
    ::grpc::Status saveProjectAsReferencePackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest& request, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>> AsyncsaveProjectAsReferencePackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>>(AsyncsaveProjectAsReferencePackageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>> PrepareAsyncsaveProjectAsReferencePackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>>(PrepareAsyncsaveProjectAsReferencePackageRaw(context, request, cq));
    }
    ::grpc::Status unpackPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest& request, ::octaneapi::ApiProjectManager_unpackPackageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_unpackPackageResponse>> AsyncunpackPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_unpackPackageResponse>>(AsyncunpackPackageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_unpackPackageResponse>> PrepareAsyncunpackPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_unpackPackageResponse>>(PrepareAsyncunpackPackageRaw(context, request, cq));
    }
    ::grpc::Status addObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest& request, ::octaneapi::ApiProjectManager_addObserverResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_addObserverResponse>> AsyncaddObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_addObserverResponse>>(AsyncaddObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_addObserverResponse>> PrepareAsyncaddObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_addObserverResponse>>(PrepareAsyncaddObserverRaw(context, request, cq));
    }
    ::grpc::Status removeObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncremoveObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncremoveObserverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncremoveObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncremoveObserverRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void isValid(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest* request, ::octaneapi::ApiProjectManager_isValidResponse* response, std::function<void(::grpc::Status)>) override;
      void isValid(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest* request, ::octaneapi::ApiProjectManager_isValidResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void rootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* request, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* response, std::function<void(::grpc::Status)>) override;
      void rootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* request, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void applicationPreferences(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* request, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* response, std::function<void(::grpc::Status)>) override;
      void applicationPreferences(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* request, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void projectSettings(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest* request, ::octaneapi::ApiProjectManager_projectSettingsResponse* response, std::function<void(::grpc::Status)>) override;
      void projectSettings(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest* request, ::octaneapi::ApiProjectManager_projectSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void projectMetadata(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest* request, ::octaneapi::ApiProjectManager_projectMetadataResponse* response, std::function<void(::grpc::Status)>) override;
      void projectMetadata(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest* request, ::octaneapi::ApiProjectManager_projectMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void previewRenderTarget(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* request, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* response, std::function<void(::grpc::Status)>) override;
      void previewRenderTarget(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* request, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void materialBall(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest* request, ::octaneapi::ApiProjectManager_materialBallResponse* response, std::function<void(::grpc::Status)>) override;
      void materialBall(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest* request, ::octaneapi::ApiProjectManager_materialBallResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* request, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void getCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* request, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void resetProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest* request, ::octaneapi::ApiProjectManager_resetProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void resetProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest* request, ::octaneapi::ApiProjectManager_resetProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void loadProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest* request, ::octaneapi::ApiProjectManager_loadProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void loadProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest* request, ::octaneapi::ApiProjectManager_loadProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void loadedFromPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* request, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* response, std::function<void(::grpc::Status)>) override;
      void loadedFromPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* request, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void loadedOcsVersion(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* request, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void loadedOcsVersion(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* request, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void saveProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest* request, ::octaneapi::ApiProjectManager_saveProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void saveProject(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest* request, ::octaneapi::ApiProjectManager_saveProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void saveProjectAs(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsResponse* response, std::function<void(::grpc::Status)>) override;
      void saveProjectAs(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void saveProjectAsReferencePackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* response, std::function<void(::grpc::Status)>) override;
      void saveProjectAsReferencePackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void unpackPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest* request, ::octaneapi::ApiProjectManager_unpackPackageResponse* response, std::function<void(::grpc::Status)>) override;
      void unpackPackage(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest* request, ::octaneapi::ApiProjectManager_unpackPackageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void addObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest* request, ::octaneapi::ApiProjectManager_addObserverResponse* response, std::function<void(::grpc::Status)>) override;
      void addObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest* request, ::octaneapi::ApiProjectManager_addObserverResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void removeObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void removeObserver(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_isValidResponse>* AsyncisValidRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_isValidResponse>* PrepareAsyncisValidRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_isValidRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>* AsyncrootNodeGraphRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>* PrepareAsyncrootNodeGraphRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>* AsyncapplicationPreferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>* PrepareAsyncapplicationPreferencesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectSettingsResponse>* AsyncprojectSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectSettingsResponse>* PrepareAsyncprojectSettingsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectMetadataResponse>* AsyncprojectMetadataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_projectMetadataResponse>* PrepareAsyncprojectMetadataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>* AsyncpreviewRenderTargetRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>* PrepareAsyncpreviewRenderTargetRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_materialBallResponse>* AsyncmaterialBallRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_materialBallResponse>* PrepareAsyncmaterialBallRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>* AsyncgetCurrentProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>* PrepareAsyncgetCurrentProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_resetProjectResponse>* AsyncresetProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_resetProjectResponse>* PrepareAsyncresetProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadProjectResponse>* AsyncloadProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadProjectResponse>* PrepareAsyncloadProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>* AsyncloadedFromPackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>* PrepareAsyncloadedFromPackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>* AsyncloadedOcsVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>* PrepareAsyncloadedOcsVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectResponse>* AsyncsaveProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectResponse>* PrepareAsyncsaveProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsResponse>* AsyncsaveProjectAsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsResponse>* PrepareAsyncsaveProjectAsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>* AsyncsaveProjectAsReferencePackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>* PrepareAsyncsaveProjectAsReferencePackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_unpackPackageResponse>* AsyncunpackPackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_unpackPackageResponse>* PrepareAsyncunpackPackageRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_addObserverResponse>* AsyncaddObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiProjectManager_addObserverResponse>* PrepareAsyncaddObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncremoveObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncremoveObserverRaw(::grpc::ClientContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_isValid_;
    const ::grpc::internal::RpcMethod rpcmethod_rootNodeGraph_;
    const ::grpc::internal::RpcMethod rpcmethod_applicationPreferences_;
    const ::grpc::internal::RpcMethod rpcmethod_projectSettings_;
    const ::grpc::internal::RpcMethod rpcmethod_projectMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_previewRenderTarget_;
    const ::grpc::internal::RpcMethod rpcmethod_materialBall_;
    const ::grpc::internal::RpcMethod rpcmethod_getCurrentProject_;
    const ::grpc::internal::RpcMethod rpcmethod_resetProject_;
    const ::grpc::internal::RpcMethod rpcmethod_loadProject_;
    const ::grpc::internal::RpcMethod rpcmethod_loadedFromPackage_;
    const ::grpc::internal::RpcMethod rpcmethod_loadedOcsVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_saveProject_;
    const ::grpc::internal::RpcMethod rpcmethod_saveProjectAs_;
    const ::grpc::internal::RpcMethod rpcmethod_saveProjectAsReferencePackage_;
    const ::grpc::internal::RpcMethod rpcmethod_unpackPackage_;
    const ::grpc::internal::RpcMethod rpcmethod_addObserver_;
    const ::grpc::internal::RpcMethod rpcmethod_removeObserver_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Returns whether the project manager is valid
    virtual ::grpc::Status isValid(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_isValidRequest* request, ::octaneapi::ApiProjectManager_isValidResponse* response);
    // / Returns the root node graph of the current project
    virtual ::grpc::Status rootNodeGraph(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* request, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* response);
    // / Returns the application preferences node (node type NT_LOCAL_APP_PREFS)
    virtual ::grpc::Status applicationPreferences(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* request, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* response);
    // / Returns the project settings node (node type NT_PROJECT_SETTINGS)
    virtual ::grpc::Status projectSettings(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest* request, ::octaneapi::ApiProjectManager_projectSettingsResponse* response);
    // / Returns the project metadata node (node type NT_METADATA)
    virtual ::grpc::Status projectMetadata(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest* request, ::octaneapi::ApiProjectManager_projectMetadataResponse* response);
    // / Returns the preview render target of the current project
    virtual ::grpc::Status previewRenderTarget(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* request, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* response);
    // / Returns the geometry of the material ball we use for previewing
    virtual ::grpc::Status materialBall(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest* request, ::octaneapi::ApiProjectManager_materialBallResponse* response);
    // / Returns the absolute path to the current project
    virtual ::grpc::Status getCurrentProject(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* request, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* response);
    // / Resets a project to a fresh new project
    virtual ::grpc::Status resetProject(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest* request, ::octaneapi::ApiProjectManager_resetProjectResponse* response);
    // / Loads a project into octane
    virtual ::grpc::Status loadProject(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest* request, ::octaneapi::ApiProjectManager_loadProjectResponse* response);
    // / Returns TRUE if the project is loaded from a package (
    virtual ::grpc::Status loadedFromPackage(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* request, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* response);
    // / Returns the OCS version that the current project was loaded from
    virtual ::grpc::Status loadedOcsVersion(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* request, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* response);
    // / Saves a project
    virtual ::grpc::Status saveProject(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest* request, ::octaneapi::ApiProjectManager_saveProjectResponse* response);
    // / Saves a project under a different name
    virtual ::grpc::Status saveProjectAs(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsResponse* response);
    // / Saves a project into an orbx package
    virtual ::grpc::Status saveProjectAsReferencePackage(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* response);
    // / Unpacks a package into the provided directory
    virtual ::grpc::Status unpackPackage(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest* request, ::octaneapi::ApiProjectManager_unpackPackageResponse* response);
    // / Adds a new observer for the project
    virtual ::grpc::Status addObserver(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest* request, ::octaneapi::ApiProjectManager_addObserverResponse* response);
    // / Removes an existing observer
    virtual ::grpc::Status removeObserver(::grpc::ServerContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_isValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isValid() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_isValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isValid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_isValidRequest* /*request*/, ::octaneapi::ApiProjectManager_isValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisValid(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_isValidRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_isValidResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_rootNodeGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_rootNodeGraph() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_rootNodeGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rootNodeGraph(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* /*request*/, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrootNodeGraph(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_rootNodeGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_rootNodeGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_applicationPreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_applicationPreferences() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_applicationPreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status applicationPreferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* /*request*/, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestapplicationPreferences(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_applicationPreferencesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_applicationPreferencesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_projectSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_projectSettings() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_projectSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status projectSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_projectSettingsRequest* /*request*/, ::octaneapi::ApiProjectManager_projectSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestprojectSettings(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_projectSettingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_projectSettingsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_projectMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_projectMetadata() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_projectMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status projectMetadata(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_projectMetadataRequest* /*request*/, ::octaneapi::ApiProjectManager_projectMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestprojectMetadata(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_projectMetadataRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_projectMetadataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_previewRenderTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_previewRenderTarget() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_previewRenderTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status previewRenderTarget(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* /*request*/, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpreviewRenderTarget(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_previewRenderTargetRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_previewRenderTargetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_materialBall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_materialBall() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_materialBall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status materialBall(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_materialBallRequest* /*request*/, ::octaneapi::ApiProjectManager_materialBallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmaterialBall(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_materialBallRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_materialBallResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCurrentProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getCurrentProject() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_getCurrentProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCurrentProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCurrentProject(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_getCurrentProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_getCurrentProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_resetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_resetProject() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_resetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resetProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_resetProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_resetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestresetProject(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_resetProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_resetProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loadProject() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_loadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_loadProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadProject(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_loadProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_loadProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loadedFromPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loadedFromPackage() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_loadedFromPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadedFromPackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* /*request*/, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadedFromPackage(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_loadedFromPackageRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_loadedFromPackageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loadedOcsVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loadedOcsVersion() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_loadedOcsVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadedOcsVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* /*request*/, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadedOcsVersion(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_saveProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_saveProject() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_saveProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveProject(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_saveProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_saveProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_saveProjectAs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_saveProjectAs() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_saveProjectAs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProjectAs(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectAsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveProjectAs(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_saveProjectAsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_saveProjectAsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_saveProjectAsReferencePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_saveProjectAsReferencePackage() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_saveProjectAsReferencePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProjectAsReferencePackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveProjectAsReferencePackage(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unpackPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unpackPackage() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_unpackPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unpackPackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_unpackPackageRequest* /*request*/, ::octaneapi::ApiProjectManager_unpackPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunpackPackage(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_unpackPackageRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_unpackPackageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addObserver() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_addObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_addObserverRequest* /*request*/, ::octaneapi::ApiProjectManager_addObserverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddObserver(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_addObserverRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiProjectManager_addObserverResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_removeObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_removeObserver() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_removeObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_removeObserverRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveObserver(::grpc::ServerContext* context, ::octaneapi::ApiProjectManager_removeObserverRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_isValid<WithAsyncMethod_rootNodeGraph<WithAsyncMethod_applicationPreferences<WithAsyncMethod_projectSettings<WithAsyncMethod_projectMetadata<WithAsyncMethod_previewRenderTarget<WithAsyncMethod_materialBall<WithAsyncMethod_getCurrentProject<WithAsyncMethod_resetProject<WithAsyncMethod_loadProject<WithAsyncMethod_loadedFromPackage<WithAsyncMethod_loadedOcsVersion<WithAsyncMethod_saveProject<WithAsyncMethod_saveProjectAs<WithAsyncMethod_saveProjectAsReferencePackage<WithAsyncMethod_unpackPackage<WithAsyncMethod_addObserver<WithAsyncMethod_removeObserver<Service > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_isValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isValid() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_isValidRequest, ::octaneapi::ApiProjectManager_isValidResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_isValidRequest* request, ::octaneapi::ApiProjectManager_isValidResponse* response) { return this->isValid(context, request, response); }));}
    void SetMessageAllocatorFor_isValid(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_isValidRequest, ::octaneapi::ApiProjectManager_isValidResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_isValidRequest, ::octaneapi::ApiProjectManager_isValidResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isValid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_isValidRequest* /*request*/, ::octaneapi::ApiProjectManager_isValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isValid(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_isValidRequest* /*request*/, ::octaneapi::ApiProjectManager_isValidResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_rootNodeGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_rootNodeGraph() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_rootNodeGraphRequest, ::octaneapi::ApiProjectManager_rootNodeGraphResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* request, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* response) { return this->rootNodeGraph(context, request, response); }));}
    void SetMessageAllocatorFor_rootNodeGraph(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_rootNodeGraphRequest, ::octaneapi::ApiProjectManager_rootNodeGraphResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_rootNodeGraphRequest, ::octaneapi::ApiProjectManager_rootNodeGraphResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_rootNodeGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rootNodeGraph(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* /*request*/, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rootNodeGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* /*request*/, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_applicationPreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_applicationPreferences() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_applicationPreferencesRequest, ::octaneapi::ApiProjectManager_applicationPreferencesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* request, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* response) { return this->applicationPreferences(context, request, response); }));}
    void SetMessageAllocatorFor_applicationPreferences(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_applicationPreferencesRequest, ::octaneapi::ApiProjectManager_applicationPreferencesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_applicationPreferencesRequest, ::octaneapi::ApiProjectManager_applicationPreferencesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_applicationPreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status applicationPreferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* /*request*/, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* applicationPreferences(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* /*request*/, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_projectSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_projectSettings() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_projectSettingsRequest, ::octaneapi::ApiProjectManager_projectSettingsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_projectSettingsRequest* request, ::octaneapi::ApiProjectManager_projectSettingsResponse* response) { return this->projectSettings(context, request, response); }));}
    void SetMessageAllocatorFor_projectSettings(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_projectSettingsRequest, ::octaneapi::ApiProjectManager_projectSettingsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_projectSettingsRequest, ::octaneapi::ApiProjectManager_projectSettingsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_projectSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status projectSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_projectSettingsRequest* /*request*/, ::octaneapi::ApiProjectManager_projectSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* projectSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_projectSettingsRequest* /*request*/, ::octaneapi::ApiProjectManager_projectSettingsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_projectMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_projectMetadata() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_projectMetadataRequest, ::octaneapi::ApiProjectManager_projectMetadataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_projectMetadataRequest* request, ::octaneapi::ApiProjectManager_projectMetadataResponse* response) { return this->projectMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_projectMetadata(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_projectMetadataRequest, ::octaneapi::ApiProjectManager_projectMetadataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_projectMetadataRequest, ::octaneapi::ApiProjectManager_projectMetadataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_projectMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status projectMetadata(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_projectMetadataRequest* /*request*/, ::octaneapi::ApiProjectManager_projectMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* projectMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_projectMetadataRequest* /*request*/, ::octaneapi::ApiProjectManager_projectMetadataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_previewRenderTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_previewRenderTarget() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_previewRenderTargetRequest, ::octaneapi::ApiProjectManager_previewRenderTargetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* request, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* response) { return this->previewRenderTarget(context, request, response); }));}
    void SetMessageAllocatorFor_previewRenderTarget(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_previewRenderTargetRequest, ::octaneapi::ApiProjectManager_previewRenderTargetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_previewRenderTargetRequest, ::octaneapi::ApiProjectManager_previewRenderTargetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_previewRenderTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status previewRenderTarget(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* /*request*/, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* previewRenderTarget(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* /*request*/, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_materialBall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_materialBall() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_materialBallRequest, ::octaneapi::ApiProjectManager_materialBallResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_materialBallRequest* request, ::octaneapi::ApiProjectManager_materialBallResponse* response) { return this->materialBall(context, request, response); }));}
    void SetMessageAllocatorFor_materialBall(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_materialBallRequest, ::octaneapi::ApiProjectManager_materialBallResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_materialBallRequest, ::octaneapi::ApiProjectManager_materialBallResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_materialBall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status materialBall(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_materialBallRequest* /*request*/, ::octaneapi::ApiProjectManager_materialBallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* materialBall(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_materialBallRequest* /*request*/, ::octaneapi::ApiProjectManager_materialBallResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getCurrentProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getCurrentProject() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_getCurrentProjectRequest, ::octaneapi::ApiProjectManager_getCurrentProjectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* request, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* response) { return this->getCurrentProject(context, request, response); }));}
    void SetMessageAllocatorFor_getCurrentProject(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_getCurrentProjectRequest, ::octaneapi::ApiProjectManager_getCurrentProjectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_getCurrentProjectRequest, ::octaneapi::ApiProjectManager_getCurrentProjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getCurrentProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCurrentProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCurrentProject(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_resetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_resetProject() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_resetProjectRequest, ::octaneapi::ApiProjectManager_resetProjectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_resetProjectRequest* request, ::octaneapi::ApiProjectManager_resetProjectResponse* response) { return this->resetProject(context, request, response); }));}
    void SetMessageAllocatorFor_resetProject(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_resetProjectRequest, ::octaneapi::ApiProjectManager_resetProjectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_resetProjectRequest, ::octaneapi::ApiProjectManager_resetProjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_resetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resetProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_resetProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_resetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* resetProject(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_resetProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_resetProjectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_loadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_loadProject() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_loadProjectRequest, ::octaneapi::ApiProjectManager_loadProjectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_loadProjectRequest* request, ::octaneapi::ApiProjectManager_loadProjectResponse* response) { return this->loadProject(context, request, response); }));}
    void SetMessageAllocatorFor_loadProject(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_loadProjectRequest, ::octaneapi::ApiProjectManager_loadProjectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_loadProjectRequest, ::octaneapi::ApiProjectManager_loadProjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_loadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_loadProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadProject(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_loadProjectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_loadedFromPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_loadedFromPackage() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_loadedFromPackageRequest, ::octaneapi::ApiProjectManager_loadedFromPackageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* request, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* response) { return this->loadedFromPackage(context, request, response); }));}
    void SetMessageAllocatorFor_loadedFromPackage(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_loadedFromPackageRequest, ::octaneapi::ApiProjectManager_loadedFromPackageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_loadedFromPackageRequest, ::octaneapi::ApiProjectManager_loadedFromPackageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_loadedFromPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadedFromPackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* /*request*/, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadedFromPackage(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* /*request*/, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_loadedOcsVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_loadedOcsVersion() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_loadedOcsVersionRequest, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* request, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* response) { return this->loadedOcsVersion(context, request, response); }));}
    void SetMessageAllocatorFor_loadedOcsVersion(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_loadedOcsVersionRequest, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_loadedOcsVersionRequest, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_loadedOcsVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadedOcsVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* /*request*/, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadedOcsVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* /*request*/, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_saveProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_saveProject() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_saveProjectRequest, ::octaneapi::ApiProjectManager_saveProjectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_saveProjectRequest* request, ::octaneapi::ApiProjectManager_saveProjectResponse* response) { return this->saveProject(context, request, response); }));}
    void SetMessageAllocatorFor_saveProject(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_saveProjectRequest, ::octaneapi::ApiProjectManager_saveProjectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_saveProjectRequest, ::octaneapi::ApiProjectManager_saveProjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_saveProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* saveProject(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_saveProjectAs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_saveProjectAs() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_saveProjectAsRequest, ::octaneapi::ApiProjectManager_saveProjectAsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsResponse* response) { return this->saveProjectAs(context, request, response); }));}
    void SetMessageAllocatorFor_saveProjectAs(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_saveProjectAsRequest, ::octaneapi::ApiProjectManager_saveProjectAsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_saveProjectAsRequest, ::octaneapi::ApiProjectManager_saveProjectAsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_saveProjectAs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProjectAs(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectAsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* saveProjectAs(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectAsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_saveProjectAsReferencePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_saveProjectAsReferencePackage() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* request, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* response) { return this->saveProjectAsReferencePackage(context, request, response); }));}
    void SetMessageAllocatorFor_saveProjectAsReferencePackage(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_saveProjectAsReferencePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProjectAsReferencePackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* saveProjectAsReferencePackage(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_unpackPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_unpackPackage() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_unpackPackageRequest, ::octaneapi::ApiProjectManager_unpackPackageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_unpackPackageRequest* request, ::octaneapi::ApiProjectManager_unpackPackageResponse* response) { return this->unpackPackage(context, request, response); }));}
    void SetMessageAllocatorFor_unpackPackage(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_unpackPackageRequest, ::octaneapi::ApiProjectManager_unpackPackageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_unpackPackageRequest, ::octaneapi::ApiProjectManager_unpackPackageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_unpackPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unpackPackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_unpackPackageRequest* /*request*/, ::octaneapi::ApiProjectManager_unpackPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unpackPackage(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_unpackPackageRequest* /*request*/, ::octaneapi::ApiProjectManager_unpackPackageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_addObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addObserver() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_addObserverRequest, ::octaneapi::ApiProjectManager_addObserverResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_addObserverRequest* request, ::octaneapi::ApiProjectManager_addObserverResponse* response) { return this->addObserver(context, request, response); }));}
    void SetMessageAllocatorFor_addObserver(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_addObserverRequest, ::octaneapi::ApiProjectManager_addObserverResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_addObserverRequest, ::octaneapi::ApiProjectManager_addObserverResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_addObserverRequest* /*request*/, ::octaneapi::ApiProjectManager_addObserverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_addObserverRequest* /*request*/, ::octaneapi::ApiProjectManager_addObserverResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_removeObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_removeObserver() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_removeObserverRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiProjectManager_removeObserverRequest* request, ::google::protobuf::Empty* response) { return this->removeObserver(context, request, response); }));}
    void SetMessageAllocatorFor_removeObserver(
        ::grpc::MessageAllocator< ::octaneapi::ApiProjectManager_removeObserverRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiProjectManager_removeObserverRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_removeObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_removeObserverRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* removeObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiProjectManager_removeObserverRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_isValid<WithCallbackMethod_rootNodeGraph<WithCallbackMethod_applicationPreferences<WithCallbackMethod_projectSettings<WithCallbackMethod_projectMetadata<WithCallbackMethod_previewRenderTarget<WithCallbackMethod_materialBall<WithCallbackMethod_getCurrentProject<WithCallbackMethod_resetProject<WithCallbackMethod_loadProject<WithCallbackMethod_loadedFromPackage<WithCallbackMethod_loadedOcsVersion<WithCallbackMethod_saveProject<WithCallbackMethod_saveProjectAs<WithCallbackMethod_saveProjectAsReferencePackage<WithCallbackMethod_unpackPackage<WithCallbackMethod_addObserver<WithCallbackMethod_removeObserver<Service > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_isValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isValid() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_isValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isValid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_isValidRequest* /*request*/, ::octaneapi::ApiProjectManager_isValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_rootNodeGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_rootNodeGraph() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_rootNodeGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rootNodeGraph(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* /*request*/, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_applicationPreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_applicationPreferences() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_applicationPreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status applicationPreferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* /*request*/, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_projectSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_projectSettings() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_projectSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status projectSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_projectSettingsRequest* /*request*/, ::octaneapi::ApiProjectManager_projectSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_projectMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_projectMetadata() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_projectMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status projectMetadata(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_projectMetadataRequest* /*request*/, ::octaneapi::ApiProjectManager_projectMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_previewRenderTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_previewRenderTarget() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_previewRenderTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status previewRenderTarget(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* /*request*/, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_materialBall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_materialBall() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_materialBall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status materialBall(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_materialBallRequest* /*request*/, ::octaneapi::ApiProjectManager_materialBallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCurrentProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getCurrentProject() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_getCurrentProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCurrentProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_resetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_resetProject() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_resetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resetProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_resetProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_resetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loadProject() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_loadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_loadProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loadedFromPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loadedFromPackage() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_loadedFromPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadedFromPackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* /*request*/, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loadedOcsVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loadedOcsVersion() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_loadedOcsVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadedOcsVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* /*request*/, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_saveProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_saveProject() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_saveProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_saveProjectAs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_saveProjectAs() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_saveProjectAs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProjectAs(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectAsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_saveProjectAsReferencePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_saveProjectAsReferencePackage() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_saveProjectAsReferencePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProjectAsReferencePackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unpackPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unpackPackage() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_unpackPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unpackPackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_unpackPackageRequest* /*request*/, ::octaneapi::ApiProjectManager_unpackPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addObserver() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_addObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_addObserverRequest* /*request*/, ::octaneapi::ApiProjectManager_addObserverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_removeObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_removeObserver() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_removeObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_removeObserverRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_isValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isValid() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_isValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isValid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_isValidRequest* /*request*/, ::octaneapi::ApiProjectManager_isValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisValid(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_rootNodeGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_rootNodeGraph() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_rootNodeGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rootNodeGraph(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* /*request*/, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrootNodeGraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_applicationPreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_applicationPreferences() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_applicationPreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status applicationPreferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* /*request*/, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestapplicationPreferences(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_projectSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_projectSettings() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_projectSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status projectSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_projectSettingsRequest* /*request*/, ::octaneapi::ApiProjectManager_projectSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestprojectSettings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_projectMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_projectMetadata() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_projectMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status projectMetadata(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_projectMetadataRequest* /*request*/, ::octaneapi::ApiProjectManager_projectMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestprojectMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_previewRenderTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_previewRenderTarget() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_previewRenderTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status previewRenderTarget(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* /*request*/, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpreviewRenderTarget(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_materialBall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_materialBall() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_materialBall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status materialBall(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_materialBallRequest* /*request*/, ::octaneapi::ApiProjectManager_materialBallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmaterialBall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCurrentProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getCurrentProject() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_getCurrentProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCurrentProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCurrentProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_resetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_resetProject() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_resetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resetProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_resetProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_resetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestresetProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_loadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loadProject() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_loadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_loadProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_loadedFromPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loadedFromPackage() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_loadedFromPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadedFromPackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* /*request*/, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadedFromPackage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_loadedOcsVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loadedOcsVersion() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_loadedOcsVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadedOcsVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* /*request*/, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadedOcsVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_saveProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_saveProject() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_saveProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_saveProjectAs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_saveProjectAs() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_saveProjectAs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProjectAs(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectAsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveProjectAs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_saveProjectAsReferencePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_saveProjectAsReferencePackage() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_saveProjectAsReferencePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProjectAsReferencePackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveProjectAsReferencePackage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unpackPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unpackPackage() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_unpackPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unpackPackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_unpackPackageRequest* /*request*/, ::octaneapi::ApiProjectManager_unpackPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunpackPackage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addObserver() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_addObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_addObserverRequest* /*request*/, ::octaneapi::ApiProjectManager_addObserverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddObserver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_removeObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_removeObserver() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_removeObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_removeObserverRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveObserver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isValid() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isValid(context, request, response); }));
    }
    ~WithRawCallbackMethod_isValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isValid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_isValidRequest* /*request*/, ::octaneapi::ApiProjectManager_isValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isValid(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_rootNodeGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_rootNodeGraph() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->rootNodeGraph(context, request, response); }));
    }
    ~WithRawCallbackMethod_rootNodeGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rootNodeGraph(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* /*request*/, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rootNodeGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_applicationPreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_applicationPreferences() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->applicationPreferences(context, request, response); }));
    }
    ~WithRawCallbackMethod_applicationPreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status applicationPreferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* /*request*/, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* applicationPreferences(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_projectSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_projectSettings() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->projectSettings(context, request, response); }));
    }
    ~WithRawCallbackMethod_projectSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status projectSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_projectSettingsRequest* /*request*/, ::octaneapi::ApiProjectManager_projectSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* projectSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_projectMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_projectMetadata() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->projectMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_projectMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status projectMetadata(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_projectMetadataRequest* /*request*/, ::octaneapi::ApiProjectManager_projectMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* projectMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_previewRenderTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_previewRenderTarget() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->previewRenderTarget(context, request, response); }));
    }
    ~WithRawCallbackMethod_previewRenderTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status previewRenderTarget(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* /*request*/, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* previewRenderTarget(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_materialBall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_materialBall() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->materialBall(context, request, response); }));
    }
    ~WithRawCallbackMethod_materialBall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status materialBall(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_materialBallRequest* /*request*/, ::octaneapi::ApiProjectManager_materialBallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* materialBall(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getCurrentProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getCurrentProject() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getCurrentProject(context, request, response); }));
    }
    ~WithRawCallbackMethod_getCurrentProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCurrentProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCurrentProject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_resetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_resetProject() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->resetProject(context, request, response); }));
    }
    ~WithRawCallbackMethod_resetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resetProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_resetProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_resetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* resetProject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_loadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_loadProject() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loadProject(context, request, response); }));
    }
    ~WithRawCallbackMethod_loadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_loadProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadProject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_loadedFromPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_loadedFromPackage() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loadedFromPackage(context, request, response); }));
    }
    ~WithRawCallbackMethod_loadedFromPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadedFromPackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* /*request*/, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadedFromPackage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_loadedOcsVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_loadedOcsVersion() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loadedOcsVersion(context, request, response); }));
    }
    ~WithRawCallbackMethod_loadedOcsVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadedOcsVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* /*request*/, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadedOcsVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_saveProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_saveProject() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->saveProject(context, request, response); }));
    }
    ~WithRawCallbackMethod_saveProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* saveProject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_saveProjectAs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_saveProjectAs() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->saveProjectAs(context, request, response); }));
    }
    ~WithRawCallbackMethod_saveProjectAs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProjectAs(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectAsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* saveProjectAs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_saveProjectAsReferencePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_saveProjectAsReferencePackage() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->saveProjectAsReferencePackage(context, request, response); }));
    }
    ~WithRawCallbackMethod_saveProjectAsReferencePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveProjectAsReferencePackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* saveProjectAsReferencePackage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_unpackPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_unpackPackage() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unpackPackage(context, request, response); }));
    }
    ~WithRawCallbackMethod_unpackPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unpackPackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_unpackPackageRequest* /*request*/, ::octaneapi::ApiProjectManager_unpackPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unpackPackage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addObserver() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addObserver(context, request, response); }));
    }
    ~WithRawCallbackMethod_addObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_addObserverRequest* /*request*/, ::octaneapi::ApiProjectManager_addObserverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_removeObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_removeObserver() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->removeObserver(context, request, response); }));
    }
    ~WithRawCallbackMethod_removeObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_removeObserverRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* removeObserver(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isValid() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_isValidRequest, ::octaneapi::ApiProjectManager_isValidResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_isValidRequest, ::octaneapi::ApiProjectManager_isValidResponse>* streamer) {
                       return this->StreamedisValid(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isValid(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_isValidRequest* /*request*/, ::octaneapi::ApiProjectManager_isValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisValid(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_isValidRequest,::octaneapi::ApiProjectManager_isValidResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_rootNodeGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_rootNodeGraph() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_rootNodeGraphRequest, ::octaneapi::ApiProjectManager_rootNodeGraphResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_rootNodeGraphRequest, ::octaneapi::ApiProjectManager_rootNodeGraphResponse>* streamer) {
                       return this->StreamedrootNodeGraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_rootNodeGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rootNodeGraph(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_rootNodeGraphRequest* /*request*/, ::octaneapi::ApiProjectManager_rootNodeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrootNodeGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_rootNodeGraphRequest,::octaneapi::ApiProjectManager_rootNodeGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_applicationPreferences : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_applicationPreferences() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_applicationPreferencesRequest, ::octaneapi::ApiProjectManager_applicationPreferencesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_applicationPreferencesRequest, ::octaneapi::ApiProjectManager_applicationPreferencesResponse>* streamer) {
                       return this->StreamedapplicationPreferences(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_applicationPreferences() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status applicationPreferences(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_applicationPreferencesRequest* /*request*/, ::octaneapi::ApiProjectManager_applicationPreferencesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedapplicationPreferences(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_applicationPreferencesRequest,::octaneapi::ApiProjectManager_applicationPreferencesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_projectSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_projectSettings() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_projectSettingsRequest, ::octaneapi::ApiProjectManager_projectSettingsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_projectSettingsRequest, ::octaneapi::ApiProjectManager_projectSettingsResponse>* streamer) {
                       return this->StreamedprojectSettings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_projectSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status projectSettings(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_projectSettingsRequest* /*request*/, ::octaneapi::ApiProjectManager_projectSettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedprojectSettings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_projectSettingsRequest,::octaneapi::ApiProjectManager_projectSettingsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_projectMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_projectMetadata() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_projectMetadataRequest, ::octaneapi::ApiProjectManager_projectMetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_projectMetadataRequest, ::octaneapi::ApiProjectManager_projectMetadataResponse>* streamer) {
                       return this->StreamedprojectMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_projectMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status projectMetadata(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_projectMetadataRequest* /*request*/, ::octaneapi::ApiProjectManager_projectMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedprojectMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_projectMetadataRequest,::octaneapi::ApiProjectManager_projectMetadataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_previewRenderTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_previewRenderTarget() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_previewRenderTargetRequest, ::octaneapi::ApiProjectManager_previewRenderTargetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_previewRenderTargetRequest, ::octaneapi::ApiProjectManager_previewRenderTargetResponse>* streamer) {
                       return this->StreamedpreviewRenderTarget(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_previewRenderTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status previewRenderTarget(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_previewRenderTargetRequest* /*request*/, ::octaneapi::ApiProjectManager_previewRenderTargetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpreviewRenderTarget(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_previewRenderTargetRequest,::octaneapi::ApiProjectManager_previewRenderTargetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_materialBall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_materialBall() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_materialBallRequest, ::octaneapi::ApiProjectManager_materialBallResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_materialBallRequest, ::octaneapi::ApiProjectManager_materialBallResponse>* streamer) {
                       return this->StreamedmaterialBall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_materialBall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status materialBall(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_materialBallRequest* /*request*/, ::octaneapi::ApiProjectManager_materialBallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedmaterialBall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_materialBallRequest,::octaneapi::ApiProjectManager_materialBallResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCurrentProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getCurrentProject() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_getCurrentProjectRequest, ::octaneapi::ApiProjectManager_getCurrentProjectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_getCurrentProjectRequest, ::octaneapi::ApiProjectManager_getCurrentProjectResponse>* streamer) {
                       return this->StreamedgetCurrentProject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getCurrentProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCurrentProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_getCurrentProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_getCurrentProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCurrentProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_getCurrentProjectRequest,::octaneapi::ApiProjectManager_getCurrentProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_resetProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_resetProject() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_resetProjectRequest, ::octaneapi::ApiProjectManager_resetProjectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_resetProjectRequest, ::octaneapi::ApiProjectManager_resetProjectResponse>* streamer) {
                       return this->StreamedresetProject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_resetProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status resetProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_resetProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_resetProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedresetProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_resetProjectRequest,::octaneapi::ApiProjectManager_resetProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loadProject() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_loadProjectRequest, ::octaneapi::ApiProjectManager_loadProjectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_loadProjectRequest, ::octaneapi::ApiProjectManager_loadProjectResponse>* streamer) {
                       return this->StreamedloadProject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loadProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_loadProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloadProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_loadProjectRequest,::octaneapi::ApiProjectManager_loadProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loadedFromPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loadedFromPackage() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_loadedFromPackageRequest, ::octaneapi::ApiProjectManager_loadedFromPackageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_loadedFromPackageRequest, ::octaneapi::ApiProjectManager_loadedFromPackageResponse>* streamer) {
                       return this->StreamedloadedFromPackage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loadedFromPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loadedFromPackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadedFromPackageRequest* /*request*/, ::octaneapi::ApiProjectManager_loadedFromPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloadedFromPackage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_loadedFromPackageRequest,::octaneapi::ApiProjectManager_loadedFromPackageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loadedOcsVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loadedOcsVersion() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_loadedOcsVersionRequest, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_loadedOcsVersionRequest, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse>* streamer) {
                       return this->StreamedloadedOcsVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loadedOcsVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loadedOcsVersion(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_loadedOcsVersionRequest* /*request*/, ::octaneapi::ApiProjectManager_loadedOcsVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloadedOcsVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_loadedOcsVersionRequest,::octaneapi::ApiProjectManager_loadedOcsVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_saveProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_saveProject() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_saveProjectRequest, ::octaneapi::ApiProjectManager_saveProjectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_saveProjectRequest, ::octaneapi::ApiProjectManager_saveProjectResponse>* streamer) {
                       return this->StreamedsaveProject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_saveProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status saveProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsaveProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_saveProjectRequest,::octaneapi::ApiProjectManager_saveProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_saveProjectAs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_saveProjectAs() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_saveProjectAsRequest, ::octaneapi::ApiProjectManager_saveProjectAsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_saveProjectAsRequest, ::octaneapi::ApiProjectManager_saveProjectAsResponse>* streamer) {
                       return this->StreamedsaveProjectAs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_saveProjectAs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status saveProjectAs(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectAsRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectAsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsaveProjectAs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_saveProjectAsRequest,::octaneapi::ApiProjectManager_saveProjectAsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_saveProjectAsReferencePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_saveProjectAsReferencePackage() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>* streamer) {
                       return this->StreamedsaveProjectAsReferencePackage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_saveProjectAsReferencePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status saveProjectAsReferencePackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest* /*request*/, ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsaveProjectAsReferencePackage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_saveProjectAsReferencePackageRequest,::octaneapi::ApiProjectManager_saveProjectAsReferencePackageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unpackPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unpackPackage() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_unpackPackageRequest, ::octaneapi::ApiProjectManager_unpackPackageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_unpackPackageRequest, ::octaneapi::ApiProjectManager_unpackPackageResponse>* streamer) {
                       return this->StreamedunpackPackage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_unpackPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unpackPackage(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_unpackPackageRequest* /*request*/, ::octaneapi::ApiProjectManager_unpackPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedunpackPackage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_unpackPackageRequest,::octaneapi::ApiProjectManager_unpackPackageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addObserver() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_addObserverRequest, ::octaneapi::ApiProjectManager_addObserverResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_addObserverRequest, ::octaneapi::ApiProjectManager_addObserverResponse>* streamer) {
                       return this->StreamedaddObserver(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_addObserverRequest* /*request*/, ::octaneapi::ApiProjectManager_addObserverResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddObserver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_addObserverRequest,::octaneapi::ApiProjectManager_addObserverResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_removeObserver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_removeObserver() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiProjectManager_removeObserverRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiProjectManager_removeObserverRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedremoveObserver(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_removeObserver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status removeObserver(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiProjectManager_removeObserverRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedremoveObserver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiProjectManager_removeObserverRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_isValid<WithStreamedUnaryMethod_rootNodeGraph<WithStreamedUnaryMethod_applicationPreferences<WithStreamedUnaryMethod_projectSettings<WithStreamedUnaryMethod_projectMetadata<WithStreamedUnaryMethod_previewRenderTarget<WithStreamedUnaryMethod_materialBall<WithStreamedUnaryMethod_getCurrentProject<WithStreamedUnaryMethod_resetProject<WithStreamedUnaryMethod_loadProject<WithStreamedUnaryMethod_loadedFromPackage<WithStreamedUnaryMethod_loadedOcsVersion<WithStreamedUnaryMethod_saveProject<WithStreamedUnaryMethod_saveProjectAs<WithStreamedUnaryMethod_saveProjectAsReferencePackage<WithStreamedUnaryMethod_unpackPackage<WithStreamedUnaryMethod_addObserver<WithStreamedUnaryMethod_removeObserver<Service > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_isValid<WithStreamedUnaryMethod_rootNodeGraph<WithStreamedUnaryMethod_applicationPreferences<WithStreamedUnaryMethod_projectSettings<WithStreamedUnaryMethod_projectMetadata<WithStreamedUnaryMethod_previewRenderTarget<WithStreamedUnaryMethod_materialBall<WithStreamedUnaryMethod_getCurrentProject<WithStreamedUnaryMethod_resetProject<WithStreamedUnaryMethod_loadProject<WithStreamedUnaryMethod_loadedFromPackage<WithStreamedUnaryMethod_loadedOcsVersion<WithStreamedUnaryMethod_saveProject<WithStreamedUnaryMethod_saveProjectAs<WithStreamedUnaryMethod_saveProjectAsReferencePackage<WithStreamedUnaryMethod_unpackPackage<WithStreamedUnaryMethod_addObserver<WithStreamedUnaryMethod_removeObserver<Service > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apiprojectmanager_2eproto__INCLUDED
