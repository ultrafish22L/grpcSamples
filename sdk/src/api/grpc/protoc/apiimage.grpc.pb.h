// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apiimage.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apiimage_2eproto__INCLUDED
#define GRPC_apiimage_2eproto__INCLUDED

#include "apiimage.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiImage' from 'apiimage.h'
class ApiImageService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiImageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Creates a new image
    virtual ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest& request, ::octaneapi::ApiImage_createResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    // / Creates a new image and initializes it with the provided data
    virtual ::grpc::Status create1(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request& request, ::octaneapi::ApiImage_create1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_create1Response>> Asynccreate1(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_create1Response>>(Asynccreate1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_create1Response>> PrepareAsynccreate1(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_create1Response>>(PrepareAsynccreate1Raw(context, request, cq));
    }
    // / Writes this ApiImage into a file
    virtual ::grpc::Status saveToFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest& request, ::octaneapi::ApiImage_saveToFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_saveToFileResponse>> AsyncsaveToFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_saveToFileResponse>>(AsyncsaveToFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_saveToFileResponse>> PrepareAsyncsaveToFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_saveToFileResponse>>(PrepareAsyncsaveToFileRaw(context, request, cq));
    }
    // / Loads an image from a file, which needs to be of one of the following formats:
    // / GIF, JPEG, PNG
    // /
    // / 
    virtual ::grpc::Status loadFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest& request, ::octaneapi::ApiImage_loadFromFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_loadFromFileResponse>> AsyncloadFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_loadFromFileResponse>>(AsyncloadFromFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_loadFromFileResponse>> PrepareAsyncloadFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_loadFromFileResponse>>(PrepareAsyncloadFromFileRaw(context, request, cq));
    }
    // / Loads an image from an in-memory image file, i
    virtual ::grpc::Status loadFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest& request, ::octaneapi::ApiImage_loadFromMemoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_loadFromMemoryResponse>> AsyncloadFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_loadFromMemoryResponse>>(AsyncloadFromMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_loadFromMemoryResponse>> PrepareAsyncloadFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_loadFromMemoryResponse>>(PrepareAsyncloadFromMemoryRaw(context, request, cq));
    }
    // / Destroys the image created by create
    virtual ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    // / Returns the width of this image
    virtual ::grpc::Status width(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest& request, ::octaneapi::ApiImage_widthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_widthResponse>> Asyncwidth(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_widthResponse>>(AsyncwidthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_widthResponse>> PrepareAsyncwidth(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_widthResponse>>(PrepareAsyncwidthRaw(context, request, cq));
    }
    // / Returns the height of this image
    virtual ::grpc::Status height(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest& request, ::octaneapi::ApiImage_heightResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_heightResponse>> Asyncheight(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_heightResponse>>(AsyncheightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_heightResponse>> PrepareAsyncheight(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_heightResponse>>(PrepareAsyncheightRaw(context, request, cq));
    }
    // / Returns this image's pixel format
    virtual ::grpc::Status pixelFormat(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest& request, ::octaneapi::ApiImage_pixelFormatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_pixelFormatResponse>> AsyncpixelFormat(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_pixelFormatResponse>>(AsyncpixelFormatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_pixelFormatResponse>> PrepareAsyncpixelFormat(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_pixelFormatResponse>>(PrepareAsyncpixelFormatRaw(context, request, cq));
    }
    // / TRUE if the image's format is ARGB
    virtual ::grpc::Status isARGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest& request, ::octaneapi::ApiImage_isARGBResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isARGBResponse>> AsyncisARGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isARGBResponse>>(AsyncisARGBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isARGBResponse>> PrepareAsyncisARGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isARGBResponse>>(PrepareAsyncisARGBRaw(context, request, cq));
    }
    // / True if the image's format is RGB
    virtual ::grpc::Status isRGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest& request, ::octaneapi::ApiImage_isRGBResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isRGBResponse>> AsyncisRGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isRGBResponse>>(AsyncisRGBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isRGBResponse>> PrepareAsyncisRGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isRGBResponse>>(PrepareAsyncisRGBRaw(context, request, cq));
    }
    // / TRUE if the image's format is a single-channel alpha map
    virtual ::grpc::Status isSingleChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest& request, ::octaneapi::ApiImage_isSingleChannelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isSingleChannelResponse>> AsyncisSingleChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isSingleChannelResponse>>(AsyncisSingleChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isSingleChannelResponse>> PrepareAsyncisSingleChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isSingleChannelResponse>>(PrepareAsyncisSingleChannelRaw(context, request, cq));
    }
    // / TRUE if the image contains an alpha-channel
    virtual ::grpc::Status hasAlphaChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest& request, ::octaneapi::ApiImage_hasAlphaChannelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_hasAlphaChannelResponse>> AsynchasAlphaChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_hasAlphaChannelResponse>>(AsynchasAlphaChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_hasAlphaChannelResponse>> PrepareAsynchasAlphaChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_hasAlphaChannelResponse>>(PrepareAsynchasAlphaChannelRaw(context, request, cq));
    }
    // / Clears a section of the image with a given color
    virtual ::grpc::Status clear(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncclear(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncclearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncclear(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncclearRaw(context, request, cq));
    }
    // / Updates the content of the instance
    virtual ::grpc::Status updateTo(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncupdateTo(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncupdateToRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncupdateTo(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncupdateToRaw(context, request, cq));
    }
    // / Returns the color of one of the pixels in the image
    virtual ::grpc::Status pixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest& request, ::octaneapi::ApiImage_pixelAtResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_pixelAtResponse>> AsyncpixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_pixelAtResponse>>(AsyncpixelAtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_pixelAtResponse>> PrepareAsyncpixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_pixelAtResponse>>(PrepareAsyncpixelAtRaw(context, request, cq));
    }
    // / Sets the color of one of the image's pixels
    virtual ::grpc::Status setPixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetPixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetPixelAtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetPixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetPixelAtRaw(context, request, cq));
    }
    // / Changes the opacity of a pixel
    virtual ::grpc::Status multiplyAlphaAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncmultiplyAlphaAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncmultiplyAlphaAtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncmultiplyAlphaAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncmultiplyAlphaAtRaw(context, request, cq));
    }
    // / Changes the overall opacity of the image
    virtual ::grpc::Status multiplyAllAlphas(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncmultiplyAllAlphas(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncmultiplyAllAlphasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncmultiplyAllAlphas(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncmultiplyAllAlphasRaw(context, request, cq));
    }
    // / Changes all the colors to be shades of grey, based on their current luminosity
    virtual ::grpc::Status desaturate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncdesaturate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdesaturateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdesaturate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdesaturateRaw(context, request, cq));
    }
    // / Resize this image
    virtual ::grpc::Status resize(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncresize(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncresizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncresize(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncresizeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Creates a new image
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest* request, ::octaneapi::ApiImage_createResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest* request, ::octaneapi::ApiImage_createResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Creates a new image and initializes it with the provided data
      virtual void create1(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request* request, ::octaneapi::ApiImage_create1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create1(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request* request, ::octaneapi::ApiImage_create1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Writes this ApiImage into a file
      virtual void saveToFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest* request, ::octaneapi::ApiImage_saveToFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void saveToFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest* request, ::octaneapi::ApiImage_saveToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Loads an image from a file, which needs to be of one of the following formats:
      // / GIF, JPEG, PNG
      // /
      // / 
      virtual void loadFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest* request, ::octaneapi::ApiImage_loadFromFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void loadFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest* request, ::octaneapi::ApiImage_loadFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Loads an image from an in-memory image file, i
      virtual void loadFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest* request, ::octaneapi::ApiImage_loadFromMemoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void loadFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest* request, ::octaneapi::ApiImage_loadFromMemoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Destroys the image created by create
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the width of this image
      virtual void width(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest* request, ::octaneapi::ApiImage_widthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void width(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest* request, ::octaneapi::ApiImage_widthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the height of this image
      virtual void height(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest* request, ::octaneapi::ApiImage_heightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void height(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest* request, ::octaneapi::ApiImage_heightResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns this image's pixel format
      virtual void pixelFormat(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest* request, ::octaneapi::ApiImage_pixelFormatResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void pixelFormat(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest* request, ::octaneapi::ApiImage_pixelFormatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / TRUE if the image's format is ARGB
      virtual void isARGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest* request, ::octaneapi::ApiImage_isARGBResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isARGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest* request, ::octaneapi::ApiImage_isARGBResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / True if the image's format is RGB
      virtual void isRGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest* request, ::octaneapi::ApiImage_isRGBResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isRGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest* request, ::octaneapi::ApiImage_isRGBResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / TRUE if the image's format is a single-channel alpha map
      virtual void isSingleChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest* request, ::octaneapi::ApiImage_isSingleChannelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isSingleChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest* request, ::octaneapi::ApiImage_isSingleChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / TRUE if the image contains an alpha-channel
      virtual void hasAlphaChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest* request, ::octaneapi::ApiImage_hasAlphaChannelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void hasAlphaChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest* request, ::octaneapi::ApiImage_hasAlphaChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Clears a section of the image with a given color
      virtual void clear(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void clear(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Updates the content of the instance
      virtual void updateTo(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void updateTo(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the color of one of the pixels in the image
      virtual void pixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest* request, ::octaneapi::ApiImage_pixelAtResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void pixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest* request, ::octaneapi::ApiImage_pixelAtResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Sets the color of one of the image's pixels
      virtual void setPixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setPixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Changes the opacity of a pixel
      virtual void multiplyAlphaAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void multiplyAlphaAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Changes the overall opacity of the image
      virtual void multiplyAllAlphas(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void multiplyAllAlphas(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Changes all the colors to be shades of grey, based on their current luminosity
      virtual void desaturate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void desaturate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Resize this image
      virtual void resize(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void resize(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_create1Response>* Asynccreate1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_create1Response>* PrepareAsynccreate1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_saveToFileResponse>* AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_saveToFileResponse>* PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_loadFromFileResponse>* AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_loadFromFileResponse>* PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_loadFromMemoryResponse>* AsyncloadFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_loadFromMemoryResponse>* PrepareAsyncloadFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_widthResponse>* AsyncwidthRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_widthResponse>* PrepareAsyncwidthRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_heightResponse>* AsyncheightRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_heightResponse>* PrepareAsyncheightRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_pixelFormatResponse>* AsyncpixelFormatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_pixelFormatResponse>* PrepareAsyncpixelFormatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isARGBResponse>* AsyncisARGBRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isARGBResponse>* PrepareAsyncisARGBRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isRGBResponse>* AsyncisRGBRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isRGBResponse>* PrepareAsyncisRGBRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isSingleChannelResponse>* AsyncisSingleChannelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_isSingleChannelResponse>* PrepareAsyncisSingleChannelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_hasAlphaChannelResponse>* AsynchasAlphaChannelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_hasAlphaChannelResponse>* PrepareAsynchasAlphaChannelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncupdateToRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncupdateToRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_pixelAtResponse>* AsyncpixelAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiImage_pixelAtResponse>* PrepareAsyncpixelAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetPixelAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetPixelAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncmultiplyAlphaAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncmultiplyAlphaAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncmultiplyAllAlphasRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncmultiplyAllAlphasRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdesaturateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdesaturateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncresizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncresizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest& request, ::octaneapi::ApiImage_createResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    ::grpc::Status create1(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request& request, ::octaneapi::ApiImage_create1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_create1Response>> Asynccreate1(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_create1Response>>(Asynccreate1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_create1Response>> PrepareAsynccreate1(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_create1Response>>(PrepareAsynccreate1Raw(context, request, cq));
    }
    ::grpc::Status saveToFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest& request, ::octaneapi::ApiImage_saveToFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_saveToFileResponse>> AsyncsaveToFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_saveToFileResponse>>(AsyncsaveToFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_saveToFileResponse>> PrepareAsyncsaveToFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_saveToFileResponse>>(PrepareAsyncsaveToFileRaw(context, request, cq));
    }
    ::grpc::Status loadFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest& request, ::octaneapi::ApiImage_loadFromFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromFileResponse>> AsyncloadFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromFileResponse>>(AsyncloadFromFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromFileResponse>> PrepareAsyncloadFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromFileResponse>>(PrepareAsyncloadFromFileRaw(context, request, cq));
    }
    ::grpc::Status loadFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest& request, ::octaneapi::ApiImage_loadFromMemoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromMemoryResponse>> AsyncloadFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromMemoryResponse>>(AsyncloadFromMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromMemoryResponse>> PrepareAsyncloadFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromMemoryResponse>>(PrepareAsyncloadFromMemoryRaw(context, request, cq));
    }
    ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    ::grpc::Status width(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest& request, ::octaneapi::ApiImage_widthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_widthResponse>> Asyncwidth(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_widthResponse>>(AsyncwidthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_widthResponse>> PrepareAsyncwidth(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_widthResponse>>(PrepareAsyncwidthRaw(context, request, cq));
    }
    ::grpc::Status height(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest& request, ::octaneapi::ApiImage_heightResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_heightResponse>> Asyncheight(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_heightResponse>>(AsyncheightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_heightResponse>> PrepareAsyncheight(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_heightResponse>>(PrepareAsyncheightRaw(context, request, cq));
    }
    ::grpc::Status pixelFormat(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest& request, ::octaneapi::ApiImage_pixelFormatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelFormatResponse>> AsyncpixelFormat(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelFormatResponse>>(AsyncpixelFormatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelFormatResponse>> PrepareAsyncpixelFormat(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelFormatResponse>>(PrepareAsyncpixelFormatRaw(context, request, cq));
    }
    ::grpc::Status isARGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest& request, ::octaneapi::ApiImage_isARGBResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isARGBResponse>> AsyncisARGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isARGBResponse>>(AsyncisARGBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isARGBResponse>> PrepareAsyncisARGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isARGBResponse>>(PrepareAsyncisARGBRaw(context, request, cq));
    }
    ::grpc::Status isRGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest& request, ::octaneapi::ApiImage_isRGBResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isRGBResponse>> AsyncisRGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isRGBResponse>>(AsyncisRGBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isRGBResponse>> PrepareAsyncisRGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isRGBResponse>>(PrepareAsyncisRGBRaw(context, request, cq));
    }
    ::grpc::Status isSingleChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest& request, ::octaneapi::ApiImage_isSingleChannelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isSingleChannelResponse>> AsyncisSingleChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isSingleChannelResponse>>(AsyncisSingleChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isSingleChannelResponse>> PrepareAsyncisSingleChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isSingleChannelResponse>>(PrepareAsyncisSingleChannelRaw(context, request, cq));
    }
    ::grpc::Status hasAlphaChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest& request, ::octaneapi::ApiImage_hasAlphaChannelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_hasAlphaChannelResponse>> AsynchasAlphaChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_hasAlphaChannelResponse>>(AsynchasAlphaChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_hasAlphaChannelResponse>> PrepareAsynchasAlphaChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_hasAlphaChannelResponse>>(PrepareAsynchasAlphaChannelRaw(context, request, cq));
    }
    ::grpc::Status clear(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncclear(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncclearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncclear(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncclearRaw(context, request, cq));
    }
    ::grpc::Status updateTo(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncupdateTo(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncupdateToRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncupdateTo(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncupdateToRaw(context, request, cq));
    }
    ::grpc::Status pixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest& request, ::octaneapi::ApiImage_pixelAtResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelAtResponse>> AsyncpixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelAtResponse>>(AsyncpixelAtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelAtResponse>> PrepareAsyncpixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelAtResponse>>(PrepareAsyncpixelAtRaw(context, request, cq));
    }
    ::grpc::Status setPixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetPixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetPixelAtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetPixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetPixelAtRaw(context, request, cq));
    }
    ::grpc::Status multiplyAlphaAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncmultiplyAlphaAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncmultiplyAlphaAtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncmultiplyAlphaAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncmultiplyAlphaAtRaw(context, request, cq));
    }
    ::grpc::Status multiplyAllAlphas(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncmultiplyAllAlphas(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncmultiplyAllAlphasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncmultiplyAllAlphas(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncmultiplyAllAlphasRaw(context, request, cq));
    }
    ::grpc::Status desaturate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncdesaturate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdesaturateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdesaturate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdesaturateRaw(context, request, cq));
    }
    ::grpc::Status resize(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncresize(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncresizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncresize(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncresizeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest* request, ::octaneapi::ApiImage_createResponse* response, std::function<void(::grpc::Status)>) override;
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest* request, ::octaneapi::ApiImage_createResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void create1(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request* request, ::octaneapi::ApiImage_create1Response* response, std::function<void(::grpc::Status)>) override;
      void create1(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request* request, ::octaneapi::ApiImage_create1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void saveToFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest* request, ::octaneapi::ApiImage_saveToFileResponse* response, std::function<void(::grpc::Status)>) override;
      void saveToFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest* request, ::octaneapi::ApiImage_saveToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void loadFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest* request, ::octaneapi::ApiImage_loadFromFileResponse* response, std::function<void(::grpc::Status)>) override;
      void loadFromFile(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest* request, ::octaneapi::ApiImage_loadFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void loadFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest* request, ::octaneapi::ApiImage_loadFromMemoryResponse* response, std::function<void(::grpc::Status)>) override;
      void loadFromMemory(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest* request, ::octaneapi::ApiImage_loadFromMemoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void width(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest* request, ::octaneapi::ApiImage_widthResponse* response, std::function<void(::grpc::Status)>) override;
      void width(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest* request, ::octaneapi::ApiImage_widthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void height(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest* request, ::octaneapi::ApiImage_heightResponse* response, std::function<void(::grpc::Status)>) override;
      void height(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest* request, ::octaneapi::ApiImage_heightResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void pixelFormat(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest* request, ::octaneapi::ApiImage_pixelFormatResponse* response, std::function<void(::grpc::Status)>) override;
      void pixelFormat(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest* request, ::octaneapi::ApiImage_pixelFormatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isARGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest* request, ::octaneapi::ApiImage_isARGBResponse* response, std::function<void(::grpc::Status)>) override;
      void isARGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest* request, ::octaneapi::ApiImage_isARGBResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isRGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest* request, ::octaneapi::ApiImage_isRGBResponse* response, std::function<void(::grpc::Status)>) override;
      void isRGB(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest* request, ::octaneapi::ApiImage_isRGBResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void isSingleChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest* request, ::octaneapi::ApiImage_isSingleChannelResponse* response, std::function<void(::grpc::Status)>) override;
      void isSingleChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest* request, ::octaneapi::ApiImage_isSingleChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void hasAlphaChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest* request, ::octaneapi::ApiImage_hasAlphaChannelResponse* response, std::function<void(::grpc::Status)>) override;
      void hasAlphaChannel(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest* request, ::octaneapi::ApiImage_hasAlphaChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void clear(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void clear(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void updateTo(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void updateTo(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void pixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest* request, ::octaneapi::ApiImage_pixelAtResponse* response, std::function<void(::grpc::Status)>) override;
      void pixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest* request, ::octaneapi::ApiImage_pixelAtResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setPixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void setPixelAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void multiplyAlphaAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void multiplyAlphaAt(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void multiplyAllAlphas(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void multiplyAllAlphas(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void desaturate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void desaturate(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void resize(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void resize(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_create1Response>* Asynccreate1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_create1Response>* PrepareAsynccreate1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_create1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_saveToFileResponse>* AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_saveToFileResponse>* PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_saveToFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromFileResponse>* AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromFileResponse>* PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromMemoryResponse>* AsyncloadFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_loadFromMemoryResponse>* PrepareAsyncloadFromMemoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_widthResponse>* AsyncwidthRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_widthResponse>* PrepareAsyncwidthRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_widthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_heightResponse>* AsyncheightRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_heightResponse>* PrepareAsyncheightRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_heightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelFormatResponse>* AsyncpixelFormatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelFormatResponse>* PrepareAsyncpixelFormatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelFormatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isARGBResponse>* AsyncisARGBRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isARGBResponse>* PrepareAsyncisARGBRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isARGBRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isRGBResponse>* AsyncisRGBRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isRGBResponse>* PrepareAsyncisRGBRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isRGBRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isSingleChannelResponse>* AsyncisSingleChannelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_isSingleChannelResponse>* PrepareAsyncisSingleChannelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_hasAlphaChannelResponse>* AsynchasAlphaChannelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_hasAlphaChannelResponse>* PrepareAsynchasAlphaChannelRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_clearRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncupdateToRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncupdateToRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_updateToRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelAtResponse>* AsyncpixelAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiImage_pixelAtResponse>* PrepareAsyncpixelAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_pixelAtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetPixelAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetPixelAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_setPixelAtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncmultiplyAlphaAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncmultiplyAlphaAtRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncmultiplyAllAlphasRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncmultiplyAllAlphasRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdesaturateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdesaturateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_desaturateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncresizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncresizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiImage_resizeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_create_;
    const ::grpc::internal::RpcMethod rpcmethod_create1_;
    const ::grpc::internal::RpcMethod rpcmethod_saveToFile_;
    const ::grpc::internal::RpcMethod rpcmethod_loadFromFile_;
    const ::grpc::internal::RpcMethod rpcmethod_loadFromMemory_;
    const ::grpc::internal::RpcMethod rpcmethod_destroy_;
    const ::grpc::internal::RpcMethod rpcmethod_width_;
    const ::grpc::internal::RpcMethod rpcmethod_height_;
    const ::grpc::internal::RpcMethod rpcmethod_pixelFormat_;
    const ::grpc::internal::RpcMethod rpcmethod_isARGB_;
    const ::grpc::internal::RpcMethod rpcmethod_isRGB_;
    const ::grpc::internal::RpcMethod rpcmethod_isSingleChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_hasAlphaChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_clear_;
    const ::grpc::internal::RpcMethod rpcmethod_updateTo_;
    const ::grpc::internal::RpcMethod rpcmethod_pixelAt_;
    const ::grpc::internal::RpcMethod rpcmethod_setPixelAt_;
    const ::grpc::internal::RpcMethod rpcmethod_multiplyAlphaAt_;
    const ::grpc::internal::RpcMethod rpcmethod_multiplyAllAlphas_;
    const ::grpc::internal::RpcMethod rpcmethod_desaturate_;
    const ::grpc::internal::RpcMethod rpcmethod_resize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Creates a new image
    virtual ::grpc::Status create(::grpc::ServerContext* context, const ::octaneapi::ApiImage_createRequest* request, ::octaneapi::ApiImage_createResponse* response);
    // / Creates a new image and initializes it with the provided data
    virtual ::grpc::Status create1(::grpc::ServerContext* context, const ::octaneapi::ApiImage_create1Request* request, ::octaneapi::ApiImage_create1Response* response);
    // / Writes this ApiImage into a file
    virtual ::grpc::Status saveToFile(::grpc::ServerContext* context, const ::octaneapi::ApiImage_saveToFileRequest* request, ::octaneapi::ApiImage_saveToFileResponse* response);
    // / Loads an image from a file, which needs to be of one of the following formats:
    // / GIF, JPEG, PNG
    // /
    // / 
    virtual ::grpc::Status loadFromFile(::grpc::ServerContext* context, const ::octaneapi::ApiImage_loadFromFileRequest* request, ::octaneapi::ApiImage_loadFromFileResponse* response);
    // / Loads an image from an in-memory image file, i
    virtual ::grpc::Status loadFromMemory(::grpc::ServerContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest* request, ::octaneapi::ApiImage_loadFromMemoryResponse* response);
    // / Destroys the image created by create
    virtual ::grpc::Status destroy(::grpc::ServerContext* context, const ::octaneapi::ApiImage_destroyRequest* request, ::google::protobuf::Empty* response);
    // / Returns the width of this image
    virtual ::grpc::Status width(::grpc::ServerContext* context, const ::octaneapi::ApiImage_widthRequest* request, ::octaneapi::ApiImage_widthResponse* response);
    // / Returns the height of this image
    virtual ::grpc::Status height(::grpc::ServerContext* context, const ::octaneapi::ApiImage_heightRequest* request, ::octaneapi::ApiImage_heightResponse* response);
    // / Returns this image's pixel format
    virtual ::grpc::Status pixelFormat(::grpc::ServerContext* context, const ::octaneapi::ApiImage_pixelFormatRequest* request, ::octaneapi::ApiImage_pixelFormatResponse* response);
    // / TRUE if the image's format is ARGB
    virtual ::grpc::Status isARGB(::grpc::ServerContext* context, const ::octaneapi::ApiImage_isARGBRequest* request, ::octaneapi::ApiImage_isARGBResponse* response);
    // / True if the image's format is RGB
    virtual ::grpc::Status isRGB(::grpc::ServerContext* context, const ::octaneapi::ApiImage_isRGBRequest* request, ::octaneapi::ApiImage_isRGBResponse* response);
    // / TRUE if the image's format is a single-channel alpha map
    virtual ::grpc::Status isSingleChannel(::grpc::ServerContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest* request, ::octaneapi::ApiImage_isSingleChannelResponse* response);
    // / TRUE if the image contains an alpha-channel
    virtual ::grpc::Status hasAlphaChannel(::grpc::ServerContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest* request, ::octaneapi::ApiImage_hasAlphaChannelResponse* response);
    // / Clears a section of the image with a given color
    virtual ::grpc::Status clear(::grpc::ServerContext* context, const ::octaneapi::ApiImage_clearRequest* request, ::google::protobuf::Empty* response);
    // / Updates the content of the instance
    virtual ::grpc::Status updateTo(::grpc::ServerContext* context, const ::octaneapi::ApiImage_updateToRequest* request, ::google::protobuf::Empty* response);
    // / Returns the color of one of the pixels in the image
    virtual ::grpc::Status pixelAt(::grpc::ServerContext* context, const ::octaneapi::ApiImage_pixelAtRequest* request, ::octaneapi::ApiImage_pixelAtResponse* response);
    // / Sets the color of one of the image's pixels
    virtual ::grpc::Status setPixelAt(::grpc::ServerContext* context, const ::octaneapi::ApiImage_setPixelAtRequest* request, ::google::protobuf::Empty* response);
    // / Changes the opacity of a pixel
    virtual ::grpc::Status multiplyAlphaAt(::grpc::ServerContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* request, ::google::protobuf::Empty* response);
    // / Changes the overall opacity of the image
    virtual ::grpc::Status multiplyAllAlphas(::grpc::ServerContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* request, ::google::protobuf::Empty* response);
    // / Changes all the colors to be shades of grey, based on their current luminosity
    virtual ::grpc::Status desaturate(::grpc::ServerContext* context, const ::octaneapi::ApiImage_desaturateRequest* request, ::google::protobuf::Empty* response);
    // / Resize this image
    virtual ::grpc::Status resize(::grpc::ServerContext* context, const ::octaneapi::ApiImage_resizeRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_createRequest* /*request*/, ::octaneapi::ApiImage_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::octaneapi::ApiImage_createRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiImage_createResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_create1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_create1() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_create1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_create1Request* /*request*/, ::octaneapi::ApiImage_create1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate1(::grpc::ServerContext* context, ::octaneapi::ApiImage_create1Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiImage_create1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_saveToFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_saveToFileRequest* /*request*/, ::octaneapi::ApiImage_saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveToFile(::grpc::ServerContext* context, ::octaneapi::ApiImage_saveToFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiImage_saveToFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loadFromFile() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_loadFromFileRequest* /*request*/, ::octaneapi::ApiImage_loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadFromFile(::grpc::ServerContext* context, ::octaneapi::ApiImage_loadFromFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiImage_loadFromFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loadFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loadFromMemory() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_loadFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_loadFromMemoryRequest* /*request*/, ::octaneapi::ApiImage_loadFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadFromMemory(::grpc::ServerContext* context, ::octaneapi::ApiImage_loadFromMemoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiImage_loadFromMemoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_destroy() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::octaneapi::ApiImage_destroyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_width : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_width() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_width() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status width(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_widthRequest* /*request*/, ::octaneapi::ApiImage_widthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwidth(::grpc::ServerContext* context, ::octaneapi::ApiImage_widthRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiImage_widthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_height : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_height() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_height() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status height(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_heightRequest* /*request*/, ::octaneapi::ApiImage_heightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestheight(::grpc::ServerContext* context, ::octaneapi::ApiImage_heightRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiImage_heightResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_pixelFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_pixelFormat() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_pixelFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pixelFormat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_pixelFormatRequest* /*request*/, ::octaneapi::ApiImage_pixelFormatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpixelFormat(::grpc::ServerContext* context, ::octaneapi::ApiImage_pixelFormatRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiImage_pixelFormatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isARGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isARGB() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_isARGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isARGB(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isARGBRequest* /*request*/, ::octaneapi::ApiImage_isARGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisARGB(::grpc::ServerContext* context, ::octaneapi::ApiImage_isARGBRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiImage_isARGBResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isRGB() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_isRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isRGB(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isRGBRequest* /*request*/, ::octaneapi::ApiImage_isRGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisRGB(::grpc::ServerContext* context, ::octaneapi::ApiImage_isRGBRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiImage_isRGBResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isSingleChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isSingleChannel() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_isSingleChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSingleChannel(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isSingleChannelRequest* /*request*/, ::octaneapi::ApiImage_isSingleChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisSingleChannel(::grpc::ServerContext* context, ::octaneapi::ApiImage_isSingleChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiImage_isSingleChannelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_hasAlphaChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_hasAlphaChannel() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_hasAlphaChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasAlphaChannel(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_hasAlphaChannelRequest* /*request*/, ::octaneapi::ApiImage_hasAlphaChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasAlphaChannel(::grpc::ServerContext* context, ::octaneapi::ApiImage_hasAlphaChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiImage_hasAlphaChannelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_clear() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclear(::grpc::ServerContext* context, ::octaneapi::ApiImage_clearRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_updateTo() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_updateTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateTo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_updateToRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateTo(::grpc::ServerContext* context, ::octaneapi::ApiImage_updateToRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_pixelAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_pixelAt() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_pixelAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pixelAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_pixelAtRequest* /*request*/, ::octaneapi::ApiImage_pixelAtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpixelAt(::grpc::ServerContext* context, ::octaneapi::ApiImage_pixelAtRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiImage_pixelAtResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setPixelAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setPixelAt() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_setPixelAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setPixelAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_setPixelAtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetPixelAt(::grpc::ServerContext* context, ::octaneapi::ApiImage_setPixelAtRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_multiplyAlphaAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_multiplyAlphaAt() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_multiplyAlphaAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status multiplyAlphaAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmultiplyAlphaAt(::grpc::ServerContext* context, ::octaneapi::ApiImage_multiplyAlphaAtRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_multiplyAllAlphas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_multiplyAllAlphas() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_multiplyAllAlphas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status multiplyAllAlphas(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmultiplyAllAlphas(::grpc::ServerContext* context, ::octaneapi::ApiImage_multiplyAllAlphasRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_desaturate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_desaturate() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_desaturate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status desaturate(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_desaturateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdesaturate(::grpc::ServerContext* context, ::octaneapi::ApiImage_desaturateRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_resize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_resize() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_resize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_resizeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestresize(::grpc::ServerContext* context, ::octaneapi::ApiImage_resizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_create<WithAsyncMethod_create1<WithAsyncMethod_saveToFile<WithAsyncMethod_loadFromFile<WithAsyncMethod_loadFromMemory<WithAsyncMethod_destroy<WithAsyncMethod_width<WithAsyncMethod_height<WithAsyncMethod_pixelFormat<WithAsyncMethod_isARGB<WithAsyncMethod_isRGB<WithAsyncMethod_isSingleChannel<WithAsyncMethod_hasAlphaChannel<WithAsyncMethod_clear<WithAsyncMethod_updateTo<WithAsyncMethod_pixelAt<WithAsyncMethod_setPixelAt<WithAsyncMethod_multiplyAlphaAt<WithAsyncMethod_multiplyAllAlphas<WithAsyncMethod_desaturate<WithAsyncMethod_resize<Service > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_create() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_createRequest, ::octaneapi::ApiImage_createResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_createRequest* request, ::octaneapi::ApiImage_createResponse* response) { return this->create(context, request, response); }));}
    void SetMessageAllocatorFor_create(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_createRequest, ::octaneapi::ApiImage_createResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_createRequest, ::octaneapi::ApiImage_createResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_createRequest* /*request*/, ::octaneapi::ApiImage_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_createRequest* /*request*/, ::octaneapi::ApiImage_createResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_create1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_create1() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_create1Request, ::octaneapi::ApiImage_create1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_create1Request* request, ::octaneapi::ApiImage_create1Response* response) { return this->create1(context, request, response); }));}
    void SetMessageAllocatorFor_create1(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_create1Request, ::octaneapi::ApiImage_create1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_create1Request, ::octaneapi::ApiImage_create1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_create1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_create1Request* /*request*/, ::octaneapi::ApiImage_create1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_create1Request* /*request*/, ::octaneapi::ApiImage_create1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_saveToFile() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_saveToFileRequest, ::octaneapi::ApiImage_saveToFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_saveToFileRequest* request, ::octaneapi::ApiImage_saveToFileResponse* response) { return this->saveToFile(context, request, response); }));}
    void SetMessageAllocatorFor_saveToFile(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_saveToFileRequest, ::octaneapi::ApiImage_saveToFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_saveToFileRequest, ::octaneapi::ApiImage_saveToFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_saveToFileRequest* /*request*/, ::octaneapi::ApiImage_saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* saveToFile(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_saveToFileRequest* /*request*/, ::octaneapi::ApiImage_saveToFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_loadFromFile() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_loadFromFileRequest, ::octaneapi::ApiImage_loadFromFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_loadFromFileRequest* request, ::octaneapi::ApiImage_loadFromFileResponse* response) { return this->loadFromFile(context, request, response); }));}
    void SetMessageAllocatorFor_loadFromFile(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_loadFromFileRequest, ::octaneapi::ApiImage_loadFromFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_loadFromFileRequest, ::octaneapi::ApiImage_loadFromFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_loadFromFileRequest* /*request*/, ::octaneapi::ApiImage_loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadFromFile(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_loadFromFileRequest* /*request*/, ::octaneapi::ApiImage_loadFromFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_loadFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_loadFromMemory() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_loadFromMemoryRequest, ::octaneapi::ApiImage_loadFromMemoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_loadFromMemoryRequest* request, ::octaneapi::ApiImage_loadFromMemoryResponse* response) { return this->loadFromMemory(context, request, response); }));}
    void SetMessageAllocatorFor_loadFromMemory(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_loadFromMemoryRequest, ::octaneapi::ApiImage_loadFromMemoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_loadFromMemoryRequest, ::octaneapi::ApiImage_loadFromMemoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_loadFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_loadFromMemoryRequest* /*request*/, ::octaneapi::ApiImage_loadFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadFromMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_loadFromMemoryRequest* /*request*/, ::octaneapi::ApiImage_loadFromMemoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_destroyRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_destroyRequest* request, ::google::protobuf::Empty* response) { return this->destroy(context, request, response); }));}
    void SetMessageAllocatorFor_destroy(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_destroyRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_destroyRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_width : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_width() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_widthRequest, ::octaneapi::ApiImage_widthResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_widthRequest* request, ::octaneapi::ApiImage_widthResponse* response) { return this->width(context, request, response); }));}
    void SetMessageAllocatorFor_width(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_widthRequest, ::octaneapi::ApiImage_widthResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_widthRequest, ::octaneapi::ApiImage_widthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_width() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status width(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_widthRequest* /*request*/, ::octaneapi::ApiImage_widthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* width(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_widthRequest* /*request*/, ::octaneapi::ApiImage_widthResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_height : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_height() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_heightRequest, ::octaneapi::ApiImage_heightResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_heightRequest* request, ::octaneapi::ApiImage_heightResponse* response) { return this->height(context, request, response); }));}
    void SetMessageAllocatorFor_height(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_heightRequest, ::octaneapi::ApiImage_heightResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_heightRequest, ::octaneapi::ApiImage_heightResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_height() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status height(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_heightRequest* /*request*/, ::octaneapi::ApiImage_heightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* height(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_heightRequest* /*request*/, ::octaneapi::ApiImage_heightResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_pixelFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_pixelFormat() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_pixelFormatRequest, ::octaneapi::ApiImage_pixelFormatResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_pixelFormatRequest* request, ::octaneapi::ApiImage_pixelFormatResponse* response) { return this->pixelFormat(context, request, response); }));}
    void SetMessageAllocatorFor_pixelFormat(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_pixelFormatRequest, ::octaneapi::ApiImage_pixelFormatResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_pixelFormatRequest, ::octaneapi::ApiImage_pixelFormatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_pixelFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pixelFormat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_pixelFormatRequest* /*request*/, ::octaneapi::ApiImage_pixelFormatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* pixelFormat(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_pixelFormatRequest* /*request*/, ::octaneapi::ApiImage_pixelFormatResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isARGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isARGB() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_isARGBRequest, ::octaneapi::ApiImage_isARGBResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_isARGBRequest* request, ::octaneapi::ApiImage_isARGBResponse* response) { return this->isARGB(context, request, response); }));}
    void SetMessageAllocatorFor_isARGB(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_isARGBRequest, ::octaneapi::ApiImage_isARGBResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_isARGBRequest, ::octaneapi::ApiImage_isARGBResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isARGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isARGB(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isARGBRequest* /*request*/, ::octaneapi::ApiImage_isARGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isARGB(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_isARGBRequest* /*request*/, ::octaneapi::ApiImage_isARGBResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isRGB() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_isRGBRequest, ::octaneapi::ApiImage_isRGBResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_isRGBRequest* request, ::octaneapi::ApiImage_isRGBResponse* response) { return this->isRGB(context, request, response); }));}
    void SetMessageAllocatorFor_isRGB(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_isRGBRequest, ::octaneapi::ApiImage_isRGBResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_isRGBRequest, ::octaneapi::ApiImage_isRGBResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isRGB(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isRGBRequest* /*request*/, ::octaneapi::ApiImage_isRGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isRGB(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_isRGBRequest* /*request*/, ::octaneapi::ApiImage_isRGBResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_isSingleChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isSingleChannel() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_isSingleChannelRequest, ::octaneapi::ApiImage_isSingleChannelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_isSingleChannelRequest* request, ::octaneapi::ApiImage_isSingleChannelResponse* response) { return this->isSingleChannel(context, request, response); }));}
    void SetMessageAllocatorFor_isSingleChannel(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_isSingleChannelRequest, ::octaneapi::ApiImage_isSingleChannelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_isSingleChannelRequest, ::octaneapi::ApiImage_isSingleChannelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isSingleChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSingleChannel(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isSingleChannelRequest* /*request*/, ::octaneapi::ApiImage_isSingleChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isSingleChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_isSingleChannelRequest* /*request*/, ::octaneapi::ApiImage_isSingleChannelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_hasAlphaChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_hasAlphaChannel() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_hasAlphaChannelRequest, ::octaneapi::ApiImage_hasAlphaChannelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_hasAlphaChannelRequest* request, ::octaneapi::ApiImage_hasAlphaChannelResponse* response) { return this->hasAlphaChannel(context, request, response); }));}
    void SetMessageAllocatorFor_hasAlphaChannel(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_hasAlphaChannelRequest, ::octaneapi::ApiImage_hasAlphaChannelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_hasAlphaChannelRequest, ::octaneapi::ApiImage_hasAlphaChannelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_hasAlphaChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasAlphaChannel(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_hasAlphaChannelRequest* /*request*/, ::octaneapi::ApiImage_hasAlphaChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasAlphaChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_hasAlphaChannelRequest* /*request*/, ::octaneapi::ApiImage_hasAlphaChannelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_clear() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_clearRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_clearRequest* request, ::google::protobuf::Empty* response) { return this->clear(context, request, response); }));}
    void SetMessageAllocatorFor_clear(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_clearRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_clearRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clear(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_updateTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_updateTo() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_updateToRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_updateToRequest* request, ::google::protobuf::Empty* response) { return this->updateTo(context, request, response); }));}
    void SetMessageAllocatorFor_updateTo(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_updateToRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_updateToRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_updateTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateTo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_updateToRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updateTo(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_updateToRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_pixelAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_pixelAt() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_pixelAtRequest, ::octaneapi::ApiImage_pixelAtResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_pixelAtRequest* request, ::octaneapi::ApiImage_pixelAtResponse* response) { return this->pixelAt(context, request, response); }));}
    void SetMessageAllocatorFor_pixelAt(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_pixelAtRequest, ::octaneapi::ApiImage_pixelAtResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_pixelAtRequest, ::octaneapi::ApiImage_pixelAtResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_pixelAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pixelAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_pixelAtRequest* /*request*/, ::octaneapi::ApiImage_pixelAtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* pixelAt(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_pixelAtRequest* /*request*/, ::octaneapi::ApiImage_pixelAtResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setPixelAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setPixelAt() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_setPixelAtRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_setPixelAtRequest* request, ::google::protobuf::Empty* response) { return this->setPixelAt(context, request, response); }));}
    void SetMessageAllocatorFor_setPixelAt(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_setPixelAtRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_setPixelAtRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setPixelAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setPixelAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_setPixelAtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setPixelAt(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_setPixelAtRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_multiplyAlphaAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_multiplyAlphaAt() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_multiplyAlphaAtRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* request, ::google::protobuf::Empty* response) { return this->multiplyAlphaAt(context, request, response); }));}
    void SetMessageAllocatorFor_multiplyAlphaAt(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_multiplyAlphaAtRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_multiplyAlphaAtRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_multiplyAlphaAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status multiplyAlphaAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* multiplyAlphaAt(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_multiplyAllAlphas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_multiplyAllAlphas() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_multiplyAllAlphasRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* request, ::google::protobuf::Empty* response) { return this->multiplyAllAlphas(context, request, response); }));}
    void SetMessageAllocatorFor_multiplyAllAlphas(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_multiplyAllAlphasRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_multiplyAllAlphasRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_multiplyAllAlphas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status multiplyAllAlphas(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* multiplyAllAlphas(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_desaturate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_desaturate() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_desaturateRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_desaturateRequest* request, ::google::protobuf::Empty* response) { return this->desaturate(context, request, response); }));}
    void SetMessageAllocatorFor_desaturate(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_desaturateRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_desaturateRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_desaturate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status desaturate(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_desaturateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* desaturate(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_desaturateRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_resize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_resize() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_resizeRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiImage_resizeRequest* request, ::google::protobuf::Empty* response) { return this->resize(context, request, response); }));}
    void SetMessageAllocatorFor_resize(
        ::grpc::MessageAllocator< ::octaneapi::ApiImage_resizeRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiImage_resizeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_resize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_resizeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* resize(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiImage_resizeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_create<WithCallbackMethod_create1<WithCallbackMethod_saveToFile<WithCallbackMethod_loadFromFile<WithCallbackMethod_loadFromMemory<WithCallbackMethod_destroy<WithCallbackMethod_width<WithCallbackMethod_height<WithCallbackMethod_pixelFormat<WithCallbackMethod_isARGB<WithCallbackMethod_isRGB<WithCallbackMethod_isSingleChannel<WithCallbackMethod_hasAlphaChannel<WithCallbackMethod_clear<WithCallbackMethod_updateTo<WithCallbackMethod_pixelAt<WithCallbackMethod_setPixelAt<WithCallbackMethod_multiplyAlphaAt<WithCallbackMethod_multiplyAllAlphas<WithCallbackMethod_desaturate<WithCallbackMethod_resize<Service > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_createRequest* /*request*/, ::octaneapi::ApiImage_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_create1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_create1() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_create1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_create1Request* /*request*/, ::octaneapi::ApiImage_create1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_saveToFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_saveToFileRequest* /*request*/, ::octaneapi::ApiImage_saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loadFromFile() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_loadFromFileRequest* /*request*/, ::octaneapi::ApiImage_loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loadFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loadFromMemory() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_loadFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_loadFromMemoryRequest* /*request*/, ::octaneapi::ApiImage_loadFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_destroy() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_width : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_width() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_width() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status width(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_widthRequest* /*request*/, ::octaneapi::ApiImage_widthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_height : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_height() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_height() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status height(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_heightRequest* /*request*/, ::octaneapi::ApiImage_heightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_pixelFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_pixelFormat() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_pixelFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pixelFormat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_pixelFormatRequest* /*request*/, ::octaneapi::ApiImage_pixelFormatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isARGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isARGB() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_isARGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isARGB(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isARGBRequest* /*request*/, ::octaneapi::ApiImage_isARGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isRGB() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_isRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isRGB(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isRGBRequest* /*request*/, ::octaneapi::ApiImage_isRGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isSingleChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isSingleChannel() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_isSingleChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSingleChannel(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isSingleChannelRequest* /*request*/, ::octaneapi::ApiImage_isSingleChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_hasAlphaChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_hasAlphaChannel() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_hasAlphaChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasAlphaChannel(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_hasAlphaChannelRequest* /*request*/, ::octaneapi::ApiImage_hasAlphaChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_clear() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_updateTo() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_updateTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateTo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_updateToRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_pixelAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_pixelAt() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_pixelAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pixelAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_pixelAtRequest* /*request*/, ::octaneapi::ApiImage_pixelAtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setPixelAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setPixelAt() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_setPixelAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setPixelAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_setPixelAtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_multiplyAlphaAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_multiplyAlphaAt() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_multiplyAlphaAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status multiplyAlphaAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_multiplyAllAlphas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_multiplyAllAlphas() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_multiplyAllAlphas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status multiplyAllAlphas(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_desaturate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_desaturate() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_desaturate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status desaturate(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_desaturateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_resize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_resize() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_resize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_resizeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_createRequest* /*request*/, ::octaneapi::ApiImage_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_create1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_create1() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_create1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_create1Request* /*request*/, ::octaneapi::ApiImage_create1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_saveToFile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_saveToFileRequest* /*request*/, ::octaneapi::ApiImage_saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveToFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loadFromFile() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_loadFromFileRequest* /*request*/, ::octaneapi::ApiImage_loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadFromFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_loadFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loadFromMemory() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_loadFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_loadFromMemoryRequest* /*request*/, ::octaneapi::ApiImage_loadFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadFromMemory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_destroy() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_width : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_width() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_width() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status width(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_widthRequest* /*request*/, ::octaneapi::ApiImage_widthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwidth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_height : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_height() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_height() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status height(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_heightRequest* /*request*/, ::octaneapi::ApiImage_heightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestheight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_pixelFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_pixelFormat() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_pixelFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pixelFormat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_pixelFormatRequest* /*request*/, ::octaneapi::ApiImage_pixelFormatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpixelFormat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isARGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isARGB() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_isARGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isARGB(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isARGBRequest* /*request*/, ::octaneapi::ApiImage_isARGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisARGB(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isRGB() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_isRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isRGB(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isRGBRequest* /*request*/, ::octaneapi::ApiImage_isRGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisRGB(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isSingleChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isSingleChannel() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_isSingleChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSingleChannel(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isSingleChannelRequest* /*request*/, ::octaneapi::ApiImage_isSingleChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisSingleChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_hasAlphaChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_hasAlphaChannel() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_hasAlphaChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasAlphaChannel(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_hasAlphaChannelRequest* /*request*/, ::octaneapi::ApiImage_hasAlphaChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasAlphaChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_clear() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclear(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updateTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_updateTo() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_updateTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateTo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_updateToRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateTo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_pixelAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_pixelAt() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_pixelAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pixelAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_pixelAtRequest* /*request*/, ::octaneapi::ApiImage_pixelAtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpixelAt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setPixelAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setPixelAt() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_setPixelAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setPixelAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_setPixelAtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetPixelAt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_multiplyAlphaAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_multiplyAlphaAt() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_multiplyAlphaAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status multiplyAlphaAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmultiplyAlphaAt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_multiplyAllAlphas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_multiplyAllAlphas() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_multiplyAllAlphas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status multiplyAllAlphas(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmultiplyAllAlphas(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_desaturate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_desaturate() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_desaturate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status desaturate(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_desaturateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdesaturate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_resize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_resize() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_resize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_resizeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestresize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_create() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->create(context, request, response); }));
    }
    ~WithRawCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_createRequest* /*request*/, ::octaneapi::ApiImage_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_create1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_create1() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->create1(context, request, response); }));
    }
    ~WithRawCallbackMethod_create1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_create1Request* /*request*/, ::octaneapi::ApiImage_create1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_saveToFile() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->saveToFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_saveToFileRequest* /*request*/, ::octaneapi::ApiImage_saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* saveToFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_loadFromFile() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loadFromFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_loadFromFileRequest* /*request*/, ::octaneapi::ApiImage_loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadFromFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_loadFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_loadFromMemory() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loadFromMemory(context, request, response); }));
    }
    ~WithRawCallbackMethod_loadFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_loadFromMemoryRequest* /*request*/, ::octaneapi::ApiImage_loadFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadFromMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->destroy(context, request, response); }));
    }
    ~WithRawCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_width : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_width() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->width(context, request, response); }));
    }
    ~WithRawCallbackMethod_width() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status width(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_widthRequest* /*request*/, ::octaneapi::ApiImage_widthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* width(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_height : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_height() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->height(context, request, response); }));
    }
    ~WithRawCallbackMethod_height() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status height(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_heightRequest* /*request*/, ::octaneapi::ApiImage_heightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* height(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_pixelFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_pixelFormat() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->pixelFormat(context, request, response); }));
    }
    ~WithRawCallbackMethod_pixelFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pixelFormat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_pixelFormatRequest* /*request*/, ::octaneapi::ApiImage_pixelFormatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* pixelFormat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isARGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isARGB() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isARGB(context, request, response); }));
    }
    ~WithRawCallbackMethod_isARGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isARGB(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isARGBRequest* /*request*/, ::octaneapi::ApiImage_isARGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isARGB(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isRGB() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isRGB(context, request, response); }));
    }
    ~WithRawCallbackMethod_isRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isRGB(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isRGBRequest* /*request*/, ::octaneapi::ApiImage_isRGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isRGB(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isSingleChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isSingleChannel() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isSingleChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_isSingleChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSingleChannel(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isSingleChannelRequest* /*request*/, ::octaneapi::ApiImage_isSingleChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isSingleChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_hasAlphaChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_hasAlphaChannel() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->hasAlphaChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_hasAlphaChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasAlphaChannel(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_hasAlphaChannelRequest* /*request*/, ::octaneapi::ApiImage_hasAlphaChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasAlphaChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_clear() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->clear(context, request, response); }));
    }
    ~WithRawCallbackMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clear(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_updateTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_updateTo() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->updateTo(context, request, response); }));
    }
    ~WithRawCallbackMethod_updateTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateTo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_updateToRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updateTo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_pixelAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_pixelAt() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->pixelAt(context, request, response); }));
    }
    ~WithRawCallbackMethod_pixelAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pixelAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_pixelAtRequest* /*request*/, ::octaneapi::ApiImage_pixelAtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* pixelAt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setPixelAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setPixelAt() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setPixelAt(context, request, response); }));
    }
    ~WithRawCallbackMethod_setPixelAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setPixelAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_setPixelAtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setPixelAt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_multiplyAlphaAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_multiplyAlphaAt() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->multiplyAlphaAt(context, request, response); }));
    }
    ~WithRawCallbackMethod_multiplyAlphaAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status multiplyAlphaAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* multiplyAlphaAt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_multiplyAllAlphas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_multiplyAllAlphas() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->multiplyAllAlphas(context, request, response); }));
    }
    ~WithRawCallbackMethod_multiplyAllAlphas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status multiplyAllAlphas(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* multiplyAllAlphas(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_desaturate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_desaturate() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->desaturate(context, request, response); }));
    }
    ~WithRawCallbackMethod_desaturate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status desaturate(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_desaturateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* desaturate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_resize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_resize() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->resize(context, request, response); }));
    }
    ~WithRawCallbackMethod_resize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_resizeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* resize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_createRequest, ::octaneapi::ApiImage_createResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_createRequest, ::octaneapi::ApiImage_createResponse>* streamer) {
                       return this->Streamedcreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_createRequest* /*request*/, ::octaneapi::ApiImage_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_createRequest,::octaneapi::ApiImage_createResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_create1() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_create1Request, ::octaneapi::ApiImage_create1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_create1Request, ::octaneapi::ApiImage_create1Response>* streamer) {
                       return this->Streamedcreate1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_create1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_create1Request* /*request*/, ::octaneapi::ApiImage_create1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_create1Request,::octaneapi::ApiImage_create1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_saveToFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_saveToFileRequest, ::octaneapi::ApiImage_saveToFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_saveToFileRequest, ::octaneapi::ApiImage_saveToFileResponse>* streamer) {
                       return this->StreamedsaveToFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_saveToFileRequest* /*request*/, ::octaneapi::ApiImage_saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsaveToFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_saveToFileRequest,::octaneapi::ApiImage_saveToFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loadFromFile() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_loadFromFileRequest, ::octaneapi::ApiImage_loadFromFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_loadFromFileRequest, ::octaneapi::ApiImage_loadFromFileResponse>* streamer) {
                       return this->StreamedloadFromFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_loadFromFileRequest* /*request*/, ::octaneapi::ApiImage_loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloadFromFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_loadFromFileRequest,::octaneapi::ApiImage_loadFromFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loadFromMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loadFromMemory() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_loadFromMemoryRequest, ::octaneapi::ApiImage_loadFromMemoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_loadFromMemoryRequest, ::octaneapi::ApiImage_loadFromMemoryResponse>* streamer) {
                       return this->StreamedloadFromMemory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loadFromMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loadFromMemory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_loadFromMemoryRequest* /*request*/, ::octaneapi::ApiImage_loadFromMemoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloadFromMemory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_loadFromMemoryRequest,::octaneapi::ApiImage_loadFromMemoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_destroy() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_destroyRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_destroyRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streameddestroy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddestroy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_destroyRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_width : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_width() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_widthRequest, ::octaneapi::ApiImage_widthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_widthRequest, ::octaneapi::ApiImage_widthResponse>* streamer) {
                       return this->Streamedwidth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_width() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status width(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_widthRequest* /*request*/, ::octaneapi::ApiImage_widthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedwidth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_widthRequest,::octaneapi::ApiImage_widthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_height : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_height() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_heightRequest, ::octaneapi::ApiImage_heightResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_heightRequest, ::octaneapi::ApiImage_heightResponse>* streamer) {
                       return this->Streamedheight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_height() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status height(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_heightRequest* /*request*/, ::octaneapi::ApiImage_heightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedheight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_heightRequest,::octaneapi::ApiImage_heightResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_pixelFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_pixelFormat() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_pixelFormatRequest, ::octaneapi::ApiImage_pixelFormatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_pixelFormatRequest, ::octaneapi::ApiImage_pixelFormatResponse>* streamer) {
                       return this->StreamedpixelFormat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_pixelFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status pixelFormat(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_pixelFormatRequest* /*request*/, ::octaneapi::ApiImage_pixelFormatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpixelFormat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_pixelFormatRequest,::octaneapi::ApiImage_pixelFormatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isARGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isARGB() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_isARGBRequest, ::octaneapi::ApiImage_isARGBResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_isARGBRequest, ::octaneapi::ApiImage_isARGBResponse>* streamer) {
                       return this->StreamedisARGB(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isARGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isARGB(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isARGBRequest* /*request*/, ::octaneapi::ApiImage_isARGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisARGB(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_isARGBRequest,::octaneapi::ApiImage_isARGBResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isRGB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isRGB() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_isRGBRequest, ::octaneapi::ApiImage_isRGBResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_isRGBRequest, ::octaneapi::ApiImage_isRGBResponse>* streamer) {
                       return this->StreamedisRGB(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isRGB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isRGB(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isRGBRequest* /*request*/, ::octaneapi::ApiImage_isRGBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisRGB(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_isRGBRequest,::octaneapi::ApiImage_isRGBResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isSingleChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isSingleChannel() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_isSingleChannelRequest, ::octaneapi::ApiImage_isSingleChannelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_isSingleChannelRequest, ::octaneapi::ApiImage_isSingleChannelResponse>* streamer) {
                       return this->StreamedisSingleChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isSingleChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isSingleChannel(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_isSingleChannelRequest* /*request*/, ::octaneapi::ApiImage_isSingleChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisSingleChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_isSingleChannelRequest,::octaneapi::ApiImage_isSingleChannelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_hasAlphaChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_hasAlphaChannel() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_hasAlphaChannelRequest, ::octaneapi::ApiImage_hasAlphaChannelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_hasAlphaChannelRequest, ::octaneapi::ApiImage_hasAlphaChannelResponse>* streamer) {
                       return this->StreamedhasAlphaChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_hasAlphaChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status hasAlphaChannel(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_hasAlphaChannelRequest* /*request*/, ::octaneapi::ApiImage_hasAlphaChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedhasAlphaChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_hasAlphaChannelRequest,::octaneapi::ApiImage_hasAlphaChannelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_clear() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_clearRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_clearRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedclear(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status clear(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_clearRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclear(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_clearRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updateTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_updateTo() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_updateToRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_updateToRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedupdateTo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_updateTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updateTo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_updateToRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdateTo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_updateToRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_pixelAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_pixelAt() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_pixelAtRequest, ::octaneapi::ApiImage_pixelAtResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_pixelAtRequest, ::octaneapi::ApiImage_pixelAtResponse>* streamer) {
                       return this->StreamedpixelAt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_pixelAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status pixelAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_pixelAtRequest* /*request*/, ::octaneapi::ApiImage_pixelAtResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpixelAt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_pixelAtRequest,::octaneapi::ApiImage_pixelAtResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setPixelAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setPixelAt() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_setPixelAtRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_setPixelAtRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetPixelAt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setPixelAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setPixelAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_setPixelAtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetPixelAt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_setPixelAtRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_multiplyAlphaAt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_multiplyAlphaAt() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_multiplyAlphaAtRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_multiplyAlphaAtRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedmultiplyAlphaAt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_multiplyAlphaAt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status multiplyAlphaAt(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_multiplyAlphaAtRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedmultiplyAlphaAt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_multiplyAlphaAtRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_multiplyAllAlphas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_multiplyAllAlphas() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_multiplyAllAlphasRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_multiplyAllAlphasRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedmultiplyAllAlphas(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_multiplyAllAlphas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status multiplyAllAlphas(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_multiplyAllAlphasRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedmultiplyAllAlphas(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_multiplyAllAlphasRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_desaturate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_desaturate() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_desaturateRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_desaturateRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streameddesaturate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_desaturate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status desaturate(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_desaturateRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddesaturate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_desaturateRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_resize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_resize() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiImage_resizeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiImage_resizeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedresize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_resize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status resize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiImage_resizeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedresize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiImage_resizeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_create1<WithStreamedUnaryMethod_saveToFile<WithStreamedUnaryMethod_loadFromFile<WithStreamedUnaryMethod_loadFromMemory<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_width<WithStreamedUnaryMethod_height<WithStreamedUnaryMethod_pixelFormat<WithStreamedUnaryMethod_isARGB<WithStreamedUnaryMethod_isRGB<WithStreamedUnaryMethod_isSingleChannel<WithStreamedUnaryMethod_hasAlphaChannel<WithStreamedUnaryMethod_clear<WithStreamedUnaryMethod_updateTo<WithStreamedUnaryMethod_pixelAt<WithStreamedUnaryMethod_setPixelAt<WithStreamedUnaryMethod_multiplyAlphaAt<WithStreamedUnaryMethod_multiplyAllAlphas<WithStreamedUnaryMethod_desaturate<WithStreamedUnaryMethod_resize<Service > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_create1<WithStreamedUnaryMethod_saveToFile<WithStreamedUnaryMethod_loadFromFile<WithStreamedUnaryMethod_loadFromMemory<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_width<WithStreamedUnaryMethod_height<WithStreamedUnaryMethod_pixelFormat<WithStreamedUnaryMethod_isARGB<WithStreamedUnaryMethod_isRGB<WithStreamedUnaryMethod_isSingleChannel<WithStreamedUnaryMethod_hasAlphaChannel<WithStreamedUnaryMethod_clear<WithStreamedUnaryMethod_updateTo<WithStreamedUnaryMethod_pixelAt<WithStreamedUnaryMethod_setPixelAt<WithStreamedUnaryMethod_multiplyAlphaAt<WithStreamedUnaryMethod_multiplyAllAlphas<WithStreamedUnaryMethod_desaturate<WithStreamedUnaryMethod_resize<Service > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apiimage_2eproto__INCLUDED
