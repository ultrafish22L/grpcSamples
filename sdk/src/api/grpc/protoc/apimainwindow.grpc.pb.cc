// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apimainwindow.proto

#include "apimainwindow.pb.h"
#include "apimainwindow.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiMainWindowService_method_names[] = {
  "/octaneapi.ApiMainWindowService/fetchOrCreateInstance",
  "/octaneapi.ApiMainWindowService/runDispatchLoopUntil",
  "/octaneapi.ApiMainWindowService/setDpi",
  "/octaneapi.ApiMainWindowService/addContentComponent",
  "/octaneapi.ApiMainWindowService/projectWorkspace",
  "/octaneapi.ApiMainWindowService/projectWorkspace1",
  "/octaneapi.ApiMainWindowService/show",
  "/octaneapi.ApiMainWindowService/hide",
  "/octaneapi.ApiMainWindowService/visible",
  "/octaneapi.ApiMainWindowService/setDefaultGraph",
  "/octaneapi.ApiMainWindowService/defaultGraph",
};

std::unique_ptr< ApiMainWindowService::Stub> ApiMainWindowService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiMainWindowService::Stub> stub(new ApiMainWindowService::Stub(channel, options));
  return stub;
}

ApiMainWindowService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_fetchOrCreateInstance_(ApiMainWindowService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_runDispatchLoopUntil_(ApiMainWindowService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setDpi_(ApiMainWindowService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addContentComponent_(ApiMainWindowService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_projectWorkspace_(ApiMainWindowService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_projectWorkspace1_(ApiMainWindowService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_show_(ApiMainWindowService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hide_(ApiMainWindowService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_visible_(ApiMainWindowService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setDefaultGraph_(ApiMainWindowService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_defaultGraph_(ApiMainWindowService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiMainWindowService::Stub::fetchOrCreateInstance(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_fetchOrCreateInstanceRequest& request, ::octaneapi::ApiMainWindow_fetchOrCreateInstanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMainWindow_fetchOrCreateInstanceRequest, ::octaneapi::ApiMainWindow_fetchOrCreateInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_fetchOrCreateInstance_, context, request, response);
}

void ApiMainWindowService::Stub::async::fetchOrCreateInstance(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_fetchOrCreateInstanceRequest* request, ::octaneapi::ApiMainWindow_fetchOrCreateInstanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMainWindow_fetchOrCreateInstanceRequest, ::octaneapi::ApiMainWindow_fetchOrCreateInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_fetchOrCreateInstance_, context, request, response, std::move(f));
}

void ApiMainWindowService::Stub::async::fetchOrCreateInstance(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_fetchOrCreateInstanceRequest* request, ::octaneapi::ApiMainWindow_fetchOrCreateInstanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_fetchOrCreateInstance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMainWindow_fetchOrCreateInstanceResponse>* ApiMainWindowService::Stub::PrepareAsyncfetchOrCreateInstanceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_fetchOrCreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMainWindow_fetchOrCreateInstanceResponse, ::octaneapi::ApiMainWindow_fetchOrCreateInstanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_fetchOrCreateInstance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMainWindow_fetchOrCreateInstanceResponse>* ApiMainWindowService::Stub::AsyncfetchOrCreateInstanceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_fetchOrCreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfetchOrCreateInstanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMainWindowService::Stub::runDispatchLoopUntil(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_runDispatchLoopUntilRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMainWindow_runDispatchLoopUntilRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_runDispatchLoopUntil_, context, request, response);
}

void ApiMainWindowService::Stub::async::runDispatchLoopUntil(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_runDispatchLoopUntilRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMainWindow_runDispatchLoopUntilRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_runDispatchLoopUntil_, context, request, response, std::move(f));
}

void ApiMainWindowService::Stub::async::runDispatchLoopUntil(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_runDispatchLoopUntilRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_runDispatchLoopUntil_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiMainWindowService::Stub::PrepareAsyncrunDispatchLoopUntilRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_runDispatchLoopUntilRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiMainWindow_runDispatchLoopUntilRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_runDispatchLoopUntil_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiMainWindowService::Stub::AsyncrunDispatchLoopUntilRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_runDispatchLoopUntilRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrunDispatchLoopUntilRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMainWindowService::Stub::setDpi(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_setDpiRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMainWindow_setDpiRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setDpi_, context, request, response);
}

void ApiMainWindowService::Stub::async::setDpi(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_setDpiRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMainWindow_setDpiRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDpi_, context, request, response, std::move(f));
}

void ApiMainWindowService::Stub::async::setDpi(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_setDpiRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDpi_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiMainWindowService::Stub::PrepareAsyncsetDpiRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_setDpiRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiMainWindow_setDpiRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setDpi_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiMainWindowService::Stub::AsyncsetDpiRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_setDpiRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetDpiRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMainWindowService::Stub::addContentComponent(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_addContentComponentRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMainWindow_addContentComponentRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addContentComponent_, context, request, response);
}

void ApiMainWindowService::Stub::async::addContentComponent(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_addContentComponentRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMainWindow_addContentComponentRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addContentComponent_, context, request, response, std::move(f));
}

void ApiMainWindowService::Stub::async::addContentComponent(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_addContentComponentRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addContentComponent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiMainWindowService::Stub::PrepareAsyncaddContentComponentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_addContentComponentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiMainWindow_addContentComponentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addContentComponent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiMainWindowService::Stub::AsyncaddContentComponentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_addContentComponentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddContentComponentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMainWindowService::Stub::projectWorkspace(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_projectWorkspaceRequest& request, ::octaneapi::ApiMainWindow_projectWorkspaceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMainWindow_projectWorkspaceRequest, ::octaneapi::ApiMainWindow_projectWorkspaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_projectWorkspace_, context, request, response);
}

void ApiMainWindowService::Stub::async::projectWorkspace(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_projectWorkspaceRequest* request, ::octaneapi::ApiMainWindow_projectWorkspaceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMainWindow_projectWorkspaceRequest, ::octaneapi::ApiMainWindow_projectWorkspaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_projectWorkspace_, context, request, response, std::move(f));
}

void ApiMainWindowService::Stub::async::projectWorkspace(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_projectWorkspaceRequest* request, ::octaneapi::ApiMainWindow_projectWorkspaceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_projectWorkspace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMainWindow_projectWorkspaceResponse>* ApiMainWindowService::Stub::PrepareAsyncprojectWorkspaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_projectWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMainWindow_projectWorkspaceResponse, ::octaneapi::ApiMainWindow_projectWorkspaceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_projectWorkspace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMainWindow_projectWorkspaceResponse>* ApiMainWindowService::Stub::AsyncprojectWorkspaceRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_projectWorkspaceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncprojectWorkspaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMainWindowService::Stub::projectWorkspace1(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_projectWorkspace1Request& request, ::octaneapi::ApiMainWindow_projectWorkspace1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMainWindow_projectWorkspace1Request, ::octaneapi::ApiMainWindow_projectWorkspace1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_projectWorkspace1_, context, request, response);
}

void ApiMainWindowService::Stub::async::projectWorkspace1(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_projectWorkspace1Request* request, ::octaneapi::ApiMainWindow_projectWorkspace1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMainWindow_projectWorkspace1Request, ::octaneapi::ApiMainWindow_projectWorkspace1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_projectWorkspace1_, context, request, response, std::move(f));
}

void ApiMainWindowService::Stub::async::projectWorkspace1(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_projectWorkspace1Request* request, ::octaneapi::ApiMainWindow_projectWorkspace1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_projectWorkspace1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMainWindow_projectWorkspace1Response>* ApiMainWindowService::Stub::PrepareAsyncprojectWorkspace1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_projectWorkspace1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMainWindow_projectWorkspace1Response, ::octaneapi::ApiMainWindow_projectWorkspace1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_projectWorkspace1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMainWindow_projectWorkspace1Response>* ApiMainWindowService::Stub::AsyncprojectWorkspace1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_projectWorkspace1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncprojectWorkspace1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMainWindowService::Stub::show(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_showRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMainWindow_showRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_show_, context, request, response);
}

void ApiMainWindowService::Stub::async::show(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_showRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMainWindow_showRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_show_, context, request, response, std::move(f));
}

void ApiMainWindowService::Stub::async::show(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_showRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_show_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiMainWindowService::Stub::PrepareAsyncshowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_showRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiMainWindow_showRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_show_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiMainWindowService::Stub::AsyncshowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_showRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncshowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMainWindowService::Stub::hide(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_hideRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMainWindow_hideRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hide_, context, request, response);
}

void ApiMainWindowService::Stub::async::hide(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_hideRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMainWindow_hideRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hide_, context, request, response, std::move(f));
}

void ApiMainWindowService::Stub::async::hide(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_hideRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hide_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiMainWindowService::Stub::PrepareAsynchideRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_hideRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiMainWindow_hideRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hide_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiMainWindowService::Stub::AsynchideRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_hideRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchideRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMainWindowService::Stub::visible(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_visibleRequest& request, ::octaneapi::ApiMainWindow_visibleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMainWindow_visibleRequest, ::octaneapi::ApiMainWindow_visibleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_visible_, context, request, response);
}

void ApiMainWindowService::Stub::async::visible(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_visibleRequest* request, ::octaneapi::ApiMainWindow_visibleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMainWindow_visibleRequest, ::octaneapi::ApiMainWindow_visibleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_visible_, context, request, response, std::move(f));
}

void ApiMainWindowService::Stub::async::visible(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_visibleRequest* request, ::octaneapi::ApiMainWindow_visibleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_visible_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMainWindow_visibleResponse>* ApiMainWindowService::Stub::PrepareAsyncvisibleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_visibleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMainWindow_visibleResponse, ::octaneapi::ApiMainWindow_visibleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_visible_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMainWindow_visibleResponse>* ApiMainWindowService::Stub::AsyncvisibleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_visibleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncvisibleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMainWindowService::Stub::setDefaultGraph(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_setDefaultGraphRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMainWindow_setDefaultGraphRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setDefaultGraph_, context, request, response);
}

void ApiMainWindowService::Stub::async::setDefaultGraph(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_setDefaultGraphRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMainWindow_setDefaultGraphRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDefaultGraph_, context, request, response, std::move(f));
}

void ApiMainWindowService::Stub::async::setDefaultGraph(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_setDefaultGraphRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDefaultGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiMainWindowService::Stub::PrepareAsyncsetDefaultGraphRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_setDefaultGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiMainWindow_setDefaultGraphRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setDefaultGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiMainWindowService::Stub::AsyncsetDefaultGraphRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_setDefaultGraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetDefaultGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiMainWindowService::Stub::defaultGraph(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_defaultGraphRequest& request, ::octaneapi::ApiMainWindow_defaultGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiMainWindow_defaultGraphRequest, ::octaneapi::ApiMainWindow_defaultGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_defaultGraph_, context, request, response);
}

void ApiMainWindowService::Stub::async::defaultGraph(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_defaultGraphRequest* request, ::octaneapi::ApiMainWindow_defaultGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiMainWindow_defaultGraphRequest, ::octaneapi::ApiMainWindow_defaultGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_defaultGraph_, context, request, response, std::move(f));
}

void ApiMainWindowService::Stub::async::defaultGraph(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_defaultGraphRequest* request, ::octaneapi::ApiMainWindow_defaultGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_defaultGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMainWindow_defaultGraphResponse>* ApiMainWindowService::Stub::PrepareAsyncdefaultGraphRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_defaultGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiMainWindow_defaultGraphResponse, ::octaneapi::ApiMainWindow_defaultGraphRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_defaultGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiMainWindow_defaultGraphResponse>* ApiMainWindowService::Stub::AsyncdefaultGraphRaw(::grpc::ClientContext* context, const ::octaneapi::ApiMainWindow_defaultGraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdefaultGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiMainWindowService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMainWindowService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMainWindowService::Service, ::octaneapi::ApiMainWindow_fetchOrCreateInstanceRequest, ::octaneapi::ApiMainWindow_fetchOrCreateInstanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMainWindowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMainWindow_fetchOrCreateInstanceRequest* req,
             ::octaneapi::ApiMainWindow_fetchOrCreateInstanceResponse* resp) {
               return service->fetchOrCreateInstance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMainWindowService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMainWindowService::Service, ::octaneapi::ApiMainWindow_runDispatchLoopUntilRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMainWindowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMainWindow_runDispatchLoopUntilRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->runDispatchLoopUntil(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMainWindowService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMainWindowService::Service, ::octaneapi::ApiMainWindow_setDpiRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMainWindowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMainWindow_setDpiRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setDpi(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMainWindowService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMainWindowService::Service, ::octaneapi::ApiMainWindow_addContentComponentRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMainWindowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMainWindow_addContentComponentRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->addContentComponent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMainWindowService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMainWindowService::Service, ::octaneapi::ApiMainWindow_projectWorkspaceRequest, ::octaneapi::ApiMainWindow_projectWorkspaceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMainWindowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMainWindow_projectWorkspaceRequest* req,
             ::octaneapi::ApiMainWindow_projectWorkspaceResponse* resp) {
               return service->projectWorkspace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMainWindowService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMainWindowService::Service, ::octaneapi::ApiMainWindow_projectWorkspace1Request, ::octaneapi::ApiMainWindow_projectWorkspace1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMainWindowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMainWindow_projectWorkspace1Request* req,
             ::octaneapi::ApiMainWindow_projectWorkspace1Response* resp) {
               return service->projectWorkspace1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMainWindowService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMainWindowService::Service, ::octaneapi::ApiMainWindow_showRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMainWindowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMainWindow_showRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->show(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMainWindowService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMainWindowService::Service, ::octaneapi::ApiMainWindow_hideRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMainWindowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMainWindow_hideRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->hide(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMainWindowService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMainWindowService::Service, ::octaneapi::ApiMainWindow_visibleRequest, ::octaneapi::ApiMainWindow_visibleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMainWindowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMainWindow_visibleRequest* req,
             ::octaneapi::ApiMainWindow_visibleResponse* resp) {
               return service->visible(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMainWindowService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMainWindowService::Service, ::octaneapi::ApiMainWindow_setDefaultGraphRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMainWindowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMainWindow_setDefaultGraphRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setDefaultGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiMainWindowService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiMainWindowService::Service, ::octaneapi::ApiMainWindow_defaultGraphRequest, ::octaneapi::ApiMainWindow_defaultGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiMainWindowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiMainWindow_defaultGraphRequest* req,
             ::octaneapi::ApiMainWindow_defaultGraphResponse* resp) {
               return service->defaultGraph(ctx, req, resp);
             }, this)));
}

ApiMainWindowService::Service::~Service() {
}

::grpc::Status ApiMainWindowService::Service::fetchOrCreateInstance(::grpc::ServerContext* context, const ::octaneapi::ApiMainWindow_fetchOrCreateInstanceRequest* request, ::octaneapi::ApiMainWindow_fetchOrCreateInstanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMainWindowService::Service::runDispatchLoopUntil(::grpc::ServerContext* context, const ::octaneapi::ApiMainWindow_runDispatchLoopUntilRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMainWindowService::Service::setDpi(::grpc::ServerContext* context, const ::octaneapi::ApiMainWindow_setDpiRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMainWindowService::Service::addContentComponent(::grpc::ServerContext* context, const ::octaneapi::ApiMainWindow_addContentComponentRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMainWindowService::Service::projectWorkspace(::grpc::ServerContext* context, const ::octaneapi::ApiMainWindow_projectWorkspaceRequest* request, ::octaneapi::ApiMainWindow_projectWorkspaceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMainWindowService::Service::projectWorkspace1(::grpc::ServerContext* context, const ::octaneapi::ApiMainWindow_projectWorkspace1Request* request, ::octaneapi::ApiMainWindow_projectWorkspace1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMainWindowService::Service::show(::grpc::ServerContext* context, const ::octaneapi::ApiMainWindow_showRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMainWindowService::Service::hide(::grpc::ServerContext* context, const ::octaneapi::ApiMainWindow_hideRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMainWindowService::Service::visible(::grpc::ServerContext* context, const ::octaneapi::ApiMainWindow_visibleRequest* request, ::octaneapi::ApiMainWindow_visibleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMainWindowService::Service::setDefaultGraph(::grpc::ServerContext* context, const ::octaneapi::ApiMainWindow_setDefaultGraphRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiMainWindowService::Service::defaultGraph(::grpc::ServerContext* context, const ::octaneapi::ApiMainWindow_defaultGraphRequest* request, ::octaneapi::ApiMainWindow_defaultGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

