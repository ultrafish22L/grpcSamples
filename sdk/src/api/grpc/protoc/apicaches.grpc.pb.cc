// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apicaches.proto

#include "apicaches.pb.h"
#include "apicaches.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiCachesService_method_names[] = {
  "/octaneapi.ApiCachesService/getMeshletCacheSize",
  "/octaneapi.ApiCachesService/getMeshletCacheUsedSize",
  "/octaneapi.ApiCachesService/clearMeshletCache",
  "/octaneapi.ApiCachesService/getVirtualTextureCacheSize",
  "/octaneapi.ApiCachesService/getVirtualTextureCacheUsedSize",
  "/octaneapi.ApiCachesService/pruneVirtualTextureCache",
  "/octaneapi.ApiCachesService/checkVirtualTextureStatus",
  "/octaneapi.ApiCachesService/clearVirtualTextureCacheForNode",
};

std::unique_ptr< ApiCachesService::Stub> ApiCachesService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiCachesService::Stub> stub(new ApiCachesService::Stub(channel, options));
  return stub;
}

ApiCachesService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_getMeshletCacheSize_(ApiCachesService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMeshletCacheUsedSize_(ApiCachesService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clearMeshletCache_(ApiCachesService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getVirtualTextureCacheSize_(ApiCachesService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getVirtualTextureCacheUsedSize_(ApiCachesService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pruneVirtualTextureCache_(ApiCachesService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_checkVirtualTextureStatus_(ApiCachesService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clearVirtualTextureCacheForNode_(ApiCachesService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiCachesService::Stub::getMeshletCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest& request, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiCaches_getMeshletCacheSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMeshletCacheSize_, context, request, response);
}

void ApiCachesService::Stub::async::getMeshletCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiCaches_getMeshletCacheSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMeshletCacheSize_, context, request, response, std::move(f));
}

void ApiCachesService::Stub::async::getMeshletCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMeshletCacheSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>* ApiCachesService::Stub::PrepareAsyncgetMeshletCacheSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse, ::octaneapi::ApiCaches_getMeshletCacheSizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMeshletCacheSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>* ApiCachesService::Stub::AsyncgetMeshletCacheSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMeshletCacheSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiCachesService::Stub::getMeshletCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest& request, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMeshletCacheUsedSize_, context, request, response);
}

void ApiCachesService::Stub::async::getMeshletCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMeshletCacheUsedSize_, context, request, response, std::move(f));
}

void ApiCachesService::Stub::async::getMeshletCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMeshletCacheUsedSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>* ApiCachesService::Stub::PrepareAsyncgetMeshletCacheUsedSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMeshletCacheUsedSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>* ApiCachesService::Stub::AsyncgetMeshletCacheUsedSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMeshletCacheUsedSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiCachesService::Stub::clearMeshletCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiCaches_clearMeshletCacheRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clearMeshletCache_, context, request, response);
}

void ApiCachesService::Stub::async::clearMeshletCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiCaches_clearMeshletCacheRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearMeshletCache_, context, request, response, std::move(f));
}

void ApiCachesService::Stub::async::clearMeshletCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearMeshletCache_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiCachesService::Stub::PrepareAsyncclearMeshletCacheRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiCaches_clearMeshletCacheRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clearMeshletCache_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiCachesService::Stub::AsyncclearMeshletCacheRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearMeshletCacheRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiCachesService::Stub::getVirtualTextureCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest& request, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getVirtualTextureCacheSize_, context, request, response);
}

void ApiCachesService::Stub::async::getVirtualTextureCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getVirtualTextureCacheSize_, context, request, response, std::move(f));
}

void ApiCachesService::Stub::async::getVirtualTextureCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getVirtualTextureCacheSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>* ApiCachesService::Stub::PrepareAsyncgetVirtualTextureCacheSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getVirtualTextureCacheSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>* ApiCachesService::Stub::AsyncgetVirtualTextureCacheSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetVirtualTextureCacheSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiCachesService::Stub::getVirtualTextureCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest& request, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getVirtualTextureCacheUsedSize_, context, request, response);
}

void ApiCachesService::Stub::async::getVirtualTextureCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getVirtualTextureCacheUsedSize_, context, request, response, std::move(f));
}

void ApiCachesService::Stub::async::getVirtualTextureCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getVirtualTextureCacheUsedSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>* ApiCachesService::Stub::PrepareAsyncgetVirtualTextureCacheUsedSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getVirtualTextureCacheUsedSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>* ApiCachesService::Stub::AsyncgetVirtualTextureCacheUsedSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetVirtualTextureCacheUsedSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiCachesService::Stub::pruneVirtualTextureCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pruneVirtualTextureCache_, context, request, response);
}

void ApiCachesService::Stub::async::pruneVirtualTextureCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pruneVirtualTextureCache_, context, request, response, std::move(f));
}

void ApiCachesService::Stub::async::pruneVirtualTextureCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pruneVirtualTextureCache_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiCachesService::Stub::PrepareAsyncpruneVirtualTextureCacheRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pruneVirtualTextureCache_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiCachesService::Stub::AsyncpruneVirtualTextureCacheRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpruneVirtualTextureCacheRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiCachesService::Stub::checkVirtualTextureStatus(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest& request, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_checkVirtualTextureStatus_, context, request, response);
}

void ApiCachesService::Stub::async::checkVirtualTextureStatus(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* request, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_checkVirtualTextureStatus_, context, request, response, std::move(f));
}

void ApiCachesService::Stub::async::checkVirtualTextureStatus(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* request, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_checkVirtualTextureStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>* ApiCachesService::Stub::PrepareAsynccheckVirtualTextureStatusRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse, ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_checkVirtualTextureStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>* ApiCachesService::Stub::AsynccheckVirtualTextureStatusRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccheckVirtualTextureStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiCachesService::Stub::clearVirtualTextureCacheForNode(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest& request, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clearVirtualTextureCacheForNode_, context, request, response);
}

void ApiCachesService::Stub::async::clearVirtualTextureCacheForNode(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* request, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearVirtualTextureCacheForNode_, context, request, response, std::move(f));
}

void ApiCachesService::Stub::async::clearVirtualTextureCacheForNode(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* request, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearVirtualTextureCacheForNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>* ApiCachesService::Stub::PrepareAsyncclearVirtualTextureCacheForNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clearVirtualTextureCacheForNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>* ApiCachesService::Stub::AsyncclearVirtualTextureCacheForNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearVirtualTextureCacheForNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiCachesService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiCachesService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiCachesService::Service, ::octaneapi::ApiCaches_getMeshletCacheSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiCachesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* req,
             ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* resp) {
               return service->getMeshletCacheSize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiCachesService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiCachesService::Service, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiCachesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* req,
             ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* resp) {
               return service->getMeshletCacheUsedSize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiCachesService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiCachesService::Service, ::octaneapi::ApiCaches_clearMeshletCacheRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiCachesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiCaches_clearMeshletCacheRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->clearMeshletCache(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiCachesService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiCachesService::Service, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiCachesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* req,
             ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* resp) {
               return service->getVirtualTextureCacheSize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiCachesService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiCachesService::Service, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiCachesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* req,
             ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* resp) {
               return service->getVirtualTextureCacheUsedSize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiCachesService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiCachesService::Service, ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiCachesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->pruneVirtualTextureCache(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiCachesService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiCachesService::Service, ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiCachesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* req,
             ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* resp) {
               return service->checkVirtualTextureStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiCachesService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiCachesService::Service, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiCachesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* req,
             ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* resp) {
               return service->clearVirtualTextureCacheForNode(ctx, req, resp);
             }, this)));
}

ApiCachesService::Service::~Service() {
}

::grpc::Status ApiCachesService::Service::getMeshletCacheSize(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiCachesService::Service::getMeshletCacheUsedSize(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiCachesService::Service::clearMeshletCache(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiCachesService::Service::getVirtualTextureCacheSize(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiCachesService::Service::getVirtualTextureCacheUsedSize(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiCachesService::Service::pruneVirtualTextureCache(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiCachesService::Service::checkVirtualTextureStatus(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* request, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiCachesService::Service::clearVirtualTextureCacheForNode(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* request, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

