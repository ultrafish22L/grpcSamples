// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apireferencegraph.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apireferencegraph_2eproto__INCLUDED
#define GRPC_apireferencegraph_2eproto__INCLUDED

#include "apireferencegraph.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiReferenceGraph' from 'apireferencegraph.h'
class ApiReferenceGraphService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiReferenceGraphService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / creates a new graph of the GT_REFERENCE type
    virtual ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_createRequest& request, ::octaneapi::ApiReferenceGraph_createResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    // / Returns ApiReferenceGraph interface for the ApiNodeGraph of GT_REFERENCE type
    // / 
    // / 
    virtual ::grpc::Status obtain(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest& request, ::octaneapi::ApiReferenceGraph_obtainResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_obtainResponse>> Asyncobtain(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_obtainResponse>>(AsyncobtainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_obtainResponse>> PrepareAsyncobtain(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_obtainResponse>>(PrepareAsyncobtainRaw(context, request, cq));
    }
    // / Returns true if the AABB data is present in the referenced orbx
    virtual ::grpc::Status hasAabbData(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest& request, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>> AsynchasAabbData(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>>(AsynchasAabbDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>> PrepareAsynchasAabbData(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>>(PrepareAsynchasAabbDataRaw(context, request, cq));
    }
    // / Returns the number of AABB entries for all outputs
    virtual ::grpc::Status totalAabbEntries(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest& request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>> AsynctotalAabbEntries(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>>(AsynctotalAabbEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>> PrepareAsynctotalAabbEntries(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>>(PrepareAsynctotalAabbEntriesRaw(context, request, cq));
    }
    // / Populates the buffer with AABBs for all the output nodes at current time
    virtual ::grpc::Status fetchAllBounds(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest& request, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>> AsyncfetchAllBounds(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>>(AsyncfetchAllBoundsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>> PrepareAsyncfetchAllBounds(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>>(PrepareAsyncfetchAllBoundsRaw(context, request, cq));
    }
    // / Returns the number of AABB entries for the certain output node
    virtual ::grpc::Status totalAabbEntriesForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest& request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>> AsynctotalAabbEntriesForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>>(AsynctotalAabbEntriesForOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>> PrepareAsynctotalAabbEntriesForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>>(PrepareAsynctotalAabbEntriesForOutputRaw(context, request, cq));
    }
    // / Populates the buffer with AABBs for a particular output node index at current scene time
    virtual ::grpc::Status fetchBoundsForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest& request, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>> AsyncfetchBoundsForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>>(AsyncfetchBoundsForOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>> PrepareAsyncfetchBoundsForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>>(PrepareAsyncfetchBoundsForOutputRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / creates a new graph of the GT_REFERENCE type
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_createRequest* request, ::octaneapi::ApiReferenceGraph_createResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_createRequest* request, ::octaneapi::ApiReferenceGraph_createResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns ApiReferenceGraph interface for the ApiNodeGraph of GT_REFERENCE type
      // / 
      // / 
      virtual void obtain(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest* request, ::octaneapi::ApiReferenceGraph_obtainResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void obtain(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest* request, ::octaneapi::ApiReferenceGraph_obtainResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns true if the AABB data is present in the referenced orbx
      virtual void hasAabbData(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest* request, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void hasAabbData(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest* request, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the number of AABB entries for all outputs
      virtual void totalAabbEntries(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest* request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void totalAabbEntries(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest* request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Populates the buffer with AABBs for all the output nodes at current time
      virtual void fetchAllBounds(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest* request, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void fetchAllBounds(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest* request, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the number of AABB entries for the certain output node
      virtual void totalAabbEntriesForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest* request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void totalAabbEntriesForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest* request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Populates the buffer with AABBs for a particular output node index at current scene time
      virtual void fetchBoundsForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest* request, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void fetchBoundsForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest* request, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_obtainResponse>* AsyncobtainRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_obtainResponse>* PrepareAsyncobtainRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>* AsynchasAabbDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>* PrepareAsynchasAabbDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>* AsynctotalAabbEntriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>* PrepareAsynctotalAabbEntriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>* AsyncfetchAllBoundsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>* PrepareAsyncfetchAllBoundsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>* AsynctotalAabbEntriesForOutputRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>* PrepareAsynctotalAabbEntriesForOutputRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>* AsyncfetchBoundsForOutputRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>* PrepareAsyncfetchBoundsForOutputRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_createRequest& request, ::octaneapi::ApiReferenceGraph_createResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    ::grpc::Status obtain(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest& request, ::octaneapi::ApiReferenceGraph_obtainResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_obtainResponse>> Asyncobtain(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_obtainResponse>>(AsyncobtainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_obtainResponse>> PrepareAsyncobtain(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_obtainResponse>>(PrepareAsyncobtainRaw(context, request, cq));
    }
    ::grpc::Status hasAabbData(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest& request, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>> AsynchasAabbData(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>>(AsynchasAabbDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>> PrepareAsynchasAabbData(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>>(PrepareAsynchasAabbDataRaw(context, request, cq));
    }
    ::grpc::Status totalAabbEntries(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest& request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>> AsynctotalAabbEntries(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>>(AsynctotalAabbEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>> PrepareAsynctotalAabbEntries(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>>(PrepareAsynctotalAabbEntriesRaw(context, request, cq));
    }
    ::grpc::Status fetchAllBounds(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest& request, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>> AsyncfetchAllBounds(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>>(AsyncfetchAllBoundsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>> PrepareAsyncfetchAllBounds(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>>(PrepareAsyncfetchAllBoundsRaw(context, request, cq));
    }
    ::grpc::Status totalAabbEntriesForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest& request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>> AsynctotalAabbEntriesForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>>(AsynctotalAabbEntriesForOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>> PrepareAsynctotalAabbEntriesForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>>(PrepareAsynctotalAabbEntriesForOutputRaw(context, request, cq));
    }
    ::grpc::Status fetchBoundsForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest& request, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>> AsyncfetchBoundsForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>>(AsyncfetchBoundsForOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>> PrepareAsyncfetchBoundsForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>>(PrepareAsyncfetchBoundsForOutputRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_createRequest* request, ::octaneapi::ApiReferenceGraph_createResponse* response, std::function<void(::grpc::Status)>) override;
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_createRequest* request, ::octaneapi::ApiReferenceGraph_createResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void obtain(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest* request, ::octaneapi::ApiReferenceGraph_obtainResponse* response, std::function<void(::grpc::Status)>) override;
      void obtain(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest* request, ::octaneapi::ApiReferenceGraph_obtainResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void hasAabbData(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest* request, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* response, std::function<void(::grpc::Status)>) override;
      void hasAabbData(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest* request, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void totalAabbEntries(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest* request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* response, std::function<void(::grpc::Status)>) override;
      void totalAabbEntries(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest* request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void fetchAllBounds(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest* request, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* response, std::function<void(::grpc::Status)>) override;
      void fetchAllBounds(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest* request, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void totalAabbEntriesForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest* request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* response, std::function<void(::grpc::Status)>) override;
      void totalAabbEntriesForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest* request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void fetchBoundsForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest* request, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* response, std::function<void(::grpc::Status)>) override;
      void fetchBoundsForOutput(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest* request, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_obtainResponse>* AsyncobtainRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_obtainResponse>* PrepareAsyncobtainRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>* AsynchasAabbDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>* PrepareAsynchasAabbDataRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>* AsynctotalAabbEntriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>* PrepareAsynctotalAabbEntriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>* AsyncfetchAllBoundsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>* PrepareAsyncfetchAllBoundsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>* AsynctotalAabbEntriesForOutputRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>* PrepareAsynctotalAabbEntriesForOutputRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>* AsyncfetchBoundsForOutputRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>* PrepareAsyncfetchBoundsForOutputRaw(::grpc::ClientContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_create_;
    const ::grpc::internal::RpcMethod rpcmethod_obtain_;
    const ::grpc::internal::RpcMethod rpcmethod_hasAabbData_;
    const ::grpc::internal::RpcMethod rpcmethod_totalAabbEntries_;
    const ::grpc::internal::RpcMethod rpcmethod_fetchAllBounds_;
    const ::grpc::internal::RpcMethod rpcmethod_totalAabbEntriesForOutput_;
    const ::grpc::internal::RpcMethod rpcmethod_fetchBoundsForOutput_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / creates a new graph of the GT_REFERENCE type
    virtual ::grpc::Status create(::grpc::ServerContext* context, const ::octaneapi::ApiReferenceGraph_createRequest* request, ::octaneapi::ApiReferenceGraph_createResponse* response);
    // / Returns ApiReferenceGraph interface for the ApiNodeGraph of GT_REFERENCE type
    // / 
    // / 
    virtual ::grpc::Status obtain(::grpc::ServerContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest* request, ::octaneapi::ApiReferenceGraph_obtainResponse* response);
    // / Returns true if the AABB data is present in the referenced orbx
    virtual ::grpc::Status hasAabbData(::grpc::ServerContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest* request, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* response);
    // / Returns the number of AABB entries for all outputs
    virtual ::grpc::Status totalAabbEntries(::grpc::ServerContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest* request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* response);
    // / Populates the buffer with AABBs for all the output nodes at current time
    virtual ::grpc::Status fetchAllBounds(::grpc::ServerContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest* request, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* response);
    // / Returns the number of AABB entries for the certain output node
    virtual ::grpc::Status totalAabbEntriesForOutput(::grpc::ServerContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest* request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* response);
    // / Populates the buffer with AABBs for a particular output node index at current scene time
    virtual ::grpc::Status fetchBoundsForOutput(::grpc::ServerContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest* request, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_createRequest* /*request*/, ::octaneapi::ApiReferenceGraph_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::octaneapi::ApiReferenceGraph_createRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiReferenceGraph_createResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_obtain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_obtain() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_obtain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status obtain(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_obtainRequest* /*request*/, ::octaneapi::ApiReferenceGraph_obtainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestobtain(::grpc::ServerContext* context, ::octaneapi::ApiReferenceGraph_obtainRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiReferenceGraph_obtainResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_hasAabbData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_hasAabbData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_hasAabbData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasAabbData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest* /*request*/, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasAabbData(::grpc::ServerContext* context, ::octaneapi::ApiReferenceGraph_hasAabbDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_totalAabbEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_totalAabbEntries() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_totalAabbEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status totalAabbEntries(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest* /*request*/, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesttotalAabbEntries(::grpc::ServerContext* context, ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_fetchAllBounds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_fetchAllBounds() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_fetchAllBounds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchAllBounds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest* /*request*/, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfetchAllBounds(::grpc::ServerContext* context, ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_totalAabbEntriesForOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_totalAabbEntriesForOutput() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_totalAabbEntriesForOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status totalAabbEntriesForOutput(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest* /*request*/, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesttotalAabbEntriesForOutput(::grpc::ServerContext* context, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_fetchBoundsForOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_fetchBoundsForOutput() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_fetchBoundsForOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchBoundsForOutput(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest* /*request*/, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfetchBoundsForOutput(::grpc::ServerContext* context, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_create<WithAsyncMethod_obtain<WithAsyncMethod_hasAabbData<WithAsyncMethod_totalAabbEntries<WithAsyncMethod_fetchAllBounds<WithAsyncMethod_totalAabbEntriesForOutput<WithAsyncMethod_fetchBoundsForOutput<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_create() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiReferenceGraph_createRequest, ::octaneapi::ApiReferenceGraph_createResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiReferenceGraph_createRequest* request, ::octaneapi::ApiReferenceGraph_createResponse* response) { return this->create(context, request, response); }));}
    void SetMessageAllocatorFor_create(
        ::grpc::MessageAllocator< ::octaneapi::ApiReferenceGraph_createRequest, ::octaneapi::ApiReferenceGraph_createResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiReferenceGraph_createRequest, ::octaneapi::ApiReferenceGraph_createResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_createRequest* /*request*/, ::octaneapi::ApiReferenceGraph_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_createRequest* /*request*/, ::octaneapi::ApiReferenceGraph_createResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_obtain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_obtain() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiReferenceGraph_obtainRequest, ::octaneapi::ApiReferenceGraph_obtainResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiReferenceGraph_obtainRequest* request, ::octaneapi::ApiReferenceGraph_obtainResponse* response) { return this->obtain(context, request, response); }));}
    void SetMessageAllocatorFor_obtain(
        ::grpc::MessageAllocator< ::octaneapi::ApiReferenceGraph_obtainRequest, ::octaneapi::ApiReferenceGraph_obtainResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiReferenceGraph_obtainRequest, ::octaneapi::ApiReferenceGraph_obtainResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_obtain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status obtain(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_obtainRequest* /*request*/, ::octaneapi::ApiReferenceGraph_obtainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* obtain(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_obtainRequest* /*request*/, ::octaneapi::ApiReferenceGraph_obtainResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_hasAabbData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_hasAabbData() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiReferenceGraph_hasAabbDataRequest, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest* request, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* response) { return this->hasAabbData(context, request, response); }));}
    void SetMessageAllocatorFor_hasAabbData(
        ::grpc::MessageAllocator< ::octaneapi::ApiReferenceGraph_hasAabbDataRequest, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiReferenceGraph_hasAabbDataRequest, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_hasAabbData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasAabbData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest* /*request*/, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasAabbData(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest* /*request*/, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_totalAabbEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_totalAabbEntries() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest* request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* response) { return this->totalAabbEntries(context, request, response); }));}
    void SetMessageAllocatorFor_totalAabbEntries(
        ::grpc::MessageAllocator< ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_totalAabbEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status totalAabbEntries(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest* /*request*/, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* totalAabbEntries(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest* /*request*/, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_fetchAllBounds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_fetchAllBounds() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest* request, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* response) { return this->fetchAllBounds(context, request, response); }));}
    void SetMessageAllocatorFor_fetchAllBounds(
        ::grpc::MessageAllocator< ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_fetchAllBounds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchAllBounds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest* /*request*/, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* fetchAllBounds(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest* /*request*/, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_totalAabbEntriesForOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_totalAabbEntriesForOutput() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest* request, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* response) { return this->totalAabbEntriesForOutput(context, request, response); }));}
    void SetMessageAllocatorFor_totalAabbEntriesForOutput(
        ::grpc::MessageAllocator< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_totalAabbEntriesForOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status totalAabbEntriesForOutput(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest* /*request*/, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* totalAabbEntriesForOutput(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest* /*request*/, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_fetchBoundsForOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_fetchBoundsForOutput() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest* request, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* response) { return this->fetchBoundsForOutput(context, request, response); }));}
    void SetMessageAllocatorFor_fetchBoundsForOutput(
        ::grpc::MessageAllocator< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_fetchBoundsForOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchBoundsForOutput(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest* /*request*/, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* fetchBoundsForOutput(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest* /*request*/, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_create<WithCallbackMethod_obtain<WithCallbackMethod_hasAabbData<WithCallbackMethod_totalAabbEntries<WithCallbackMethod_fetchAllBounds<WithCallbackMethod_totalAabbEntriesForOutput<WithCallbackMethod_fetchBoundsForOutput<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_createRequest* /*request*/, ::octaneapi::ApiReferenceGraph_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_obtain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_obtain() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_obtain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status obtain(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_obtainRequest* /*request*/, ::octaneapi::ApiReferenceGraph_obtainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_hasAabbData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_hasAabbData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_hasAabbData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasAabbData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest* /*request*/, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_totalAabbEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_totalAabbEntries() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_totalAabbEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status totalAabbEntries(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest* /*request*/, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_fetchAllBounds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_fetchAllBounds() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_fetchAllBounds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchAllBounds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest* /*request*/, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_totalAabbEntriesForOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_totalAabbEntriesForOutput() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_totalAabbEntriesForOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status totalAabbEntriesForOutput(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest* /*request*/, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_fetchBoundsForOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_fetchBoundsForOutput() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_fetchBoundsForOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchBoundsForOutput(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest* /*request*/, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_createRequest* /*request*/, ::octaneapi::ApiReferenceGraph_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_obtain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_obtain() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_obtain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status obtain(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_obtainRequest* /*request*/, ::octaneapi::ApiReferenceGraph_obtainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestobtain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_hasAabbData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_hasAabbData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_hasAabbData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasAabbData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest* /*request*/, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthasAabbData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_totalAabbEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_totalAabbEntries() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_totalAabbEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status totalAabbEntries(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest* /*request*/, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesttotalAabbEntries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_fetchAllBounds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_fetchAllBounds() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_fetchAllBounds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchAllBounds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest* /*request*/, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfetchAllBounds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_totalAabbEntriesForOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_totalAabbEntriesForOutput() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_totalAabbEntriesForOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status totalAabbEntriesForOutput(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest* /*request*/, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesttotalAabbEntriesForOutput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_fetchBoundsForOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_fetchBoundsForOutput() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_fetchBoundsForOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchBoundsForOutput(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest* /*request*/, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfetchBoundsForOutput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_create() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->create(context, request, response); }));
    }
    ~WithRawCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_createRequest* /*request*/, ::octaneapi::ApiReferenceGraph_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_obtain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_obtain() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->obtain(context, request, response); }));
    }
    ~WithRawCallbackMethod_obtain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status obtain(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_obtainRequest* /*request*/, ::octaneapi::ApiReferenceGraph_obtainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* obtain(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_hasAabbData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_hasAabbData() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->hasAabbData(context, request, response); }));
    }
    ~WithRawCallbackMethod_hasAabbData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hasAabbData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest* /*request*/, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hasAabbData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_totalAabbEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_totalAabbEntries() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->totalAabbEntries(context, request, response); }));
    }
    ~WithRawCallbackMethod_totalAabbEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status totalAabbEntries(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest* /*request*/, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* totalAabbEntries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_fetchAllBounds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_fetchAllBounds() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->fetchAllBounds(context, request, response); }));
    }
    ~WithRawCallbackMethod_fetchAllBounds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchAllBounds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest* /*request*/, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* fetchAllBounds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_totalAabbEntriesForOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_totalAabbEntriesForOutput() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->totalAabbEntriesForOutput(context, request, response); }));
    }
    ~WithRawCallbackMethod_totalAabbEntriesForOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status totalAabbEntriesForOutput(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest* /*request*/, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* totalAabbEntriesForOutput(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_fetchBoundsForOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_fetchBoundsForOutput() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->fetchBoundsForOutput(context, request, response); }));
    }
    ~WithRawCallbackMethod_fetchBoundsForOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fetchBoundsForOutput(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest* /*request*/, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* fetchBoundsForOutput(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiReferenceGraph_createRequest, ::octaneapi::ApiReferenceGraph_createResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiReferenceGraph_createRequest, ::octaneapi::ApiReferenceGraph_createResponse>* streamer) {
                       return this->Streamedcreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_createRequest* /*request*/, ::octaneapi::ApiReferenceGraph_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiReferenceGraph_createRequest,::octaneapi::ApiReferenceGraph_createResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_obtain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_obtain() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiReferenceGraph_obtainRequest, ::octaneapi::ApiReferenceGraph_obtainResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiReferenceGraph_obtainRequest, ::octaneapi::ApiReferenceGraph_obtainResponse>* streamer) {
                       return this->Streamedobtain(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_obtain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status obtain(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_obtainRequest* /*request*/, ::octaneapi::ApiReferenceGraph_obtainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedobtain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiReferenceGraph_obtainRequest,::octaneapi::ApiReferenceGraph_obtainResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_hasAabbData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_hasAabbData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiReferenceGraph_hasAabbDataRequest, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiReferenceGraph_hasAabbDataRequest, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse>* streamer) {
                       return this->StreamedhasAabbData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_hasAabbData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status hasAabbData(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_hasAabbDataRequest* /*request*/, ::octaneapi::ApiReferenceGraph_hasAabbDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedhasAabbData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiReferenceGraph_hasAabbDataRequest,::octaneapi::ApiReferenceGraph_hasAabbDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_totalAabbEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_totalAabbEntries() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>* streamer) {
                       return this->StreamedtotalAabbEntries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_totalAabbEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status totalAabbEntries(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest* /*request*/, ::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedtotalAabbEntries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiReferenceGraph_totalAabbEntriesRequest,::octaneapi::ApiReferenceGraph_totalAabbEntriesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_fetchAllBounds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_fetchAllBounds() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>* streamer) {
                       return this->StreamedfetchAllBounds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_fetchAllBounds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status fetchAllBounds(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest* /*request*/, ::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedfetchAllBounds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiReferenceGraph_fetchAllBoundsRequest,::octaneapi::ApiReferenceGraph_fetchAllBoundsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_totalAabbEntriesForOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_totalAabbEntriesForOutput() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>* streamer) {
                       return this->StreamedtotalAabbEntriesForOutput(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_totalAabbEntriesForOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status totalAabbEntriesForOutput(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest* /*request*/, ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedtotalAabbEntriesForOutput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputRequest,::octaneapi::ApiReferenceGraph_totalAabbEntriesForOutputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_fetchBoundsForOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_fetchBoundsForOutput() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>* streamer) {
                       return this->StreamedfetchBoundsForOutput(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_fetchBoundsForOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status fetchBoundsForOutput(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest* /*request*/, ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedfetchBoundsForOutput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiReferenceGraph_fetchBoundsForOutputRequest,::octaneapi::ApiReferenceGraph_fetchBoundsForOutputResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_obtain<WithStreamedUnaryMethod_hasAabbData<WithStreamedUnaryMethod_totalAabbEntries<WithStreamedUnaryMethod_fetchAllBounds<WithStreamedUnaryMethod_totalAabbEntriesForOutput<WithStreamedUnaryMethod_fetchBoundsForOutput<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_obtain<WithStreamedUnaryMethod_hasAabbData<WithStreamedUnaryMethod_totalAabbEntries<WithStreamedUnaryMethod_fetchAllBounds<WithStreamedUnaryMethod_totalAabbEntriesForOutput<WithStreamedUnaryMethod_fetchBoundsForOutput<Service > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apireferencegraph_2eproto__INCLUDED
