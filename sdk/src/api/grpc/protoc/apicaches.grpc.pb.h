// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apicaches.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apicaches_2eproto__INCLUDED
#define GRPC_apicaches_2eproto__INCLUDED

#include "apicaches.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiCaches' from 'apicaches.h'
class ApiCachesService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiCachesService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Returns the maximum size of the meshlet cache in bytes
    virtual ::grpc::Status getMeshletCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest& request, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>> AsyncgetMeshletCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>>(AsyncgetMeshletCacheSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>> PrepareAsyncgetMeshletCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>>(PrepareAsyncgetMeshletCacheSizeRaw(context, request, cq));
    }
    // / Returns the amount data stored in the meshlet cache in number of bytes
    virtual ::grpc::Status getMeshletCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest& request, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>> AsyncgetMeshletCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>>(AsyncgetMeshletCacheUsedSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>> PrepareAsyncgetMeshletCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>>(PrepareAsyncgetMeshletCacheUsedSizeRaw(context, request, cq));
    }
    // / Deletes all meshlet cache files that are currently not in use
    virtual ::grpc::Status clearMeshletCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncclearMeshletCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncclearMeshletCacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncclearMeshletCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncclearMeshletCacheRaw(context, request, cq));
    }
    // / Returns the maximum size of the virtual texture cache in bytes
    virtual ::grpc::Status getVirtualTextureCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest& request, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>> AsyncgetVirtualTextureCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>>(AsyncgetVirtualTextureCacheSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>> PrepareAsyncgetVirtualTextureCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>>(PrepareAsyncgetVirtualTextureCacheSizeRaw(context, request, cq));
    }
    // / Returns the amount data stored in the virtual texture cache in number of bytes
    virtual ::grpc::Status getVirtualTextureCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest& request, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>> AsyncgetVirtualTextureCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>>(AsyncgetVirtualTextureCacheUsedSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>> PrepareAsyncgetVirtualTextureCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>>(PrepareAsyncgetVirtualTextureCacheUsedSizeRaw(context, request, cq));
    }
    // / Deletes virtual texture cache files that are currently not in use, until
    // / the cache reaches the desired maximum size
    // /
    // / 
    virtual ::grpc::Status pruneVirtualTextureCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncpruneVirtualTextureCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncpruneVirtualTextureCacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncpruneVirtualTextureCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncpruneVirtualTextureCacheRaw(context, request, cq));
    }
    // / Check the status of the cached virtual texture corresponding to the settings contained
    // / in the given node
    virtual ::grpc::Status checkVirtualTextureStatus(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest& request, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>> AsynccheckVirtualTextureStatus(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>>(AsynccheckVirtualTextureStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>> PrepareAsynccheckVirtualTextureStatus(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>>(PrepareAsynccheckVirtualTextureStatusRaw(context, request, cq));
    }
    // / Clears the cache entry matching the settings contained in the given node item
    // / This call succeeds only if there are no other node items referencing the same
    // / file, and if the build for the given cache entry is not currently in progress
    virtual ::grpc::Status clearVirtualTextureCacheForNode(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest& request, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>> AsyncclearVirtualTextureCacheForNode(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>>(AsyncclearVirtualTextureCacheForNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>> PrepareAsyncclearVirtualTextureCacheForNode(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>>(PrepareAsyncclearVirtualTextureCacheForNodeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Returns the maximum size of the meshlet cache in bytes
      virtual void getMeshletCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMeshletCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the amount data stored in the meshlet cache in number of bytes
      virtual void getMeshletCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMeshletCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Deletes all meshlet cache files that are currently not in use
      virtual void clearMeshletCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void clearMeshletCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the maximum size of the virtual texture cache in bytes
      virtual void getVirtualTextureCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getVirtualTextureCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the amount data stored in the virtual texture cache in number of bytes
      virtual void getVirtualTextureCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getVirtualTextureCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Deletes virtual texture cache files that are currently not in use, until
      // / the cache reaches the desired maximum size
      // /
      // / 
      virtual void pruneVirtualTextureCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void pruneVirtualTextureCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Check the status of the cached virtual texture corresponding to the settings contained
      // / in the given node
      virtual void checkVirtualTextureStatus(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* request, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void checkVirtualTextureStatus(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* request, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Clears the cache entry matching the settings contained in the given node item
      // / This call succeeds only if there are no other node items referencing the same
      // / file, and if the build for the given cache entry is not currently in progress
      virtual void clearVirtualTextureCacheForNode(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* request, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void clearVirtualTextureCacheForNode(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* request, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>* AsyncgetMeshletCacheSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>* PrepareAsyncgetMeshletCacheSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>* AsyncgetMeshletCacheUsedSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>* PrepareAsyncgetMeshletCacheUsedSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncclearMeshletCacheRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncclearMeshletCacheRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>* AsyncgetVirtualTextureCacheSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>* PrepareAsyncgetVirtualTextureCacheSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>* AsyncgetVirtualTextureCacheUsedSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>* PrepareAsyncgetVirtualTextureCacheUsedSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncpruneVirtualTextureCacheRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncpruneVirtualTextureCacheRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>* AsynccheckVirtualTextureStatusRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>* PrepareAsynccheckVirtualTextureStatusRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>* AsyncclearVirtualTextureCacheForNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>* PrepareAsyncclearVirtualTextureCacheForNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status getMeshletCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest& request, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>> AsyncgetMeshletCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>>(AsyncgetMeshletCacheSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>> PrepareAsyncgetMeshletCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>>(PrepareAsyncgetMeshletCacheSizeRaw(context, request, cq));
    }
    ::grpc::Status getMeshletCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest& request, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>> AsyncgetMeshletCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>>(AsyncgetMeshletCacheUsedSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>> PrepareAsyncgetMeshletCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>>(PrepareAsyncgetMeshletCacheUsedSizeRaw(context, request, cq));
    }
    ::grpc::Status clearMeshletCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncclearMeshletCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncclearMeshletCacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncclearMeshletCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncclearMeshletCacheRaw(context, request, cq));
    }
    ::grpc::Status getVirtualTextureCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest& request, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>> AsyncgetVirtualTextureCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>>(AsyncgetVirtualTextureCacheSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>> PrepareAsyncgetVirtualTextureCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>>(PrepareAsyncgetVirtualTextureCacheSizeRaw(context, request, cq));
    }
    ::grpc::Status getVirtualTextureCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest& request, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>> AsyncgetVirtualTextureCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>>(AsyncgetVirtualTextureCacheUsedSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>> PrepareAsyncgetVirtualTextureCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>>(PrepareAsyncgetVirtualTextureCacheUsedSizeRaw(context, request, cq));
    }
    ::grpc::Status pruneVirtualTextureCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncpruneVirtualTextureCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncpruneVirtualTextureCacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncpruneVirtualTextureCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncpruneVirtualTextureCacheRaw(context, request, cq));
    }
    ::grpc::Status checkVirtualTextureStatus(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest& request, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>> AsynccheckVirtualTextureStatus(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>>(AsynccheckVirtualTextureStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>> PrepareAsynccheckVirtualTextureStatus(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>>(PrepareAsynccheckVirtualTextureStatusRaw(context, request, cq));
    }
    ::grpc::Status clearVirtualTextureCacheForNode(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest& request, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>> AsyncclearVirtualTextureCacheForNode(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>>(AsyncclearVirtualTextureCacheForNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>> PrepareAsyncclearVirtualTextureCacheForNode(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>>(PrepareAsyncclearVirtualTextureCacheForNodeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void getMeshletCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* response, std::function<void(::grpc::Status)>) override;
      void getMeshletCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMeshletCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* response, std::function<void(::grpc::Status)>) override;
      void getMeshletCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void clearMeshletCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void clearMeshletCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getVirtualTextureCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* response, std::function<void(::grpc::Status)>) override;
      void getVirtualTextureCacheSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getVirtualTextureCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* response, std::function<void(::grpc::Status)>) override;
      void getVirtualTextureCacheUsedSize(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void pruneVirtualTextureCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void pruneVirtualTextureCache(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void checkVirtualTextureStatus(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* request, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void checkVirtualTextureStatus(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* request, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void clearVirtualTextureCacheForNode(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* request, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* response, std::function<void(::grpc::Status)>) override;
      void clearVirtualTextureCacheForNode(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* request, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>* AsyncgetMeshletCacheSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>* PrepareAsyncgetMeshletCacheSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>* AsyncgetMeshletCacheUsedSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>* PrepareAsyncgetMeshletCacheUsedSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncclearMeshletCacheRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncclearMeshletCacheRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>* AsyncgetVirtualTextureCacheSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>* PrepareAsyncgetVirtualTextureCacheSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>* AsyncgetVirtualTextureCacheUsedSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>* PrepareAsyncgetVirtualTextureCacheUsedSizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncpruneVirtualTextureCacheRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncpruneVirtualTextureCacheRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>* AsynccheckVirtualTextureStatusRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>* PrepareAsynccheckVirtualTextureStatusRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>* AsyncclearVirtualTextureCacheForNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>* PrepareAsyncclearVirtualTextureCacheForNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getMeshletCacheSize_;
    const ::grpc::internal::RpcMethod rpcmethod_getMeshletCacheUsedSize_;
    const ::grpc::internal::RpcMethod rpcmethod_clearMeshletCache_;
    const ::grpc::internal::RpcMethod rpcmethod_getVirtualTextureCacheSize_;
    const ::grpc::internal::RpcMethod rpcmethod_getVirtualTextureCacheUsedSize_;
    const ::grpc::internal::RpcMethod rpcmethod_pruneVirtualTextureCache_;
    const ::grpc::internal::RpcMethod rpcmethod_checkVirtualTextureStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_clearVirtualTextureCacheForNode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Returns the maximum size of the meshlet cache in bytes
    virtual ::grpc::Status getMeshletCacheSize(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* response);
    // / Returns the amount data stored in the meshlet cache in number of bytes
    virtual ::grpc::Status getMeshletCacheUsedSize(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* response);
    // / Deletes all meshlet cache files that are currently not in use
    virtual ::grpc::Status clearMeshletCache(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* request, ::google::protobuf::Empty* response);
    // / Returns the maximum size of the virtual texture cache in bytes
    virtual ::grpc::Status getVirtualTextureCacheSize(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* response);
    // / Returns the amount data stored in the virtual texture cache in number of bytes
    virtual ::grpc::Status getVirtualTextureCacheUsedSize(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* response);
    // / Deletes virtual texture cache files that are currently not in use, until
    // / the cache reaches the desired maximum size
    // /
    // / 
    virtual ::grpc::Status pruneVirtualTextureCache(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* request, ::google::protobuf::Empty* response);
    // / Check the status of the cached virtual texture corresponding to the settings contained
    // / in the given node
    virtual ::grpc::Status checkVirtualTextureStatus(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* request, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* response);
    // / Clears the cache entry matching the settings contained in the given node item
    // / This call succeeds only if there are no other node items referencing the same
    // / file, and if the build for the given cache entry is not currently in progress
    virtual ::grpc::Status clearVirtualTextureCacheForNode(::grpc::ServerContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* request, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getMeshletCacheSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMeshletCacheSize() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getMeshletCacheSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMeshletCacheSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* /*request*/, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMeshletCacheSize(::grpc::ServerContext* context, ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMeshletCacheUsedSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMeshletCacheUsedSize() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getMeshletCacheUsedSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMeshletCacheUsedSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* /*request*/, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMeshletCacheUsedSize(::grpc::ServerContext* context, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_clearMeshletCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_clearMeshletCache() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_clearMeshletCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearMeshletCache(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestclearMeshletCache(::grpc::ServerContext* context, ::octaneapi::ApiCaches_clearMeshletCacheRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getVirtualTextureCacheSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getVirtualTextureCacheSize() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getVirtualTextureCacheSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVirtualTextureCacheSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* /*request*/, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVirtualTextureCacheSize(::grpc::ServerContext* context, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getVirtualTextureCacheUsedSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getVirtualTextureCacheUsedSize() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getVirtualTextureCacheUsedSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVirtualTextureCacheUsedSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* /*request*/, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVirtualTextureCacheUsedSize(::grpc::ServerContext* context, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_pruneVirtualTextureCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_pruneVirtualTextureCache() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_pruneVirtualTextureCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pruneVirtualTextureCache(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpruneVirtualTextureCache(::grpc::ServerContext* context, ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_checkVirtualTextureStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_checkVirtualTextureStatus() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_checkVirtualTextureStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkVirtualTextureStatus(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* /*request*/, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcheckVirtualTextureStatus(::grpc::ServerContext* context, ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_clearVirtualTextureCacheForNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_clearVirtualTextureCacheForNode() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_clearVirtualTextureCacheForNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearVirtualTextureCacheForNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* /*request*/, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestclearVirtualTextureCacheForNode(::grpc::ServerContext* context, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getMeshletCacheSize<WithAsyncMethod_getMeshletCacheUsedSize<WithAsyncMethod_clearMeshletCache<WithAsyncMethod_getVirtualTextureCacheSize<WithAsyncMethod_getVirtualTextureCacheUsedSize<WithAsyncMethod_pruneVirtualTextureCache<WithAsyncMethod_checkVirtualTextureStatus<WithAsyncMethod_clearVirtualTextureCacheForNode<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_getMeshletCacheSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMeshletCacheSize() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_getMeshletCacheSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* response) { return this->getMeshletCacheSize(context, request, response); }));}
    void SetMessageAllocatorFor_getMeshletCacheSize(
        ::grpc::MessageAllocator< ::octaneapi::ApiCaches_getMeshletCacheSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_getMeshletCacheSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMeshletCacheSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMeshletCacheSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* /*request*/, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMeshletCacheSize(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* /*request*/, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMeshletCacheUsedSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMeshletCacheUsedSize() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* response) { return this->getMeshletCacheUsedSize(context, request, response); }));}
    void SetMessageAllocatorFor_getMeshletCacheUsedSize(
        ::grpc::MessageAllocator< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMeshletCacheUsedSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMeshletCacheUsedSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* /*request*/, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMeshletCacheUsedSize(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* /*request*/, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_clearMeshletCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_clearMeshletCache() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_clearMeshletCacheRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* request, ::google::protobuf::Empty* response) { return this->clearMeshletCache(context, request, response); }));}
    void SetMessageAllocatorFor_clearMeshletCache(
        ::grpc::MessageAllocator< ::octaneapi::ApiCaches_clearMeshletCacheRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_clearMeshletCacheRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_clearMeshletCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearMeshletCache(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clearMeshletCache(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getVirtualTextureCacheSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getVirtualTextureCacheSize() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* response) { return this->getVirtualTextureCacheSize(context, request, response); }));}
    void SetMessageAllocatorFor_getVirtualTextureCacheSize(
        ::grpc::MessageAllocator< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getVirtualTextureCacheSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVirtualTextureCacheSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* /*request*/, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getVirtualTextureCacheSize(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* /*request*/, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getVirtualTextureCacheUsedSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getVirtualTextureCacheUsedSize() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* request, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* response) { return this->getVirtualTextureCacheUsedSize(context, request, response); }));}
    void SetMessageAllocatorFor_getVirtualTextureCacheUsedSize(
        ::grpc::MessageAllocator< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getVirtualTextureCacheUsedSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVirtualTextureCacheUsedSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* /*request*/, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getVirtualTextureCacheUsedSize(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* /*request*/, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_pruneVirtualTextureCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_pruneVirtualTextureCache() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* request, ::google::protobuf::Empty* response) { return this->pruneVirtualTextureCache(context, request, response); }));}
    void SetMessageAllocatorFor_pruneVirtualTextureCache(
        ::grpc::MessageAllocator< ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_pruneVirtualTextureCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pruneVirtualTextureCache(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* pruneVirtualTextureCache(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_checkVirtualTextureStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_checkVirtualTextureStatus() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* request, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* response) { return this->checkVirtualTextureStatus(context, request, response); }));}
    void SetMessageAllocatorFor_checkVirtualTextureStatus(
        ::grpc::MessageAllocator< ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_checkVirtualTextureStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkVirtualTextureStatus(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* /*request*/, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* checkVirtualTextureStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* /*request*/, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_clearVirtualTextureCacheForNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_clearVirtualTextureCacheForNode() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* request, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* response) { return this->clearVirtualTextureCacheForNode(context, request, response); }));}
    void SetMessageAllocatorFor_clearVirtualTextureCacheForNode(
        ::grpc::MessageAllocator< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_clearVirtualTextureCacheForNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearVirtualTextureCacheForNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* /*request*/, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clearVirtualTextureCacheForNode(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* /*request*/, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_getMeshletCacheSize<WithCallbackMethod_getMeshletCacheUsedSize<WithCallbackMethod_clearMeshletCache<WithCallbackMethod_getVirtualTextureCacheSize<WithCallbackMethod_getVirtualTextureCacheUsedSize<WithCallbackMethod_pruneVirtualTextureCache<WithCallbackMethod_checkVirtualTextureStatus<WithCallbackMethod_clearVirtualTextureCacheForNode<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getMeshletCacheSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMeshletCacheSize() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getMeshletCacheSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMeshletCacheSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* /*request*/, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMeshletCacheUsedSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMeshletCacheUsedSize() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getMeshletCacheUsedSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMeshletCacheUsedSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* /*request*/, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_clearMeshletCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_clearMeshletCache() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_clearMeshletCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearMeshletCache(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getVirtualTextureCacheSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getVirtualTextureCacheSize() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getVirtualTextureCacheSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVirtualTextureCacheSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* /*request*/, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getVirtualTextureCacheUsedSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getVirtualTextureCacheUsedSize() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getVirtualTextureCacheUsedSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVirtualTextureCacheUsedSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* /*request*/, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_pruneVirtualTextureCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_pruneVirtualTextureCache() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_pruneVirtualTextureCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pruneVirtualTextureCache(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_checkVirtualTextureStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_checkVirtualTextureStatus() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_checkVirtualTextureStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkVirtualTextureStatus(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* /*request*/, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_clearVirtualTextureCacheForNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_clearVirtualTextureCacheForNode() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_clearVirtualTextureCacheForNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearVirtualTextureCacheForNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* /*request*/, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMeshletCacheSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMeshletCacheSize() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getMeshletCacheSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMeshletCacheSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* /*request*/, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMeshletCacheSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMeshletCacheUsedSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMeshletCacheUsedSize() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getMeshletCacheUsedSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMeshletCacheUsedSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* /*request*/, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMeshletCacheUsedSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_clearMeshletCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_clearMeshletCache() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_clearMeshletCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearMeshletCache(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestclearMeshletCache(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getVirtualTextureCacheSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getVirtualTextureCacheSize() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getVirtualTextureCacheSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVirtualTextureCacheSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* /*request*/, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVirtualTextureCacheSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getVirtualTextureCacheUsedSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getVirtualTextureCacheUsedSize() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getVirtualTextureCacheUsedSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVirtualTextureCacheUsedSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* /*request*/, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVirtualTextureCacheUsedSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_pruneVirtualTextureCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_pruneVirtualTextureCache() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_pruneVirtualTextureCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pruneVirtualTextureCache(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpruneVirtualTextureCache(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_checkVirtualTextureStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_checkVirtualTextureStatus() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_checkVirtualTextureStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkVirtualTextureStatus(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* /*request*/, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcheckVirtualTextureStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_clearVirtualTextureCacheForNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_clearVirtualTextureCacheForNode() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_clearVirtualTextureCacheForNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearVirtualTextureCacheForNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* /*request*/, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestclearVirtualTextureCacheForNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMeshletCacheSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMeshletCacheSize() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMeshletCacheSize(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMeshletCacheSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMeshletCacheSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* /*request*/, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMeshletCacheSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMeshletCacheUsedSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMeshletCacheUsedSize() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMeshletCacheUsedSize(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMeshletCacheUsedSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMeshletCacheUsedSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* /*request*/, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMeshletCacheUsedSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_clearMeshletCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_clearMeshletCache() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->clearMeshletCache(context, request, response); }));
    }
    ~WithRawCallbackMethod_clearMeshletCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearMeshletCache(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clearMeshletCache(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getVirtualTextureCacheSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getVirtualTextureCacheSize() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getVirtualTextureCacheSize(context, request, response); }));
    }
    ~WithRawCallbackMethod_getVirtualTextureCacheSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVirtualTextureCacheSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* /*request*/, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getVirtualTextureCacheSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getVirtualTextureCacheUsedSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getVirtualTextureCacheUsedSize() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getVirtualTextureCacheUsedSize(context, request, response); }));
    }
    ~WithRawCallbackMethod_getVirtualTextureCacheUsedSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVirtualTextureCacheUsedSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* /*request*/, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getVirtualTextureCacheUsedSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_pruneVirtualTextureCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_pruneVirtualTextureCache() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->pruneVirtualTextureCache(context, request, response); }));
    }
    ~WithRawCallbackMethod_pruneVirtualTextureCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pruneVirtualTextureCache(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* pruneVirtualTextureCache(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_checkVirtualTextureStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_checkVirtualTextureStatus() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->checkVirtualTextureStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_checkVirtualTextureStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkVirtualTextureStatus(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* /*request*/, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* checkVirtualTextureStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_clearVirtualTextureCacheForNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_clearVirtualTextureCacheForNode() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->clearVirtualTextureCacheForNode(context, request, response); }));
    }
    ~WithRawCallbackMethod_clearVirtualTextureCacheForNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clearVirtualTextureCacheForNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* /*request*/, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clearVirtualTextureCacheForNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMeshletCacheSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMeshletCacheSize() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiCaches_getMeshletCacheSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiCaches_getMeshletCacheSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse>* streamer) {
                       return this->StreamedgetMeshletCacheSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMeshletCacheSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMeshletCacheSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getMeshletCacheSizeRequest* /*request*/, ::octaneapi::ApiCaches_getMeshletCacheSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMeshletCacheSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiCaches_getMeshletCacheSizeRequest,::octaneapi::ApiCaches_getMeshletCacheSizeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMeshletCacheUsedSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMeshletCacheUsedSize() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>* streamer) {
                       return this->StreamedgetMeshletCacheUsedSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMeshletCacheUsedSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMeshletCacheUsedSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest* /*request*/, ::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMeshletCacheUsedSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiCaches_getMeshletCacheUsedSizeRequest,::octaneapi::ApiCaches_getMeshletCacheUsedSizeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_clearMeshletCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_clearMeshletCache() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiCaches_clearMeshletCacheRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiCaches_clearMeshletCacheRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedclearMeshletCache(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_clearMeshletCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status clearMeshletCache(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_clearMeshletCacheRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedclearMeshletCache(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiCaches_clearMeshletCacheRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getVirtualTextureCacheSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getVirtualTextureCacheSize() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>* streamer) {
                       return this->StreamedgetVirtualTextureCacheSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getVirtualTextureCacheSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getVirtualTextureCacheSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest* /*request*/, ::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetVirtualTextureCacheSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiCaches_getVirtualTextureCacheSizeRequest,::octaneapi::ApiCaches_getVirtualTextureCacheSizeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getVirtualTextureCacheUsedSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getVirtualTextureCacheUsedSize() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>* streamer) {
                       return this->StreamedgetVirtualTextureCacheUsedSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getVirtualTextureCacheUsedSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getVirtualTextureCacheUsedSize(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest* /*request*/, ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetVirtualTextureCacheUsedSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeRequest,::octaneapi::ApiCaches_getVirtualTextureCacheUsedSizeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_pruneVirtualTextureCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_pruneVirtualTextureCache() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedpruneVirtualTextureCache(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_pruneVirtualTextureCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status pruneVirtualTextureCache(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpruneVirtualTextureCache(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiCaches_pruneVirtualTextureCacheRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_checkVirtualTextureStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_checkVirtualTextureStatus() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>* streamer) {
                       return this->StreamedcheckVirtualTextureStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_checkVirtualTextureStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status checkVirtualTextureStatus(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest* /*request*/, ::octaneapi::ApiCaches_checkVirtualTextureStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcheckVirtualTextureStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiCaches_checkVirtualTextureStatusRequest,::octaneapi::ApiCaches_checkVirtualTextureStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_clearVirtualTextureCacheForNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_clearVirtualTextureCacheForNode() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>* streamer) {
                       return this->StreamedclearVirtualTextureCacheForNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_clearVirtualTextureCacheForNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status clearVirtualTextureCacheForNode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest* /*request*/, ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedclearVirtualTextureCacheForNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeRequest,::octaneapi::ApiCaches_clearVirtualTextureCacheForNodeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getMeshletCacheSize<WithStreamedUnaryMethod_getMeshletCacheUsedSize<WithStreamedUnaryMethod_clearMeshletCache<WithStreamedUnaryMethod_getVirtualTextureCacheSize<WithStreamedUnaryMethod_getVirtualTextureCacheUsedSize<WithStreamedUnaryMethod_pruneVirtualTextureCache<WithStreamedUnaryMethod_checkVirtualTextureStatus<WithStreamedUnaryMethod_clearVirtualTextureCacheForNode<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getMeshletCacheSize<WithStreamedUnaryMethod_getMeshletCacheUsedSize<WithStreamedUnaryMethod_clearMeshletCache<WithStreamedUnaryMethod_getVirtualTextureCacheSize<WithStreamedUnaryMethod_getVirtualTextureCacheUsedSize<WithStreamedUnaryMethod_pruneVirtualTextureCache<WithStreamedUnaryMethod_checkVirtualTextureStatus<WithStreamedUnaryMethod_clearVirtualTextureCacheForNode<Service > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apicaches_2eproto__INCLUDED
