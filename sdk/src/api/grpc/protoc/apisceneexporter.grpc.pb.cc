// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apisceneexporter.proto

#include "apisceneexporter.pb.h"
#include "apisceneexporter.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiSceneExporterService_method_names[] = {
  "/octaneapi.ApiSceneExporterService/isSupported",
  "/octaneapi.ApiSceneExporterService/create",
  "/octaneapi.ApiSceneExporterService/destroy",
  "/octaneapi.ApiSceneExporterService/state",
  "/octaneapi.ApiSceneExporterService/exportSample",
  "/octaneapi.ApiSceneExporterService/sampleIx",
  "/octaneapi.ApiSceneExporterService/finish",
  "/octaneapi.ApiSceneExporterService/ocsString",
};

std::unique_ptr< ApiSceneExporterService::Stub> ApiSceneExporterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiSceneExporterService::Stub> stub(new ApiSceneExporterService::Stub(channel, options));
  return stub;
}

ApiSceneExporterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_isSupported_(ApiSceneExporterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_create_(ApiSceneExporterService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(ApiSceneExporterService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_state_(ApiSceneExporterService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_exportSample_(ApiSceneExporterService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sampleIx_(ApiSceneExporterService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_finish_(ApiSceneExporterService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ocsString_(ApiSceneExporterService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiSceneExporterService::Stub::isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest& request, ::octaneapi::ApiSceneExporter_isSupportedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSceneExporter_isSupportedRequest, ::octaneapi::ApiSceneExporter_isSupportedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isSupported_, context, request, response);
}

void ApiSceneExporterService::Stub::async::isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest* request, ::octaneapi::ApiSceneExporter_isSupportedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSceneExporter_isSupportedRequest, ::octaneapi::ApiSceneExporter_isSupportedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isSupported_, context, request, response, std::move(f));
}

void ApiSceneExporterService::Stub::async::isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest* request, ::octaneapi::ApiSceneExporter_isSupportedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isSupported_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_isSupportedResponse>* ApiSceneExporterService::Stub::PrepareAsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSceneExporter_isSupportedResponse, ::octaneapi::ApiSceneExporter_isSupportedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isSupported_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_isSupportedResponse>* ApiSceneExporterService::Stub::AsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisSupportedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSceneExporterService::Stub::create(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest& request, ::octaneapi::ApiSceneExporter_createResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSceneExporter_createRequest, ::octaneapi::ApiSceneExporter_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_, context, request, response);
}

void ApiSceneExporterService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest* request, ::octaneapi::ApiSceneExporter_createResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSceneExporter_createRequest, ::octaneapi::ApiSceneExporter_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void ApiSceneExporterService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest* request, ::octaneapi::ApiSceneExporter_createResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_createResponse>* ApiSceneExporterService::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSceneExporter_createResponse, ::octaneapi::ApiSceneExporter_createRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_createResponse>* ApiSceneExporterService::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSceneExporterService::Stub::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSceneExporter_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void ApiSceneExporterService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSceneExporter_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void ApiSceneExporterService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSceneExporterService::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiSceneExporter_destroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSceneExporterService::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSceneExporterService::Stub::state(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest& request, ::octaneapi::ApiSceneExporter_stateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSceneExporter_stateRequest, ::octaneapi::ApiSceneExporter_stateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_state_, context, request, response);
}

void ApiSceneExporterService::Stub::async::state(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest* request, ::octaneapi::ApiSceneExporter_stateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSceneExporter_stateRequest, ::octaneapi::ApiSceneExporter_stateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_state_, context, request, response, std::move(f));
}

void ApiSceneExporterService::Stub::async::state(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest* request, ::octaneapi::ApiSceneExporter_stateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_state_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_stateResponse>* ApiSceneExporterService::Stub::PrepareAsyncstateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSceneExporter_stateResponse, ::octaneapi::ApiSceneExporter_stateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_state_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_stateResponse>* ApiSceneExporterService::Stub::AsyncstateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSceneExporterService::Stub::exportSample(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSceneExporter_exportSampleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_exportSample_, context, request, response);
}

void ApiSceneExporterService::Stub::async::exportSample(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSceneExporter_exportSampleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exportSample_, context, request, response, std::move(f));
}

void ApiSceneExporterService::Stub::async::exportSample(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exportSample_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSceneExporterService::Stub::PrepareAsyncexportSampleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiSceneExporter_exportSampleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_exportSample_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiSceneExporterService::Stub::AsyncexportSampleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncexportSampleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSceneExporterService::Stub::sampleIx(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest& request, ::octaneapi::ApiSceneExporter_sampleIxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSceneExporter_sampleIxRequest, ::octaneapi::ApiSceneExporter_sampleIxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sampleIx_, context, request, response);
}

void ApiSceneExporterService::Stub::async::sampleIx(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest* request, ::octaneapi::ApiSceneExporter_sampleIxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSceneExporter_sampleIxRequest, ::octaneapi::ApiSceneExporter_sampleIxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sampleIx_, context, request, response, std::move(f));
}

void ApiSceneExporterService::Stub::async::sampleIx(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest* request, ::octaneapi::ApiSceneExporter_sampleIxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sampleIx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_sampleIxResponse>* ApiSceneExporterService::Stub::PrepareAsyncsampleIxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSceneExporter_sampleIxResponse, ::octaneapi::ApiSceneExporter_sampleIxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sampleIx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_sampleIxResponse>* ApiSceneExporterService::Stub::AsyncsampleIxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsampleIxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSceneExporterService::Stub::finish(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest& request, ::octaneapi::ApiSceneExporter_finishResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSceneExporter_finishRequest, ::octaneapi::ApiSceneExporter_finishResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_finish_, context, request, response);
}

void ApiSceneExporterService::Stub::async::finish(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest* request, ::octaneapi::ApiSceneExporter_finishResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSceneExporter_finishRequest, ::octaneapi::ApiSceneExporter_finishResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_finish_, context, request, response, std::move(f));
}

void ApiSceneExporterService::Stub::async::finish(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest* request, ::octaneapi::ApiSceneExporter_finishResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_finish_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_finishResponse>* ApiSceneExporterService::Stub::PrepareAsyncfinishRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSceneExporter_finishResponse, ::octaneapi::ApiSceneExporter_finishRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_finish_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_finishResponse>* ApiSceneExporterService::Stub::AsyncfinishRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfinishRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiSceneExporterService::Stub::ocsString(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest& request, ::octaneapi::ApiSceneExporter_ocsStringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiSceneExporter_ocsStringRequest, ::octaneapi::ApiSceneExporter_ocsStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ocsString_, context, request, response);
}

void ApiSceneExporterService::Stub::async::ocsString(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest* request, ::octaneapi::ApiSceneExporter_ocsStringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiSceneExporter_ocsStringRequest, ::octaneapi::ApiSceneExporter_ocsStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ocsString_, context, request, response, std::move(f));
}

void ApiSceneExporterService::Stub::async::ocsString(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest* request, ::octaneapi::ApiSceneExporter_ocsStringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ocsString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_ocsStringResponse>* ApiSceneExporterService::Stub::PrepareAsyncocsStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiSceneExporter_ocsStringResponse, ::octaneapi::ApiSceneExporter_ocsStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ocsString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_ocsStringResponse>* ApiSceneExporterService::Stub::AsyncocsStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncocsStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiSceneExporterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSceneExporterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSceneExporterService::Service, ::octaneapi::ApiSceneExporter_isSupportedRequest, ::octaneapi::ApiSceneExporter_isSupportedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSceneExporterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSceneExporter_isSupportedRequest* req,
             ::octaneapi::ApiSceneExporter_isSupportedResponse* resp) {
               return service->isSupported(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSceneExporterService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSceneExporterService::Service, ::octaneapi::ApiSceneExporter_createRequest, ::octaneapi::ApiSceneExporter_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSceneExporterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSceneExporter_createRequest* req,
             ::octaneapi::ApiSceneExporter_createResponse* resp) {
               return service->create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSceneExporterService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSceneExporterService::Service, ::octaneapi::ApiSceneExporter_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSceneExporterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSceneExporter_destroyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSceneExporterService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSceneExporterService::Service, ::octaneapi::ApiSceneExporter_stateRequest, ::octaneapi::ApiSceneExporter_stateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSceneExporterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSceneExporter_stateRequest* req,
             ::octaneapi::ApiSceneExporter_stateResponse* resp) {
               return service->state(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSceneExporterService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSceneExporterService::Service, ::octaneapi::ApiSceneExporter_exportSampleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSceneExporterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSceneExporter_exportSampleRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->exportSample(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSceneExporterService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSceneExporterService::Service, ::octaneapi::ApiSceneExporter_sampleIxRequest, ::octaneapi::ApiSceneExporter_sampleIxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSceneExporterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSceneExporter_sampleIxRequest* req,
             ::octaneapi::ApiSceneExporter_sampleIxResponse* resp) {
               return service->sampleIx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSceneExporterService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSceneExporterService::Service, ::octaneapi::ApiSceneExporter_finishRequest, ::octaneapi::ApiSceneExporter_finishResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSceneExporterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSceneExporter_finishRequest* req,
             ::octaneapi::ApiSceneExporter_finishResponse* resp) {
               return service->finish(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiSceneExporterService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiSceneExporterService::Service, ::octaneapi::ApiSceneExporter_ocsStringRequest, ::octaneapi::ApiSceneExporter_ocsStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiSceneExporterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiSceneExporter_ocsStringRequest* req,
             ::octaneapi::ApiSceneExporter_ocsStringResponse* resp) {
               return service->ocsString(ctx, req, resp);
             }, this)));
}

ApiSceneExporterService::Service::~Service() {
}

::grpc::Status ApiSceneExporterService::Service::isSupported(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest* request, ::octaneapi::ApiSceneExporter_isSupportedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSceneExporterService::Service::create(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_createRequest* request, ::octaneapi::ApiSceneExporter_createResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSceneExporterService::Service::destroy(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSceneExporterService::Service::state(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_stateRequest* request, ::octaneapi::ApiSceneExporter_stateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSceneExporterService::Service::exportSample(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSceneExporterService::Service::sampleIx(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest* request, ::octaneapi::ApiSceneExporter_sampleIxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSceneExporterService::Service::finish(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_finishRequest* request, ::octaneapi::ApiSceneExporter_finishResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiSceneExporterService::Service::ocsString(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest* request, ::octaneapi::ApiSceneExporter_ocsStringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

