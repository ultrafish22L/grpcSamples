// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apidbmaterialmanager.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apidbmaterialmanager_2eproto__INCLUDED
#define GRPC_apidbmaterialmanager_2eproto__INCLUDED

#include "apidbmaterialmanager.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiDBMaterialManager' from 'apidbmaterialmanager.h'
class ApiDBMaterialManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiDBMaterialManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Returns a list of the categories in the LiveDB
    virtual ::grpc::Status getCategories(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest& request, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>> AsyncgetCategories(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>>(AsyncgetCategoriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>> PrepareAsyncgetCategories(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>>(PrepareAsyncgetCategoriesRaw(context, request, cq));
    }
    // / Returns the list of materials for a category
    virtual ::grpc::Status getMaterials(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest& request, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>> AsyncgetMaterials(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>>(AsyncgetMaterialsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>> PrepareAsyncgetMaterials(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>>(PrepareAsyncgetMaterialsRaw(context, request, cq));
    }
    // / Gets an image of the material rendered on the material ball from the
    // / LiveDB server
    virtual ::grpc::Status getMaterialPreview(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest& request, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>> AsyncgetMaterialPreview(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>>(AsyncgetMaterialPreviewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>> PrepareAsyncgetMaterialPreview(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>>(PrepareAsyncgetMaterialPreviewRaw(context, request, cq));
    }
    // / Downloads a material from the LiveDB
    virtual ::grpc::Status downloadMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest& request, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>> AsyncdownloadMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>>(AsyncdownloadMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>> PrepareAsyncdownloadMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>>(PrepareAsyncdownloadMaterialRaw(context, request, cq));
    }
    // / Downloads a material from the LiveDB
    virtual ::grpc::Status downloadMaterial1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request& request, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>> AsyncdownloadMaterial1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>>(AsyncdownloadMaterial1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>> PrepareAsyncdownloadMaterial1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>>(PrepareAsyncdownloadMaterial1Raw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Returns a list of the categories in the LiveDB
      virtual void getCategories(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest* request, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getCategories(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest* request, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the list of materials for a category
      virtual void getMaterials(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest* request, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMaterials(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest* request, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Gets an image of the material rendered on the material ball from the
      // / LiveDB server
      virtual void getMaterialPreview(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest* request, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMaterialPreview(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest* request, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Downloads a material from the LiveDB
      virtual void downloadMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest* request, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void downloadMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest* request, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Downloads a material from the LiveDB
      virtual void downloadMaterial1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request* request, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void downloadMaterial1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request* request, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>* AsyncgetCategoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>* PrepareAsyncgetCategoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>* AsyncgetMaterialsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>* PrepareAsyncgetMaterialsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>* AsyncgetMaterialPreviewRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>* PrepareAsyncgetMaterialPreviewRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>* AsyncdownloadMaterialRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>* PrepareAsyncdownloadMaterialRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>* AsyncdownloadMaterial1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>* PrepareAsyncdownloadMaterial1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status getCategories(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest& request, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>> AsyncgetCategories(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>>(AsyncgetCategoriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>> PrepareAsyncgetCategories(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>>(PrepareAsyncgetCategoriesRaw(context, request, cq));
    }
    ::grpc::Status getMaterials(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest& request, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>> AsyncgetMaterials(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>>(AsyncgetMaterialsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>> PrepareAsyncgetMaterials(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>>(PrepareAsyncgetMaterialsRaw(context, request, cq));
    }
    ::grpc::Status getMaterialPreview(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest& request, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>> AsyncgetMaterialPreview(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>>(AsyncgetMaterialPreviewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>> PrepareAsyncgetMaterialPreview(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>>(PrepareAsyncgetMaterialPreviewRaw(context, request, cq));
    }
    ::grpc::Status downloadMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest& request, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>> AsyncdownloadMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>>(AsyncdownloadMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>> PrepareAsyncdownloadMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>>(PrepareAsyncdownloadMaterialRaw(context, request, cq));
    }
    ::grpc::Status downloadMaterial1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request& request, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>> AsyncdownloadMaterial1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>>(AsyncdownloadMaterial1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>> PrepareAsyncdownloadMaterial1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>>(PrepareAsyncdownloadMaterial1Raw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void getCategories(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest* request, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* response, std::function<void(::grpc::Status)>) override;
      void getCategories(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest* request, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMaterials(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest* request, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* response, std::function<void(::grpc::Status)>) override;
      void getMaterials(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest* request, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMaterialPreview(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest* request, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* response, std::function<void(::grpc::Status)>) override;
      void getMaterialPreview(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest* request, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void downloadMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest* request, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* response, std::function<void(::grpc::Status)>) override;
      void downloadMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest* request, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void downloadMaterial1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request* request, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* response, std::function<void(::grpc::Status)>) override;
      void downloadMaterial1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request* request, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>* AsyncgetCategoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>* PrepareAsyncgetCategoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>* AsyncgetMaterialsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>* PrepareAsyncgetMaterialsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>* AsyncgetMaterialPreviewRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>* PrepareAsyncgetMaterialPreviewRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>* AsyncdownloadMaterialRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>* PrepareAsyncdownloadMaterialRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>* AsyncdownloadMaterial1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>* PrepareAsyncdownloadMaterial1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getCategories_;
    const ::grpc::internal::RpcMethod rpcmethod_getMaterials_;
    const ::grpc::internal::RpcMethod rpcmethod_getMaterialPreview_;
    const ::grpc::internal::RpcMethod rpcmethod_downloadMaterial_;
    const ::grpc::internal::RpcMethod rpcmethod_downloadMaterial1_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Returns a list of the categories in the LiveDB
    virtual ::grpc::Status getCategories(::grpc::ServerContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest* request, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* response);
    // / Returns the list of materials for a category
    virtual ::grpc::Status getMaterials(::grpc::ServerContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest* request, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* response);
    // / Gets an image of the material rendered on the material ball from the
    // / LiveDB server
    virtual ::grpc::Status getMaterialPreview(::grpc::ServerContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest* request, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* response);
    // / Downloads a material from the LiveDB
    virtual ::grpc::Status downloadMaterial(::grpc::ServerContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest* request, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* response);
    // / Downloads a material from the LiveDB
    virtual ::grpc::Status downloadMaterial1(::grpc::ServerContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request* request, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getCategories() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCategories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCategories(::grpc::ServerContext* context, ::octaneapi::ApiDBMaterialManager_getCategoriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMaterials : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMaterials() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getMaterials() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterials(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMaterials(::grpc::ServerContext* context, ::octaneapi::ApiDBMaterialManager_getMaterialsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMaterialPreview : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMaterialPreview() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getMaterialPreview() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterialPreview(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMaterialPreview(::grpc::ServerContext* context, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_downloadMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_downloadMaterial() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_downloadMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadMaterial(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdownloadMaterial(::grpc::ServerContext* context, ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_downloadMaterial1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_downloadMaterial1() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_downloadMaterial1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadMaterial1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request* /*request*/, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdownloadMaterial1(::grpc::ServerContext* context, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getCategories<WithAsyncMethod_getMaterials<WithAsyncMethod_getMaterialPreview<WithAsyncMethod_downloadMaterial<WithAsyncMethod_downloadMaterial1<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_getCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getCategories() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_getCategoriesRequest, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest* request, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* response) { return this->getCategories(context, request, response); }));}
    void SetMessageAllocatorFor_getCategories(
        ::grpc::MessageAllocator< ::octaneapi::ApiDBMaterialManager_getCategoriesRequest, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_getCategoriesRequest, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCategories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCategories(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMaterials : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMaterials() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_getMaterialsRequest, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest* request, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* response) { return this->getMaterials(context, request, response); }));}
    void SetMessageAllocatorFor_getMaterials(
        ::grpc::MessageAllocator< ::octaneapi::ApiDBMaterialManager_getMaterialsRequest, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_getMaterialsRequest, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMaterials() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterials(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMaterials(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMaterialPreview : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMaterialPreview() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest* request, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* response) { return this->getMaterialPreview(context, request, response); }));}
    void SetMessageAllocatorFor_getMaterialPreview(
        ::grpc::MessageAllocator< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMaterialPreview() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterialPreview(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMaterialPreview(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_downloadMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_downloadMaterial() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest* request, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* response) { return this->downloadMaterial(context, request, response); }));}
    void SetMessageAllocatorFor_downloadMaterial(
        ::grpc::MessageAllocator< ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_downloadMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadMaterial(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* downloadMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_downloadMaterial1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_downloadMaterial1() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request* request, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* response) { return this->downloadMaterial1(context, request, response); }));}
    void SetMessageAllocatorFor_downloadMaterial1(
        ::grpc::MessageAllocator< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_downloadMaterial1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadMaterial1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request* /*request*/, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* downloadMaterial1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request* /*request*/, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_getCategories<WithCallbackMethod_getMaterials<WithCallbackMethod_getMaterialPreview<WithCallbackMethod_downloadMaterial<WithCallbackMethod_downloadMaterial1<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getCategories() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCategories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMaterials : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMaterials() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getMaterials() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterials(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMaterialPreview : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMaterialPreview() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getMaterialPreview() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterialPreview(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_downloadMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_downloadMaterial() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_downloadMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadMaterial(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_downloadMaterial1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_downloadMaterial1() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_downloadMaterial1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadMaterial1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request* /*request*/, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getCategories() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCategories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCategories(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMaterials : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMaterials() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getMaterials() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterials(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMaterials(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMaterialPreview : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMaterialPreview() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getMaterialPreview() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterialPreview(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMaterialPreview(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_downloadMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_downloadMaterial() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_downloadMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadMaterial(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdownloadMaterial(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_downloadMaterial1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_downloadMaterial1() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_downloadMaterial1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadMaterial1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request* /*request*/, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdownloadMaterial1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getCategories() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getCategories(context, request, response); }));
    }
    ~WithRawCallbackMethod_getCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCategories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCategories(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMaterials : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMaterials() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMaterials(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMaterials() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterials(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMaterials(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMaterialPreview : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMaterialPreview() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMaterialPreview(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMaterialPreview() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterialPreview(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMaterialPreview(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_downloadMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_downloadMaterial() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->downloadMaterial(context, request, response); }));
    }
    ~WithRawCallbackMethod_downloadMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadMaterial(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* downloadMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_downloadMaterial1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_downloadMaterial1() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->downloadMaterial1(context, request, response); }));
    }
    ~WithRawCallbackMethod_downloadMaterial1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadMaterial1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request* /*request*/, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* downloadMaterial1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getCategories() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiDBMaterialManager_getCategoriesRequest, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiDBMaterialManager_getCategoriesRequest, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse>* streamer) {
                       return this->StreamedgetCategories(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCategories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getCategoriesRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getCategoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCategories(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiDBMaterialManager_getCategoriesRequest,::octaneapi::ApiDBMaterialManager_getCategoriesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMaterials : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMaterials() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiDBMaterialManager_getMaterialsRequest, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiDBMaterialManager_getMaterialsRequest, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse>* streamer) {
                       return this->StreamedgetMaterials(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMaterials() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMaterials(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getMaterialsRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getMaterialsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMaterials(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiDBMaterialManager_getMaterialsRequest,::octaneapi::ApiDBMaterialManager_getMaterialsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMaterialPreview : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMaterialPreview() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>* streamer) {
                       return this->StreamedgetMaterialPreview(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMaterialPreview() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMaterialPreview(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMaterialPreview(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiDBMaterialManager_getMaterialPreviewRequest,::octaneapi::ApiDBMaterialManager_getMaterialPreviewResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_downloadMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_downloadMaterial() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>* streamer) {
                       return this->StreameddownloadMaterial(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_downloadMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status downloadMaterial(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_downloadMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddownloadMaterial(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiDBMaterialManager_downloadMaterialRequest,::octaneapi::ApiDBMaterialManager_downloadMaterialResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_downloadMaterial1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_downloadMaterial1() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>* streamer) {
                       return this->StreameddownloadMaterial1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_downloadMaterial1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status downloadMaterial1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request* /*request*/, ::octaneapi::ApiDBMaterialManager_downloadMaterial1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddownloadMaterial1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiDBMaterialManager_downloadMaterial1Request,::octaneapi::ApiDBMaterialManager_downloadMaterial1Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getCategories<WithStreamedUnaryMethod_getMaterials<WithStreamedUnaryMethod_getMaterialPreview<WithStreamedUnaryMethod_downloadMaterial<WithStreamedUnaryMethod_downloadMaterial1<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getCategories<WithStreamedUnaryMethod_getMaterials<WithStreamedUnaryMethod_getMaterialPreview<WithStreamedUnaryMethod_downloadMaterial<WithStreamedUnaryMethod_downloadMaterial1<Service > > > > > StreamedService;
};

// GRPC interface definition for class 'ApiDBMaterialManager_DBCategory' from 'apidbmaterialmanager.h'
//
// GRPC interface definition for class 'ApiDBMaterialManager_DBCategoryArray' from 'apidbmaterialmanager.h'
class ApiDBMaterialManager_DBCategoryArrayService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiDBMaterialManager_DBCategoryArrayService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Initializes this array with size elements
    virtual ::grpc::Status init(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncinit(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncinitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncinit(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncinitRaw(context, request, cq));
    }
    // / Destroys all the elements in this array
    virtual ::grpc::Status free(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncfree(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncfreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncfree(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncfreeRaw(context, request, cq));
    }
    // / Returns the internal array of categories
    virtual ::grpc::Status getCategory(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest& request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>> AsyncgetCategory(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>>(AsyncgetCategoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>> PrepareAsyncgetCategory(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>>(PrepareAsyncgetCategoryRaw(context, request, cq));
    }
    // / Returns the number of categories
    virtual ::grpc::Status getCount(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest& request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>> AsyncgetCount(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>>(AsyncgetCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>> PrepareAsyncgetCount(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>>(PrepareAsyncgetCountRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Initializes this array with size elements
      virtual void init(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Destroys all the elements in this array
      virtual void free(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void free(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the internal array of categories
      virtual void getCategory(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getCategory(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the number of categories
      virtual void getCount(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getCount(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncinitRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncfreeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncfreeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>* AsyncgetCategoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>* PrepareAsyncgetCategoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>* AsyncgetCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>* PrepareAsyncgetCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status init(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncinit(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncinitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncinit(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncinitRaw(context, request, cq));
    }
    ::grpc::Status free(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncfree(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncfreeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncfree(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncfreeRaw(context, request, cq));
    }
    ::grpc::Status getCategory(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest& request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>> AsyncgetCategory(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>>(AsyncgetCategoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>> PrepareAsyncgetCategory(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>>(PrepareAsyncgetCategoryRaw(context, request, cq));
    }
    ::grpc::Status getCount(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest& request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>> AsyncgetCount(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>>(AsyncgetCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>> PrepareAsyncgetCount(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>>(PrepareAsyncgetCountRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void init(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void init(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void free(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void free(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getCategory(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* response, std::function<void(::grpc::Status)>) override;
      void getCategory(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getCount(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* response, std::function<void(::grpc::Status)>) override;
      void getCount(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncinitRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncfreeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncfreeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>* AsyncgetCategoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>* PrepareAsyncgetCategoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>* AsyncgetCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>* PrepareAsyncgetCountRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_init_;
    const ::grpc::internal::RpcMethod rpcmethod_free_;
    const ::grpc::internal::RpcMethod rpcmethod_getCategory_;
    const ::grpc::internal::RpcMethod rpcmethod_getCount_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Initializes this array with size elements
    virtual ::grpc::Status init(::grpc::ServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest* request, ::google::protobuf::Empty* response);
    // / Destroys all the elements in this array
    virtual ::grpc::Status free(::grpc::ServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest* request, ::google::protobuf::Empty* response);
    // / Returns the internal array of categories
    virtual ::grpc::Status getCategory(::grpc::ServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* response);
    // / Returns the number of categories
    virtual ::grpc::Status getCount(::grpc::ServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit(::grpc::ServerContext* context, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_free : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_free() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_free() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status free(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfree(::grpc::ServerContext* context, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getCategory() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCategory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCategory(::grpc::ServerContext* context, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getCount() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCount(::grpc::ServerContext* context, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_init<WithAsyncMethod_free<WithAsyncMethod_getCategory<WithAsyncMethod_getCount<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest* request, ::google::protobuf::Empty* response) { return this->init(context, request, response); }));}
    void SetMessageAllocatorFor_init(
        ::grpc::MessageAllocator< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_free : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_free() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest* request, ::google::protobuf::Empty* response) { return this->free(context, request, response); }));}
    void SetMessageAllocatorFor_free(
        ::grpc::MessageAllocator< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_free() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status free(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* free(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getCategory() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* response) { return this->getCategory(context, request, response); }));}
    void SetMessageAllocatorFor_getCategory(
        ::grpc::MessageAllocator< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCategory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCategory(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getCount() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* response) { return this->getCount(context, request, response); }));}
    void SetMessageAllocatorFor_getCount(
        ::grpc::MessageAllocator< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCount(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_init<WithCallbackMethod_free<WithCallbackMethod_getCategory<WithCallbackMethod_getCount<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_free : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_free() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_free() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status free(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getCategory() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCategory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getCount() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_free : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_free() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_free() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status free(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfree(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getCategory() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCategory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCategory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getCount() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init(context, request, response); }));
    }
    ~WithRawCallbackMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_free : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_free() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->free(context, request, response); }));
    }
    ~WithRawCallbackMethod_free() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status free(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* free(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getCategory() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getCategory(context, request, response); }));
    }
    ~WithRawCallbackMethod_getCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCategory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCategory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getCount() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_getCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedinit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_initRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_free : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_free() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedfree(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_free() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status free(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedfree(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_freeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCategory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getCategory() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>* streamer) {
                       return this->StreamedgetCategory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getCategory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCategory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCategory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryRequest,::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCategoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getCount() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>* streamer) {
                       return this->StreamedgetCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCount(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountRequest,::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBCategoryArray_getCountResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_init<WithStreamedUnaryMethod_free<WithStreamedUnaryMethod_getCategory<WithStreamedUnaryMethod_getCount<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_init<WithStreamedUnaryMethod_free<WithStreamedUnaryMethod_getCategory<WithStreamedUnaryMethod_getCount<Service > > > > StreamedService;
};

// GRPC interface definition for class 'ApiDBMaterialManager_DBMaterial' from 'apidbmaterialmanager.h'
//
// GRPC interface definition for class 'ApiDBMaterialManager_DBMaterialArray' from 'apidbmaterialmanager.h'
class ApiDBMaterialManager_DBMaterialArrayService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiDBMaterialManager_DBMaterialArrayService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Initializes this list with size elements
    virtual ::grpc::Status init1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncinit1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(Asyncinit1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncinit1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncinit1Raw(context, request, cq));
    }
    // / Destroys all the elements in this array
    virtual ::grpc::Status free1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncfree1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(Asyncfree1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncfree1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncfree1Raw(context, request, cq));
    }
    // / Returns the internal array of materials
    virtual ::grpc::Status getMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest& request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>> AsyncgetMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>>(AsyncgetMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>> PrepareAsyncgetMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>>(PrepareAsyncgetMaterialRaw(context, request, cq));
    }
    // / Returns the number of materials
    virtual ::grpc::Status getCount1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest& request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>> AsyncgetCount1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>>(AsyncgetCount1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>> PrepareAsyncgetCount1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>>(PrepareAsyncgetCount1Raw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Initializes this list with size elements
      virtual void init1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Destroys all the elements in this array
      virtual void free1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void free1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the internal array of materials
      virtual void getMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the number of materials
      virtual void getCount1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getCount1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* Asyncinit1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncinit1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* Asyncfree1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncfree1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>* AsyncgetMaterialRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>* PrepareAsyncgetMaterialRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>* AsyncgetCount1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>* PrepareAsyncgetCount1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status init1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncinit1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(Asyncinit1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncinit1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncinit1Raw(context, request, cq));
    }
    ::grpc::Status free1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncfree1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(Asyncfree1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncfree1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncfree1Raw(context, request, cq));
    }
    ::grpc::Status getMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest& request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>> AsyncgetMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>>(AsyncgetMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>> PrepareAsyncgetMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>>(PrepareAsyncgetMaterialRaw(context, request, cq));
    }
    ::grpc::Status getCount1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest& request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>> AsyncgetCount1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>>(AsyncgetCount1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>> PrepareAsyncgetCount1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>>(PrepareAsyncgetCount1Raw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void init1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void init1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void free1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void free1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* response, std::function<void(::grpc::Status)>) override;
      void getMaterial(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getCount1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* response, std::function<void(::grpc::Status)>) override;
      void getCount1(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Asyncinit1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncinit1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Asyncfree1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncfree1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>* AsyncgetMaterialRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>* PrepareAsyncgetMaterialRaw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>* AsyncgetCount1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>* PrepareAsyncgetCount1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_init1_;
    const ::grpc::internal::RpcMethod rpcmethod_free1_;
    const ::grpc::internal::RpcMethod rpcmethod_getMaterial_;
    const ::grpc::internal::RpcMethod rpcmethod_getCount1_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Initializes this list with size elements
    virtual ::grpc::Status init1(::grpc::ServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest* request, ::google::protobuf::Empty* response);
    // / Destroys all the elements in this array
    virtual ::grpc::Status free1(::grpc::ServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest* request, ::google::protobuf::Empty* response);
    // / Returns the internal array of materials
    virtual ::grpc::Status getMaterial(::grpc::ServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* response);
    // / Returns the number of materials
    virtual ::grpc::Status getCount1(::grpc::ServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_init1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init1() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_init1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit1(::grpc::ServerContext* context, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_free1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_free1() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_free1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status free1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfree1(::grpc::ServerContext* context, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMaterial() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterial(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMaterial(::grpc::ServerContext* context, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCount1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getCount1() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getCount1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCount1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCount1(::grpc::ServerContext* context, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_init1<WithAsyncMethod_free1<WithAsyncMethod_getMaterial<WithAsyncMethod_getCount1<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_init1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init1() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest* request, ::google::protobuf::Empty* response) { return this->init1(context, request, response); }));}
    void SetMessageAllocatorFor_init1(
        ::grpc::MessageAllocator< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_free1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_free1() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest* request, ::google::protobuf::Empty* response) { return this->free1(context, request, response); }));}
    void SetMessageAllocatorFor_free1(
        ::grpc::MessageAllocator< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_free1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status free1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* free1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMaterial() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* response) { return this->getMaterial(context, request, response); }));}
    void SetMessageAllocatorFor_getMaterial(
        ::grpc::MessageAllocator< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterial(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getCount1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getCount1() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest* request, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* response) { return this->getCount1(context, request, response); }));}
    void SetMessageAllocatorFor_getCount1(
        ::grpc::MessageAllocator< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getCount1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCount1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCount1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_init1<WithCallbackMethod_free1<WithCallbackMethod_getMaterial<WithCallbackMethod_getCount1<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_init1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init1() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_init1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_free1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_free1() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_free1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status free1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMaterial() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterial(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCount1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getCount1() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getCount1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCount1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_init1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init1() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_init1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_free1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_free1() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_free1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status free1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfree1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMaterial() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterial(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMaterial(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCount1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getCount1() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getCount1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCount1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCount1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init1() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init1(context, request, response); }));
    }
    ~WithRawCallbackMethod_init1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_free1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_free1() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->free1(context, request, response); }));
    }
    ~WithRawCallbackMethod_free1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status free1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* free1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMaterial() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMaterial(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMaterial(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getCount1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getCount1() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getCount1(context, request, response); }));
    }
    ~WithRawCallbackMethod_getCount1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCount1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCount1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init1() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedinit1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_initRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_free1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_free1() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedfree1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_free1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status free1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedfree1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_freeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMaterial() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>* streamer) {
                       return this->StreamedgetMaterial(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMaterial(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMaterial(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialRequest,::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getMaterialResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCount1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getCount1() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>* streamer) {
                       return this->StreamedgetCount1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getCount1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCount1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest* /*request*/, ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCount1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountRequest,::octaneapi::ApiDBMaterialManager_ApiDBMaterialManager_DBMaterialArray_getCountResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_init1<WithStreamedUnaryMethod_free1<WithStreamedUnaryMethod_getMaterial<WithStreamedUnaryMethod_getCount1<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_init1<WithStreamedUnaryMethod_free1<WithStreamedUnaryMethod_getMaterial<WithStreamedUnaryMethod_getCount1<Service > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apidbmaterialmanager_2eproto__INCLUDED
