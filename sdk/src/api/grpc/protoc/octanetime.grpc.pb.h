// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: octanetime.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_octanetime_2eproto__INCLUDED
#define GRPC_octanetime_2eproto__INCLUDED

#include "octanetime.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'FrameRangeT' from 'octanetime.h'
class FrameRangeTService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.FrameRangeTService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status make(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest& request, ::octaneapi::FrameRangeT_makeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::FrameRangeT_makeResponse>> Asyncmake(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::FrameRangeT_makeResponse>>(AsyncmakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::FrameRangeT_makeResponse>> PrepareAsyncmake(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::FrameRangeT_makeResponse>>(PrepareAsyncmakeRaw(context, request, cq));
    }
    // / returns the amount of frames
    virtual ::grpc::Status count(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest& request, ::octaneapi::FrameRangeT_countResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::FrameRangeT_countResponse>> Asynccount(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::FrameRangeT_countResponse>>(AsynccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::FrameRangeT_countResponse>> PrepareAsynccount(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::FrameRangeT_countResponse>>(PrepareAsynccountRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void make(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest* request, ::octaneapi::FrameRangeT_makeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void make(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest* request, ::octaneapi::FrameRangeT_makeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / returns the amount of frames
      virtual void count(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest* request, ::octaneapi::FrameRangeT_countResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void count(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest* request, ::octaneapi::FrameRangeT_countResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::FrameRangeT_makeResponse>* AsyncmakeRaw(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::FrameRangeT_makeResponse>* PrepareAsyncmakeRaw(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::FrameRangeT_countResponse>* AsynccountRaw(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::FrameRangeT_countResponse>* PrepareAsynccountRaw(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status make(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest& request, ::octaneapi::FrameRangeT_makeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_makeResponse>> Asyncmake(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_makeResponse>>(AsyncmakeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_makeResponse>> PrepareAsyncmake(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_makeResponse>>(PrepareAsyncmakeRaw(context, request, cq));
    }
    ::grpc::Status count(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest& request, ::octaneapi::FrameRangeT_countResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_countResponse>> Asynccount(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_countResponse>>(AsynccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_countResponse>> PrepareAsynccount(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_countResponse>>(PrepareAsynccountRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void make(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest* request, ::octaneapi::FrameRangeT_makeResponse* response, std::function<void(::grpc::Status)>) override;
      void make(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest* request, ::octaneapi::FrameRangeT_makeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void count(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest* request, ::octaneapi::FrameRangeT_countResponse* response, std::function<void(::grpc::Status)>) override;
      void count(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest* request, ::octaneapi::FrameRangeT_countResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_makeResponse>* AsyncmakeRaw(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_makeResponse>* PrepareAsyncmakeRaw(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_makeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_countResponse>* AsynccountRaw(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::FrameRangeT_countResponse>* PrepareAsynccountRaw(::grpc::ClientContext* context, const ::octaneapi::FrameRangeT_countRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_make_;
    const ::grpc::internal::RpcMethod rpcmethod_count_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status make(::grpc::ServerContext* context, const ::octaneapi::FrameRangeT_makeRequest* request, ::octaneapi::FrameRangeT_makeResponse* response);
    // / returns the amount of frames
    virtual ::grpc::Status count(::grpc::ServerContext* context, const ::octaneapi::FrameRangeT_countRequest* request, ::octaneapi::FrameRangeT_countResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_make : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_make() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_make() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make(::grpc::ServerContext* /*context*/, const ::octaneapi::FrameRangeT_makeRequest* /*request*/, ::octaneapi::FrameRangeT_makeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmake(::grpc::ServerContext* context, ::octaneapi::FrameRangeT_makeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::FrameRangeT_makeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_count : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_count() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_count() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status count(::grpc::ServerContext* /*context*/, const ::octaneapi::FrameRangeT_countRequest* /*request*/, ::octaneapi::FrameRangeT_countResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcount(::grpc::ServerContext* context, ::octaneapi::FrameRangeT_countRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::FrameRangeT_countResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_make<WithAsyncMethod_count<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_make : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_make() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::FrameRangeT_makeRequest, ::octaneapi::FrameRangeT_makeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::FrameRangeT_makeRequest* request, ::octaneapi::FrameRangeT_makeResponse* response) { return this->make(context, request, response); }));}
    void SetMessageAllocatorFor_make(
        ::grpc::MessageAllocator< ::octaneapi::FrameRangeT_makeRequest, ::octaneapi::FrameRangeT_makeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::FrameRangeT_makeRequest, ::octaneapi::FrameRangeT_makeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_make() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make(::grpc::ServerContext* /*context*/, const ::octaneapi::FrameRangeT_makeRequest* /*request*/, ::octaneapi::FrameRangeT_makeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* make(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::FrameRangeT_makeRequest* /*request*/, ::octaneapi::FrameRangeT_makeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_count : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_count() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::FrameRangeT_countRequest, ::octaneapi::FrameRangeT_countResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::FrameRangeT_countRequest* request, ::octaneapi::FrameRangeT_countResponse* response) { return this->count(context, request, response); }));}
    void SetMessageAllocatorFor_count(
        ::grpc::MessageAllocator< ::octaneapi::FrameRangeT_countRequest, ::octaneapi::FrameRangeT_countResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::FrameRangeT_countRequest, ::octaneapi::FrameRangeT_countResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_count() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status count(::grpc::ServerContext* /*context*/, const ::octaneapi::FrameRangeT_countRequest* /*request*/, ::octaneapi::FrameRangeT_countResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* count(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::FrameRangeT_countRequest* /*request*/, ::octaneapi::FrameRangeT_countResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_make<WithCallbackMethod_count<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_make : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_make() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_make() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make(::grpc::ServerContext* /*context*/, const ::octaneapi::FrameRangeT_makeRequest* /*request*/, ::octaneapi::FrameRangeT_makeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_count : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_count() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_count() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status count(::grpc::ServerContext* /*context*/, const ::octaneapi::FrameRangeT_countRequest* /*request*/, ::octaneapi::FrameRangeT_countResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_make : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_make() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_make() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make(::grpc::ServerContext* /*context*/, const ::octaneapi::FrameRangeT_makeRequest* /*request*/, ::octaneapi::FrameRangeT_makeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmake(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_count : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_count() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_count() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status count(::grpc::ServerContext* /*context*/, const ::octaneapi::FrameRangeT_countRequest* /*request*/, ::octaneapi::FrameRangeT_countResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_make : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_make() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->make(context, request, response); }));
    }
    ~WithRawCallbackMethod_make() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make(::grpc::ServerContext* /*context*/, const ::octaneapi::FrameRangeT_makeRequest* /*request*/, ::octaneapi::FrameRangeT_makeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* make(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_count : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_count() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->count(context, request, response); }));
    }
    ~WithRawCallbackMethod_count() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status count(::grpc::ServerContext* /*context*/, const ::octaneapi::FrameRangeT_countRequest* /*request*/, ::octaneapi::FrameRangeT_countResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* count(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_make : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_make() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::FrameRangeT_makeRequest, ::octaneapi::FrameRangeT_makeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::FrameRangeT_makeRequest, ::octaneapi::FrameRangeT_makeResponse>* streamer) {
                       return this->Streamedmake(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_make() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status make(::grpc::ServerContext* /*context*/, const ::octaneapi::FrameRangeT_makeRequest* /*request*/, ::octaneapi::FrameRangeT_makeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedmake(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::FrameRangeT_makeRequest,::octaneapi::FrameRangeT_makeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_count : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_count() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::FrameRangeT_countRequest, ::octaneapi::FrameRangeT_countResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::FrameRangeT_countRequest, ::octaneapi::FrameRangeT_countResponse>* streamer) {
                       return this->Streamedcount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_count() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status count(::grpc::ServerContext* /*context*/, const ::octaneapi::FrameRangeT_countRequest* /*request*/, ::octaneapi::FrameRangeT_countResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::FrameRangeT_countRequest,::octaneapi::FrameRangeT_countResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_make<WithStreamedUnaryMethod_count<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_make<WithStreamedUnaryMethod_count<Service > > StreamedService;
};

// GRPC interface definition for class 'TimeSpanT' from 'octanetime.h'
class TimeSpanTService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.TimeSpanTService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status make1(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest& request, ::octaneapi::TimeSpanT_makeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_makeResponse>> Asyncmake1(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_makeResponse>>(Asyncmake1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_makeResponse>> PrepareAsyncmake1(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_makeResponse>>(PrepareAsyncmake1Raw(context, request, cq));
    }
    // / Returns the length of this time interval
    virtual ::grpc::Status length(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest& request, ::octaneapi::TimeSpanT_lengthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_lengthResponse>> Asynclength(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_lengthResponse>>(AsynclengthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_lengthResponse>> PrepareAsynclength(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_lengthResponse>>(PrepareAsynclengthRaw(context, request, cq));
    }
    // / Returns TRUE if this interval has zero length
    virtual ::grpc::Status empty(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest& request, ::octaneapi::TimeSpanT_emptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_emptyResponse>> Asyncempty(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_emptyResponse>>(AsyncemptyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_emptyResponse>> PrepareAsyncempty(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_emptyResponse>>(PrepareAsyncemptyRaw(context, request, cq));
    }
    // / Adds an offset to the start and end of the interval
    virtual ::grpc::Status shift(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncshift(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncshiftRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncshift(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncshiftRaw(context, request, cq));
    }
    // / Returns TRUE if the passed time is inside the interval
    virtual ::grpc::Status contains(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest& request, ::octaneapi::TimeSpanT_containsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_containsResponse>> Asynccontains(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_containsResponse>>(AsynccontainsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_containsResponse>> PrepareAsynccontains(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_containsResponse>>(PrepareAsynccontainsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void make1(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest* request, ::octaneapi::TimeSpanT_makeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void make1(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest* request, ::octaneapi::TimeSpanT_makeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the length of this time interval
      virtual void length(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest* request, ::octaneapi::TimeSpanT_lengthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void length(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest* request, ::octaneapi::TimeSpanT_lengthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if this interval has zero length
      virtual void empty(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest* request, ::octaneapi::TimeSpanT_emptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void empty(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest* request, ::octaneapi::TimeSpanT_emptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Adds an offset to the start and end of the interval
      virtual void shift(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void shift(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns TRUE if the passed time is inside the interval
      virtual void contains(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest* request, ::octaneapi::TimeSpanT_containsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void contains(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest* request, ::octaneapi::TimeSpanT_containsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_makeResponse>* Asyncmake1Raw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_makeResponse>* PrepareAsyncmake1Raw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_lengthResponse>* AsynclengthRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_lengthResponse>* PrepareAsynclengthRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_emptyResponse>* AsyncemptyRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_emptyResponse>* PrepareAsyncemptyRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncshiftRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncshiftRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_containsResponse>* AsynccontainsRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::TimeSpanT_containsResponse>* PrepareAsynccontainsRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status make1(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest& request, ::octaneapi::TimeSpanT_makeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_makeResponse>> Asyncmake1(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_makeResponse>>(Asyncmake1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_makeResponse>> PrepareAsyncmake1(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_makeResponse>>(PrepareAsyncmake1Raw(context, request, cq));
    }
    ::grpc::Status length(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest& request, ::octaneapi::TimeSpanT_lengthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_lengthResponse>> Asynclength(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_lengthResponse>>(AsynclengthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_lengthResponse>> PrepareAsynclength(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_lengthResponse>>(PrepareAsynclengthRaw(context, request, cq));
    }
    ::grpc::Status empty(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest& request, ::octaneapi::TimeSpanT_emptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_emptyResponse>> Asyncempty(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_emptyResponse>>(AsyncemptyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_emptyResponse>> PrepareAsyncempty(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_emptyResponse>>(PrepareAsyncemptyRaw(context, request, cq));
    }
    ::grpc::Status shift(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncshift(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncshiftRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncshift(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncshiftRaw(context, request, cq));
    }
    ::grpc::Status contains(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest& request, ::octaneapi::TimeSpanT_containsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_containsResponse>> Asynccontains(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_containsResponse>>(AsynccontainsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_containsResponse>> PrepareAsynccontains(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_containsResponse>>(PrepareAsynccontainsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void make1(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest* request, ::octaneapi::TimeSpanT_makeResponse* response, std::function<void(::grpc::Status)>) override;
      void make1(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest* request, ::octaneapi::TimeSpanT_makeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void length(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest* request, ::octaneapi::TimeSpanT_lengthResponse* response, std::function<void(::grpc::Status)>) override;
      void length(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest* request, ::octaneapi::TimeSpanT_lengthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void empty(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest* request, ::octaneapi::TimeSpanT_emptyResponse* response, std::function<void(::grpc::Status)>) override;
      void empty(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest* request, ::octaneapi::TimeSpanT_emptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void shift(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void shift(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void contains(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest* request, ::octaneapi::TimeSpanT_containsResponse* response, std::function<void(::grpc::Status)>) override;
      void contains(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest* request, ::octaneapi::TimeSpanT_containsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_makeResponse>* Asyncmake1Raw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_makeResponse>* PrepareAsyncmake1Raw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_makeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_lengthResponse>* AsynclengthRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_lengthResponse>* PrepareAsynclengthRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_lengthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_emptyResponse>* AsyncemptyRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_emptyResponse>* PrepareAsyncemptyRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_emptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncshiftRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncshiftRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_shiftRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_containsResponse>* AsynccontainsRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::TimeSpanT_containsResponse>* PrepareAsynccontainsRaw(::grpc::ClientContext* context, const ::octaneapi::TimeSpanT_containsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_make1_;
    const ::grpc::internal::RpcMethod rpcmethod_length_;
    const ::grpc::internal::RpcMethod rpcmethod_empty_;
    const ::grpc::internal::RpcMethod rpcmethod_shift_;
    const ::grpc::internal::RpcMethod rpcmethod_contains_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status make1(::grpc::ServerContext* context, const ::octaneapi::TimeSpanT_makeRequest* request, ::octaneapi::TimeSpanT_makeResponse* response);
    // / Returns the length of this time interval
    virtual ::grpc::Status length(::grpc::ServerContext* context, const ::octaneapi::TimeSpanT_lengthRequest* request, ::octaneapi::TimeSpanT_lengthResponse* response);
    // / Returns TRUE if this interval has zero length
    virtual ::grpc::Status empty(::grpc::ServerContext* context, const ::octaneapi::TimeSpanT_emptyRequest* request, ::octaneapi::TimeSpanT_emptyResponse* response);
    // / Adds an offset to the start and end of the interval
    virtual ::grpc::Status shift(::grpc::ServerContext* context, const ::octaneapi::TimeSpanT_shiftRequest* request, ::google::protobuf::Empty* response);
    // / Returns TRUE if the passed time is inside the interval
    virtual ::grpc::Status contains(::grpc::ServerContext* context, const ::octaneapi::TimeSpanT_containsRequest* request, ::octaneapi::TimeSpanT_containsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_make1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_make1() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_make1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make1(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_makeRequest* /*request*/, ::octaneapi::TimeSpanT_makeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmake1(::grpc::ServerContext* context, ::octaneapi::TimeSpanT_makeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::TimeSpanT_makeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_length : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_length() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_length() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status length(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_lengthRequest* /*request*/, ::octaneapi::TimeSpanT_lengthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlength(::grpc::ServerContext* context, ::octaneapi::TimeSpanT_lengthRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::TimeSpanT_lengthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_empty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_empty() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_empty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status empty(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_emptyRequest* /*request*/, ::octaneapi::TimeSpanT_emptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestempty(::grpc::ServerContext* context, ::octaneapi::TimeSpanT_emptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::TimeSpanT_emptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_shift : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_shift() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_shift() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shift(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_shiftRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestshift(::grpc::ServerContext* context, ::octaneapi::TimeSpanT_shiftRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_contains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_contains() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_contains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status contains(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_containsRequest* /*request*/, ::octaneapi::TimeSpanT_containsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcontains(::grpc::ServerContext* context, ::octaneapi::TimeSpanT_containsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::TimeSpanT_containsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_make1<WithAsyncMethod_length<WithAsyncMethod_empty<WithAsyncMethod_shift<WithAsyncMethod_contains<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_make1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_make1() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::TimeSpanT_makeRequest, ::octaneapi::TimeSpanT_makeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::TimeSpanT_makeRequest* request, ::octaneapi::TimeSpanT_makeResponse* response) { return this->make1(context, request, response); }));}
    void SetMessageAllocatorFor_make1(
        ::grpc::MessageAllocator< ::octaneapi::TimeSpanT_makeRequest, ::octaneapi::TimeSpanT_makeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::TimeSpanT_makeRequest, ::octaneapi::TimeSpanT_makeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_make1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make1(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_makeRequest* /*request*/, ::octaneapi::TimeSpanT_makeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* make1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::TimeSpanT_makeRequest* /*request*/, ::octaneapi::TimeSpanT_makeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_length : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_length() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::TimeSpanT_lengthRequest, ::octaneapi::TimeSpanT_lengthResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::TimeSpanT_lengthRequest* request, ::octaneapi::TimeSpanT_lengthResponse* response) { return this->length(context, request, response); }));}
    void SetMessageAllocatorFor_length(
        ::grpc::MessageAllocator< ::octaneapi::TimeSpanT_lengthRequest, ::octaneapi::TimeSpanT_lengthResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::TimeSpanT_lengthRequest, ::octaneapi::TimeSpanT_lengthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_length() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status length(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_lengthRequest* /*request*/, ::octaneapi::TimeSpanT_lengthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* length(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::TimeSpanT_lengthRequest* /*request*/, ::octaneapi::TimeSpanT_lengthResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_empty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_empty() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::TimeSpanT_emptyRequest, ::octaneapi::TimeSpanT_emptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::TimeSpanT_emptyRequest* request, ::octaneapi::TimeSpanT_emptyResponse* response) { return this->empty(context, request, response); }));}
    void SetMessageAllocatorFor_empty(
        ::grpc::MessageAllocator< ::octaneapi::TimeSpanT_emptyRequest, ::octaneapi::TimeSpanT_emptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::TimeSpanT_emptyRequest, ::octaneapi::TimeSpanT_emptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_empty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status empty(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_emptyRequest* /*request*/, ::octaneapi::TimeSpanT_emptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* empty(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::TimeSpanT_emptyRequest* /*request*/, ::octaneapi::TimeSpanT_emptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_shift : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_shift() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::TimeSpanT_shiftRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::TimeSpanT_shiftRequest* request, ::google::protobuf::Empty* response) { return this->shift(context, request, response); }));}
    void SetMessageAllocatorFor_shift(
        ::grpc::MessageAllocator< ::octaneapi::TimeSpanT_shiftRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::TimeSpanT_shiftRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_shift() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shift(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_shiftRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* shift(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::TimeSpanT_shiftRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_contains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_contains() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::TimeSpanT_containsRequest, ::octaneapi::TimeSpanT_containsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::TimeSpanT_containsRequest* request, ::octaneapi::TimeSpanT_containsResponse* response) { return this->contains(context, request, response); }));}
    void SetMessageAllocatorFor_contains(
        ::grpc::MessageAllocator< ::octaneapi::TimeSpanT_containsRequest, ::octaneapi::TimeSpanT_containsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::TimeSpanT_containsRequest, ::octaneapi::TimeSpanT_containsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_contains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status contains(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_containsRequest* /*request*/, ::octaneapi::TimeSpanT_containsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* contains(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::TimeSpanT_containsRequest* /*request*/, ::octaneapi::TimeSpanT_containsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_make1<WithCallbackMethod_length<WithCallbackMethod_empty<WithCallbackMethod_shift<WithCallbackMethod_contains<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_make1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_make1() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_make1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make1(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_makeRequest* /*request*/, ::octaneapi::TimeSpanT_makeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_length : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_length() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_length() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status length(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_lengthRequest* /*request*/, ::octaneapi::TimeSpanT_lengthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_empty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_empty() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_empty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status empty(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_emptyRequest* /*request*/, ::octaneapi::TimeSpanT_emptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_shift : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_shift() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_shift() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shift(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_shiftRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_contains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_contains() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_contains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status contains(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_containsRequest* /*request*/, ::octaneapi::TimeSpanT_containsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_make1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_make1() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_make1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make1(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_makeRequest* /*request*/, ::octaneapi::TimeSpanT_makeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmake1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_length : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_length() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_length() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status length(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_lengthRequest* /*request*/, ::octaneapi::TimeSpanT_lengthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlength(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_empty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_empty() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_empty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status empty(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_emptyRequest* /*request*/, ::octaneapi::TimeSpanT_emptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestempty(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_shift : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_shift() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_shift() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shift(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_shiftRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestshift(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_contains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_contains() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_contains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status contains(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_containsRequest* /*request*/, ::octaneapi::TimeSpanT_containsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcontains(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_make1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_make1() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->make1(context, request, response); }));
    }
    ~WithRawCallbackMethod_make1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make1(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_makeRequest* /*request*/, ::octaneapi::TimeSpanT_makeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* make1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_length : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_length() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->length(context, request, response); }));
    }
    ~WithRawCallbackMethod_length() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status length(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_lengthRequest* /*request*/, ::octaneapi::TimeSpanT_lengthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* length(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_empty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_empty() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->empty(context, request, response); }));
    }
    ~WithRawCallbackMethod_empty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status empty(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_emptyRequest* /*request*/, ::octaneapi::TimeSpanT_emptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* empty(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_shift : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_shift() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->shift(context, request, response); }));
    }
    ~WithRawCallbackMethod_shift() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status shift(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_shiftRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* shift(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_contains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_contains() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->contains(context, request, response); }));
    }
    ~WithRawCallbackMethod_contains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status contains(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_containsRequest* /*request*/, ::octaneapi::TimeSpanT_containsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* contains(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_make1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_make1() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::TimeSpanT_makeRequest, ::octaneapi::TimeSpanT_makeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::TimeSpanT_makeRequest, ::octaneapi::TimeSpanT_makeResponse>* streamer) {
                       return this->Streamedmake1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_make1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status make1(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_makeRequest* /*request*/, ::octaneapi::TimeSpanT_makeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedmake1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::TimeSpanT_makeRequest,::octaneapi::TimeSpanT_makeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_length : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_length() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::TimeSpanT_lengthRequest, ::octaneapi::TimeSpanT_lengthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::TimeSpanT_lengthRequest, ::octaneapi::TimeSpanT_lengthResponse>* streamer) {
                       return this->Streamedlength(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_length() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status length(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_lengthRequest* /*request*/, ::octaneapi::TimeSpanT_lengthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlength(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::TimeSpanT_lengthRequest,::octaneapi::TimeSpanT_lengthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_empty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_empty() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::TimeSpanT_emptyRequest, ::octaneapi::TimeSpanT_emptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::TimeSpanT_emptyRequest, ::octaneapi::TimeSpanT_emptyResponse>* streamer) {
                       return this->Streamedempty(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_empty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status empty(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_emptyRequest* /*request*/, ::octaneapi::TimeSpanT_emptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedempty(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::TimeSpanT_emptyRequest,::octaneapi::TimeSpanT_emptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_shift : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_shift() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::TimeSpanT_shiftRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::TimeSpanT_shiftRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedshift(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_shift() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status shift(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_shiftRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedshift(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::TimeSpanT_shiftRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_contains : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_contains() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::TimeSpanT_containsRequest, ::octaneapi::TimeSpanT_containsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::TimeSpanT_containsRequest, ::octaneapi::TimeSpanT_containsResponse>* streamer) {
                       return this->Streamedcontains(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_contains() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status contains(::grpc::ServerContext* /*context*/, const ::octaneapi::TimeSpanT_containsRequest* /*request*/, ::octaneapi::TimeSpanT_containsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcontains(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::TimeSpanT_containsRequest,::octaneapi::TimeSpanT_containsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_make1<WithStreamedUnaryMethod_length<WithStreamedUnaryMethod_empty<WithStreamedUnaryMethod_shift<WithStreamedUnaryMethod_contains<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_make1<WithStreamedUnaryMethod_length<WithStreamedUnaryMethod_empty<WithStreamedUnaryMethod_shift<WithStreamedUnaryMethod_contains<Service > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_octanetime_2eproto__INCLUDED
