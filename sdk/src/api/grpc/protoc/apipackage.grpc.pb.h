// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apipackage.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apipackage_2eproto__INCLUDED
#define GRPC_apipackage_2eproto__INCLUDED

#include "apipackage.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiPackage' from 'apipackage.h'
class ApiPackageService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiPackageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Deallocates a string array that 
    virtual ::grpc::Status freeArray(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_freeArrayRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncfreeArray(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_freeArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncfreeArrayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncfreeArray(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_freeArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncfreeArrayRaw(context, request, cq));
    }
    // / Open a package for reading files
    virtual ::grpc::Status open(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_openRequest& request, ::octaneapi::ApiPackage_openResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_openResponse>> Asyncopen(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_openRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_openResponse>>(AsyncopenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_openResponse>> PrepareAsyncopen(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_openRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_openResponse>>(PrepareAsyncopenRaw(context, request, cq));
    }
    // / Closes a package
    virtual ::grpc::Status close(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_closeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncclose(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_closeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsynccloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncclose(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_closeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsynccloseRaw(context, request, cq));
    }
    // / Creates a list of all files stored in the ORBX package
    virtual ::grpc::Status getFileList(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_getFileListRequest& request, ::octaneapi::ApiPackage_getFileListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_getFileListResponse>> AsyncgetFileList(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_getFileListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_getFileListResponse>>(AsyncgetFileListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_getFileListResponse>> PrepareAsyncgetFileList(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_getFileListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_getFileListResponse>>(PrepareAsyncgetFileListRaw(context, request, cq));
    }
    // / Checks if a file exists in the package
    virtual ::grpc::Status fileExists(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExistsRequest& request, ::octaneapi::ApiPackage_fileExistsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_fileExistsResponse>> AsyncfileExists(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_fileExistsResponse>>(AsyncfileExistsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_fileExistsResponse>> PrepareAsyncfileExists(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_fileExistsResponse>>(PrepareAsyncfileExistsRaw(context, request, cq));
    }
    // / Checks if a file exists in the package
    virtual ::grpc::Status fileExists1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExists1Request& request, ::octaneapi::ApiPackage_fileExists1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_fileExists1Response>> AsyncfileExists1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExists1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_fileExists1Response>>(AsyncfileExists1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_fileExists1Response>> PrepareAsyncfileExists1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExists1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_fileExists1Response>>(PrepareAsyncfileExists1Raw(context, request, cq));
    }
    // / Reads a file from the package
    virtual ::grpc::Status readFile(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFileRequest& request, ::octaneapi::ApiPackage_readFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_readFileResponse>> AsyncreadFile(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_readFileResponse>>(AsyncreadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_readFileResponse>> PrepareAsyncreadFile(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_readFileResponse>>(PrepareAsyncreadFileRaw(context, request, cq));
    }
    // / Reads data from the package as a cstring
    virtual ::grpc::Status readFile1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFile1Request& request, ::octaneapi::ApiPackage_readFile1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_readFile1Response>> AsyncreadFile1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFile1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_readFile1Response>>(AsyncreadFile1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_readFile1Response>> PrepareAsyncreadFile1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFile1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_readFile1Response>>(PrepareAsyncreadFile1Raw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Deallocates a string array that 
      virtual void freeArray(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_freeArrayRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void freeArray(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_freeArrayRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Open a package for reading files
      virtual void open(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_openRequest* request, ::octaneapi::ApiPackage_openResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void open(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_openRequest* request, ::octaneapi::ApiPackage_openResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Closes a package
      virtual void close(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_closeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void close(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_closeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Creates a list of all files stored in the ORBX package
      virtual void getFileList(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_getFileListRequest* request, ::octaneapi::ApiPackage_getFileListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getFileList(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_getFileListRequest* request, ::octaneapi::ApiPackage_getFileListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Checks if a file exists in the package
      virtual void fileExists(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExistsRequest* request, ::octaneapi::ApiPackage_fileExistsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void fileExists(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExistsRequest* request, ::octaneapi::ApiPackage_fileExistsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Checks if a file exists in the package
      virtual void fileExists1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExists1Request* request, ::octaneapi::ApiPackage_fileExists1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void fileExists1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExists1Request* request, ::octaneapi::ApiPackage_fileExists1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Reads a file from the package
      virtual void readFile(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFileRequest* request, ::octaneapi::ApiPackage_readFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void readFile(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFileRequest* request, ::octaneapi::ApiPackage_readFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Reads data from the package as a cstring
      virtual void readFile1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFile1Request* request, ::octaneapi::ApiPackage_readFile1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void readFile1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFile1Request* request, ::octaneapi::ApiPackage_readFile1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncfreeArrayRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_freeArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncfreeArrayRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_freeArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_openResponse>* AsyncopenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_openRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_openResponse>* PrepareAsyncopenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_openRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsynccloseRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_closeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsynccloseRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_closeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_getFileListResponse>* AsyncgetFileListRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_getFileListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_getFileListResponse>* PrepareAsyncgetFileListRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_getFileListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_fileExistsResponse>* AsyncfileExistsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExistsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_fileExistsResponse>* PrepareAsyncfileExistsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExistsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_fileExists1Response>* AsyncfileExists1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExists1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_fileExists1Response>* PrepareAsyncfileExists1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExists1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_readFileResponse>* AsyncreadFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_readFileResponse>* PrepareAsyncreadFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_readFile1Response>* AsyncreadFile1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFile1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiPackage_readFile1Response>* PrepareAsyncreadFile1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFile1Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status freeArray(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_freeArrayRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncfreeArray(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_freeArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncfreeArrayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncfreeArray(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_freeArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncfreeArrayRaw(context, request, cq));
    }
    ::grpc::Status open(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_openRequest& request, ::octaneapi::ApiPackage_openResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_openResponse>> Asyncopen(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_openRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_openResponse>>(AsyncopenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_openResponse>> PrepareAsyncopen(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_openRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_openResponse>>(PrepareAsyncopenRaw(context, request, cq));
    }
    ::grpc::Status close(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_closeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncclose(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_closeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsynccloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncclose(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_closeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsynccloseRaw(context, request, cq));
    }
    ::grpc::Status getFileList(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_getFileListRequest& request, ::octaneapi::ApiPackage_getFileListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_getFileListResponse>> AsyncgetFileList(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_getFileListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_getFileListResponse>>(AsyncgetFileListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_getFileListResponse>> PrepareAsyncgetFileList(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_getFileListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_getFileListResponse>>(PrepareAsyncgetFileListRaw(context, request, cq));
    }
    ::grpc::Status fileExists(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExistsRequest& request, ::octaneapi::ApiPackage_fileExistsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_fileExistsResponse>> AsyncfileExists(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_fileExistsResponse>>(AsyncfileExistsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_fileExistsResponse>> PrepareAsyncfileExists(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_fileExistsResponse>>(PrepareAsyncfileExistsRaw(context, request, cq));
    }
    ::grpc::Status fileExists1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExists1Request& request, ::octaneapi::ApiPackage_fileExists1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_fileExists1Response>> AsyncfileExists1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExists1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_fileExists1Response>>(AsyncfileExists1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_fileExists1Response>> PrepareAsyncfileExists1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExists1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_fileExists1Response>>(PrepareAsyncfileExists1Raw(context, request, cq));
    }
    ::grpc::Status readFile(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFileRequest& request, ::octaneapi::ApiPackage_readFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_readFileResponse>> AsyncreadFile(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_readFileResponse>>(AsyncreadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_readFileResponse>> PrepareAsyncreadFile(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_readFileResponse>>(PrepareAsyncreadFileRaw(context, request, cq));
    }
    ::grpc::Status readFile1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFile1Request& request, ::octaneapi::ApiPackage_readFile1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_readFile1Response>> AsyncreadFile1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFile1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_readFile1Response>>(AsyncreadFile1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_readFile1Response>> PrepareAsyncreadFile1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFile1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_readFile1Response>>(PrepareAsyncreadFile1Raw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void freeArray(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_freeArrayRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void freeArray(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_freeArrayRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void open(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_openRequest* request, ::octaneapi::ApiPackage_openResponse* response, std::function<void(::grpc::Status)>) override;
      void open(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_openRequest* request, ::octaneapi::ApiPackage_openResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void close(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_closeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void close(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_closeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getFileList(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_getFileListRequest* request, ::octaneapi::ApiPackage_getFileListResponse* response, std::function<void(::grpc::Status)>) override;
      void getFileList(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_getFileListRequest* request, ::octaneapi::ApiPackage_getFileListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void fileExists(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExistsRequest* request, ::octaneapi::ApiPackage_fileExistsResponse* response, std::function<void(::grpc::Status)>) override;
      void fileExists(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExistsRequest* request, ::octaneapi::ApiPackage_fileExistsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void fileExists1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExists1Request* request, ::octaneapi::ApiPackage_fileExists1Response* response, std::function<void(::grpc::Status)>) override;
      void fileExists1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExists1Request* request, ::octaneapi::ApiPackage_fileExists1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void readFile(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFileRequest* request, ::octaneapi::ApiPackage_readFileResponse* response, std::function<void(::grpc::Status)>) override;
      void readFile(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFileRequest* request, ::octaneapi::ApiPackage_readFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void readFile1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFile1Request* request, ::octaneapi::ApiPackage_readFile1Response* response, std::function<void(::grpc::Status)>) override;
      void readFile1(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFile1Request* request, ::octaneapi::ApiPackage_readFile1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncfreeArrayRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_freeArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncfreeArrayRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_freeArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_openResponse>* AsyncopenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_openRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_openResponse>* PrepareAsyncopenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_openRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsynccloseRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_closeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsynccloseRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_closeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_getFileListResponse>* AsyncgetFileListRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_getFileListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_getFileListResponse>* PrepareAsyncgetFileListRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_getFileListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_fileExistsResponse>* AsyncfileExistsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExistsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_fileExistsResponse>* PrepareAsyncfileExistsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExistsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_fileExists1Response>* AsyncfileExists1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExists1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_fileExists1Response>* PrepareAsyncfileExists1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_fileExists1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_readFileResponse>* AsyncreadFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_readFileResponse>* PrepareAsyncreadFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_readFile1Response>* AsyncreadFile1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFile1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiPackage_readFile1Response>* PrepareAsyncreadFile1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiPackage_readFile1Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_freeArray_;
    const ::grpc::internal::RpcMethod rpcmethod_open_;
    const ::grpc::internal::RpcMethod rpcmethod_close_;
    const ::grpc::internal::RpcMethod rpcmethod_getFileList_;
    const ::grpc::internal::RpcMethod rpcmethod_fileExists_;
    const ::grpc::internal::RpcMethod rpcmethod_fileExists1_;
    const ::grpc::internal::RpcMethod rpcmethod_readFile_;
    const ::grpc::internal::RpcMethod rpcmethod_readFile1_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Deallocates a string array that 
    virtual ::grpc::Status freeArray(::grpc::ServerContext* context, const ::octaneapi::ApiPackage_freeArrayRequest* request, ::google::protobuf::Empty* response);
    // / Open a package for reading files
    virtual ::grpc::Status open(::grpc::ServerContext* context, const ::octaneapi::ApiPackage_openRequest* request, ::octaneapi::ApiPackage_openResponse* response);
    // / Closes a package
    virtual ::grpc::Status close(::grpc::ServerContext* context, const ::octaneapi::ApiPackage_closeRequest* request, ::google::protobuf::Empty* response);
    // / Creates a list of all files stored in the ORBX package
    virtual ::grpc::Status getFileList(::grpc::ServerContext* context, const ::octaneapi::ApiPackage_getFileListRequest* request, ::octaneapi::ApiPackage_getFileListResponse* response);
    // / Checks if a file exists in the package
    virtual ::grpc::Status fileExists(::grpc::ServerContext* context, const ::octaneapi::ApiPackage_fileExistsRequest* request, ::octaneapi::ApiPackage_fileExistsResponse* response);
    // / Checks if a file exists in the package
    virtual ::grpc::Status fileExists1(::grpc::ServerContext* context, const ::octaneapi::ApiPackage_fileExists1Request* request, ::octaneapi::ApiPackage_fileExists1Response* response);
    // / Reads a file from the package
    virtual ::grpc::Status readFile(::grpc::ServerContext* context, const ::octaneapi::ApiPackage_readFileRequest* request, ::octaneapi::ApiPackage_readFileResponse* response);
    // / Reads data from the package as a cstring
    virtual ::grpc::Status readFile1(::grpc::ServerContext* context, const ::octaneapi::ApiPackage_readFile1Request* request, ::octaneapi::ApiPackage_readFile1Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_freeArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_freeArray() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_freeArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status freeArray(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_freeArrayRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfreeArray(::grpc::ServerContext* context, ::octaneapi::ApiPackage_freeArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_open() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status open(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_openRequest* /*request*/, ::octaneapi::ApiPackage_openResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestopen(::grpc::ServerContext* context, ::octaneapi::ApiPackage_openRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiPackage_openResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_close() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_closeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclose(::grpc::ServerContext* context, ::octaneapi::ApiPackage_closeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getFileList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getFileList() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getFileList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileList(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_getFileListRequest* /*request*/, ::octaneapi::ApiPackage_getFileListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetFileList(::grpc::ServerContext* context, ::octaneapi::ApiPackage_getFileListRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiPackage_getFileListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_fileExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_fileExists() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_fileExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileExists(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_fileExistsRequest* /*request*/, ::octaneapi::ApiPackage_fileExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfileExists(::grpc::ServerContext* context, ::octaneapi::ApiPackage_fileExistsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiPackage_fileExistsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_fileExists1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_fileExists1() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_fileExists1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileExists1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_fileExists1Request* /*request*/, ::octaneapi::ApiPackage_fileExists1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfileExists1(::grpc::ServerContext* context, ::octaneapi::ApiPackage_fileExists1Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiPackage_fileExists1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_readFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_readFile() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_readFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_readFileRequest* /*request*/, ::octaneapi::ApiPackage_readFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadFile(::grpc::ServerContext* context, ::octaneapi::ApiPackage_readFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiPackage_readFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_readFile1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_readFile1() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_readFile1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readFile1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_readFile1Request* /*request*/, ::octaneapi::ApiPackage_readFile1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadFile1(::grpc::ServerContext* context, ::octaneapi::ApiPackage_readFile1Request* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiPackage_readFile1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_freeArray<WithAsyncMethod_open<WithAsyncMethod_close<WithAsyncMethod_getFileList<WithAsyncMethod_fileExists<WithAsyncMethod_fileExists1<WithAsyncMethod_readFile<WithAsyncMethod_readFile1<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_freeArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_freeArray() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_freeArrayRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiPackage_freeArrayRequest* request, ::google::protobuf::Empty* response) { return this->freeArray(context, request, response); }));}
    void SetMessageAllocatorFor_freeArray(
        ::grpc::MessageAllocator< ::octaneapi::ApiPackage_freeArrayRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_freeArrayRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_freeArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status freeArray(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_freeArrayRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* freeArray(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiPackage_freeArrayRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_open() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_openRequest, ::octaneapi::ApiPackage_openResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiPackage_openRequest* request, ::octaneapi::ApiPackage_openResponse* response) { return this->open(context, request, response); }));}
    void SetMessageAllocatorFor_open(
        ::grpc::MessageAllocator< ::octaneapi::ApiPackage_openRequest, ::octaneapi::ApiPackage_openResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_openRequest, ::octaneapi::ApiPackage_openResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status open(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_openRequest* /*request*/, ::octaneapi::ApiPackage_openResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* open(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiPackage_openRequest* /*request*/, ::octaneapi::ApiPackage_openResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_close() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_closeRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiPackage_closeRequest* request, ::google::protobuf::Empty* response) { return this->close(context, request, response); }));}
    void SetMessageAllocatorFor_close(
        ::grpc::MessageAllocator< ::octaneapi::ApiPackage_closeRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_closeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_closeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* close(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiPackage_closeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getFileList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getFileList() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_getFileListRequest, ::octaneapi::ApiPackage_getFileListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiPackage_getFileListRequest* request, ::octaneapi::ApiPackage_getFileListResponse* response) { return this->getFileList(context, request, response); }));}
    void SetMessageAllocatorFor_getFileList(
        ::grpc::MessageAllocator< ::octaneapi::ApiPackage_getFileListRequest, ::octaneapi::ApiPackage_getFileListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_getFileListRequest, ::octaneapi::ApiPackage_getFileListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getFileList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileList(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_getFileListRequest* /*request*/, ::octaneapi::ApiPackage_getFileListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getFileList(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiPackage_getFileListRequest* /*request*/, ::octaneapi::ApiPackage_getFileListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_fileExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_fileExists() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_fileExistsRequest, ::octaneapi::ApiPackage_fileExistsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiPackage_fileExistsRequest* request, ::octaneapi::ApiPackage_fileExistsResponse* response) { return this->fileExists(context, request, response); }));}
    void SetMessageAllocatorFor_fileExists(
        ::grpc::MessageAllocator< ::octaneapi::ApiPackage_fileExistsRequest, ::octaneapi::ApiPackage_fileExistsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_fileExistsRequest, ::octaneapi::ApiPackage_fileExistsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_fileExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileExists(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_fileExistsRequest* /*request*/, ::octaneapi::ApiPackage_fileExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* fileExists(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiPackage_fileExistsRequest* /*request*/, ::octaneapi::ApiPackage_fileExistsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_fileExists1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_fileExists1() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_fileExists1Request, ::octaneapi::ApiPackage_fileExists1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiPackage_fileExists1Request* request, ::octaneapi::ApiPackage_fileExists1Response* response) { return this->fileExists1(context, request, response); }));}
    void SetMessageAllocatorFor_fileExists1(
        ::grpc::MessageAllocator< ::octaneapi::ApiPackage_fileExists1Request, ::octaneapi::ApiPackage_fileExists1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_fileExists1Request, ::octaneapi::ApiPackage_fileExists1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_fileExists1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileExists1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_fileExists1Request* /*request*/, ::octaneapi::ApiPackage_fileExists1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* fileExists1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiPackage_fileExists1Request* /*request*/, ::octaneapi::ApiPackage_fileExists1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_readFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_readFile() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_readFileRequest, ::octaneapi::ApiPackage_readFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiPackage_readFileRequest* request, ::octaneapi::ApiPackage_readFileResponse* response) { return this->readFile(context, request, response); }));}
    void SetMessageAllocatorFor_readFile(
        ::grpc::MessageAllocator< ::octaneapi::ApiPackage_readFileRequest, ::octaneapi::ApiPackage_readFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_readFileRequest, ::octaneapi::ApiPackage_readFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_readFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_readFileRequest* /*request*/, ::octaneapi::ApiPackage_readFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readFile(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiPackage_readFileRequest* /*request*/, ::octaneapi::ApiPackage_readFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_readFile1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_readFile1() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_readFile1Request, ::octaneapi::ApiPackage_readFile1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiPackage_readFile1Request* request, ::octaneapi::ApiPackage_readFile1Response* response) { return this->readFile1(context, request, response); }));}
    void SetMessageAllocatorFor_readFile1(
        ::grpc::MessageAllocator< ::octaneapi::ApiPackage_readFile1Request, ::octaneapi::ApiPackage_readFile1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiPackage_readFile1Request, ::octaneapi::ApiPackage_readFile1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_readFile1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readFile1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_readFile1Request* /*request*/, ::octaneapi::ApiPackage_readFile1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readFile1(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiPackage_readFile1Request* /*request*/, ::octaneapi::ApiPackage_readFile1Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_freeArray<WithCallbackMethod_open<WithCallbackMethod_close<WithCallbackMethod_getFileList<WithCallbackMethod_fileExists<WithCallbackMethod_fileExists1<WithCallbackMethod_readFile<WithCallbackMethod_readFile1<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_freeArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_freeArray() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_freeArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status freeArray(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_freeArrayRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_open() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status open(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_openRequest* /*request*/, ::octaneapi::ApiPackage_openResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_close() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_closeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getFileList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getFileList() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getFileList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileList(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_getFileListRequest* /*request*/, ::octaneapi::ApiPackage_getFileListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_fileExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_fileExists() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_fileExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileExists(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_fileExistsRequest* /*request*/, ::octaneapi::ApiPackage_fileExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_fileExists1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_fileExists1() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_fileExists1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileExists1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_fileExists1Request* /*request*/, ::octaneapi::ApiPackage_fileExists1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_readFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_readFile() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_readFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_readFileRequest* /*request*/, ::octaneapi::ApiPackage_readFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_readFile1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_readFile1() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_readFile1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readFile1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_readFile1Request* /*request*/, ::octaneapi::ApiPackage_readFile1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_freeArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_freeArray() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_freeArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status freeArray(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_freeArrayRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfreeArray(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_open() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status open(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_openRequest* /*request*/, ::octaneapi::ApiPackage_openResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestopen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_close() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_closeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getFileList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getFileList() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getFileList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileList(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_getFileListRequest* /*request*/, ::octaneapi::ApiPackage_getFileListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetFileList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_fileExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_fileExists() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_fileExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileExists(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_fileExistsRequest* /*request*/, ::octaneapi::ApiPackage_fileExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfileExists(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_fileExists1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_fileExists1() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_fileExists1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileExists1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_fileExists1Request* /*request*/, ::octaneapi::ApiPackage_fileExists1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfileExists1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_readFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_readFile() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_readFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_readFileRequest* /*request*/, ::octaneapi::ApiPackage_readFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_readFile1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_readFile1() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_readFile1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readFile1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_readFile1Request* /*request*/, ::octaneapi::ApiPackage_readFile1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadFile1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_freeArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_freeArray() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->freeArray(context, request, response); }));
    }
    ~WithRawCallbackMethod_freeArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status freeArray(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_freeArrayRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* freeArray(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_open() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->open(context, request, response); }));
    }
    ~WithRawCallbackMethod_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status open(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_openRequest* /*request*/, ::octaneapi::ApiPackage_openResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* open(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_close() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->close(context, request, response); }));
    }
    ~WithRawCallbackMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_closeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* close(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getFileList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getFileList() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getFileList(context, request, response); }));
    }
    ~WithRawCallbackMethod_getFileList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFileList(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_getFileListRequest* /*request*/, ::octaneapi::ApiPackage_getFileListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getFileList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_fileExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_fileExists() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->fileExists(context, request, response); }));
    }
    ~WithRawCallbackMethod_fileExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileExists(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_fileExistsRequest* /*request*/, ::octaneapi::ApiPackage_fileExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* fileExists(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_fileExists1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_fileExists1() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->fileExists1(context, request, response); }));
    }
    ~WithRawCallbackMethod_fileExists1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status fileExists1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_fileExists1Request* /*request*/, ::octaneapi::ApiPackage_fileExists1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* fileExists1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_readFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_readFile() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->readFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_readFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_readFileRequest* /*request*/, ::octaneapi::ApiPackage_readFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_readFile1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_readFile1() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->readFile1(context, request, response); }));
    }
    ~WithRawCallbackMethod_readFile1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readFile1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_readFile1Request* /*request*/, ::octaneapi::ApiPackage_readFile1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readFile1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_freeArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_freeArray() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiPackage_freeArrayRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiPackage_freeArrayRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedfreeArray(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_freeArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status freeArray(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_freeArrayRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedfreeArray(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiPackage_freeArrayRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_open() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiPackage_openRequest, ::octaneapi::ApiPackage_openResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiPackage_openRequest, ::octaneapi::ApiPackage_openResponse>* streamer) {
                       return this->Streamedopen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status open(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_openRequest* /*request*/, ::octaneapi::ApiPackage_openResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedopen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiPackage_openRequest,::octaneapi::ApiPackage_openResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_close() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiPackage_closeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiPackage_closeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedclose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status close(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_closeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiPackage_closeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getFileList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getFileList() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiPackage_getFileListRequest, ::octaneapi::ApiPackage_getFileListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiPackage_getFileListRequest, ::octaneapi::ApiPackage_getFileListResponse>* streamer) {
                       return this->StreamedgetFileList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getFileList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getFileList(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_getFileListRequest* /*request*/, ::octaneapi::ApiPackage_getFileListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetFileList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiPackage_getFileListRequest,::octaneapi::ApiPackage_getFileListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_fileExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_fileExists() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiPackage_fileExistsRequest, ::octaneapi::ApiPackage_fileExistsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiPackage_fileExistsRequest, ::octaneapi::ApiPackage_fileExistsResponse>* streamer) {
                       return this->StreamedfileExists(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_fileExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status fileExists(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_fileExistsRequest* /*request*/, ::octaneapi::ApiPackage_fileExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedfileExists(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiPackage_fileExistsRequest,::octaneapi::ApiPackage_fileExistsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_fileExists1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_fileExists1() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiPackage_fileExists1Request, ::octaneapi::ApiPackage_fileExists1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiPackage_fileExists1Request, ::octaneapi::ApiPackage_fileExists1Response>* streamer) {
                       return this->StreamedfileExists1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_fileExists1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status fileExists1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_fileExists1Request* /*request*/, ::octaneapi::ApiPackage_fileExists1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedfileExists1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiPackage_fileExists1Request,::octaneapi::ApiPackage_fileExists1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_readFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_readFile() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiPackage_readFileRequest, ::octaneapi::ApiPackage_readFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiPackage_readFileRequest, ::octaneapi::ApiPackage_readFileResponse>* streamer) {
                       return this->StreamedreadFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_readFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status readFile(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_readFileRequest* /*request*/, ::octaneapi::ApiPackage_readFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedreadFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiPackage_readFileRequest,::octaneapi::ApiPackage_readFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_readFile1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_readFile1() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiPackage_readFile1Request, ::octaneapi::ApiPackage_readFile1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiPackage_readFile1Request, ::octaneapi::ApiPackage_readFile1Response>* streamer) {
                       return this->StreamedreadFile1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_readFile1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status readFile1(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiPackage_readFile1Request* /*request*/, ::octaneapi::ApiPackage_readFile1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedreadFile1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiPackage_readFile1Request,::octaneapi::ApiPackage_readFile1Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_freeArray<WithStreamedUnaryMethod_open<WithStreamedUnaryMethod_close<WithStreamedUnaryMethod_getFileList<WithStreamedUnaryMethod_fileExists<WithStreamedUnaryMethod_fileExists1<WithStreamedUnaryMethod_readFile<WithStreamedUnaryMethod_readFile1<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_freeArray<WithStreamedUnaryMethod_open<WithStreamedUnaryMethod_close<WithStreamedUnaryMethod_getFileList<WithStreamedUnaryMethod_fileExists<WithStreamedUnaryMethod_fileExists1<WithStreamedUnaryMethod_readFile<WithStreamedUnaryMethod_readFile1<Service > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apipackage_2eproto__INCLUDED
