// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apinodesystem_1.proto

#include "apinodesystem_1.pb.h"
#include "apinodesystem_1.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiItemArrayService_method_names[] = {
  "/octaneapi.ApiItemArrayService/size",
  "/octaneapi.ApiItemArrayService/get",
  "/octaneapi.ApiItemArrayService/items",
  "/octaneapi.ApiItemArrayService/begin1",
  "/octaneapi.ApiItemArrayService/end1",
  "/octaneapi.ApiItemArrayService/init",
};

std::unique_ptr< ApiItemArrayService::Stub> ApiItemArrayService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiItemArrayService::Stub> stub(new ApiItemArrayService::Stub(channel, options));
  return stub;
}

ApiItemArrayService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_size_(ApiItemArrayService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_(ApiItemArrayService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_items_(ApiItemArrayService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_begin1_(ApiItemArrayService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_end1_(ApiItemArrayService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_init_(ApiItemArrayService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiItemArrayService::Stub::size(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_sizeRequest& request, ::octaneapi::ApiItemArray_sizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiItemArray_sizeRequest, ::octaneapi::ApiItemArray_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_size_, context, request, response);
}

void ApiItemArrayService::Stub::async::size(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_sizeRequest* request, ::octaneapi::ApiItemArray_sizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiItemArray_sizeRequest, ::octaneapi::ApiItemArray_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_size_, context, request, response, std::move(f));
}

void ApiItemArrayService::Stub::async::size(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_sizeRequest* request, ::octaneapi::ApiItemArray_sizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_size_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiItemArray_sizeResponse>* ApiItemArrayService::Stub::PrepareAsyncsizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_sizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiItemArray_sizeResponse, ::octaneapi::ApiItemArray_sizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_size_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiItemArray_sizeResponse>* ApiItemArrayService::Stub::AsyncsizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_sizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiItemArrayService::Stub::get(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_getRequest& request, ::octaneapi::ApiItemArray_getResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiItemArray_getRequest, ::octaneapi::ApiItemArray_getResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_, context, request, response);
}

void ApiItemArrayService::Stub::async::get(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_getRequest* request, ::octaneapi::ApiItemArray_getResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiItemArray_getRequest, ::octaneapi::ApiItemArray_getResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, std::move(f));
}

void ApiItemArrayService::Stub::async::get(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_getRequest* request, ::octaneapi::ApiItemArray_getResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiItemArray_getResponse>* ApiItemArrayService::Stub::PrepareAsyncgetRaw(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_getRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiItemArray_getResponse, ::octaneapi::ApiItemArray_getRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiItemArray_getResponse>* ApiItemArrayService::Stub::AsyncgetRaw(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_getRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiItemArrayService::Stub::items(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_itemsRequest& request, ::octaneapi::ApiItemArray_itemsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiItemArray_itemsRequest, ::octaneapi::ApiItemArray_itemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_items_, context, request, response);
}

void ApiItemArrayService::Stub::async::items(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_itemsRequest* request, ::octaneapi::ApiItemArray_itemsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiItemArray_itemsRequest, ::octaneapi::ApiItemArray_itemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_items_, context, request, response, std::move(f));
}

void ApiItemArrayService::Stub::async::items(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_itemsRequest* request, ::octaneapi::ApiItemArray_itemsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_items_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiItemArray_itemsResponse>* ApiItemArrayService::Stub::PrepareAsyncitemsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_itemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiItemArray_itemsResponse, ::octaneapi::ApiItemArray_itemsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_items_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiItemArray_itemsResponse>* ApiItemArrayService::Stub::AsyncitemsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_itemsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncitemsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiItemArrayService::Stub::begin1(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_begin1Request& request, ::octaneapi::ApiItemArray_begin1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiItemArray_begin1Request, ::octaneapi::ApiItemArray_begin1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_begin1_, context, request, response);
}

void ApiItemArrayService::Stub::async::begin1(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_begin1Request* request, ::octaneapi::ApiItemArray_begin1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiItemArray_begin1Request, ::octaneapi::ApiItemArray_begin1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_begin1_, context, request, response, std::move(f));
}

void ApiItemArrayService::Stub::async::begin1(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_begin1Request* request, ::octaneapi::ApiItemArray_begin1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_begin1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiItemArray_begin1Response>* ApiItemArrayService::Stub::PrepareAsyncbegin1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_begin1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiItemArray_begin1Response, ::octaneapi::ApiItemArray_begin1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_begin1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiItemArray_begin1Response>* ApiItemArrayService::Stub::Asyncbegin1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_begin1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbegin1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiItemArrayService::Stub::end1(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_end1Request& request, ::octaneapi::ApiItemArray_end1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiItemArray_end1Request, ::octaneapi::ApiItemArray_end1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_end1_, context, request, response);
}

void ApiItemArrayService::Stub::async::end1(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_end1Request* request, ::octaneapi::ApiItemArray_end1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiItemArray_end1Request, ::octaneapi::ApiItemArray_end1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_end1_, context, request, response, std::move(f));
}

void ApiItemArrayService::Stub::async::end1(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_end1Request* request, ::octaneapi::ApiItemArray_end1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_end1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiItemArray_end1Response>* ApiItemArrayService::Stub::PrepareAsyncend1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_end1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiItemArray_end1Response, ::octaneapi::ApiItemArray_end1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_end1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiItemArray_end1Response>* ApiItemArrayService::Stub::Asyncend1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_end1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncend1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiItemArrayService::Stub::init(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_initRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiItemArray_initRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_, context, request, response);
}

void ApiItemArrayService::Stub::async::init(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_initRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiItemArray_initRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, std::move(f));
}

void ApiItemArrayService::Stub::async::init(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_initRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiItemArrayService::Stub::PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_initRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiItemArray_initRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiItemArrayService::Stub::AsyncinitRaw(::grpc::ClientContext* context, const ::octaneapi::ApiItemArray_initRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiItemArrayService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiItemArrayService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiItemArrayService::Service, ::octaneapi::ApiItemArray_sizeRequest, ::octaneapi::ApiItemArray_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiItemArrayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiItemArray_sizeRequest* req,
             ::octaneapi::ApiItemArray_sizeResponse* resp) {
               return service->size(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiItemArrayService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiItemArrayService::Service, ::octaneapi::ApiItemArray_getRequest, ::octaneapi::ApiItemArray_getResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiItemArrayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiItemArray_getRequest* req,
             ::octaneapi::ApiItemArray_getResponse* resp) {
               return service->get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiItemArrayService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiItemArrayService::Service, ::octaneapi::ApiItemArray_itemsRequest, ::octaneapi::ApiItemArray_itemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiItemArrayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiItemArray_itemsRequest* req,
             ::octaneapi::ApiItemArray_itemsResponse* resp) {
               return service->items(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiItemArrayService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiItemArrayService::Service, ::octaneapi::ApiItemArray_begin1Request, ::octaneapi::ApiItemArray_begin1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiItemArrayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiItemArray_begin1Request* req,
             ::octaneapi::ApiItemArray_begin1Response* resp) {
               return service->begin1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiItemArrayService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiItemArrayService::Service, ::octaneapi::ApiItemArray_end1Request, ::octaneapi::ApiItemArray_end1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiItemArrayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiItemArray_end1Request* req,
             ::octaneapi::ApiItemArray_end1Response* resp) {
               return service->end1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiItemArrayService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiItemArrayService::Service, ::octaneapi::ApiItemArray_initRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiItemArrayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiItemArray_initRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->init(ctx, req, resp);
             }, this)));
}

ApiItemArrayService::Service::~Service() {
}

::grpc::Status ApiItemArrayService::Service::size(::grpc::ServerContext* context, const ::octaneapi::ApiItemArray_sizeRequest* request, ::octaneapi::ApiItemArray_sizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiItemArrayService::Service::get(::grpc::ServerContext* context, const ::octaneapi::ApiItemArray_getRequest* request, ::octaneapi::ApiItemArray_getResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiItemArrayService::Service::items(::grpc::ServerContext* context, const ::octaneapi::ApiItemArray_itemsRequest* request, ::octaneapi::ApiItemArray_itemsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiItemArrayService::Service::begin1(::grpc::ServerContext* context, const ::octaneapi::ApiItemArray_begin1Request* request, ::octaneapi::ApiItemArray_begin1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiItemArrayService::Service::end1(::grpc::ServerContext* context, const ::octaneapi::ApiItemArray_end1Request* request, ::octaneapi::ApiItemArray_end1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiItemArrayService::Service::init(::grpc::ServerContext* context, const ::octaneapi::ApiItemArray_initRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

