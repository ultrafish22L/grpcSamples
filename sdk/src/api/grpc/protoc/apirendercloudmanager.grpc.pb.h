// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apirendercloudmanager.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apirendercloudmanager_2eproto__INCLUDED
#define GRPC_apirendercloudmanager_2eproto__INCLUDED

#include "apirendercloudmanager.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiRenderCloudManager' from 'apirendercloudmanager.h'
class ApiRenderCloudManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiRenderCloudManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Populates the provided struct with the information for the current user's
    // / subscription
    virtual ::grpc::Status userSubscriptionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest& request, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>> AsyncuserSubscriptionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>>(AsyncuserSubscriptionInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>> PrepareAsyncuserSubscriptionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>>(PrepareAsyncuserSubscriptionInfoRaw(context, request, cq));
    }
    // / Uploads the current project to the server
    virtual ::grpc::Status uploadCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest& request, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>> AsyncuploadCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>>(AsyncuploadCurrentProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>> PrepareAsyncuploadCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>>(PrepareAsyncuploadCurrentProjectRaw(context, request, cq));
    }
    // / Uploads a root node graph together with the current project settings to the server
    virtual ::grpc::Status uploadRootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest& request, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>> AsyncuploadRootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>>(AsyncuploadRootNodeGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>> PrepareAsyncuploadRootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>>(PrepareAsyncuploadRootNodeGraphRaw(context, request, cq));
    }
    // / Opens a Web UI for creating a new render task
    virtual ::grpc::Status newRenderTask(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest& request, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>> AsyncnewRenderTask(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>>(AsyncnewRenderTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>> PrepareAsyncnewRenderTask(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>>(PrepareAsyncnewRenderTaskRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Populates the provided struct with the information for the current user's
      // / subscription
      virtual void userSubscriptionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest* request, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void userSubscriptionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest* request, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Uploads the current project to the server
      virtual void uploadCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest* request, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void uploadCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest* request, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Uploads a root node graph together with the current project settings to the server
      virtual void uploadRootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest* request, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void uploadRootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest* request, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Opens a Web UI for creating a new render task
      virtual void newRenderTask(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest* request, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void newRenderTask(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest* request, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>* AsyncuserSubscriptionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>* PrepareAsyncuserSubscriptionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>* AsyncuploadCurrentProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>* PrepareAsyncuploadCurrentProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>* AsyncuploadRootNodeGraphRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>* PrepareAsyncuploadRootNodeGraphRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>* AsyncnewRenderTaskRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>* PrepareAsyncnewRenderTaskRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status userSubscriptionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest& request, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>> AsyncuserSubscriptionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>>(AsyncuserSubscriptionInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>> PrepareAsyncuserSubscriptionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>>(PrepareAsyncuserSubscriptionInfoRaw(context, request, cq));
    }
    ::grpc::Status uploadCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest& request, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>> AsyncuploadCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>>(AsyncuploadCurrentProjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>> PrepareAsyncuploadCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>>(PrepareAsyncuploadCurrentProjectRaw(context, request, cq));
    }
    ::grpc::Status uploadRootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest& request, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>> AsyncuploadRootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>>(AsyncuploadRootNodeGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>> PrepareAsyncuploadRootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>>(PrepareAsyncuploadRootNodeGraphRaw(context, request, cq));
    }
    ::grpc::Status newRenderTask(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest& request, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>> AsyncnewRenderTask(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>>(AsyncnewRenderTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>> PrepareAsyncnewRenderTask(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>>(PrepareAsyncnewRenderTaskRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void userSubscriptionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest* request, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void userSubscriptionInfo(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest* request, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void uploadCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest* request, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* response, std::function<void(::grpc::Status)>) override;
      void uploadCurrentProject(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest* request, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void uploadRootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest* request, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* response, std::function<void(::grpc::Status)>) override;
      void uploadRootNodeGraph(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest* request, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void newRenderTask(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest* request, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void newRenderTask(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest* request, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>* AsyncuserSubscriptionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>* PrepareAsyncuserSubscriptionInfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>* AsyncuploadCurrentProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>* PrepareAsyncuploadCurrentProjectRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>* AsyncuploadRootNodeGraphRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>* PrepareAsyncuploadRootNodeGraphRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>* AsyncnewRenderTaskRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>* PrepareAsyncnewRenderTaskRaw(::grpc::ClientContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_userSubscriptionInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_uploadCurrentProject_;
    const ::grpc::internal::RpcMethod rpcmethod_uploadRootNodeGraph_;
    const ::grpc::internal::RpcMethod rpcmethod_newRenderTask_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Populates the provided struct with the information for the current user's
    // / subscription
    virtual ::grpc::Status userSubscriptionInfo(::grpc::ServerContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest* request, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* response);
    // / Uploads the current project to the server
    virtual ::grpc::Status uploadCurrentProject(::grpc::ServerContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest* request, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* response);
    // / Uploads a root node graph together with the current project settings to the server
    virtual ::grpc::Status uploadRootNodeGraph(::grpc::ServerContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest* request, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* response);
    // / Opens a Web UI for creating a new render task
    virtual ::grpc::Status newRenderTask(::grpc::ServerContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest* request, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_userSubscriptionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_userSubscriptionInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_userSubscriptionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userSubscriptionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserSubscriptionInfo(::grpc::ServerContext* context, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_uploadCurrentProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_uploadCurrentProject() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_uploadCurrentProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadCurrentProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuploadCurrentProject(::grpc::ServerContext* context, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_uploadRootNodeGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_uploadRootNodeGraph() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_uploadRootNodeGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadRootNodeGraph(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuploadRootNodeGraph(::grpc::ServerContext* context, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_newRenderTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_newRenderTask() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_newRenderTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status newRenderTask(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnewRenderTask(::grpc::ServerContext* context, ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_userSubscriptionInfo<WithAsyncMethod_uploadCurrentProject<WithAsyncMethod_uploadRootNodeGraph<WithAsyncMethod_newRenderTask<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_userSubscriptionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_userSubscriptionInfo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest* request, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* response) { return this->userSubscriptionInfo(context, request, response); }));}
    void SetMessageAllocatorFor_userSubscriptionInfo(
        ::grpc::MessageAllocator< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_userSubscriptionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userSubscriptionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* userSubscriptionInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_uploadCurrentProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_uploadCurrentProject() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest* request, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* response) { return this->uploadCurrentProject(context, request, response); }));}
    void SetMessageAllocatorFor_uploadCurrentProject(
        ::grpc::MessageAllocator< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_uploadCurrentProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadCurrentProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* uploadCurrentProject(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_uploadRootNodeGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_uploadRootNodeGraph() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest* request, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* response) { return this->uploadRootNodeGraph(context, request, response); }));}
    void SetMessageAllocatorFor_uploadRootNodeGraph(
        ::grpc::MessageAllocator< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_uploadRootNodeGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadRootNodeGraph(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* uploadRootNodeGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_newRenderTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_newRenderTask() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest* request, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* response) { return this->newRenderTask(context, request, response); }));}
    void SetMessageAllocatorFor_newRenderTask(
        ::grpc::MessageAllocator< ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_newRenderTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status newRenderTask(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* newRenderTask(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_userSubscriptionInfo<WithCallbackMethod_uploadCurrentProject<WithCallbackMethod_uploadRootNodeGraph<WithCallbackMethod_newRenderTask<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_userSubscriptionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_userSubscriptionInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_userSubscriptionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userSubscriptionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_uploadCurrentProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_uploadCurrentProject() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_uploadCurrentProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadCurrentProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_uploadRootNodeGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_uploadRootNodeGraph() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_uploadRootNodeGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadRootNodeGraph(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_newRenderTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_newRenderTask() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_newRenderTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status newRenderTask(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_userSubscriptionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_userSubscriptionInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_userSubscriptionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userSubscriptionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserSubscriptionInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_uploadCurrentProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_uploadCurrentProject() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_uploadCurrentProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadCurrentProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuploadCurrentProject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_uploadRootNodeGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_uploadRootNodeGraph() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_uploadRootNodeGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadRootNodeGraph(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuploadRootNodeGraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_newRenderTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_newRenderTask() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_newRenderTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status newRenderTask(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnewRenderTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_userSubscriptionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_userSubscriptionInfo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->userSubscriptionInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_userSubscriptionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userSubscriptionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* userSubscriptionInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_uploadCurrentProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_uploadCurrentProject() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->uploadCurrentProject(context, request, response); }));
    }
    ~WithRawCallbackMethod_uploadCurrentProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadCurrentProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* uploadCurrentProject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_uploadRootNodeGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_uploadRootNodeGraph() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->uploadRootNodeGraph(context, request, response); }));
    }
    ~WithRawCallbackMethod_uploadRootNodeGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadRootNodeGraph(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* uploadRootNodeGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_newRenderTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_newRenderTask() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->newRenderTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_newRenderTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status newRenderTask(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* newRenderTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_userSubscriptionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_userSubscriptionInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>* streamer) {
                       return this->StreameduserSubscriptionInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_userSubscriptionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status userSubscriptionInfo(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameduserSubscriptionInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRenderCloudManager_userSubscriptionInfoRequest,::octaneapi::ApiRenderCloudManager_userSubscriptionInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_uploadCurrentProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_uploadCurrentProject() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>* streamer) {
                       return this->StreameduploadCurrentProject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_uploadCurrentProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status uploadCurrentProject(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameduploadCurrentProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRenderCloudManager_uploadCurrentProjectRequest,::octaneapi::ApiRenderCloudManager_uploadCurrentProjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_uploadRootNodeGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_uploadRootNodeGraph() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>* streamer) {
                       return this->StreameduploadRootNodeGraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_uploadRootNodeGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status uploadRootNodeGraph(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameduploadRootNodeGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphRequest,::octaneapi::ApiRenderCloudManager_uploadRootNodeGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_newRenderTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_newRenderTask() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>* streamer) {
                       return this->StreamednewRenderTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_newRenderTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status newRenderTask(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest* /*request*/, ::octaneapi::ApiRenderCloudManager_newRenderTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamednewRenderTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiRenderCloudManager_newRenderTaskRequest,::octaneapi::ApiRenderCloudManager_newRenderTaskResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_userSubscriptionInfo<WithStreamedUnaryMethod_uploadCurrentProject<WithStreamedUnaryMethod_uploadRootNodeGraph<WithStreamedUnaryMethod_newRenderTask<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_userSubscriptionInfo<WithStreamedUnaryMethod_uploadCurrentProject<WithStreamedUnaryMethod_uploadRootNodeGraph<WithStreamedUnaryMethod_newRenderTask<Service > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apirendercloudmanager_2eproto__INCLUDED
