// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apifilename.proto

#include "apifilename.pb.h"
#include "apifilename.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiFileNameService_method_names[] = {
  "/octaneapi.ApiFileNameService/create",
  "/octaneapi.ApiFileNameService/destroy",
  "/octaneapi.ApiFileNameService/set",
  "/octaneapi.ApiFileNameService/clear",
  "/octaneapi.ApiFileNameService/isEmpty",
  "/octaneapi.ApiFileNameService/isAbsolute",
  "/octaneapi.ApiFileNameService/isRelative",
  "/octaneapi.ApiFileNameService/getParent",
  "/octaneapi.ApiFileNameService/getFileOnly",
  "/octaneapi.ApiFileNameService/getFullString",
  "/octaneapi.ApiFileNameService/getRootString",
  "/octaneapi.ApiFileNameService/getParentString",
  "/octaneapi.ApiFileNameService/getFileString",
  "/octaneapi.ApiFileNameService/getSuffix",
  "/octaneapi.ApiFileNameService/setSuffix",
  "/octaneapi.ApiFileNameService/withSuffix",
  "/octaneapi.ApiFileNameService/makeRelativeTo",
  "/octaneapi.ApiFileNameService/getConcat",
  "/octaneapi.ApiFileNameService/concat",
  "/octaneapi.ApiFileNameService/equals",
  "/octaneapi.ApiFileNameService/notEquals",
  "/octaneapi.ApiFileNameService/lessThan",
  "/octaneapi.ApiFileNameService/exactlyEquals",
  "/octaneapi.ApiFileNameService/exactlyLessThan",
  "/octaneapi.ApiFileNameService/appendToFileName",
  "/octaneapi.ApiFileNameService/exists",
  "/octaneapi.ApiFileNameService/existsAsFile",
  "/octaneapi.ApiFileNameService/existsAsDirectory",
  "/octaneapi.ApiFileNameService/hasWriteAccess",
  "/octaneapi.ApiFileNameService/createDirectory",
};

std::unique_ptr< ApiFileNameService::Stub> ApiFileNameService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiFileNameService::Stub> stub(new ApiFileNameService::Stub(channel, options));
  return stub;
}

ApiFileNameService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create_(ApiFileNameService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(ApiFileNameService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_(ApiFileNameService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clear_(ApiFileNameService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isEmpty_(ApiFileNameService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isAbsolute_(ApiFileNameService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isRelative_(ApiFileNameService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getParent_(ApiFileNameService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getFileOnly_(ApiFileNameService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getFullString_(ApiFileNameService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getRootString_(ApiFileNameService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getParentString_(ApiFileNameService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getFileString_(ApiFileNameService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getSuffix_(ApiFileNameService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setSuffix_(ApiFileNameService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_withSuffix_(ApiFileNameService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_makeRelativeTo_(ApiFileNameService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getConcat_(ApiFileNameService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_concat_(ApiFileNameService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_equals_(ApiFileNameService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_notEquals_(ApiFileNameService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_lessThan_(ApiFileNameService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_exactlyEquals_(ApiFileNameService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_exactlyLessThan_(ApiFileNameService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_appendToFileName_(ApiFileNameService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_exists_(ApiFileNameService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_existsAsFile_(ApiFileNameService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_existsAsDirectory_(ApiFileNameService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hasWriteAccess_(ApiFileNameService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_createDirectory_(ApiFileNameService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiFileNameService::Stub::create(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest& request, ::octaneapi::ApiFileName_createResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_createRequest, ::octaneapi::ApiFileName_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_, context, request, response);
}

void ApiFileNameService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest* request, ::octaneapi::ApiFileName_createResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_createRequest, ::octaneapi::ApiFileName_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest* request, ::octaneapi::ApiFileName_createResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createResponse>* ApiFileNameService::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_createResponse, ::octaneapi::ApiFileName_createRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createResponse>* ApiFileNameService::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void ApiFileNameService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiFileNameService::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiFileName_destroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiFileNameService::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_destroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::set(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_setRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_, context, request, response);
}

void ApiFileNameService::Stub::async::set(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_setRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::set(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiFileNameService::Stub::PrepareAsyncsetRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiFileName_setRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiFileNameService::Stub::AsyncsetRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::clear(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clear_, context, request, response);
}

void ApiFileNameService::Stub::async::clear(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::clear(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiFileNameService::Stub::PrepareAsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiFileName_clearRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clear_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiFileNameService::Stub::AsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_clearRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest& request, ::octaneapi::ApiFileName_isEmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_isEmptyRequest, ::octaneapi::ApiFileName_isEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isEmpty_, context, request, response);
}

void ApiFileNameService::Stub::async::isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest* request, ::octaneapi::ApiFileName_isEmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_isEmptyRequest, ::octaneapi::ApiFileName_isEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isEmpty_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::isEmpty(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest* request, ::octaneapi::ApiFileName_isEmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isEmpty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isEmptyResponse>* ApiFileNameService::Stub::PrepareAsyncisEmptyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_isEmptyResponse, ::octaneapi::ApiFileName_isEmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isEmpty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isEmptyResponse>* ApiFileNameService::Stub::AsyncisEmptyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isEmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisEmptyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::isAbsolute(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest& request, ::octaneapi::ApiFileName_isAbsoluteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_isAbsoluteRequest, ::octaneapi::ApiFileName_isAbsoluteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isAbsolute_, context, request, response);
}

void ApiFileNameService::Stub::async::isAbsolute(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest* request, ::octaneapi::ApiFileName_isAbsoluteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_isAbsoluteRequest, ::octaneapi::ApiFileName_isAbsoluteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isAbsolute_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::isAbsolute(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest* request, ::octaneapi::ApiFileName_isAbsoluteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isAbsolute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isAbsoluteResponse>* ApiFileNameService::Stub::PrepareAsyncisAbsoluteRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_isAbsoluteResponse, ::octaneapi::ApiFileName_isAbsoluteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isAbsolute_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isAbsoluteResponse>* ApiFileNameService::Stub::AsyncisAbsoluteRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisAbsoluteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::isRelative(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest& request, ::octaneapi::ApiFileName_isRelativeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_isRelativeRequest, ::octaneapi::ApiFileName_isRelativeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isRelative_, context, request, response);
}

void ApiFileNameService::Stub::async::isRelative(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest* request, ::octaneapi::ApiFileName_isRelativeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_isRelativeRequest, ::octaneapi::ApiFileName_isRelativeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isRelative_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::isRelative(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest* request, ::octaneapi::ApiFileName_isRelativeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isRelative_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isRelativeResponse>* ApiFileNameService::Stub::PrepareAsyncisRelativeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_isRelativeResponse, ::octaneapi::ApiFileName_isRelativeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isRelative_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_isRelativeResponse>* ApiFileNameService::Stub::AsyncisRelativeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_isRelativeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisRelativeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::getParent(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest& request, ::octaneapi::ApiFileName_getParentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_getParentRequest, ::octaneapi::ApiFileName_getParentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getParent_, context, request, response);
}

void ApiFileNameService::Stub::async::getParent(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest* request, ::octaneapi::ApiFileName_getParentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_getParentRequest, ::octaneapi::ApiFileName_getParentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getParent_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::getParent(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest* request, ::octaneapi::ApiFileName_getParentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getParent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentResponse>* ApiFileNameService::Stub::PrepareAsyncgetParentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_getParentResponse, ::octaneapi::ApiFileName_getParentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getParent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentResponse>* ApiFileNameService::Stub::AsyncgetParentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetParentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::getFileOnly(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest& request, ::octaneapi::ApiFileName_getFileOnlyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_getFileOnlyRequest, ::octaneapi::ApiFileName_getFileOnlyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getFileOnly_, context, request, response);
}

void ApiFileNameService::Stub::async::getFileOnly(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest* request, ::octaneapi::ApiFileName_getFileOnlyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_getFileOnlyRequest, ::octaneapi::ApiFileName_getFileOnlyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getFileOnly_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::getFileOnly(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest* request, ::octaneapi::ApiFileName_getFileOnlyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getFileOnly_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileOnlyResponse>* ApiFileNameService::Stub::PrepareAsyncgetFileOnlyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_getFileOnlyResponse, ::octaneapi::ApiFileName_getFileOnlyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getFileOnly_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileOnlyResponse>* ApiFileNameService::Stub::AsyncgetFileOnlyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetFileOnlyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::getFullString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest& request, ::octaneapi::ApiFileName_getFullStringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_getFullStringRequest, ::octaneapi::ApiFileName_getFullStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getFullString_, context, request, response);
}

void ApiFileNameService::Stub::async::getFullString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest* request, ::octaneapi::ApiFileName_getFullStringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_getFullStringRequest, ::octaneapi::ApiFileName_getFullStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getFullString_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::getFullString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest* request, ::octaneapi::ApiFileName_getFullStringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getFullString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFullStringResponse>* ApiFileNameService::Stub::PrepareAsyncgetFullStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_getFullStringResponse, ::octaneapi::ApiFileName_getFullStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getFullString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFullStringResponse>* ApiFileNameService::Stub::AsyncgetFullStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFullStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetFullStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::getRootString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest& request, ::octaneapi::ApiFileName_getRootStringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_getRootStringRequest, ::octaneapi::ApiFileName_getRootStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRootString_, context, request, response);
}

void ApiFileNameService::Stub::async::getRootString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest* request, ::octaneapi::ApiFileName_getRootStringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_getRootStringRequest, ::octaneapi::ApiFileName_getRootStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRootString_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::getRootString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest* request, ::octaneapi::ApiFileName_getRootStringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRootString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getRootStringResponse>* ApiFileNameService::Stub::PrepareAsyncgetRootStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_getRootStringResponse, ::octaneapi::ApiFileName_getRootStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRootString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getRootStringResponse>* ApiFileNameService::Stub::AsyncgetRootStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getRootStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRootStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::getParentString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest& request, ::octaneapi::ApiFileName_getParentStringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_getParentStringRequest, ::octaneapi::ApiFileName_getParentStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getParentString_, context, request, response);
}

void ApiFileNameService::Stub::async::getParentString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest* request, ::octaneapi::ApiFileName_getParentStringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_getParentStringRequest, ::octaneapi::ApiFileName_getParentStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getParentString_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::getParentString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest* request, ::octaneapi::ApiFileName_getParentStringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getParentString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentStringResponse>* ApiFileNameService::Stub::PrepareAsyncgetParentStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_getParentStringResponse, ::octaneapi::ApiFileName_getParentStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getParentString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getParentStringResponse>* ApiFileNameService::Stub::AsyncgetParentStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getParentStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetParentStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::getFileString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest& request, ::octaneapi::ApiFileName_getFileStringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_getFileStringRequest, ::octaneapi::ApiFileName_getFileStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getFileString_, context, request, response);
}

void ApiFileNameService::Stub::async::getFileString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest* request, ::octaneapi::ApiFileName_getFileStringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_getFileStringRequest, ::octaneapi::ApiFileName_getFileStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getFileString_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::getFileString(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest* request, ::octaneapi::ApiFileName_getFileStringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getFileString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileStringResponse>* ApiFileNameService::Stub::PrepareAsyncgetFileStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_getFileStringResponse, ::octaneapi::ApiFileName_getFileStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getFileString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getFileStringResponse>* ApiFileNameService::Stub::AsyncgetFileStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getFileStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetFileStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::getSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest& request, ::octaneapi::ApiFileName_getSuffixResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_getSuffixRequest, ::octaneapi::ApiFileName_getSuffixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getSuffix_, context, request, response);
}

void ApiFileNameService::Stub::async::getSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest* request, ::octaneapi::ApiFileName_getSuffixResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_getSuffixRequest, ::octaneapi::ApiFileName_getSuffixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSuffix_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::getSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest* request, ::octaneapi::ApiFileName_getSuffixResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSuffix_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getSuffixResponse>* ApiFileNameService::Stub::PrepareAsyncgetSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_getSuffixResponse, ::octaneapi::ApiFileName_getSuffixRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getSuffix_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getSuffixResponse>* ApiFileNameService::Stub::AsyncgetSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getSuffixRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetSuffixRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::setSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_setSuffixRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setSuffix_, context, request, response);
}

void ApiFileNameService::Stub::async::setSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_setSuffixRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setSuffix_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::setSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setSuffix_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiFileNameService::Stub::PrepareAsyncsetSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiFileName_setSuffixRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setSuffix_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiFileNameService::Stub::AsyncsetSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_setSuffixRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetSuffixRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::withSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest& request, ::octaneapi::ApiFileName_withSuffixResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_withSuffixRequest, ::octaneapi::ApiFileName_withSuffixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_withSuffix_, context, request, response);
}

void ApiFileNameService::Stub::async::withSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest* request, ::octaneapi::ApiFileName_withSuffixResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_withSuffixRequest, ::octaneapi::ApiFileName_withSuffixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_withSuffix_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::withSuffix(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest* request, ::octaneapi::ApiFileName_withSuffixResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_withSuffix_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_withSuffixResponse>* ApiFileNameService::Stub::PrepareAsyncwithSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_withSuffixResponse, ::octaneapi::ApiFileName_withSuffixRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_withSuffix_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_withSuffixResponse>* ApiFileNameService::Stub::AsyncwithSuffixRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_withSuffixRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwithSuffixRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::makeRelativeTo(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest& request, ::octaneapi::ApiFileName_makeRelativeToResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_makeRelativeToRequest, ::octaneapi::ApiFileName_makeRelativeToResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_makeRelativeTo_, context, request, response);
}

void ApiFileNameService::Stub::async::makeRelativeTo(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest* request, ::octaneapi::ApiFileName_makeRelativeToResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_makeRelativeToRequest, ::octaneapi::ApiFileName_makeRelativeToResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_makeRelativeTo_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::makeRelativeTo(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest* request, ::octaneapi::ApiFileName_makeRelativeToResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_makeRelativeTo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_makeRelativeToResponse>* ApiFileNameService::Stub::PrepareAsyncmakeRelativeToRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_makeRelativeToResponse, ::octaneapi::ApiFileName_makeRelativeToRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_makeRelativeTo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_makeRelativeToResponse>* ApiFileNameService::Stub::AsyncmakeRelativeToRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmakeRelativeToRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::getConcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest& request, ::octaneapi::ApiFileName_getConcatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_getConcatRequest, ::octaneapi::ApiFileName_getConcatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getConcat_, context, request, response);
}

void ApiFileNameService::Stub::async::getConcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest* request, ::octaneapi::ApiFileName_getConcatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_getConcatRequest, ::octaneapi::ApiFileName_getConcatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConcat_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::getConcat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest* request, ::octaneapi::ApiFileName_getConcatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConcat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getConcatResponse>* ApiFileNameService::Stub::PrepareAsyncgetConcatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_getConcatResponse, ::octaneapi::ApiFileName_getConcatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getConcat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_getConcatResponse>* ApiFileNameService::Stub::AsyncgetConcatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_getConcatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetConcatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::concat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_concatRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_concat_, context, request, response);
}

void ApiFileNameService::Stub::async::concat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_concatRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_concat_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::concat(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_concat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiFileNameService::Stub::PrepareAsyncconcatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiFileName_concatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_concat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiFileNameService::Stub::AsyncconcatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_concatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconcatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::equals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest& request, ::octaneapi::ApiFileName_equalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_equalsRequest, ::octaneapi::ApiFileName_equalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_equals_, context, request, response);
}

void ApiFileNameService::Stub::async::equals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest* request, ::octaneapi::ApiFileName_equalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_equalsRequest, ::octaneapi::ApiFileName_equalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_equals_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::equals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest* request, ::octaneapi::ApiFileName_equalsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_equals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_equalsResponse>* ApiFileNameService::Stub::PrepareAsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_equalsResponse, ::octaneapi::ApiFileName_equalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_equals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_equalsResponse>* ApiFileNameService::Stub::AsyncequalsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_equalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncequalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::notEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest& request, ::octaneapi::ApiFileName_notEqualsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_notEqualsRequest, ::octaneapi::ApiFileName_notEqualsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_notEquals_, context, request, response);
}

void ApiFileNameService::Stub::async::notEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest* request, ::octaneapi::ApiFileName_notEqualsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_notEqualsRequest, ::octaneapi::ApiFileName_notEqualsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_notEquals_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::notEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest* request, ::octaneapi::ApiFileName_notEqualsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_notEquals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_notEqualsResponse>* ApiFileNameService::Stub::PrepareAsyncnotEqualsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_notEqualsResponse, ::octaneapi::ApiFileName_notEqualsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_notEquals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_notEqualsResponse>* ApiFileNameService::Stub::AsyncnotEqualsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_notEqualsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnotEqualsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::lessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest& request, ::octaneapi::ApiFileName_lessThanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_lessThanRequest, ::octaneapi::ApiFileName_lessThanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_lessThan_, context, request, response);
}

void ApiFileNameService::Stub::async::lessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest* request, ::octaneapi::ApiFileName_lessThanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_lessThanRequest, ::octaneapi::ApiFileName_lessThanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_lessThan_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::lessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest* request, ::octaneapi::ApiFileName_lessThanResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_lessThan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_lessThanResponse>* ApiFileNameService::Stub::PrepareAsynclessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_lessThanResponse, ::octaneapi::ApiFileName_lessThanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_lessThan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_lessThanResponse>* ApiFileNameService::Stub::AsynclessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_lessThanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclessThanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::exactlyEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest& request, ::octaneapi::ApiFileName_exactlyEqualsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_exactlyEqualsRequest, ::octaneapi::ApiFileName_exactlyEqualsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_exactlyEquals_, context, request, response);
}

void ApiFileNameService::Stub::async::exactlyEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest* request, ::octaneapi::ApiFileName_exactlyEqualsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_exactlyEqualsRequest, ::octaneapi::ApiFileName_exactlyEqualsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exactlyEquals_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::exactlyEquals(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest* request, ::octaneapi::ApiFileName_exactlyEqualsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exactlyEquals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyEqualsResponse>* ApiFileNameService::Stub::PrepareAsyncexactlyEqualsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_exactlyEqualsResponse, ::octaneapi::ApiFileName_exactlyEqualsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_exactlyEquals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyEqualsResponse>* ApiFileNameService::Stub::AsyncexactlyEqualsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncexactlyEqualsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::exactlyLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest& request, ::octaneapi::ApiFileName_exactlyLessThanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_exactlyLessThanRequest, ::octaneapi::ApiFileName_exactlyLessThanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_exactlyLessThan_, context, request, response);
}

void ApiFileNameService::Stub::async::exactlyLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest* request, ::octaneapi::ApiFileName_exactlyLessThanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_exactlyLessThanRequest, ::octaneapi::ApiFileName_exactlyLessThanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exactlyLessThan_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::exactlyLessThan(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest* request, ::octaneapi::ApiFileName_exactlyLessThanResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exactlyLessThan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyLessThanResponse>* ApiFileNameService::Stub::PrepareAsyncexactlyLessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_exactlyLessThanResponse, ::octaneapi::ApiFileName_exactlyLessThanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_exactlyLessThan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_exactlyLessThanResponse>* ApiFileNameService::Stub::AsyncexactlyLessThanRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncexactlyLessThanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::appendToFileName(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_appendToFileNameRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_appendToFileName_, context, request, response);
}

void ApiFileNameService::Stub::async::appendToFileName(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_appendToFileNameRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_appendToFileName_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::appendToFileName(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_appendToFileName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiFileNameService::Stub::PrepareAsyncappendToFileNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiFileName_appendToFileNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_appendToFileName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiFileNameService::Stub::AsyncappendToFileNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncappendToFileNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::exists(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest& request, ::octaneapi::ApiFileName_existsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_existsRequest, ::octaneapi::ApiFileName_existsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_exists_, context, request, response);
}

void ApiFileNameService::Stub::async::exists(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest* request, ::octaneapi::ApiFileName_existsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_existsRequest, ::octaneapi::ApiFileName_existsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exists_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::exists(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest* request, ::octaneapi::ApiFileName_existsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exists_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsResponse>* ApiFileNameService::Stub::PrepareAsyncexistsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_existsResponse, ::octaneapi::ApiFileName_existsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_exists_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsResponse>* ApiFileNameService::Stub::AsyncexistsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncexistsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::existsAsFile(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest& request, ::octaneapi::ApiFileName_existsAsFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_existsAsFileRequest, ::octaneapi::ApiFileName_existsAsFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_existsAsFile_, context, request, response);
}

void ApiFileNameService::Stub::async::existsAsFile(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest* request, ::octaneapi::ApiFileName_existsAsFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_existsAsFileRequest, ::octaneapi::ApiFileName_existsAsFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_existsAsFile_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::existsAsFile(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest* request, ::octaneapi::ApiFileName_existsAsFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_existsAsFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsFileResponse>* ApiFileNameService::Stub::PrepareAsyncexistsAsFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_existsAsFileResponse, ::octaneapi::ApiFileName_existsAsFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_existsAsFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsFileResponse>* ApiFileNameService::Stub::AsyncexistsAsFileRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncexistsAsFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::existsAsDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest& request, ::octaneapi::ApiFileName_existsAsDirectoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_existsAsDirectoryRequest, ::octaneapi::ApiFileName_existsAsDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_existsAsDirectory_, context, request, response);
}

void ApiFileNameService::Stub::async::existsAsDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* request, ::octaneapi::ApiFileName_existsAsDirectoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_existsAsDirectoryRequest, ::octaneapi::ApiFileName_existsAsDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_existsAsDirectory_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::existsAsDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* request, ::octaneapi::ApiFileName_existsAsDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_existsAsDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsDirectoryResponse>* ApiFileNameService::Stub::PrepareAsyncexistsAsDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_existsAsDirectoryResponse, ::octaneapi::ApiFileName_existsAsDirectoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_existsAsDirectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_existsAsDirectoryResponse>* ApiFileNameService::Stub::AsyncexistsAsDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncexistsAsDirectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::hasWriteAccess(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest& request, ::octaneapi::ApiFileName_hasWriteAccessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_hasWriteAccessRequest, ::octaneapi::ApiFileName_hasWriteAccessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hasWriteAccess_, context, request, response);
}

void ApiFileNameService::Stub::async::hasWriteAccess(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest* request, ::octaneapi::ApiFileName_hasWriteAccessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_hasWriteAccessRequest, ::octaneapi::ApiFileName_hasWriteAccessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasWriteAccess_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::hasWriteAccess(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest* request, ::octaneapi::ApiFileName_hasWriteAccessResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hasWriteAccess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_hasWriteAccessResponse>* ApiFileNameService::Stub::PrepareAsynchasWriteAccessRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_hasWriteAccessResponse, ::octaneapi::ApiFileName_hasWriteAccessRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hasWriteAccess_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_hasWriteAccessResponse>* ApiFileNameService::Stub::AsynchasWriteAccessRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchasWriteAccessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiFileNameService::Stub::createDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest& request, ::octaneapi::ApiFileName_createDirectoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiFileName_createDirectoryRequest, ::octaneapi::ApiFileName_createDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createDirectory_, context, request, response);
}

void ApiFileNameService::Stub::async::createDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest* request, ::octaneapi::ApiFileName_createDirectoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiFileName_createDirectoryRequest, ::octaneapi::ApiFileName_createDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createDirectory_, context, request, response, std::move(f));
}

void ApiFileNameService::Stub::async::createDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest* request, ::octaneapi::ApiFileName_createDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createDirectoryResponse>* ApiFileNameService::Stub::PrepareAsynccreateDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiFileName_createDirectoryResponse, ::octaneapi::ApiFileName_createDirectoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createDirectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileName_createDirectoryResponse>* ApiFileNameService::Stub::AsynccreateDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateDirectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiFileNameService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_createRequest, ::octaneapi::ApiFileName_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_createRequest* req,
             ::octaneapi::ApiFileName_createResponse* resp) {
               return service->create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_destroyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_destroyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_setRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_setRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_clearRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->clear(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_isEmptyRequest, ::octaneapi::ApiFileName_isEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_isEmptyRequest* req,
             ::octaneapi::ApiFileName_isEmptyResponse* resp) {
               return service->isEmpty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_isAbsoluteRequest, ::octaneapi::ApiFileName_isAbsoluteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_isAbsoluteRequest* req,
             ::octaneapi::ApiFileName_isAbsoluteResponse* resp) {
               return service->isAbsolute(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_isRelativeRequest, ::octaneapi::ApiFileName_isRelativeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_isRelativeRequest* req,
             ::octaneapi::ApiFileName_isRelativeResponse* resp) {
               return service->isRelative(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_getParentRequest, ::octaneapi::ApiFileName_getParentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_getParentRequest* req,
             ::octaneapi::ApiFileName_getParentResponse* resp) {
               return service->getParent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_getFileOnlyRequest, ::octaneapi::ApiFileName_getFileOnlyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_getFileOnlyRequest* req,
             ::octaneapi::ApiFileName_getFileOnlyResponse* resp) {
               return service->getFileOnly(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_getFullStringRequest, ::octaneapi::ApiFileName_getFullStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_getFullStringRequest* req,
             ::octaneapi::ApiFileName_getFullStringResponse* resp) {
               return service->getFullString(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_getRootStringRequest, ::octaneapi::ApiFileName_getRootStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_getRootStringRequest* req,
             ::octaneapi::ApiFileName_getRootStringResponse* resp) {
               return service->getRootString(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_getParentStringRequest, ::octaneapi::ApiFileName_getParentStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_getParentStringRequest* req,
             ::octaneapi::ApiFileName_getParentStringResponse* resp) {
               return service->getParentString(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_getFileStringRequest, ::octaneapi::ApiFileName_getFileStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_getFileStringRequest* req,
             ::octaneapi::ApiFileName_getFileStringResponse* resp) {
               return service->getFileString(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_getSuffixRequest, ::octaneapi::ApiFileName_getSuffixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_getSuffixRequest* req,
             ::octaneapi::ApiFileName_getSuffixResponse* resp) {
               return service->getSuffix(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_setSuffixRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_setSuffixRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setSuffix(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_withSuffixRequest, ::octaneapi::ApiFileName_withSuffixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_withSuffixRequest* req,
             ::octaneapi::ApiFileName_withSuffixResponse* resp) {
               return service->withSuffix(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_makeRelativeToRequest, ::octaneapi::ApiFileName_makeRelativeToResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_makeRelativeToRequest* req,
             ::octaneapi::ApiFileName_makeRelativeToResponse* resp) {
               return service->makeRelativeTo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_getConcatRequest, ::octaneapi::ApiFileName_getConcatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_getConcatRequest* req,
             ::octaneapi::ApiFileName_getConcatResponse* resp) {
               return service->getConcat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_concatRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_concatRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->concat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_equalsRequest, ::octaneapi::ApiFileName_equalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_equalsRequest* req,
             ::octaneapi::ApiFileName_equalsResponse* resp) {
               return service->equals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_notEqualsRequest, ::octaneapi::ApiFileName_notEqualsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_notEqualsRequest* req,
             ::octaneapi::ApiFileName_notEqualsResponse* resp) {
               return service->notEquals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_lessThanRequest, ::octaneapi::ApiFileName_lessThanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_lessThanRequest* req,
             ::octaneapi::ApiFileName_lessThanResponse* resp) {
               return service->lessThan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_exactlyEqualsRequest, ::octaneapi::ApiFileName_exactlyEqualsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_exactlyEqualsRequest* req,
             ::octaneapi::ApiFileName_exactlyEqualsResponse* resp) {
               return service->exactlyEquals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_exactlyLessThanRequest, ::octaneapi::ApiFileName_exactlyLessThanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_exactlyLessThanRequest* req,
             ::octaneapi::ApiFileName_exactlyLessThanResponse* resp) {
               return service->exactlyLessThan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_appendToFileNameRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_appendToFileNameRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->appendToFileName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_existsRequest, ::octaneapi::ApiFileName_existsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_existsRequest* req,
             ::octaneapi::ApiFileName_existsResponse* resp) {
               return service->exists(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_existsAsFileRequest, ::octaneapi::ApiFileName_existsAsFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_existsAsFileRequest* req,
             ::octaneapi::ApiFileName_existsAsFileResponse* resp) {
               return service->existsAsFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_existsAsDirectoryRequest, ::octaneapi::ApiFileName_existsAsDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_existsAsDirectoryRequest* req,
             ::octaneapi::ApiFileName_existsAsDirectoryResponse* resp) {
               return service->existsAsDirectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_hasWriteAccessRequest, ::octaneapi::ApiFileName_hasWriteAccessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_hasWriteAccessRequest* req,
             ::octaneapi::ApiFileName_hasWriteAccessResponse* resp) {
               return service->hasWriteAccess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiFileNameService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiFileNameService::Service, ::octaneapi::ApiFileName_createDirectoryRequest, ::octaneapi::ApiFileName_createDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiFileNameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiFileName_createDirectoryRequest* req,
             ::octaneapi::ApiFileName_createDirectoryResponse* resp) {
               return service->createDirectory(ctx, req, resp);
             }, this)));
}

ApiFileNameService::Service::~Service() {
}

::grpc::Status ApiFileNameService::Service::create(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_createRequest* request, ::octaneapi::ApiFileName_createResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::destroy(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_destroyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::set(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_setRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::clear(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_clearRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::isEmpty(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_isEmptyRequest* request, ::octaneapi::ApiFileName_isEmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::isAbsolute(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_isAbsoluteRequest* request, ::octaneapi::ApiFileName_isAbsoluteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::isRelative(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_isRelativeRequest* request, ::octaneapi::ApiFileName_isRelativeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::getParent(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getParentRequest* request, ::octaneapi::ApiFileName_getParentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::getFileOnly(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getFileOnlyRequest* request, ::octaneapi::ApiFileName_getFileOnlyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::getFullString(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getFullStringRequest* request, ::octaneapi::ApiFileName_getFullStringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::getRootString(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getRootStringRequest* request, ::octaneapi::ApiFileName_getRootStringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::getParentString(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getParentStringRequest* request, ::octaneapi::ApiFileName_getParentStringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::getFileString(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getFileStringRequest* request, ::octaneapi::ApiFileName_getFileStringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::getSuffix(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getSuffixRequest* request, ::octaneapi::ApiFileName_getSuffixResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::setSuffix(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_setSuffixRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::withSuffix(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_withSuffixRequest* request, ::octaneapi::ApiFileName_withSuffixResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::makeRelativeTo(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_makeRelativeToRequest* request, ::octaneapi::ApiFileName_makeRelativeToResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::getConcat(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_getConcatRequest* request, ::octaneapi::ApiFileName_getConcatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::concat(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_concatRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::equals(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_equalsRequest* request, ::octaneapi::ApiFileName_equalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::notEquals(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_notEqualsRequest* request, ::octaneapi::ApiFileName_notEqualsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::lessThan(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_lessThanRequest* request, ::octaneapi::ApiFileName_lessThanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::exactlyEquals(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_exactlyEqualsRequest* request, ::octaneapi::ApiFileName_exactlyEqualsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::exactlyLessThan(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_exactlyLessThanRequest* request, ::octaneapi::ApiFileName_exactlyLessThanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::appendToFileName(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_appendToFileNameRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::exists(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_existsRequest* request, ::octaneapi::ApiFileName_existsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::existsAsFile(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_existsAsFileRequest* request, ::octaneapi::ApiFileName_existsAsFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::existsAsDirectory(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_existsAsDirectoryRequest* request, ::octaneapi::ApiFileName_existsAsDirectoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::hasWriteAccess(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_hasWriteAccessRequest* request, ::octaneapi::ApiFileName_hasWriteAccessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiFileNameService::Service::createDirectory(::grpc::ServerContext* context, const ::octaneapi::ApiFileName_createDirectoryRequest* request, ::octaneapi::ApiFileName_createDirectoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

