// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apiwindow.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apiwindow_2eproto__INCLUDED
#define GRPC_apiwindow_2eproto__INCLUDED

#include "apiwindow.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiWindow' from 'apiwindow.h'
class ApiWindowService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiWindowService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Creates a new ApiWindow
    virtual ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_createRequest& request, ::octaneapi::ApiWindow_createResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    // / Destroys this window
    virtual ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_destroyRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    // / Windows only have a single content component
    virtual ::grpc::Status addContentComponent(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncaddContentComponent(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncaddContentComponentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncaddContentComponent(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncaddContentComponentRaw(context, request, cq));
    }
    // / Shows this window
    virtual ::grpc::Status show(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_showRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncshow(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_showRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncshowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncshow(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_showRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncshowRaw(context, request, cq));
    }
    // / Hides this window again
    virtual ::grpc::Status hide(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_hideRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asynchide(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_hideRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsynchideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsynchide(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_hideRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsynchideRaw(context, request, cq));
    }
    // / Returns whether this window is visible
    virtual ::grpc::Status visible(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_visibleRequest& request, ::octaneapi::ApiWindow_visibleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_visibleResponse>> Asyncvisible(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_visibleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_visibleResponse>>(AsyncvisibleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_visibleResponse>> PrepareAsyncvisible(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_visibleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_visibleResponse>>(PrepareAsyncvisibleRaw(context, request, cq));
    }
    // / Returns the native window handle of the window
    virtual ::grpc::Status nativeHandle(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest& request, ::octaneapi::ApiWindow_nativeHandleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_nativeHandleResponse>> AsyncnativeHandle(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_nativeHandleResponse>>(AsyncnativeHandleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_nativeHandleResponse>> PrepareAsyncnativeHandle(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_nativeHandleResponse>>(PrepareAsyncnativeHandleRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Creates a new ApiWindow
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_createRequest* request, ::octaneapi::ApiWindow_createResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_createRequest* request, ::octaneapi::ApiWindow_createResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Destroys this window
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Windows only have a single content component
      virtual void addContentComponent(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addContentComponent(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Shows this window
      virtual void show(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_showRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void show(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_showRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Hides this window again
      virtual void hide(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_hideRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void hide(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_hideRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns whether this window is visible
      virtual void visible(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_visibleRequest* request, ::octaneapi::ApiWindow_visibleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void visible(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_visibleRequest* request, ::octaneapi::ApiWindow_visibleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the native window handle of the window
      virtual void nativeHandle(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest* request, ::octaneapi::ApiWindow_nativeHandleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nativeHandle(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest* request, ::octaneapi::ApiWindow_nativeHandleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncaddContentComponentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncaddContentComponentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncshowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_showRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncshowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_showRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsynchideRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_hideRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsynchideRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_hideRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_visibleResponse>* AsyncvisibleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_visibleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_visibleResponse>* PrepareAsyncvisibleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_visibleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_nativeHandleResponse>* AsyncnativeHandleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiWindow_nativeHandleResponse>* PrepareAsyncnativeHandleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_createRequest& request, ::octaneapi::ApiWindow_createResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_destroyRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    ::grpc::Status addContentComponent(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncaddContentComponent(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncaddContentComponentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncaddContentComponent(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncaddContentComponentRaw(context, request, cq));
    }
    ::grpc::Status show(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_showRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncshow(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_showRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncshowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncshow(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_showRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncshowRaw(context, request, cq));
    }
    ::grpc::Status hide(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_hideRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asynchide(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_hideRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsynchideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsynchide(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_hideRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsynchideRaw(context, request, cq));
    }
    ::grpc::Status visible(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_visibleRequest& request, ::octaneapi::ApiWindow_visibleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_visibleResponse>> Asyncvisible(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_visibleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_visibleResponse>>(AsyncvisibleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_visibleResponse>> PrepareAsyncvisible(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_visibleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_visibleResponse>>(PrepareAsyncvisibleRaw(context, request, cq));
    }
    ::grpc::Status nativeHandle(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest& request, ::octaneapi::ApiWindow_nativeHandleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_nativeHandleResponse>> AsyncnativeHandle(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_nativeHandleResponse>>(AsyncnativeHandleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_nativeHandleResponse>> PrepareAsyncnativeHandle(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_nativeHandleResponse>>(PrepareAsyncnativeHandleRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_createRequest* request, ::octaneapi::ApiWindow_createResponse* response, std::function<void(::grpc::Status)>) override;
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_createRequest* request, ::octaneapi::ApiWindow_createResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void addContentComponent(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void addContentComponent(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void show(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_showRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void show(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_showRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void hide(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_hideRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void hide(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_hideRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void visible(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_visibleRequest* request, ::octaneapi::ApiWindow_visibleResponse* response, std::function<void(::grpc::Status)>) override;
      void visible(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_visibleRequest* request, ::octaneapi::ApiWindow_visibleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void nativeHandle(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest* request, ::octaneapi::ApiWindow_nativeHandleResponse* response, std::function<void(::grpc::Status)>) override;
      void nativeHandle(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest* request, ::octaneapi::ApiWindow_nativeHandleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncaddContentComponentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncaddContentComponentRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncshowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_showRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncshowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_showRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsynchideRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_hideRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsynchideRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_hideRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_visibleResponse>* AsyncvisibleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_visibleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_visibleResponse>* PrepareAsyncvisibleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_visibleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_nativeHandleResponse>* AsyncnativeHandleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiWindow_nativeHandleResponse>* PrepareAsyncnativeHandleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_create_;
    const ::grpc::internal::RpcMethod rpcmethod_destroy_;
    const ::grpc::internal::RpcMethod rpcmethod_addContentComponent_;
    const ::grpc::internal::RpcMethod rpcmethod_show_;
    const ::grpc::internal::RpcMethod rpcmethod_hide_;
    const ::grpc::internal::RpcMethod rpcmethod_visible_;
    const ::grpc::internal::RpcMethod rpcmethod_nativeHandle_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Creates a new ApiWindow
    virtual ::grpc::Status create(::grpc::ServerContext* context, const ::octaneapi::ApiWindow_createRequest* request, ::octaneapi::ApiWindow_createResponse* response);
    // / Destroys this window
    virtual ::grpc::Status destroy(::grpc::ServerContext* context, const ::octaneapi::ApiWindow_destroyRequest* request, ::google::protobuf::Empty* response);
    // / Windows only have a single content component
    virtual ::grpc::Status addContentComponent(::grpc::ServerContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest* request, ::google::protobuf::Empty* response);
    // / Shows this window
    virtual ::grpc::Status show(::grpc::ServerContext* context, const ::octaneapi::ApiWindow_showRequest* request, ::google::protobuf::Empty* response);
    // / Hides this window again
    virtual ::grpc::Status hide(::grpc::ServerContext* context, const ::octaneapi::ApiWindow_hideRequest* request, ::google::protobuf::Empty* response);
    // / Returns whether this window is visible
    virtual ::grpc::Status visible(::grpc::ServerContext* context, const ::octaneapi::ApiWindow_visibleRequest* request, ::octaneapi::ApiWindow_visibleResponse* response);
    // / Returns the native window handle of the window
    virtual ::grpc::Status nativeHandle(::grpc::ServerContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest* request, ::octaneapi::ApiWindow_nativeHandleResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_createRequest* /*request*/, ::octaneapi::ApiWindow_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::octaneapi::ApiWindow_createRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiWindow_createResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_destroy() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::octaneapi::ApiWindow_destroyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addContentComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addContentComponent() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_addContentComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addContentComponent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_addContentComponentRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddContentComponent(::grpc::ServerContext* context, ::octaneapi::ApiWindow_addContentComponentRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_show() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status show(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_showRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestshow(::grpc::ServerContext* context, ::octaneapi::ApiWindow_showRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_hide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_hide() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_hide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hide(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_hideRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesthide(::grpc::ServerContext* context, ::octaneapi::ApiWindow_hideRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_visible : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_visible() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_visible() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status visible(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_visibleRequest* /*request*/, ::octaneapi::ApiWindow_visibleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestvisible(::grpc::ServerContext* context, ::octaneapi::ApiWindow_visibleRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiWindow_visibleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nativeHandle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_nativeHandle() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_nativeHandle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nativeHandle(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_nativeHandleRequest* /*request*/, ::octaneapi::ApiWindow_nativeHandleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnativeHandle(::grpc::ServerContext* context, ::octaneapi::ApiWindow_nativeHandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiWindow_nativeHandleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_create<WithAsyncMethod_destroy<WithAsyncMethod_addContentComponent<WithAsyncMethod_show<WithAsyncMethod_hide<WithAsyncMethod_visible<WithAsyncMethod_nativeHandle<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_create() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiWindow_createRequest, ::octaneapi::ApiWindow_createResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiWindow_createRequest* request, ::octaneapi::ApiWindow_createResponse* response) { return this->create(context, request, response); }));}
    void SetMessageAllocatorFor_create(
        ::grpc::MessageAllocator< ::octaneapi::ApiWindow_createRequest, ::octaneapi::ApiWindow_createResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiWindow_createRequest, ::octaneapi::ApiWindow_createResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_createRequest* /*request*/, ::octaneapi::ApiWindow_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiWindow_createRequest* /*request*/, ::octaneapi::ApiWindow_createResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiWindow_destroyRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiWindow_destroyRequest* request, ::google::protobuf::Empty* response) { return this->destroy(context, request, response); }));}
    void SetMessageAllocatorFor_destroy(
        ::grpc::MessageAllocator< ::octaneapi::ApiWindow_destroyRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiWindow_destroyRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiWindow_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_addContentComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addContentComponent() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiWindow_addContentComponentRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiWindow_addContentComponentRequest* request, ::google::protobuf::Empty* response) { return this->addContentComponent(context, request, response); }));}
    void SetMessageAllocatorFor_addContentComponent(
        ::grpc::MessageAllocator< ::octaneapi::ApiWindow_addContentComponentRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiWindow_addContentComponentRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addContentComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addContentComponent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_addContentComponentRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addContentComponent(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiWindow_addContentComponentRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_show() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiWindow_showRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiWindow_showRequest* request, ::google::protobuf::Empty* response) { return this->show(context, request, response); }));}
    void SetMessageAllocatorFor_show(
        ::grpc::MessageAllocator< ::octaneapi::ApiWindow_showRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiWindow_showRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status show(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_showRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* show(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiWindow_showRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_hide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_hide() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiWindow_hideRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiWindow_hideRequest* request, ::google::protobuf::Empty* response) { return this->hide(context, request, response); }));}
    void SetMessageAllocatorFor_hide(
        ::grpc::MessageAllocator< ::octaneapi::ApiWindow_hideRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiWindow_hideRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_hide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hide(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_hideRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hide(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiWindow_hideRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_visible : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_visible() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiWindow_visibleRequest, ::octaneapi::ApiWindow_visibleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiWindow_visibleRequest* request, ::octaneapi::ApiWindow_visibleResponse* response) { return this->visible(context, request, response); }));}
    void SetMessageAllocatorFor_visible(
        ::grpc::MessageAllocator< ::octaneapi::ApiWindow_visibleRequest, ::octaneapi::ApiWindow_visibleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiWindow_visibleRequest, ::octaneapi::ApiWindow_visibleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_visible() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status visible(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_visibleRequest* /*request*/, ::octaneapi::ApiWindow_visibleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* visible(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiWindow_visibleRequest* /*request*/, ::octaneapi::ApiWindow_visibleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_nativeHandle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_nativeHandle() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiWindow_nativeHandleRequest, ::octaneapi::ApiWindow_nativeHandleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiWindow_nativeHandleRequest* request, ::octaneapi::ApiWindow_nativeHandleResponse* response) { return this->nativeHandle(context, request, response); }));}
    void SetMessageAllocatorFor_nativeHandle(
        ::grpc::MessageAllocator< ::octaneapi::ApiWindow_nativeHandleRequest, ::octaneapi::ApiWindow_nativeHandleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiWindow_nativeHandleRequest, ::octaneapi::ApiWindow_nativeHandleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_nativeHandle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nativeHandle(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_nativeHandleRequest* /*request*/, ::octaneapi::ApiWindow_nativeHandleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* nativeHandle(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiWindow_nativeHandleRequest* /*request*/, ::octaneapi::ApiWindow_nativeHandleResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_create<WithCallbackMethod_destroy<WithCallbackMethod_addContentComponent<WithCallbackMethod_show<WithCallbackMethod_hide<WithCallbackMethod_visible<WithCallbackMethod_nativeHandle<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_createRequest* /*request*/, ::octaneapi::ApiWindow_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_destroy() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addContentComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addContentComponent() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_addContentComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addContentComponent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_addContentComponentRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_show() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status show(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_showRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_hide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_hide() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_hide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hide(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_hideRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_visible : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_visible() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_visible() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status visible(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_visibleRequest* /*request*/, ::octaneapi::ApiWindow_visibleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nativeHandle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_nativeHandle() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_nativeHandle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nativeHandle(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_nativeHandleRequest* /*request*/, ::octaneapi::ApiWindow_nativeHandleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_createRequest* /*request*/, ::octaneapi::ApiWindow_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_destroy() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addContentComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addContentComponent() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_addContentComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addContentComponent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_addContentComponentRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddContentComponent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_show() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status show(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_showRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestshow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_hide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_hide() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_hide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hide(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_hideRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesthide(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_visible : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_visible() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_visible() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status visible(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_visibleRequest* /*request*/, ::octaneapi::ApiWindow_visibleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestvisible(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nativeHandle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_nativeHandle() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_nativeHandle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nativeHandle(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_nativeHandleRequest* /*request*/, ::octaneapi::ApiWindow_nativeHandleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestnativeHandle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_create() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->create(context, request, response); }));
    }
    ~WithRawCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_createRequest* /*request*/, ::octaneapi::ApiWindow_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->destroy(context, request, response); }));
    }
    ~WithRawCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addContentComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addContentComponent() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addContentComponent(context, request, response); }));
    }
    ~WithRawCallbackMethod_addContentComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addContentComponent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_addContentComponentRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addContentComponent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_show() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->show(context, request, response); }));
    }
    ~WithRawCallbackMethod_show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status show(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_showRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* show(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_hide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_hide() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->hide(context, request, response); }));
    }
    ~WithRawCallbackMethod_hide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status hide(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_hideRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* hide(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_visible : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_visible() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->visible(context, request, response); }));
    }
    ~WithRawCallbackMethod_visible() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status visible(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_visibleRequest* /*request*/, ::octaneapi::ApiWindow_visibleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* visible(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_nativeHandle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_nativeHandle() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->nativeHandle(context, request, response); }));
    }
    ~WithRawCallbackMethod_nativeHandle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nativeHandle(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_nativeHandleRequest* /*request*/, ::octaneapi::ApiWindow_nativeHandleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* nativeHandle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiWindow_createRequest, ::octaneapi::ApiWindow_createResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiWindow_createRequest, ::octaneapi::ApiWindow_createResponse>* streamer) {
                       return this->Streamedcreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_createRequest* /*request*/, ::octaneapi::ApiWindow_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiWindow_createRequest,::octaneapi::ApiWindow_createResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_destroy() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiWindow_destroyRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiWindow_destroyRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streameddestroy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddestroy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiWindow_destroyRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addContentComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addContentComponent() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiWindow_addContentComponentRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiWindow_addContentComponentRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedaddContentComponent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addContentComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addContentComponent(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_addContentComponentRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddContentComponent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiWindow_addContentComponentRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_show() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiWindow_showRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiWindow_showRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedshow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status show(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_showRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedshow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiWindow_showRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_hide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_hide() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiWindow_hideRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiWindow_hideRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streamedhide(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_hide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status hide(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_hideRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedhide(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiWindow_hideRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_visible : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_visible() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiWindow_visibleRequest, ::octaneapi::ApiWindow_visibleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiWindow_visibleRequest, ::octaneapi::ApiWindow_visibleResponse>* streamer) {
                       return this->Streamedvisible(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_visible() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status visible(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_visibleRequest* /*request*/, ::octaneapi::ApiWindow_visibleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedvisible(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiWindow_visibleRequest,::octaneapi::ApiWindow_visibleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nativeHandle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_nativeHandle() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiWindow_nativeHandleRequest, ::octaneapi::ApiWindow_nativeHandleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiWindow_nativeHandleRequest, ::octaneapi::ApiWindow_nativeHandleResponse>* streamer) {
                       return this->StreamednativeHandle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_nativeHandle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nativeHandle(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiWindow_nativeHandleRequest* /*request*/, ::octaneapi::ApiWindow_nativeHandleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamednativeHandle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiWindow_nativeHandleRequest,::octaneapi::ApiWindow_nativeHandleResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_addContentComponent<WithStreamedUnaryMethod_show<WithStreamedUnaryMethod_hide<WithStreamedUnaryMethod_visible<WithStreamedUnaryMethod_nativeHandle<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_addContentComponent<WithStreamedUnaryMethod_show<WithStreamedUnaryMethod_hide<WithStreamedUnaryMethod_visible<WithStreamedUnaryMethod_nativeHandle<Service > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apiwindow_2eproto__INCLUDED
