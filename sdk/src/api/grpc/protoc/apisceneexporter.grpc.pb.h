// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apisceneexporter.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apisceneexporter_2eproto__INCLUDED
#define GRPC_apisceneexporter_2eproto__INCLUDED

#include "apisceneexporter.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiSceneExporter' from 'apisceneexporter.h'
class ApiSceneExporterService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiSceneExporterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Tells whether the 
    virtual ::grpc::Status isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest& request, ::octaneapi::ApiSceneExporter_isSupportedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_isSupportedResponse>> AsyncisSupported(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_isSupportedResponse>>(AsyncisSupportedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_isSupportedResponse>> PrepareAsyncisSupported(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_isSupportedResponse>>(PrepareAsyncisSupportedRaw(context, request, cq));
    }
    // / Starts a new export
    virtual ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest& request, ::octaneapi::ApiSceneExporter_createResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    // / Destroys the instance
    virtual ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    // / Returns the current state of the scene exporter
    virtual ::grpc::Status state(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest& request, ::octaneapi::ApiSceneExporter_stateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_stateResponse>> Asyncstate(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_stateResponse>>(AsyncstateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_stateResponse>> PrepareAsyncstate(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_stateResponse>>(PrepareAsyncstateRaw(context, request, cq));
    }
    // / Exports the next time sample
    virtual ::grpc::Status exportSample(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncexportSample(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncexportSampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncexportSample(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncexportSampleRaw(context, request, cq));
    }
    // / Returns the current sample/frame index of the export
    virtual ::grpc::Status sampleIx(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest& request, ::octaneapi::ApiSceneExporter_sampleIxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_sampleIxResponse>> AsyncsampleIx(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_sampleIxResponse>>(AsyncsampleIxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_sampleIxResponse>> PrepareAsyncsampleIx(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_sampleIxResponse>>(PrepareAsyncsampleIxRaw(context, request, cq));
    }
    // / Finishes the scene export and creates the scene file or creates an OCS string if no
    // / sceneFile
    virtual ::grpc::Status finish(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest& request, ::octaneapi::ApiSceneExporter_finishResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_finishResponse>> Asyncfinish(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_finishResponse>>(AsyncfinishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_finishResponse>> PrepareAsyncfinish(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_finishResponse>>(PrepareAsyncfinishRaw(context, request, cq));
    }
    // / Returns the current OCS string that was written during finish() or an empty string if
    // / finish() wasn't called yet or a sceneFile was specified during create()
    virtual ::grpc::Status ocsString(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest& request, ::octaneapi::ApiSceneExporter_ocsStringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_ocsStringResponse>> AsyncocsString(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_ocsStringResponse>>(AsyncocsStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_ocsStringResponse>> PrepareAsyncocsString(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_ocsStringResponse>>(PrepareAsyncocsStringRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Tells whether the 
      virtual void isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest* request, ::octaneapi::ApiSceneExporter_isSupportedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest* request, ::octaneapi::ApiSceneExporter_isSupportedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Starts a new export
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest* request, ::octaneapi::ApiSceneExporter_createResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest* request, ::octaneapi::ApiSceneExporter_createResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Destroys the instance
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the current state of the scene exporter
      virtual void state(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest* request, ::octaneapi::ApiSceneExporter_stateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void state(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest* request, ::octaneapi::ApiSceneExporter_stateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Exports the next time sample
      virtual void exportSample(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void exportSample(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the current sample/frame index of the export
      virtual void sampleIx(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest* request, ::octaneapi::ApiSceneExporter_sampleIxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sampleIx(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest* request, ::octaneapi::ApiSceneExporter_sampleIxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Finishes the scene export and creates the scene file or creates an OCS string if no
      // / sceneFile
      virtual void finish(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest* request, ::octaneapi::ApiSceneExporter_finishResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void finish(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest* request, ::octaneapi::ApiSceneExporter_finishResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the current OCS string that was written during finish() or an empty string if
      // / finish() wasn't called yet or a sceneFile was specified during create()
      virtual void ocsString(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest* request, ::octaneapi::ApiSceneExporter_ocsStringResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ocsString(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest* request, ::octaneapi::ApiSceneExporter_ocsStringResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_isSupportedResponse>* AsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_isSupportedResponse>* PrepareAsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_stateResponse>* AsyncstateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_stateResponse>* PrepareAsyncstateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncexportSampleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncexportSampleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_sampleIxResponse>* AsyncsampleIxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_sampleIxResponse>* PrepareAsyncsampleIxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_finishResponse>* AsyncfinishRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_finishResponse>* PrepareAsyncfinishRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_ocsStringResponse>* AsyncocsStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiSceneExporter_ocsStringResponse>* PrepareAsyncocsStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest& request, ::octaneapi::ApiSceneExporter_isSupportedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_isSupportedResponse>> AsyncisSupported(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_isSupportedResponse>>(AsyncisSupportedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_isSupportedResponse>> PrepareAsyncisSupported(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_isSupportedResponse>>(PrepareAsyncisSupportedRaw(context, request, cq));
    }
    ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest& request, ::octaneapi::ApiSceneExporter_createResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    ::grpc::Status state(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest& request, ::octaneapi::ApiSceneExporter_stateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_stateResponse>> Asyncstate(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_stateResponse>>(AsyncstateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_stateResponse>> PrepareAsyncstate(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_stateResponse>>(PrepareAsyncstateRaw(context, request, cq));
    }
    ::grpc::Status exportSample(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncexportSample(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncexportSampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncexportSample(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncexportSampleRaw(context, request, cq));
    }
    ::grpc::Status sampleIx(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest& request, ::octaneapi::ApiSceneExporter_sampleIxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_sampleIxResponse>> AsyncsampleIx(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_sampleIxResponse>>(AsyncsampleIxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_sampleIxResponse>> PrepareAsyncsampleIx(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_sampleIxResponse>>(PrepareAsyncsampleIxRaw(context, request, cq));
    }
    ::grpc::Status finish(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest& request, ::octaneapi::ApiSceneExporter_finishResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_finishResponse>> Asyncfinish(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_finishResponse>>(AsyncfinishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_finishResponse>> PrepareAsyncfinish(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_finishResponse>>(PrepareAsyncfinishRaw(context, request, cq));
    }
    ::grpc::Status ocsString(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest& request, ::octaneapi::ApiSceneExporter_ocsStringResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_ocsStringResponse>> AsyncocsString(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_ocsStringResponse>>(AsyncocsStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_ocsStringResponse>> PrepareAsyncocsString(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_ocsStringResponse>>(PrepareAsyncocsStringRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest* request, ::octaneapi::ApiSceneExporter_isSupportedResponse* response, std::function<void(::grpc::Status)>) override;
      void isSupported(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest* request, ::octaneapi::ApiSceneExporter_isSupportedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest* request, ::octaneapi::ApiSceneExporter_createResponse* response, std::function<void(::grpc::Status)>) override;
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest* request, ::octaneapi::ApiSceneExporter_createResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void state(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest* request, ::octaneapi::ApiSceneExporter_stateResponse* response, std::function<void(::grpc::Status)>) override;
      void state(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest* request, ::octaneapi::ApiSceneExporter_stateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void exportSample(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void exportSample(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void sampleIx(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest* request, ::octaneapi::ApiSceneExporter_sampleIxResponse* response, std::function<void(::grpc::Status)>) override;
      void sampleIx(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest* request, ::octaneapi::ApiSceneExporter_sampleIxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void finish(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest* request, ::octaneapi::ApiSceneExporter_finishResponse* response, std::function<void(::grpc::Status)>) override;
      void finish(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest* request, ::octaneapi::ApiSceneExporter_finishResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ocsString(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest* request, ::octaneapi::ApiSceneExporter_ocsStringResponse* response, std::function<void(::grpc::Status)>) override;
      void ocsString(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest* request, ::octaneapi::ApiSceneExporter_ocsStringResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_isSupportedResponse>* AsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_isSupportedResponse>* PrepareAsyncisSupportedRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_stateResponse>* AsyncstateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_stateResponse>* PrepareAsyncstateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_stateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncexportSampleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncexportSampleRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_sampleIxResponse>* AsyncsampleIxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_sampleIxResponse>* PrepareAsyncsampleIxRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_finishResponse>* AsyncfinishRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_finishResponse>* PrepareAsyncfinishRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_finishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_ocsStringResponse>* AsyncocsStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiSceneExporter_ocsStringResponse>* PrepareAsyncocsStringRaw(::grpc::ClientContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_isSupported_;
    const ::grpc::internal::RpcMethod rpcmethod_create_;
    const ::grpc::internal::RpcMethod rpcmethod_destroy_;
    const ::grpc::internal::RpcMethod rpcmethod_state_;
    const ::grpc::internal::RpcMethod rpcmethod_exportSample_;
    const ::grpc::internal::RpcMethod rpcmethod_sampleIx_;
    const ::grpc::internal::RpcMethod rpcmethod_finish_;
    const ::grpc::internal::RpcMethod rpcmethod_ocsString_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Tells whether the 
    virtual ::grpc::Status isSupported(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest* request, ::octaneapi::ApiSceneExporter_isSupportedResponse* response);
    // / Starts a new export
    virtual ::grpc::Status create(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_createRequest* request, ::octaneapi::ApiSceneExporter_createResponse* response);
    // / Destroys the instance
    virtual ::grpc::Status destroy(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest* request, ::google::protobuf::Empty* response);
    // / Returns the current state of the scene exporter
    virtual ::grpc::Status state(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_stateRequest* request, ::octaneapi::ApiSceneExporter_stateResponse* response);
    // / Exports the next time sample
    virtual ::grpc::Status exportSample(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest* request, ::google::protobuf::Empty* response);
    // / Returns the current sample/frame index of the export
    virtual ::grpc::Status sampleIx(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest* request, ::octaneapi::ApiSceneExporter_sampleIxResponse* response);
    // / Finishes the scene export and creates the scene file or creates an OCS string if no
    // / sceneFile
    virtual ::grpc::Status finish(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_finishRequest* request, ::octaneapi::ApiSceneExporter_finishResponse* response);
    // / Returns the current OCS string that was written during finish() or an empty string if
    // / finish() wasn't called yet or a sceneFile was specified during create()
    virtual ::grpc::Status ocsString(::grpc::ServerContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest* request, ::octaneapi::ApiSceneExporter_ocsStringResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isSupported() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_isSupportedRequest* /*request*/, ::octaneapi::ApiSceneExporter_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisSupported(::grpc::ServerContext* context, ::octaneapi::ApiSceneExporter_isSupportedRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSceneExporter_isSupportedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_create() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_createRequest* /*request*/, ::octaneapi::ApiSceneExporter_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::octaneapi::ApiSceneExporter_createRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSceneExporter_createResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_destroy() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::octaneapi::ApiSceneExporter_destroyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_state : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_state() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_state() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status state(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_stateRequest* /*request*/, ::octaneapi::ApiSceneExporter_stateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststate(::grpc::ServerContext* context, ::octaneapi::ApiSceneExporter_stateRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSceneExporter_stateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_exportSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_exportSample() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_exportSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportSample(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_exportSampleRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexportSample(::grpc::ServerContext* context, ::octaneapi::ApiSceneExporter_exportSampleRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sampleIx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sampleIx() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_sampleIx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sampleIx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_sampleIxRequest* /*request*/, ::octaneapi::ApiSceneExporter_sampleIxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsampleIx(::grpc::ServerContext* context, ::octaneapi::ApiSceneExporter_sampleIxRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSceneExporter_sampleIxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_finish() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status finish(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_finishRequest* /*request*/, ::octaneapi::ApiSceneExporter_finishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfinish(::grpc::ServerContext* context, ::octaneapi::ApiSceneExporter_finishRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSceneExporter_finishResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ocsString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ocsString() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ocsString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ocsString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_ocsStringRequest* /*request*/, ::octaneapi::ApiSceneExporter_ocsStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestocsString(::grpc::ServerContext* context, ::octaneapi::ApiSceneExporter_ocsStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiSceneExporter_ocsStringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_isSupported<WithAsyncMethod_create<WithAsyncMethod_destroy<WithAsyncMethod_state<WithAsyncMethod_exportSample<WithAsyncMethod_sampleIx<WithAsyncMethod_finish<WithAsyncMethod_ocsString<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_isSupported() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_isSupportedRequest, ::octaneapi::ApiSceneExporter_isSupportedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSceneExporter_isSupportedRequest* request, ::octaneapi::ApiSceneExporter_isSupportedResponse* response) { return this->isSupported(context, request, response); }));}
    void SetMessageAllocatorFor_isSupported(
        ::grpc::MessageAllocator< ::octaneapi::ApiSceneExporter_isSupportedRequest, ::octaneapi::ApiSceneExporter_isSupportedResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_isSupportedRequest, ::octaneapi::ApiSceneExporter_isSupportedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_isSupportedRequest* /*request*/, ::octaneapi::ApiSceneExporter_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isSupported(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_isSupportedRequest* /*request*/, ::octaneapi::ApiSceneExporter_isSupportedResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_create() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_createRequest, ::octaneapi::ApiSceneExporter_createResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSceneExporter_createRequest* request, ::octaneapi::ApiSceneExporter_createResponse* response) { return this->create(context, request, response); }));}
    void SetMessageAllocatorFor_create(
        ::grpc::MessageAllocator< ::octaneapi::ApiSceneExporter_createRequest, ::octaneapi::ApiSceneExporter_createResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_createRequest, ::octaneapi::ApiSceneExporter_createResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_createRequest* /*request*/, ::octaneapi::ApiSceneExporter_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_createRequest* /*request*/, ::octaneapi::ApiSceneExporter_createResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_destroyRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSceneExporter_destroyRequest* request, ::google::protobuf::Empty* response) { return this->destroy(context, request, response); }));}
    void SetMessageAllocatorFor_destroy(
        ::grpc::MessageAllocator< ::octaneapi::ApiSceneExporter_destroyRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_destroyRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_state : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_state() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_stateRequest, ::octaneapi::ApiSceneExporter_stateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSceneExporter_stateRequest* request, ::octaneapi::ApiSceneExporter_stateResponse* response) { return this->state(context, request, response); }));}
    void SetMessageAllocatorFor_state(
        ::grpc::MessageAllocator< ::octaneapi::ApiSceneExporter_stateRequest, ::octaneapi::ApiSceneExporter_stateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_stateRequest, ::octaneapi::ApiSceneExporter_stateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_state() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status state(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_stateRequest* /*request*/, ::octaneapi::ApiSceneExporter_stateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* state(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_stateRequest* /*request*/, ::octaneapi::ApiSceneExporter_stateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_exportSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_exportSample() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_exportSampleRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSceneExporter_exportSampleRequest* request, ::google::protobuf::Empty* response) { return this->exportSample(context, request, response); }));}
    void SetMessageAllocatorFor_exportSample(
        ::grpc::MessageAllocator< ::octaneapi::ApiSceneExporter_exportSampleRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_exportSampleRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_exportSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportSample(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_exportSampleRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* exportSample(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_exportSampleRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sampleIx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sampleIx() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_sampleIxRequest, ::octaneapi::ApiSceneExporter_sampleIxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSceneExporter_sampleIxRequest* request, ::octaneapi::ApiSceneExporter_sampleIxResponse* response) { return this->sampleIx(context, request, response); }));}
    void SetMessageAllocatorFor_sampleIx(
        ::grpc::MessageAllocator< ::octaneapi::ApiSceneExporter_sampleIxRequest, ::octaneapi::ApiSceneExporter_sampleIxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_sampleIxRequest, ::octaneapi::ApiSceneExporter_sampleIxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sampleIx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sampleIx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_sampleIxRequest* /*request*/, ::octaneapi::ApiSceneExporter_sampleIxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sampleIx(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_sampleIxRequest* /*request*/, ::octaneapi::ApiSceneExporter_sampleIxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_finish() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_finishRequest, ::octaneapi::ApiSceneExporter_finishResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSceneExporter_finishRequest* request, ::octaneapi::ApiSceneExporter_finishResponse* response) { return this->finish(context, request, response); }));}
    void SetMessageAllocatorFor_finish(
        ::grpc::MessageAllocator< ::octaneapi::ApiSceneExporter_finishRequest, ::octaneapi::ApiSceneExporter_finishResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_finishRequest, ::octaneapi::ApiSceneExporter_finishResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status finish(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_finishRequest* /*request*/, ::octaneapi::ApiSceneExporter_finishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* finish(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_finishRequest* /*request*/, ::octaneapi::ApiSceneExporter_finishResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ocsString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ocsString() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_ocsStringRequest, ::octaneapi::ApiSceneExporter_ocsStringResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiSceneExporter_ocsStringRequest* request, ::octaneapi::ApiSceneExporter_ocsStringResponse* response) { return this->ocsString(context, request, response); }));}
    void SetMessageAllocatorFor_ocsString(
        ::grpc::MessageAllocator< ::octaneapi::ApiSceneExporter_ocsStringRequest, ::octaneapi::ApiSceneExporter_ocsStringResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiSceneExporter_ocsStringRequest, ::octaneapi::ApiSceneExporter_ocsStringResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ocsString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ocsString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_ocsStringRequest* /*request*/, ::octaneapi::ApiSceneExporter_ocsStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ocsString(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_ocsStringRequest* /*request*/, ::octaneapi::ApiSceneExporter_ocsStringResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_isSupported<WithCallbackMethod_create<WithCallbackMethod_destroy<WithCallbackMethod_state<WithCallbackMethod_exportSample<WithCallbackMethod_sampleIx<WithCallbackMethod_finish<WithCallbackMethod_ocsString<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isSupported() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_isSupportedRequest* /*request*/, ::octaneapi::ApiSceneExporter_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_create() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_createRequest* /*request*/, ::octaneapi::ApiSceneExporter_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_destroy() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_state : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_state() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_state() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status state(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_stateRequest* /*request*/, ::octaneapi::ApiSceneExporter_stateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_exportSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_exportSample() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_exportSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportSample(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_exportSampleRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sampleIx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sampleIx() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_sampleIx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sampleIx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_sampleIxRequest* /*request*/, ::octaneapi::ApiSceneExporter_sampleIxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_finish() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status finish(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_finishRequest* /*request*/, ::octaneapi::ApiSceneExporter_finishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ocsString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ocsString() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ocsString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ocsString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_ocsStringRequest* /*request*/, ::octaneapi::ApiSceneExporter_ocsStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isSupported() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_isSupportedRequest* /*request*/, ::octaneapi::ApiSceneExporter_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisSupported(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_create() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_createRequest* /*request*/, ::octaneapi::ApiSceneExporter_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_destroy() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_state : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_state() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_state() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status state(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_stateRequest* /*request*/, ::octaneapi::ApiSceneExporter_stateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_exportSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_exportSample() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_exportSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportSample(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_exportSampleRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexportSample(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sampleIx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sampleIx() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_sampleIx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sampleIx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_sampleIxRequest* /*request*/, ::octaneapi::ApiSceneExporter_sampleIxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsampleIx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_finish() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status finish(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_finishRequest* /*request*/, ::octaneapi::ApiSceneExporter_finishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfinish(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ocsString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ocsString() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ocsString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ocsString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_ocsStringRequest* /*request*/, ::octaneapi::ApiSceneExporter_ocsStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestocsString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_isSupported() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isSupported(context, request, response); }));
    }
    ~WithRawCallbackMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_isSupportedRequest* /*request*/, ::octaneapi::ApiSceneExporter_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* isSupported(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_create() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->create(context, request, response); }));
    }
    ~WithRawCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_createRequest* /*request*/, ::octaneapi::ApiSceneExporter_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->destroy(context, request, response); }));
    }
    ~WithRawCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_state : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_state() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->state(context, request, response); }));
    }
    ~WithRawCallbackMethod_state() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status state(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_stateRequest* /*request*/, ::octaneapi::ApiSceneExporter_stateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* state(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_exportSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_exportSample() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->exportSample(context, request, response); }));
    }
    ~WithRawCallbackMethod_exportSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exportSample(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_exportSampleRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* exportSample(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sampleIx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sampleIx() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sampleIx(context, request, response); }));
    }
    ~WithRawCallbackMethod_sampleIx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sampleIx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_sampleIxRequest* /*request*/, ::octaneapi::ApiSceneExporter_sampleIxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sampleIx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_finish() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->finish(context, request, response); }));
    }
    ~WithRawCallbackMethod_finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status finish(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_finishRequest* /*request*/, ::octaneapi::ApiSceneExporter_finishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* finish(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ocsString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ocsString() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ocsString(context, request, response); }));
    }
    ~WithRawCallbackMethod_ocsString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ocsString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_ocsStringRequest* /*request*/, ::octaneapi::ApiSceneExporter_ocsStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ocsString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isSupported : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isSupported() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSceneExporter_isSupportedRequest, ::octaneapi::ApiSceneExporter_isSupportedResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSceneExporter_isSupportedRequest, ::octaneapi::ApiSceneExporter_isSupportedResponse>* streamer) {
                       return this->StreamedisSupported(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isSupported() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isSupported(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_isSupportedRequest* /*request*/, ::octaneapi::ApiSceneExporter_isSupportedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisSupported(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSceneExporter_isSupportedRequest,::octaneapi::ApiSceneExporter_isSupportedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_create() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSceneExporter_createRequest, ::octaneapi::ApiSceneExporter_createResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSceneExporter_createRequest, ::octaneapi::ApiSceneExporter_createResponse>* streamer) {
                       return this->Streamedcreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_createRequest* /*request*/, ::octaneapi::ApiSceneExporter_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSceneExporter_createRequest,::octaneapi::ApiSceneExporter_createResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_destroy() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSceneExporter_destroyRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSceneExporter_destroyRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streameddestroy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddestroy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSceneExporter_destroyRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_state : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_state() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSceneExporter_stateRequest, ::octaneapi::ApiSceneExporter_stateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSceneExporter_stateRequest, ::octaneapi::ApiSceneExporter_stateResponse>* streamer) {
                       return this->Streamedstate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_state() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status state(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_stateRequest* /*request*/, ::octaneapi::ApiSceneExporter_stateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSceneExporter_stateRequest,::octaneapi::ApiSceneExporter_stateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_exportSample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_exportSample() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSceneExporter_exportSampleRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSceneExporter_exportSampleRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedexportSample(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_exportSample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status exportSample(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_exportSampleRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedexportSample(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSceneExporter_exportSampleRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sampleIx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sampleIx() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSceneExporter_sampleIxRequest, ::octaneapi::ApiSceneExporter_sampleIxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSceneExporter_sampleIxRequest, ::octaneapi::ApiSceneExporter_sampleIxResponse>* streamer) {
                       return this->StreamedsampleIx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sampleIx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sampleIx(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_sampleIxRequest* /*request*/, ::octaneapi::ApiSceneExporter_sampleIxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsampleIx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSceneExporter_sampleIxRequest,::octaneapi::ApiSceneExporter_sampleIxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_finish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_finish() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSceneExporter_finishRequest, ::octaneapi::ApiSceneExporter_finishResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSceneExporter_finishRequest, ::octaneapi::ApiSceneExporter_finishResponse>* streamer) {
                       return this->Streamedfinish(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_finish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status finish(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_finishRequest* /*request*/, ::octaneapi::ApiSceneExporter_finishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedfinish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSceneExporter_finishRequest,::octaneapi::ApiSceneExporter_finishResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ocsString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ocsString() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiSceneExporter_ocsStringRequest, ::octaneapi::ApiSceneExporter_ocsStringResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiSceneExporter_ocsStringRequest, ::octaneapi::ApiSceneExporter_ocsStringResponse>* streamer) {
                       return this->StreamedocsString(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ocsString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ocsString(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiSceneExporter_ocsStringRequest* /*request*/, ::octaneapi::ApiSceneExporter_ocsStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedocsString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiSceneExporter_ocsStringRequest,::octaneapi::ApiSceneExporter_ocsStringResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_isSupported<WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_state<WithStreamedUnaryMethod_exportSample<WithStreamedUnaryMethod_sampleIx<WithStreamedUnaryMethod_finish<WithStreamedUnaryMethod_ocsString<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_isSupported<WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_state<WithStreamedUnaryMethod_exportSample<WithStreamedUnaryMethod_sampleIx<WithStreamedUnaryMethod_finish<WithStreamedUnaryMethod_ocsString<Service > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apisceneexporter_2eproto__INCLUDED
