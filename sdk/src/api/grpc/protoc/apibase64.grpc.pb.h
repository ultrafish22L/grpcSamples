// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apibase64.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apibase64_2eproto__INCLUDED
#define GRPC_apibase64_2eproto__INCLUDED

#include "apibase64.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiBase64' from 'apibase64.h'
class ApiBase64Service final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiBase64Service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Encodes the given data block as base64
    virtual ::grpc::Status encode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_encodeRequest& request, ::octaneapi::ApiBase64_encodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiBase64_encodeResponse>> Asyncencode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_encodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiBase64_encodeResponse>>(AsyncencodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiBase64_encodeResponse>> PrepareAsyncencode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_encodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiBase64_encodeResponse>>(PrepareAsyncencodeRaw(context, request, cq));
    }
    // / Encodes the given data block as base64
    virtual ::grpc::Status decode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_decodeRequest& request, ::octaneapi::ApiBase64_decodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiBase64_decodeResponse>> Asyncdecode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_decodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiBase64_decodeResponse>>(AsyncdecodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiBase64_decodeResponse>> PrepareAsyncdecode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_decodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiBase64_decodeResponse>>(PrepareAsyncdecodeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Encodes the given data block as base64
      virtual void encode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_encodeRequest* request, ::octaneapi::ApiBase64_encodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void encode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_encodeRequest* request, ::octaneapi::ApiBase64_encodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Encodes the given data block as base64
      virtual void decode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_decodeRequest* request, ::octaneapi::ApiBase64_decodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void decode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_decodeRequest* request, ::octaneapi::ApiBase64_decodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiBase64_encodeResponse>* AsyncencodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_encodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiBase64_encodeResponse>* PrepareAsyncencodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_encodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiBase64_decodeResponse>* AsyncdecodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_decodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiBase64_decodeResponse>* PrepareAsyncdecodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_decodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status encode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_encodeRequest& request, ::octaneapi::ApiBase64_encodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiBase64_encodeResponse>> Asyncencode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_encodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiBase64_encodeResponse>>(AsyncencodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiBase64_encodeResponse>> PrepareAsyncencode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_encodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiBase64_encodeResponse>>(PrepareAsyncencodeRaw(context, request, cq));
    }
    ::grpc::Status decode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_decodeRequest& request, ::octaneapi::ApiBase64_decodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiBase64_decodeResponse>> Asyncdecode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_decodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiBase64_decodeResponse>>(AsyncdecodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiBase64_decodeResponse>> PrepareAsyncdecode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_decodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiBase64_decodeResponse>>(PrepareAsyncdecodeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void encode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_encodeRequest* request, ::octaneapi::ApiBase64_encodeResponse* response, std::function<void(::grpc::Status)>) override;
      void encode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_encodeRequest* request, ::octaneapi::ApiBase64_encodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void decode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_decodeRequest* request, ::octaneapi::ApiBase64_decodeResponse* response, std::function<void(::grpc::Status)>) override;
      void decode(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_decodeRequest* request, ::octaneapi::ApiBase64_decodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiBase64_encodeResponse>* AsyncencodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_encodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiBase64_encodeResponse>* PrepareAsyncencodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_encodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiBase64_decodeResponse>* AsyncdecodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_decodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiBase64_decodeResponse>* PrepareAsyncdecodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiBase64_decodeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_encode_;
    const ::grpc::internal::RpcMethod rpcmethod_decode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Encodes the given data block as base64
    virtual ::grpc::Status encode(::grpc::ServerContext* context, const ::octaneapi::ApiBase64_encodeRequest* request, ::octaneapi::ApiBase64_encodeResponse* response);
    // / Encodes the given data block as base64
    virtual ::grpc::Status decode(::grpc::ServerContext* context, const ::octaneapi::ApiBase64_decodeRequest* request, ::octaneapi::ApiBase64_decodeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_encode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_encode() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_encode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status encode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiBase64_encodeRequest* /*request*/, ::octaneapi::ApiBase64_encodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestencode(::grpc::ServerContext* context, ::octaneapi::ApiBase64_encodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiBase64_encodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_decode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_decode() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_decode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiBase64_decodeRequest* /*request*/, ::octaneapi::ApiBase64_decodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdecode(::grpc::ServerContext* context, ::octaneapi::ApiBase64_decodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiBase64_decodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_encode<WithAsyncMethod_decode<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_encode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_encode() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiBase64_encodeRequest, ::octaneapi::ApiBase64_encodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiBase64_encodeRequest* request, ::octaneapi::ApiBase64_encodeResponse* response) { return this->encode(context, request, response); }));}
    void SetMessageAllocatorFor_encode(
        ::grpc::MessageAllocator< ::octaneapi::ApiBase64_encodeRequest, ::octaneapi::ApiBase64_encodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiBase64_encodeRequest, ::octaneapi::ApiBase64_encodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_encode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status encode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiBase64_encodeRequest* /*request*/, ::octaneapi::ApiBase64_encodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* encode(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiBase64_encodeRequest* /*request*/, ::octaneapi::ApiBase64_encodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_decode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_decode() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiBase64_decodeRequest, ::octaneapi::ApiBase64_decodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiBase64_decodeRequest* request, ::octaneapi::ApiBase64_decodeResponse* response) { return this->decode(context, request, response); }));}
    void SetMessageAllocatorFor_decode(
        ::grpc::MessageAllocator< ::octaneapi::ApiBase64_decodeRequest, ::octaneapi::ApiBase64_decodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiBase64_decodeRequest, ::octaneapi::ApiBase64_decodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_decode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiBase64_decodeRequest* /*request*/, ::octaneapi::ApiBase64_decodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* decode(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiBase64_decodeRequest* /*request*/, ::octaneapi::ApiBase64_decodeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_encode<WithCallbackMethod_decode<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_encode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_encode() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_encode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status encode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiBase64_encodeRequest* /*request*/, ::octaneapi::ApiBase64_encodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_decode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_decode() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_decode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiBase64_decodeRequest* /*request*/, ::octaneapi::ApiBase64_decodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_encode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_encode() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_encode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status encode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiBase64_encodeRequest* /*request*/, ::octaneapi::ApiBase64_encodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestencode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_decode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_decode() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_decode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiBase64_decodeRequest* /*request*/, ::octaneapi::ApiBase64_decodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdecode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_encode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_encode() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->encode(context, request, response); }));
    }
    ~WithRawCallbackMethod_encode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status encode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiBase64_encodeRequest* /*request*/, ::octaneapi::ApiBase64_encodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* encode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_decode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_decode() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->decode(context, request, response); }));
    }
    ~WithRawCallbackMethod_decode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiBase64_decodeRequest* /*request*/, ::octaneapi::ApiBase64_decodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* decode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_encode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_encode() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiBase64_encodeRequest, ::octaneapi::ApiBase64_encodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiBase64_encodeRequest, ::octaneapi::ApiBase64_encodeResponse>* streamer) {
                       return this->Streamedencode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_encode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status encode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiBase64_encodeRequest* /*request*/, ::octaneapi::ApiBase64_encodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedencode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiBase64_encodeRequest,::octaneapi::ApiBase64_encodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_decode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_decode() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiBase64_decodeRequest, ::octaneapi::ApiBase64_decodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiBase64_decodeRequest, ::octaneapi::ApiBase64_decodeResponse>* streamer) {
                       return this->Streameddecode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_decode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status decode(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiBase64_decodeRequest* /*request*/, ::octaneapi::ApiBase64_decodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddecode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiBase64_decodeRequest,::octaneapi::ApiBase64_decodeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_encode<WithStreamedUnaryMethod_decode<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_encode<WithStreamedUnaryMethod_decode<Service > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apibase64_2eproto__INCLUDED
