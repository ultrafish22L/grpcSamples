// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apinodesystem_6.proto

#include "apinodesystem_6.pb.h"
#include "apinodesystem_6.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiNodeGraphService_method_names[] = {
  "/octaneapi.ApiNodeGraphService/create1",
  "/octaneapi.ApiNodeGraphService/info1",
  "/octaneapi.ApiNodeGraphService/type1",
  "/octaneapi.ApiNodeGraphService/getOwnedItems",
  "/octaneapi.ApiNodeGraphService/getInputNodes",
  "/octaneapi.ApiNodeGraphService/getOutputNodes",
  "/octaneapi.ApiNodeGraphService/findNodes",
  "/octaneapi.ApiNodeGraphService/findFirstNode",
  "/octaneapi.ApiNodeGraphService/findFirstOutputNode",
  "/octaneapi.ApiNodeGraphService/findItemsByName",
  "/octaneapi.ApiNodeGraphService/setLinearTimeTransform",
  "/octaneapi.ApiNodeGraphService/timeTransform",
  "/octaneapi.ApiNodeGraphService/clearTimeTransform",
  "/octaneapi.ApiNodeGraphService/getAssetPaths",
  "/octaneapi.ApiNodeGraphService/recenter",
  "/octaneapi.ApiNodeGraphService/clear",
  "/octaneapi.ApiNodeGraphService/copyFrom1",
  "/octaneapi.ApiNodeGraphService/copyFrom11",
  "/octaneapi.ApiNodeGraphService/copyItemTree",
  "/octaneapi.ApiNodeGraphService/copyFrom2",
  "/octaneapi.ApiNodeGraphService/groupItems",
  "/octaneapi.ApiNodeGraphService/ungroup",
  "/octaneapi.ApiNodeGraphService/unfold",
  "/octaneapi.ApiNodeGraphService/showWindow",
  "/octaneapi.ApiNodeGraphService/closeWindow",
  "/octaneapi.ApiNodeGraphService/showDbWindow",
  "/octaneapi.ApiNodeGraphService/closeDbWindow",
};

std::unique_ptr< ApiNodeGraphService::Stub> ApiNodeGraphService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiNodeGraphService::Stub> stub(new ApiNodeGraphService::Stub(channel, options));
  return stub;
}

ApiNodeGraphService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create1_(ApiNodeGraphService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_info1_(ApiNodeGraphService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_type1_(ApiNodeGraphService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getOwnedItems_(ApiNodeGraphService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getInputNodes_(ApiNodeGraphService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getOutputNodes_(ApiNodeGraphService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_findNodes_(ApiNodeGraphService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_findFirstNode_(ApiNodeGraphService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_findFirstOutputNode_(ApiNodeGraphService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_findItemsByName_(ApiNodeGraphService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setLinearTimeTransform_(ApiNodeGraphService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_timeTransform_(ApiNodeGraphService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clearTimeTransform_(ApiNodeGraphService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAssetPaths_(ApiNodeGraphService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_recenter_(ApiNodeGraphService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clear_(ApiNodeGraphService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_copyFrom1_(ApiNodeGraphService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_copyFrom11_(ApiNodeGraphService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_copyItemTree_(ApiNodeGraphService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_copyFrom2_(ApiNodeGraphService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_groupItems_(ApiNodeGraphService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ungroup_(ApiNodeGraphService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unfold_(ApiNodeGraphService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_showWindow_(ApiNodeGraphService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_closeWindow_(ApiNodeGraphService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_showDbWindow_(ApiNodeGraphService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_closeDbWindow_(ApiNodeGraphService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiNodeGraphService::Stub::create1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_createRequest& request, ::octaneapi::ApiNodeGraph_createResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_createRequest, ::octaneapi::ApiNodeGraph_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create1_, context, request, response);
}

void ApiNodeGraphService::Stub::async::create1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_createRequest* request, ::octaneapi::ApiNodeGraph_createResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_createRequest, ::octaneapi::ApiNodeGraph_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create1_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::create1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_createRequest* request, ::octaneapi::ApiNodeGraph_createResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_createResponse>* ApiNodeGraphService::Stub::PrepareAsynccreate1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_createRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_createResponse, ::octaneapi::ApiNodeGraph_createRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_createResponse>* ApiNodeGraphService::Stub::Asynccreate1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_createRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreate1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::info1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_infoRequest& request, ::octaneapi::ApiNodeGraph_infoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_infoRequest, ::octaneapi::ApiNodeGraph_infoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_info1_, context, request, response);
}

void ApiNodeGraphService::Stub::async::info1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_infoRequest* request, ::octaneapi::ApiNodeGraph_infoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_infoRequest, ::octaneapi::ApiNodeGraph_infoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_info1_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::info1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_infoRequest* request, ::octaneapi::ApiNodeGraph_infoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_info1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_infoResponse>* ApiNodeGraphService::Stub::PrepareAsyncinfo1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_infoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_infoResponse, ::octaneapi::ApiNodeGraph_infoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_info1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_infoResponse>* ApiNodeGraphService::Stub::Asyncinfo1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_infoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinfo1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::type1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_typeRequest& request, ::octaneapi::ApiNodeGraph_typeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_typeRequest, ::octaneapi::ApiNodeGraph_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_type1_, context, request, response);
}

void ApiNodeGraphService::Stub::async::type1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_typeRequest* request, ::octaneapi::ApiNodeGraph_typeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_typeRequest, ::octaneapi::ApiNodeGraph_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_type1_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::type1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_typeRequest* request, ::octaneapi::ApiNodeGraph_typeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_type1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_typeResponse>* ApiNodeGraphService::Stub::PrepareAsynctype1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_typeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_typeResponse, ::octaneapi::ApiNodeGraph_typeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_type1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_typeResponse>* ApiNodeGraphService::Stub::Asynctype1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_typeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctype1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::getOwnedItems(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getOwnedItemsRequest& request, ::octaneapi::ApiNodeGraph_getOwnedItemsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_getOwnedItemsRequest, ::octaneapi::ApiNodeGraph_getOwnedItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getOwnedItems_, context, request, response);
}

void ApiNodeGraphService::Stub::async::getOwnedItems(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getOwnedItemsRequest* request, ::octaneapi::ApiNodeGraph_getOwnedItemsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_getOwnedItemsRequest, ::octaneapi::ApiNodeGraph_getOwnedItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getOwnedItems_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::getOwnedItems(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getOwnedItemsRequest* request, ::octaneapi::ApiNodeGraph_getOwnedItemsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getOwnedItems_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_getOwnedItemsResponse>* ApiNodeGraphService::Stub::PrepareAsyncgetOwnedItemsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getOwnedItemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_getOwnedItemsResponse, ::octaneapi::ApiNodeGraph_getOwnedItemsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getOwnedItems_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_getOwnedItemsResponse>* ApiNodeGraphService::Stub::AsyncgetOwnedItemsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getOwnedItemsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetOwnedItemsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::getInputNodes(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getInputNodesRequest& request, ::octaneapi::ApiNodeGraph_getInputNodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_getInputNodesRequest, ::octaneapi::ApiNodeGraph_getInputNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getInputNodes_, context, request, response);
}

void ApiNodeGraphService::Stub::async::getInputNodes(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getInputNodesRequest* request, ::octaneapi::ApiNodeGraph_getInputNodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_getInputNodesRequest, ::octaneapi::ApiNodeGraph_getInputNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getInputNodes_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::getInputNodes(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getInputNodesRequest* request, ::octaneapi::ApiNodeGraph_getInputNodesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getInputNodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_getInputNodesResponse>* ApiNodeGraphService::Stub::PrepareAsyncgetInputNodesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getInputNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_getInputNodesResponse, ::octaneapi::ApiNodeGraph_getInputNodesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getInputNodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_getInputNodesResponse>* ApiNodeGraphService::Stub::AsyncgetInputNodesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getInputNodesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetInputNodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::getOutputNodes(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getOutputNodesRequest& request, ::octaneapi::ApiNodeGraph_getOutputNodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_getOutputNodesRequest, ::octaneapi::ApiNodeGraph_getOutputNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getOutputNodes_, context, request, response);
}

void ApiNodeGraphService::Stub::async::getOutputNodes(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getOutputNodesRequest* request, ::octaneapi::ApiNodeGraph_getOutputNodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_getOutputNodesRequest, ::octaneapi::ApiNodeGraph_getOutputNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getOutputNodes_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::getOutputNodes(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getOutputNodesRequest* request, ::octaneapi::ApiNodeGraph_getOutputNodesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getOutputNodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_getOutputNodesResponse>* ApiNodeGraphService::Stub::PrepareAsyncgetOutputNodesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getOutputNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_getOutputNodesResponse, ::octaneapi::ApiNodeGraph_getOutputNodesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getOutputNodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_getOutputNodesResponse>* ApiNodeGraphService::Stub::AsyncgetOutputNodesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getOutputNodesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetOutputNodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::findNodes(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findNodesRequest& request, ::octaneapi::ApiNodeGraph_findNodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_findNodesRequest, ::octaneapi::ApiNodeGraph_findNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_findNodes_, context, request, response);
}

void ApiNodeGraphService::Stub::async::findNodes(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findNodesRequest* request, ::octaneapi::ApiNodeGraph_findNodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_findNodesRequest, ::octaneapi::ApiNodeGraph_findNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findNodes_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::findNodes(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findNodesRequest* request, ::octaneapi::ApiNodeGraph_findNodesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findNodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_findNodesResponse>* ApiNodeGraphService::Stub::PrepareAsyncfindNodesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_findNodesResponse, ::octaneapi::ApiNodeGraph_findNodesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_findNodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_findNodesResponse>* ApiNodeGraphService::Stub::AsyncfindNodesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findNodesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfindNodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::findFirstNode(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findFirstNodeRequest& request, ::octaneapi::ApiNodeGraph_findFirstNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_findFirstNodeRequest, ::octaneapi::ApiNodeGraph_findFirstNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_findFirstNode_, context, request, response);
}

void ApiNodeGraphService::Stub::async::findFirstNode(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findFirstNodeRequest* request, ::octaneapi::ApiNodeGraph_findFirstNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_findFirstNodeRequest, ::octaneapi::ApiNodeGraph_findFirstNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findFirstNode_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::findFirstNode(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findFirstNodeRequest* request, ::octaneapi::ApiNodeGraph_findFirstNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findFirstNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_findFirstNodeResponse>* ApiNodeGraphService::Stub::PrepareAsyncfindFirstNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findFirstNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_findFirstNodeResponse, ::octaneapi::ApiNodeGraph_findFirstNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_findFirstNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_findFirstNodeResponse>* ApiNodeGraphService::Stub::AsyncfindFirstNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findFirstNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfindFirstNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::findFirstOutputNode(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findFirstOutputNodeRequest& request, ::octaneapi::ApiNodeGraph_findFirstOutputNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_findFirstOutputNodeRequest, ::octaneapi::ApiNodeGraph_findFirstOutputNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_findFirstOutputNode_, context, request, response);
}

void ApiNodeGraphService::Stub::async::findFirstOutputNode(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findFirstOutputNodeRequest* request, ::octaneapi::ApiNodeGraph_findFirstOutputNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_findFirstOutputNodeRequest, ::octaneapi::ApiNodeGraph_findFirstOutputNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findFirstOutputNode_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::findFirstOutputNode(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findFirstOutputNodeRequest* request, ::octaneapi::ApiNodeGraph_findFirstOutputNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findFirstOutputNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_findFirstOutputNodeResponse>* ApiNodeGraphService::Stub::PrepareAsyncfindFirstOutputNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findFirstOutputNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_findFirstOutputNodeResponse, ::octaneapi::ApiNodeGraph_findFirstOutputNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_findFirstOutputNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_findFirstOutputNodeResponse>* ApiNodeGraphService::Stub::AsyncfindFirstOutputNodeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findFirstOutputNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfindFirstOutputNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::findItemsByName(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findItemsByNameRequest& request, ::octaneapi::ApiNodeGraph_findItemsByNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_findItemsByNameRequest, ::octaneapi::ApiNodeGraph_findItemsByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_findItemsByName_, context, request, response);
}

void ApiNodeGraphService::Stub::async::findItemsByName(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findItemsByNameRequest* request, ::octaneapi::ApiNodeGraph_findItemsByNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_findItemsByNameRequest, ::octaneapi::ApiNodeGraph_findItemsByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findItemsByName_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::findItemsByName(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findItemsByNameRequest* request, ::octaneapi::ApiNodeGraph_findItemsByNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findItemsByName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_findItemsByNameResponse>* ApiNodeGraphService::Stub::PrepareAsyncfindItemsByNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findItemsByNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_findItemsByNameResponse, ::octaneapi::ApiNodeGraph_findItemsByNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_findItemsByName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_findItemsByNameResponse>* ApiNodeGraphService::Stub::AsyncfindItemsByNameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_findItemsByNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfindItemsByNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::setLinearTimeTransform(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_setLinearTimeTransformRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_setLinearTimeTransformRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setLinearTimeTransform_, context, request, response);
}

void ApiNodeGraphService::Stub::async::setLinearTimeTransform(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_setLinearTimeTransformRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_setLinearTimeTransformRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setLinearTimeTransform_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::setLinearTimeTransform(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_setLinearTimeTransformRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setLinearTimeTransform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeGraphService::Stub::PrepareAsyncsetLinearTimeTransformRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_setLinearTimeTransformRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiNodeGraph_setLinearTimeTransformRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setLinearTimeTransform_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeGraphService::Stub::AsyncsetLinearTimeTransformRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_setLinearTimeTransformRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetLinearTimeTransformRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::timeTransform(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_timeTransformRequest& request, ::octaneapi::ApiNodeGraph_timeTransformResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_timeTransformRequest, ::octaneapi::ApiNodeGraph_timeTransformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_timeTransform_, context, request, response);
}

void ApiNodeGraphService::Stub::async::timeTransform(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_timeTransformRequest* request, ::octaneapi::ApiNodeGraph_timeTransformResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_timeTransformRequest, ::octaneapi::ApiNodeGraph_timeTransformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_timeTransform_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::timeTransform(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_timeTransformRequest* request, ::octaneapi::ApiNodeGraph_timeTransformResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_timeTransform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_timeTransformResponse>* ApiNodeGraphService::Stub::PrepareAsynctimeTransformRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_timeTransformRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_timeTransformResponse, ::octaneapi::ApiNodeGraph_timeTransformRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_timeTransform_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_timeTransformResponse>* ApiNodeGraphService::Stub::AsynctimeTransformRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_timeTransformRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctimeTransformRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::clearTimeTransform(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_clearTimeTransformRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_clearTimeTransformRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clearTimeTransform_, context, request, response);
}

void ApiNodeGraphService::Stub::async::clearTimeTransform(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_clearTimeTransformRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_clearTimeTransformRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearTimeTransform_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::clearTimeTransform(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_clearTimeTransformRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearTimeTransform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeGraphService::Stub::PrepareAsyncclearTimeTransformRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_clearTimeTransformRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiNodeGraph_clearTimeTransformRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clearTimeTransform_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeGraphService::Stub::AsyncclearTimeTransformRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_clearTimeTransformRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearTimeTransformRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::getAssetPaths(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getAssetPathsRequest& request, ::octaneapi::ApiNodeGraph_getAssetPathsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_getAssetPathsRequest, ::octaneapi::ApiNodeGraph_getAssetPathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAssetPaths_, context, request, response);
}

void ApiNodeGraphService::Stub::async::getAssetPaths(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getAssetPathsRequest* request, ::octaneapi::ApiNodeGraph_getAssetPathsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_getAssetPathsRequest, ::octaneapi::ApiNodeGraph_getAssetPathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAssetPaths_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::getAssetPaths(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getAssetPathsRequest* request, ::octaneapi::ApiNodeGraph_getAssetPathsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAssetPaths_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_getAssetPathsResponse>* ApiNodeGraphService::Stub::PrepareAsyncgetAssetPathsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getAssetPathsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_getAssetPathsResponse, ::octaneapi::ApiNodeGraph_getAssetPathsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAssetPaths_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_getAssetPathsResponse>* ApiNodeGraphService::Stub::AsyncgetAssetPathsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_getAssetPathsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAssetPathsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::recenter(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_recenterRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_recenterRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_recenter_, context, request, response);
}

void ApiNodeGraphService::Stub::async::recenter(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_recenterRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_recenterRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_recenter_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::recenter(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_recenterRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_recenter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeGraphService::Stub::PrepareAsyncrecenterRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_recenterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiNodeGraph_recenterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_recenter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeGraphService::Stub::AsyncrecenterRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_recenterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrecenterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::clear(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_clearRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clear_, context, request, response);
}

void ApiNodeGraphService::Stub::async::clear(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_clearRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::clear(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_clearRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeGraphService::Stub::PrepareAsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_clearRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiNodeGraph_clearRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clear_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeGraphService::Stub::AsyncclearRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_clearRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::copyFrom1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFromRequest& request, ::octaneapi::ApiNodeGraph_copyFromResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_copyFromRequest, ::octaneapi::ApiNodeGraph_copyFromResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_copyFrom1_, context, request, response);
}

void ApiNodeGraphService::Stub::async::copyFrom1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFromRequest* request, ::octaneapi::ApiNodeGraph_copyFromResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_copyFromRequest, ::octaneapi::ApiNodeGraph_copyFromResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_copyFrom1_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::copyFrom1(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFromRequest* request, ::octaneapi::ApiNodeGraph_copyFromResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_copyFrom1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_copyFromResponse>* ApiNodeGraphService::Stub::PrepareAsynccopyFrom1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFromRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_copyFromResponse, ::octaneapi::ApiNodeGraph_copyFromRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_copyFrom1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_copyFromResponse>* ApiNodeGraphService::Stub::AsynccopyFrom1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFromRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccopyFrom1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::copyFrom11(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFrom1Request& request, ::octaneapi::ApiNodeGraph_copyFrom1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_copyFrom1Request, ::octaneapi::ApiNodeGraph_copyFrom1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_copyFrom11_, context, request, response);
}

void ApiNodeGraphService::Stub::async::copyFrom11(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFrom1Request* request, ::octaneapi::ApiNodeGraph_copyFrom1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_copyFrom1Request, ::octaneapi::ApiNodeGraph_copyFrom1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_copyFrom11_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::copyFrom11(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFrom1Request* request, ::octaneapi::ApiNodeGraph_copyFrom1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_copyFrom11_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_copyFrom1Response>* ApiNodeGraphService::Stub::PrepareAsynccopyFrom11Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFrom1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_copyFrom1Response, ::octaneapi::ApiNodeGraph_copyFrom1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_copyFrom11_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_copyFrom1Response>* ApiNodeGraphService::Stub::AsynccopyFrom11Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFrom1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccopyFrom11Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::copyItemTree(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyItemTreeRequest& request, ::octaneapi::ApiNodeGraph_copyItemTreeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_copyItemTreeRequest, ::octaneapi::ApiNodeGraph_copyItemTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_copyItemTree_, context, request, response);
}

void ApiNodeGraphService::Stub::async::copyItemTree(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyItemTreeRequest* request, ::octaneapi::ApiNodeGraph_copyItemTreeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_copyItemTreeRequest, ::octaneapi::ApiNodeGraph_copyItemTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_copyItemTree_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::copyItemTree(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyItemTreeRequest* request, ::octaneapi::ApiNodeGraph_copyItemTreeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_copyItemTree_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_copyItemTreeResponse>* ApiNodeGraphService::Stub::PrepareAsynccopyItemTreeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyItemTreeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_copyItemTreeResponse, ::octaneapi::ApiNodeGraph_copyItemTreeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_copyItemTree_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_copyItemTreeResponse>* ApiNodeGraphService::Stub::AsynccopyItemTreeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyItemTreeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccopyItemTreeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::copyFrom2(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFrom2Request& request, ::octaneapi::ApiNodeGraph_copyFrom2Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_copyFrom2Request, ::octaneapi::ApiNodeGraph_copyFrom2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_copyFrom2_, context, request, response);
}

void ApiNodeGraphService::Stub::async::copyFrom2(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFrom2Request* request, ::octaneapi::ApiNodeGraph_copyFrom2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_copyFrom2Request, ::octaneapi::ApiNodeGraph_copyFrom2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_copyFrom2_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::copyFrom2(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFrom2Request* request, ::octaneapi::ApiNodeGraph_copyFrom2Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_copyFrom2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_copyFrom2Response>* ApiNodeGraphService::Stub::PrepareAsynccopyFrom2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFrom2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_copyFrom2Response, ::octaneapi::ApiNodeGraph_copyFrom2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_copyFrom2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_copyFrom2Response>* ApiNodeGraphService::Stub::AsynccopyFrom2Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_copyFrom2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccopyFrom2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::groupItems(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_groupItemsRequest& request, ::octaneapi::ApiNodeGraph_groupItemsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_groupItemsRequest, ::octaneapi::ApiNodeGraph_groupItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_groupItems_, context, request, response);
}

void ApiNodeGraphService::Stub::async::groupItems(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_groupItemsRequest* request, ::octaneapi::ApiNodeGraph_groupItemsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_groupItemsRequest, ::octaneapi::ApiNodeGraph_groupItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_groupItems_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::groupItems(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_groupItemsRequest* request, ::octaneapi::ApiNodeGraph_groupItemsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_groupItems_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_groupItemsResponse>* ApiNodeGraphService::Stub::PrepareAsyncgroupItemsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_groupItemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_groupItemsResponse, ::octaneapi::ApiNodeGraph_groupItemsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_groupItems_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_groupItemsResponse>* ApiNodeGraphService::Stub::AsyncgroupItemsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_groupItemsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgroupItemsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::ungroup(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_ungroupRequest& request, ::octaneapi::ApiNodeGraph_ungroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_ungroupRequest, ::octaneapi::ApiNodeGraph_ungroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ungroup_, context, request, response);
}

void ApiNodeGraphService::Stub::async::ungroup(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_ungroupRequest* request, ::octaneapi::ApiNodeGraph_ungroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_ungroupRequest, ::octaneapi::ApiNodeGraph_ungroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ungroup_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::ungroup(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_ungroupRequest* request, ::octaneapi::ApiNodeGraph_ungroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ungroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_ungroupResponse>* ApiNodeGraphService::Stub::PrepareAsyncungroupRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_ungroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_ungroupResponse, ::octaneapi::ApiNodeGraph_ungroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ungroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_ungroupResponse>* ApiNodeGraphService::Stub::AsyncungroupRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_ungroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncungroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::unfold(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_unfoldRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_unfoldRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unfold_, context, request, response);
}

void ApiNodeGraphService::Stub::async::unfold(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_unfoldRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_unfoldRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unfold_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::unfold(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_unfoldRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unfold_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeGraphService::Stub::PrepareAsyncunfoldRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_unfoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiNodeGraph_unfoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unfold_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeGraphService::Stub::AsyncunfoldRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_unfoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunfoldRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::showWindow(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_showWindowRequest& request, ::octaneapi::ApiNodeGraph_showWindowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_showWindowRequest, ::octaneapi::ApiNodeGraph_showWindowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_showWindow_, context, request, response);
}

void ApiNodeGraphService::Stub::async::showWindow(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_showWindowRequest* request, ::octaneapi::ApiNodeGraph_showWindowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_showWindowRequest, ::octaneapi::ApiNodeGraph_showWindowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_showWindow_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::showWindow(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_showWindowRequest* request, ::octaneapi::ApiNodeGraph_showWindowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_showWindow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_showWindowResponse>* ApiNodeGraphService::Stub::PrepareAsyncshowWindowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_showWindowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_showWindowResponse, ::octaneapi::ApiNodeGraph_showWindowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_showWindow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_showWindowResponse>* ApiNodeGraphService::Stub::AsyncshowWindowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_showWindowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncshowWindowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::closeWindow(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_closeWindowRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_closeWindowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_closeWindow_, context, request, response);
}

void ApiNodeGraphService::Stub::async::closeWindow(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_closeWindowRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_closeWindowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_closeWindow_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::closeWindow(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_closeWindowRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_closeWindow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeGraphService::Stub::PrepareAsynccloseWindowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_closeWindowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiNodeGraph_closeWindowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_closeWindow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeGraphService::Stub::AsynccloseWindowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_closeWindowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccloseWindowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::showDbWindow(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_showDbWindowRequest& request, ::octaneapi::ApiNodeGraph_showDbWindowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_showDbWindowRequest, ::octaneapi::ApiNodeGraph_showDbWindowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_showDbWindow_, context, request, response);
}

void ApiNodeGraphService::Stub::async::showDbWindow(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_showDbWindowRequest* request, ::octaneapi::ApiNodeGraph_showDbWindowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_showDbWindowRequest, ::octaneapi::ApiNodeGraph_showDbWindowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_showDbWindow_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::showDbWindow(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_showDbWindowRequest* request, ::octaneapi::ApiNodeGraph_showDbWindowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_showDbWindow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_showDbWindowResponse>* ApiNodeGraphService::Stub::PrepareAsyncshowDbWindowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_showDbWindowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodeGraph_showDbWindowResponse, ::octaneapi::ApiNodeGraph_showDbWindowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_showDbWindow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodeGraph_showDbWindowResponse>* ApiNodeGraphService::Stub::AsyncshowDbWindowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_showDbWindowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncshowDbWindowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiNodeGraphService::Stub::closeDbWindow(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_closeDbWindowRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodeGraph_closeDbWindowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_closeDbWindow_, context, request, response);
}

void ApiNodeGraphService::Stub::async::closeDbWindow(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_closeDbWindowRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodeGraph_closeDbWindowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_closeDbWindow_, context, request, response, std::move(f));
}

void ApiNodeGraphService::Stub::async::closeDbWindow(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_closeDbWindowRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_closeDbWindow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeGraphService::Stub::PrepareAsynccloseDbWindowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_closeDbWindowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::ApiNodeGraph_closeDbWindowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_closeDbWindow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiNodeGraphService::Stub::AsynccloseDbWindowRaw(::grpc::ClientContext* context, const ::octaneapi::ApiNodeGraph_closeDbWindowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccloseDbWindowRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiNodeGraphService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_createRequest, ::octaneapi::ApiNodeGraph_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_createRequest* req,
             ::octaneapi::ApiNodeGraph_createResponse* resp) {
               return service->create1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_infoRequest, ::octaneapi::ApiNodeGraph_infoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_infoRequest* req,
             ::octaneapi::ApiNodeGraph_infoResponse* resp) {
               return service->info1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_typeRequest, ::octaneapi::ApiNodeGraph_typeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_typeRequest* req,
             ::octaneapi::ApiNodeGraph_typeResponse* resp) {
               return service->type1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_getOwnedItemsRequest, ::octaneapi::ApiNodeGraph_getOwnedItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_getOwnedItemsRequest* req,
             ::octaneapi::ApiNodeGraph_getOwnedItemsResponse* resp) {
               return service->getOwnedItems(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_getInputNodesRequest, ::octaneapi::ApiNodeGraph_getInputNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_getInputNodesRequest* req,
             ::octaneapi::ApiNodeGraph_getInputNodesResponse* resp) {
               return service->getInputNodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_getOutputNodesRequest, ::octaneapi::ApiNodeGraph_getOutputNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_getOutputNodesRequest* req,
             ::octaneapi::ApiNodeGraph_getOutputNodesResponse* resp) {
               return service->getOutputNodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_findNodesRequest, ::octaneapi::ApiNodeGraph_findNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_findNodesRequest* req,
             ::octaneapi::ApiNodeGraph_findNodesResponse* resp) {
               return service->findNodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_findFirstNodeRequest, ::octaneapi::ApiNodeGraph_findFirstNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_findFirstNodeRequest* req,
             ::octaneapi::ApiNodeGraph_findFirstNodeResponse* resp) {
               return service->findFirstNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_findFirstOutputNodeRequest, ::octaneapi::ApiNodeGraph_findFirstOutputNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_findFirstOutputNodeRequest* req,
             ::octaneapi::ApiNodeGraph_findFirstOutputNodeResponse* resp) {
               return service->findFirstOutputNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_findItemsByNameRequest, ::octaneapi::ApiNodeGraph_findItemsByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_findItemsByNameRequest* req,
             ::octaneapi::ApiNodeGraph_findItemsByNameResponse* resp) {
               return service->findItemsByName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_setLinearTimeTransformRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_setLinearTimeTransformRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setLinearTimeTransform(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_timeTransformRequest, ::octaneapi::ApiNodeGraph_timeTransformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_timeTransformRequest* req,
             ::octaneapi::ApiNodeGraph_timeTransformResponse* resp) {
               return service->timeTransform(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_clearTimeTransformRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_clearTimeTransformRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->clearTimeTransform(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_getAssetPathsRequest, ::octaneapi::ApiNodeGraph_getAssetPathsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_getAssetPathsRequest* req,
             ::octaneapi::ApiNodeGraph_getAssetPathsResponse* resp) {
               return service->getAssetPaths(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_recenterRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_recenterRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->recenter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_clearRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_clearRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->clear(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_copyFromRequest, ::octaneapi::ApiNodeGraph_copyFromResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_copyFromRequest* req,
             ::octaneapi::ApiNodeGraph_copyFromResponse* resp) {
               return service->copyFrom1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_copyFrom1Request, ::octaneapi::ApiNodeGraph_copyFrom1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_copyFrom1Request* req,
             ::octaneapi::ApiNodeGraph_copyFrom1Response* resp) {
               return service->copyFrom11(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_copyItemTreeRequest, ::octaneapi::ApiNodeGraph_copyItemTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_copyItemTreeRequest* req,
             ::octaneapi::ApiNodeGraph_copyItemTreeResponse* resp) {
               return service->copyItemTree(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_copyFrom2Request, ::octaneapi::ApiNodeGraph_copyFrom2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_copyFrom2Request* req,
             ::octaneapi::ApiNodeGraph_copyFrom2Response* resp) {
               return service->copyFrom2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_groupItemsRequest, ::octaneapi::ApiNodeGraph_groupItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_groupItemsRequest* req,
             ::octaneapi::ApiNodeGraph_groupItemsResponse* resp) {
               return service->groupItems(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_ungroupRequest, ::octaneapi::ApiNodeGraph_ungroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_ungroupRequest* req,
             ::octaneapi::ApiNodeGraph_ungroupResponse* resp) {
               return service->ungroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_unfoldRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_unfoldRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->unfold(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_showWindowRequest, ::octaneapi::ApiNodeGraph_showWindowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_showWindowRequest* req,
             ::octaneapi::ApiNodeGraph_showWindowResponse* resp) {
               return service->showWindow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_closeWindowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_closeWindowRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->closeWindow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_showDbWindowRequest, ::octaneapi::ApiNodeGraph_showDbWindowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_showDbWindowRequest* req,
             ::octaneapi::ApiNodeGraph_showDbWindowResponse* resp) {
               return service->showDbWindow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodeGraphService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodeGraphService::Service, ::octaneapi::ApiNodeGraph_closeDbWindowRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodeGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodeGraph_closeDbWindowRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->closeDbWindow(ctx, req, resp);
             }, this)));
}

ApiNodeGraphService::Service::~Service() {
}

::grpc::Status ApiNodeGraphService::Service::create1(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_createRequest* request, ::octaneapi::ApiNodeGraph_createResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::info1(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_infoRequest* request, ::octaneapi::ApiNodeGraph_infoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::type1(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_typeRequest* request, ::octaneapi::ApiNodeGraph_typeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::getOwnedItems(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_getOwnedItemsRequest* request, ::octaneapi::ApiNodeGraph_getOwnedItemsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::getInputNodes(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_getInputNodesRequest* request, ::octaneapi::ApiNodeGraph_getInputNodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::getOutputNodes(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_getOutputNodesRequest* request, ::octaneapi::ApiNodeGraph_getOutputNodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::findNodes(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_findNodesRequest* request, ::octaneapi::ApiNodeGraph_findNodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::findFirstNode(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_findFirstNodeRequest* request, ::octaneapi::ApiNodeGraph_findFirstNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::findFirstOutputNode(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_findFirstOutputNodeRequest* request, ::octaneapi::ApiNodeGraph_findFirstOutputNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::findItemsByName(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_findItemsByNameRequest* request, ::octaneapi::ApiNodeGraph_findItemsByNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::setLinearTimeTransform(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_setLinearTimeTransformRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::timeTransform(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_timeTransformRequest* request, ::octaneapi::ApiNodeGraph_timeTransformResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::clearTimeTransform(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_clearTimeTransformRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::getAssetPaths(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_getAssetPathsRequest* request, ::octaneapi::ApiNodeGraph_getAssetPathsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::recenter(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_recenterRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::clear(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_clearRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::copyFrom1(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_copyFromRequest* request, ::octaneapi::ApiNodeGraph_copyFromResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::copyFrom11(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_copyFrom1Request* request, ::octaneapi::ApiNodeGraph_copyFrom1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::copyItemTree(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_copyItemTreeRequest* request, ::octaneapi::ApiNodeGraph_copyItemTreeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::copyFrom2(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_copyFrom2Request* request, ::octaneapi::ApiNodeGraph_copyFrom2Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::groupItems(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_groupItemsRequest* request, ::octaneapi::ApiNodeGraph_groupItemsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::ungroup(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_ungroupRequest* request, ::octaneapi::ApiNodeGraph_ungroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::unfold(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_unfoldRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::showWindow(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_showWindowRequest* request, ::octaneapi::ApiNodeGraph_showWindowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::closeWindow(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_closeWindowRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::showDbWindow(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_showDbWindowRequest* request, ::octaneapi::ApiNodeGraph_showDbWindowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiNodeGraphService::Service::closeDbWindow(::grpc::ServerContext* context, const ::octaneapi::ApiNodeGraph_closeDbWindowRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

