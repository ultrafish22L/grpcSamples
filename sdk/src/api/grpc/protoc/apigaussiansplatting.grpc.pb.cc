// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apigaussiansplatting.proto

#include "apigaussiansplatting.pb.h"
#include "apigaussiansplatting.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiGaussianSplatCloudNodeService_method_names[] = {
  "/octaneapi.ApiGaussianSplatCloudNodeService/create",
  "/octaneapi.ApiGaussianSplatCloudNodeService/obtain",
  "/octaneapi.ApiGaussianSplatCloudNodeService/setAttributesFromPly",
};

std::unique_ptr< ApiGaussianSplatCloudNodeService::Stub> ApiGaussianSplatCloudNodeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiGaussianSplatCloudNodeService::Stub> stub(new ApiGaussianSplatCloudNodeService::Stub(channel, options));
  return stub;
}

ApiGaussianSplatCloudNodeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create_(ApiGaussianSplatCloudNodeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_obtain_(ApiGaussianSplatCloudNodeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setAttributesFromPly_(ApiGaussianSplatCloudNodeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiGaussianSplatCloudNodeService::Stub::create(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_createRequest& request, ::octaneapi::ApiGaussianSplatCloudNode_createResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGaussianSplatCloudNode_createRequest, ::octaneapi::ApiGaussianSplatCloudNode_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_, context, request, response);
}

void ApiGaussianSplatCloudNodeService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_createRequest* request, ::octaneapi::ApiGaussianSplatCloudNode_createResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGaussianSplatCloudNode_createRequest, ::octaneapi::ApiGaussianSplatCloudNode_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void ApiGaussianSplatCloudNodeService::Stub::async::create(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_createRequest* request, ::octaneapi::ApiGaussianSplatCloudNode_createResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGaussianSplatCloudNode_createResponse>* ApiGaussianSplatCloudNodeService::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_createRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiGaussianSplatCloudNode_createResponse, ::octaneapi::ApiGaussianSplatCloudNode_createRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGaussianSplatCloudNode_createResponse>* ApiGaussianSplatCloudNodeService::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_createRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGaussianSplatCloudNodeService::Stub::obtain(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_obtainRequest& request, ::octaneapi::ApiGaussianSplatCloudNode_obtainResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGaussianSplatCloudNode_obtainRequest, ::octaneapi::ApiGaussianSplatCloudNode_obtainResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_obtain_, context, request, response);
}

void ApiGaussianSplatCloudNodeService::Stub::async::obtain(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_obtainRequest* request, ::octaneapi::ApiGaussianSplatCloudNode_obtainResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGaussianSplatCloudNode_obtainRequest, ::octaneapi::ApiGaussianSplatCloudNode_obtainResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_obtain_, context, request, response, std::move(f));
}

void ApiGaussianSplatCloudNodeService::Stub::async::obtain(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_obtainRequest* request, ::octaneapi::ApiGaussianSplatCloudNode_obtainResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_obtain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGaussianSplatCloudNode_obtainResponse>* ApiGaussianSplatCloudNodeService::Stub::PrepareAsyncobtainRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_obtainRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiGaussianSplatCloudNode_obtainResponse, ::octaneapi::ApiGaussianSplatCloudNode_obtainRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_obtain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGaussianSplatCloudNode_obtainResponse>* ApiGaussianSplatCloudNodeService::Stub::AsyncobtainRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_obtainRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncobtainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiGaussianSplatCloudNodeService::Stub::setAttributesFromPly(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyRequest& request, ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyRequest, ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setAttributesFromPly_, context, request, response);
}

void ApiGaussianSplatCloudNodeService::Stub::async::setAttributesFromPly(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyRequest* request, ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyRequest, ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setAttributesFromPly_, context, request, response, std::move(f));
}

void ApiGaussianSplatCloudNodeService::Stub::async::setAttributesFromPly(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyRequest* request, ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setAttributesFromPly_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyResponse>* ApiGaussianSplatCloudNodeService::Stub::PrepareAsyncsetAttributesFromPlyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyResponse, ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setAttributesFromPly_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyResponse>* ApiGaussianSplatCloudNodeService::Stub::AsyncsetAttributesFromPlyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetAttributesFromPlyRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiGaussianSplatCloudNodeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGaussianSplatCloudNodeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGaussianSplatCloudNodeService::Service, ::octaneapi::ApiGaussianSplatCloudNode_createRequest, ::octaneapi::ApiGaussianSplatCloudNode_createResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGaussianSplatCloudNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGaussianSplatCloudNode_createRequest* req,
             ::octaneapi::ApiGaussianSplatCloudNode_createResponse* resp) {
               return service->create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGaussianSplatCloudNodeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGaussianSplatCloudNodeService::Service, ::octaneapi::ApiGaussianSplatCloudNode_obtainRequest, ::octaneapi::ApiGaussianSplatCloudNode_obtainResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGaussianSplatCloudNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGaussianSplatCloudNode_obtainRequest* req,
             ::octaneapi::ApiGaussianSplatCloudNode_obtainResponse* resp) {
               return service->obtain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiGaussianSplatCloudNodeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiGaussianSplatCloudNodeService::Service, ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyRequest, ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiGaussianSplatCloudNodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyRequest* req,
             ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyResponse* resp) {
               return service->setAttributesFromPly(ctx, req, resp);
             }, this)));
}

ApiGaussianSplatCloudNodeService::Service::~Service() {
}

::grpc::Status ApiGaussianSplatCloudNodeService::Service::create(::grpc::ServerContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_createRequest* request, ::octaneapi::ApiGaussianSplatCloudNode_createResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGaussianSplatCloudNodeService::Service::obtain(::grpc::ServerContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_obtainRequest* request, ::octaneapi::ApiGaussianSplatCloudNode_obtainResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiGaussianSplatCloudNodeService::Service::setAttributesFromPly(::grpc::ServerContext* context, const ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyRequest* request, ::octaneapi::ApiGaussianSplatCloudNode_setAttributesFromPlyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

