// Copyright (C) 2025 OTOY NZ Ltd.

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apifilechooser.proto
// Original file comments:
// ////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.
//
#ifndef GRPC_apifilechooser_2eproto__INCLUDED
#define GRPC_apifilechooser_2eproto__INCLUDED

#include "apifilechooser.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// GRPC interface definition for class 'ApiFileChooser' from 'apifilechooser.h'
class ApiFileChooserService final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.ApiFileChooserService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / Creates a new file chooser
    virtual ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest& request, ::octaneapi::ApiFileChooser_createResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    // / Destroys this file chooser created by create
    virtual ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    // / Shows a dialog box to choose a file to open
    virtual ::grpc::Status browseForFileToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest& request, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>> AsyncbrowseForFileToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>>(AsyncbrowseForFileToOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>> PrepareAsyncbrowseForFileToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>>(PrepareAsyncbrowseForFileToOpenRaw(context, request, cq));
    }
    // / Same as browseForFileToOpen(), but allows the user to select multiple files
    virtual ::grpc::Status browseForMultipleFilesToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest& request, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>> AsyncbrowseForMultipleFilesToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>>(AsyncbrowseForMultipleFilesToOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>> PrepareAsyncbrowseForMultipleFilesToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>>(PrepareAsyncbrowseForMultipleFilesToOpenRaw(context, request, cq));
    }
    // / Shows a dialog box to choose a file to save
    virtual ::grpc::Status browseForFileToSave(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest& request, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>> AsyncbrowseForFileToSave(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>>(AsyncbrowseForFileToSaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>> PrepareAsyncbrowseForFileToSave(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>>(PrepareAsyncbrowseForFileToSaveRaw(context, request, cq));
    }
    // / Shows a dialog box to choose a directory
    virtual ::grpc::Status browseForDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest& request, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>> AsyncbrowseForDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>>(AsyncbrowseForDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>> PrepareAsyncbrowseForDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>>(PrepareAsyncbrowseForDirectoryRaw(context, request, cq));
    }
    // / Same as browseForFileToOpen(), but allows the user to select multiple files and directories
    virtual ::grpc::Status browseForMultipleFilesOrDirectories(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest& request, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>> AsyncbrowseForMultipleFilesOrDirectories(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>>(AsyncbrowseForMultipleFilesOrDirectoriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>> PrepareAsyncbrowseForMultipleFilesOrDirectories(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>>(PrepareAsyncbrowseForMultipleFilesOrDirectoriesRaw(context, request, cq));
    }
    // / Returns the last file that was chosen by one of the browseFor methods
    virtual ::grpc::Status result(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest& request, ::octaneapi::ApiFileChooser_resultResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_resultResponse>> Asyncresult(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_resultResponse>>(AsyncresultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_resultResponse>> PrepareAsyncresult(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_resultResponse>>(PrepareAsyncresultRaw(context, request, cq));
    }
    // / Returns a list of all the files that were chosen during the last call to a browse method
    virtual ::grpc::Status results(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest& request, ::octaneapi::ApiFileChooser_resultsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_resultsResponse>> Asyncresults(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_resultsResponse>>(AsyncresultsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_resultsResponse>> PrepareAsyncresults(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_resultsResponse>>(PrepareAsyncresultsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // / Creates a new file chooser
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest* request, ::octaneapi::ApiFileChooser_createResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest* request, ::octaneapi::ApiFileChooser_createResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Destroys this file chooser created by create
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Shows a dialog box to choose a file to open
      virtual void browseForFileToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void browseForFileToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Same as browseForFileToOpen(), but allows the user to select multiple files
      virtual void browseForMultipleFilesToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void browseForMultipleFilesToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Shows a dialog box to choose a file to save
      virtual void browseForFileToSave(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* request, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void browseForFileToSave(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* request, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Shows a dialog box to choose a directory
      virtual void browseForDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* request, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void browseForDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* request, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Same as browseForFileToOpen(), but allows the user to select multiple files and directories
      virtual void browseForMultipleFilesOrDirectories(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void browseForMultipleFilesOrDirectories(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns the last file that was chosen by one of the browseFor methods
      virtual void result(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest* request, ::octaneapi::ApiFileChooser_resultResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void result(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest* request, ::octaneapi::ApiFileChooser_resultResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // / Returns a list of all the files that were chosen during the last call to a browse method
      virtual void results(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest* request, ::octaneapi::ApiFileChooser_resultsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void results(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest* request, ::octaneapi::ApiFileChooser_resultsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>* AsyncbrowseForFileToOpenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>* PrepareAsyncbrowseForFileToOpenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>* AsyncbrowseForMultipleFilesToOpenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>* PrepareAsyncbrowseForMultipleFilesToOpenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>* AsyncbrowseForFileToSaveRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>* PrepareAsyncbrowseForFileToSaveRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>* AsyncbrowseForDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>* PrepareAsyncbrowseForDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>* AsyncbrowseForMultipleFilesOrDirectoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>* PrepareAsyncbrowseForMultipleFilesOrDirectoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_resultResponse>* AsyncresultRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_resultResponse>* PrepareAsyncresultRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_resultsResponse>* AsyncresultsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::ApiFileChooser_resultsResponse>* PrepareAsyncresultsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status create(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest& request, ::octaneapi::ApiFileChooser_createResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_createResponse>> Asynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_createResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_createResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_createResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    ::grpc::Status destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> Asyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    ::grpc::Status browseForFileToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest& request, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>> AsyncbrowseForFileToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>>(AsyncbrowseForFileToOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>> PrepareAsyncbrowseForFileToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>>(PrepareAsyncbrowseForFileToOpenRaw(context, request, cq));
    }
    ::grpc::Status browseForMultipleFilesToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest& request, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>> AsyncbrowseForMultipleFilesToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>>(AsyncbrowseForMultipleFilesToOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>> PrepareAsyncbrowseForMultipleFilesToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>>(PrepareAsyncbrowseForMultipleFilesToOpenRaw(context, request, cq));
    }
    ::grpc::Status browseForFileToSave(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest& request, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>> AsyncbrowseForFileToSave(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>>(AsyncbrowseForFileToSaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>> PrepareAsyncbrowseForFileToSave(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>>(PrepareAsyncbrowseForFileToSaveRaw(context, request, cq));
    }
    ::grpc::Status browseForDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest& request, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>> AsyncbrowseForDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>>(AsyncbrowseForDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>> PrepareAsyncbrowseForDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>>(PrepareAsyncbrowseForDirectoryRaw(context, request, cq));
    }
    ::grpc::Status browseForMultipleFilesOrDirectories(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest& request, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>> AsyncbrowseForMultipleFilesOrDirectories(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>>(AsyncbrowseForMultipleFilesOrDirectoriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>> PrepareAsyncbrowseForMultipleFilesOrDirectories(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>>(PrepareAsyncbrowseForMultipleFilesOrDirectoriesRaw(context, request, cq));
    }
    ::grpc::Status result(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest& request, ::octaneapi::ApiFileChooser_resultResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultResponse>> Asyncresult(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultResponse>>(AsyncresultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultResponse>> PrepareAsyncresult(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultResponse>>(PrepareAsyncresultRaw(context, request, cq));
    }
    ::grpc::Status results(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest& request, ::octaneapi::ApiFileChooser_resultsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultsResponse>> Asyncresults(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultsResponse>>(AsyncresultsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultsResponse>> PrepareAsyncresults(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultsResponse>>(PrepareAsyncresultsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest* request, ::octaneapi::ApiFileChooser_createResponse* response, std::function<void(::grpc::Status)>) override;
      void create(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest* request, ::octaneapi::ApiFileChooser_createResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void destroy(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void browseForFileToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* response, std::function<void(::grpc::Status)>) override;
      void browseForFileToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void browseForMultipleFilesToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* response, std::function<void(::grpc::Status)>) override;
      void browseForMultipleFilesToOpen(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void browseForFileToSave(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* request, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* response, std::function<void(::grpc::Status)>) override;
      void browseForFileToSave(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* request, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void browseForDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* request, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* response, std::function<void(::grpc::Status)>) override;
      void browseForDirectory(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* request, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void browseForMultipleFilesOrDirectories(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* response, std::function<void(::grpc::Status)>) override;
      void browseForMultipleFilesOrDirectories(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void result(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest* request, ::octaneapi::ApiFileChooser_resultResponse* response, std::function<void(::grpc::Status)>) override;
      void result(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest* request, ::octaneapi::ApiFileChooser_resultResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void results(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest* request, ::octaneapi::ApiFileChooser_resultsResponse* response, std::function<void(::grpc::Status)>) override;
      void results(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest* request, ::octaneapi::ApiFileChooser_resultsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_createResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_createResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_createRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_destroyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>* AsyncbrowseForFileToOpenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>* PrepareAsyncbrowseForFileToOpenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>* AsyncbrowseForMultipleFilesToOpenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>* PrepareAsyncbrowseForMultipleFilesToOpenRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>* AsyncbrowseForFileToSaveRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>* PrepareAsyncbrowseForFileToSaveRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>* AsyncbrowseForDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>* PrepareAsyncbrowseForDirectoryRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>* AsyncbrowseForMultipleFilesOrDirectoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>* PrepareAsyncbrowseForMultipleFilesOrDirectoriesRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultResponse>* AsyncresultRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultResponse>* PrepareAsyncresultRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultsResponse>* AsyncresultsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::ApiFileChooser_resultsResponse>* PrepareAsyncresultsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiFileChooser_resultsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_create_;
    const ::grpc::internal::RpcMethod rpcmethod_destroy_;
    const ::grpc::internal::RpcMethod rpcmethod_browseForFileToOpen_;
    const ::grpc::internal::RpcMethod rpcmethod_browseForMultipleFilesToOpen_;
    const ::grpc::internal::RpcMethod rpcmethod_browseForFileToSave_;
    const ::grpc::internal::RpcMethod rpcmethod_browseForDirectory_;
    const ::grpc::internal::RpcMethod rpcmethod_browseForMultipleFilesOrDirectories_;
    const ::grpc::internal::RpcMethod rpcmethod_result_;
    const ::grpc::internal::RpcMethod rpcmethod_results_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / Creates a new file chooser
    virtual ::grpc::Status create(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_createRequest* request, ::octaneapi::ApiFileChooser_createResponse* response);
    // / Destroys this file chooser created by create
    virtual ::grpc::Status destroy(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_destroyRequest* request, ::google::protobuf::Empty* response);
    // / Shows a dialog box to choose a file to open
    virtual ::grpc::Status browseForFileToOpen(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* response);
    // / Same as browseForFileToOpen(), but allows the user to select multiple files
    virtual ::grpc::Status browseForMultipleFilesToOpen(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* response);
    // / Shows a dialog box to choose a file to save
    virtual ::grpc::Status browseForFileToSave(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* request, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* response);
    // / Shows a dialog box to choose a directory
    virtual ::grpc::Status browseForDirectory(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* request, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* response);
    // / Same as browseForFileToOpen(), but allows the user to select multiple files and directories
    virtual ::grpc::Status browseForMultipleFilesOrDirectories(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* response);
    // / Returns the last file that was chosen by one of the browseFor methods
    virtual ::grpc::Status result(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_resultRequest* request, ::octaneapi::ApiFileChooser_resultResponse* response);
    // / Returns a list of all the files that were chosen during the last call to a browse method
    virtual ::grpc::Status results(::grpc::ServerContext* context, const ::octaneapi::ApiFileChooser_resultsRequest* request, ::octaneapi::ApiFileChooser_resultsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_createRequest* /*request*/, ::octaneapi::ApiFileChooser_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::octaneapi::ApiFileChooser_createRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileChooser_createResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_destroy() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::octaneapi::ApiFileChooser_destroyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_browseForFileToOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_browseForFileToOpen() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_browseForFileToOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForFileToOpen(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbrowseForFileToOpen(::grpc::ServerContext* context, ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_browseForMultipleFilesToOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_browseForMultipleFilesToOpen() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_browseForMultipleFilesToOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForMultipleFilesToOpen(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbrowseForMultipleFilesToOpen(::grpc::ServerContext* context, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_browseForFileToSave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_browseForFileToSave() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_browseForFileToSave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForFileToSave(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbrowseForFileToSave(::grpc::ServerContext* context, ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_browseForDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_browseForDirectory() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_browseForDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbrowseForDirectory(::grpc::ServerContext* context, ::octaneapi::ApiFileChooser_browseForDirectoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileChooser_browseForDirectoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_browseForMultipleFilesOrDirectories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_browseForMultipleFilesOrDirectories() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_browseForMultipleFilesOrDirectories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForMultipleFilesOrDirectories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbrowseForMultipleFilesOrDirectories(::grpc::ServerContext* context, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_result() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status result(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_resultRequest* /*request*/, ::octaneapi::ApiFileChooser_resultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestresult(::grpc::ServerContext* context, ::octaneapi::ApiFileChooser_resultRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileChooser_resultResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_results : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_results() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_results() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status results(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_resultsRequest* /*request*/, ::octaneapi::ApiFileChooser_resultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestresults(::grpc::ServerContext* context, ::octaneapi::ApiFileChooser_resultsRequest* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::ApiFileChooser_resultsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_create<WithAsyncMethod_destroy<WithAsyncMethod_browseForFileToOpen<WithAsyncMethod_browseForMultipleFilesToOpen<WithAsyncMethod_browseForFileToSave<WithAsyncMethod_browseForDirectory<WithAsyncMethod_browseForMultipleFilesOrDirectories<WithAsyncMethod_result<WithAsyncMethod_results<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_create() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_createRequest, ::octaneapi::ApiFileChooser_createResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileChooser_createRequest* request, ::octaneapi::ApiFileChooser_createResponse* response) { return this->create(context, request, response); }));}
    void SetMessageAllocatorFor_create(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileChooser_createRequest, ::octaneapi::ApiFileChooser_createResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_createRequest, ::octaneapi::ApiFileChooser_createResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_createRequest* /*request*/, ::octaneapi::ApiFileChooser_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileChooser_createRequest* /*request*/, ::octaneapi::ApiFileChooser_createResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_destroyRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileChooser_destroyRequest* request, ::google::protobuf::Empty* response) { return this->destroy(context, request, response); }));}
    void SetMessageAllocatorFor_destroy(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileChooser_destroyRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_destroyRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileChooser_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_browseForFileToOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_browseForFileToOpen() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_browseForFileToOpenRequest, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* response) { return this->browseForFileToOpen(context, request, response); }));}
    void SetMessageAllocatorFor_browseForFileToOpen(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileChooser_browseForFileToOpenRequest, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_browseForFileToOpenRequest, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_browseForFileToOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForFileToOpen(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* browseForFileToOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_browseForMultipleFilesToOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_browseForMultipleFilesToOpen() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* response) { return this->browseForMultipleFilesToOpen(context, request, response); }));}
    void SetMessageAllocatorFor_browseForMultipleFilesToOpen(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_browseForMultipleFilesToOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForMultipleFilesToOpen(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* browseForMultipleFilesToOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_browseForFileToSave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_browseForFileToSave() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_browseForFileToSaveRequest, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* request, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* response) { return this->browseForFileToSave(context, request, response); }));}
    void SetMessageAllocatorFor_browseForFileToSave(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileChooser_browseForFileToSaveRequest, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_browseForFileToSaveRequest, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_browseForFileToSave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForFileToSave(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* browseForFileToSave(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_browseForDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_browseForDirectory() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_browseForDirectoryRequest, ::octaneapi::ApiFileChooser_browseForDirectoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* request, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* response) { return this->browseForDirectory(context, request, response); }));}
    void SetMessageAllocatorFor_browseForDirectory(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileChooser_browseForDirectoryRequest, ::octaneapi::ApiFileChooser_browseForDirectoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_browseForDirectoryRequest, ::octaneapi::ApiFileChooser_browseForDirectoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_browseForDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* browseForDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_browseForMultipleFilesOrDirectories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_browseForMultipleFilesOrDirectories() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* request, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* response) { return this->browseForMultipleFilesOrDirectories(context, request, response); }));}
    void SetMessageAllocatorFor_browseForMultipleFilesOrDirectories(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_browseForMultipleFilesOrDirectories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForMultipleFilesOrDirectories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* browseForMultipleFilesOrDirectories(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_result() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_resultRequest, ::octaneapi::ApiFileChooser_resultResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileChooser_resultRequest* request, ::octaneapi::ApiFileChooser_resultResponse* response) { return this->result(context, request, response); }));}
    void SetMessageAllocatorFor_result(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileChooser_resultRequest, ::octaneapi::ApiFileChooser_resultResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_resultRequest, ::octaneapi::ApiFileChooser_resultResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status result(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_resultRequest* /*request*/, ::octaneapi::ApiFileChooser_resultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* result(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileChooser_resultRequest* /*request*/, ::octaneapi::ApiFileChooser_resultResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_results : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_results() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_resultsRequest, ::octaneapi::ApiFileChooser_resultsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::ApiFileChooser_resultsRequest* request, ::octaneapi::ApiFileChooser_resultsResponse* response) { return this->results(context, request, response); }));}
    void SetMessageAllocatorFor_results(
        ::grpc::MessageAllocator< ::octaneapi::ApiFileChooser_resultsRequest, ::octaneapi::ApiFileChooser_resultsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::ApiFileChooser_resultsRequest, ::octaneapi::ApiFileChooser_resultsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_results() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status results(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_resultsRequest* /*request*/, ::octaneapi::ApiFileChooser_resultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* results(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::ApiFileChooser_resultsRequest* /*request*/, ::octaneapi::ApiFileChooser_resultsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_create<WithCallbackMethod_destroy<WithCallbackMethod_browseForFileToOpen<WithCallbackMethod_browseForMultipleFilesToOpen<WithCallbackMethod_browseForFileToSave<WithCallbackMethod_browseForDirectory<WithCallbackMethod_browseForMultipleFilesOrDirectories<WithCallbackMethod_result<WithCallbackMethod_results<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_createRequest* /*request*/, ::octaneapi::ApiFileChooser_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_destroy() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_browseForFileToOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_browseForFileToOpen() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_browseForFileToOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForFileToOpen(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_browseForMultipleFilesToOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_browseForMultipleFilesToOpen() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_browseForMultipleFilesToOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForMultipleFilesToOpen(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_browseForFileToSave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_browseForFileToSave() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_browseForFileToSave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForFileToSave(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_browseForDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_browseForDirectory() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_browseForDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_browseForMultipleFilesOrDirectories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_browseForMultipleFilesOrDirectories() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_browseForMultipleFilesOrDirectories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForMultipleFilesOrDirectories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_result() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status result(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_resultRequest* /*request*/, ::octaneapi::ApiFileChooser_resultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_results : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_results() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_results() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status results(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_resultsRequest* /*request*/, ::octaneapi::ApiFileChooser_resultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_createRequest* /*request*/, ::octaneapi::ApiFileChooser_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_destroy() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_browseForFileToOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_browseForFileToOpen() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_browseForFileToOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForFileToOpen(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbrowseForFileToOpen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_browseForMultipleFilesToOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_browseForMultipleFilesToOpen() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_browseForMultipleFilesToOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForMultipleFilesToOpen(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbrowseForMultipleFilesToOpen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_browseForFileToSave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_browseForFileToSave() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_browseForFileToSave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForFileToSave(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbrowseForFileToSave(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_browseForDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_browseForDirectory() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_browseForDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbrowseForDirectory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_browseForMultipleFilesOrDirectories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_browseForMultipleFilesOrDirectories() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_browseForMultipleFilesOrDirectories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForMultipleFilesOrDirectories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbrowseForMultipleFilesOrDirectories(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_result() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status result(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_resultRequest* /*request*/, ::octaneapi::ApiFileChooser_resultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestresult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_results : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_results() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_results() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status results(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_resultsRequest* /*request*/, ::octaneapi::ApiFileChooser_resultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestresults(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_create() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->create(context, request, response); }));
    }
    ~WithRawCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_createRequest* /*request*/, ::octaneapi::ApiFileChooser_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->destroy(context, request, response); }));
    }
    ~WithRawCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_browseForFileToOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_browseForFileToOpen() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->browseForFileToOpen(context, request, response); }));
    }
    ~WithRawCallbackMethod_browseForFileToOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForFileToOpen(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* browseForFileToOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_browseForMultipleFilesToOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_browseForMultipleFilesToOpen() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->browseForMultipleFilesToOpen(context, request, response); }));
    }
    ~WithRawCallbackMethod_browseForMultipleFilesToOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForMultipleFilesToOpen(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* browseForMultipleFilesToOpen(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_browseForFileToSave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_browseForFileToSave() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->browseForFileToSave(context, request, response); }));
    }
    ~WithRawCallbackMethod_browseForFileToSave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForFileToSave(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* browseForFileToSave(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_browseForDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_browseForDirectory() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->browseForDirectory(context, request, response); }));
    }
    ~WithRawCallbackMethod_browseForDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* browseForDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_browseForMultipleFilesOrDirectories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_browseForMultipleFilesOrDirectories() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->browseForMultipleFilesOrDirectories(context, request, response); }));
    }
    ~WithRawCallbackMethod_browseForMultipleFilesOrDirectories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status browseForMultipleFilesOrDirectories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* browseForMultipleFilesOrDirectories(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_result() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->result(context, request, response); }));
    }
    ~WithRawCallbackMethod_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status result(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_resultRequest* /*request*/, ::octaneapi::ApiFileChooser_resultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* result(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_results : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_results() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->results(context, request, response); }));
    }
    ~WithRawCallbackMethod_results() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status results(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_resultsRequest* /*request*/, ::octaneapi::ApiFileChooser_resultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* results(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileChooser_createRequest, ::octaneapi::ApiFileChooser_createResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileChooser_createRequest, ::octaneapi::ApiFileChooser_createResponse>* streamer) {
                       return this->Streamedcreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_createRequest* /*request*/, ::octaneapi::ApiFileChooser_createResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileChooser_createRequest,::octaneapi::ApiFileChooser_createResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_destroy() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileChooser_destroyRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileChooser_destroyRequest, ::google::protobuf::Empty>* streamer) {
                       return this->Streameddestroy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_destroyRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddestroy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileChooser_destroyRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_browseForFileToOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_browseForFileToOpen() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileChooser_browseForFileToOpenRequest, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileChooser_browseForFileToOpenRequest, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse>* streamer) {
                       return this->StreamedbrowseForFileToOpen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_browseForFileToOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status browseForFileToOpen(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForFileToOpenRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForFileToOpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedbrowseForFileToOpen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileChooser_browseForFileToOpenRequest,::octaneapi::ApiFileChooser_browseForFileToOpenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_browseForMultipleFilesToOpen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_browseForMultipleFilesToOpen() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>* streamer) {
                       return this->StreamedbrowseForMultipleFilesToOpen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_browseForMultipleFilesToOpen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status browseForMultipleFilesToOpen(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedbrowseForMultipleFilesToOpen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenRequest,::octaneapi::ApiFileChooser_browseForMultipleFilesToOpenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_browseForFileToSave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_browseForFileToSave() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileChooser_browseForFileToSaveRequest, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileChooser_browseForFileToSaveRequest, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse>* streamer) {
                       return this->StreamedbrowseForFileToSave(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_browseForFileToSave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status browseForFileToSave(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForFileToSaveRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForFileToSaveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedbrowseForFileToSave(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileChooser_browseForFileToSaveRequest,::octaneapi::ApiFileChooser_browseForFileToSaveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_browseForDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_browseForDirectory() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileChooser_browseForDirectoryRequest, ::octaneapi::ApiFileChooser_browseForDirectoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileChooser_browseForDirectoryRequest, ::octaneapi::ApiFileChooser_browseForDirectoryResponse>* streamer) {
                       return this->StreamedbrowseForDirectory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_browseForDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status browseForDirectory(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForDirectoryRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForDirectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedbrowseForDirectory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileChooser_browseForDirectoryRequest,::octaneapi::ApiFileChooser_browseForDirectoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_browseForMultipleFilesOrDirectories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_browseForMultipleFilesOrDirectories() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>* streamer) {
                       return this->StreamedbrowseForMultipleFilesOrDirectories(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_browseForMultipleFilesOrDirectories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status browseForMultipleFilesOrDirectories(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest* /*request*/, ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedbrowseForMultipleFilesOrDirectories(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesRequest,::octaneapi::ApiFileChooser_browseForMultipleFilesOrDirectoriesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_result() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileChooser_resultRequest, ::octaneapi::ApiFileChooser_resultResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileChooser_resultRequest, ::octaneapi::ApiFileChooser_resultResponse>* streamer) {
                       return this->Streamedresult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status result(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_resultRequest* /*request*/, ::octaneapi::ApiFileChooser_resultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedresult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileChooser_resultRequest,::octaneapi::ApiFileChooser_resultResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_results : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_results() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::ApiFileChooser_resultsRequest, ::octaneapi::ApiFileChooser_resultsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::ApiFileChooser_resultsRequest, ::octaneapi::ApiFileChooser_resultsResponse>* streamer) {
                       return this->Streamedresults(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_results() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status results(::grpc::ServerContext* /*context*/, const ::octaneapi::ApiFileChooser_resultsRequest* /*request*/, ::octaneapi::ApiFileChooser_resultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedresults(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::ApiFileChooser_resultsRequest,::octaneapi::ApiFileChooser_resultsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_browseForFileToOpen<WithStreamedUnaryMethod_browseForMultipleFilesToOpen<WithStreamedUnaryMethod_browseForFileToSave<WithStreamedUnaryMethod_browseForDirectory<WithStreamedUnaryMethod_browseForMultipleFilesOrDirectories<WithStreamedUnaryMethod_result<WithStreamedUnaryMethod_results<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_browseForFileToOpen<WithStreamedUnaryMethod_browseForMultipleFilesToOpen<WithStreamedUnaryMethod_browseForFileToSave<WithStreamedUnaryMethod_browseForDirectory<WithStreamedUnaryMethod_browseForMultipleFilesOrDirectories<WithStreamedUnaryMethod_result<WithStreamedUnaryMethod_results<Service > > > > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_apifilechooser_2eproto__INCLUDED
