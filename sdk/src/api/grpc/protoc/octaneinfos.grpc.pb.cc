// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: octaneinfos.proto

#include "octaneinfos.pb.h"
#include "octaneinfos.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* ApiAttributeInfoService_method_names[] = {
  "/octaneapi.ApiAttributeInfoService/isValidFor",
};

std::unique_ptr< ApiAttributeInfoService::Stub> ApiAttributeInfoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiAttributeInfoService::Stub> stub(new ApiAttributeInfoService::Stub(channel, options));
  return stub;
}

ApiAttributeInfoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_isValidFor_(ApiAttributeInfoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiAttributeInfoService::Stub::isValidFor(::grpc::ClientContext* context, const ::octaneapi::ApiAttributeInfo_isValidForRequest& request, ::octaneapi::ApiAttributeInfo_isValidForResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiAttributeInfo_isValidForRequest, ::octaneapi::ApiAttributeInfo_isValidForResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isValidFor_, context, request, response);
}

void ApiAttributeInfoService::Stub::async::isValidFor(::grpc::ClientContext* context, const ::octaneapi::ApiAttributeInfo_isValidForRequest* request, ::octaneapi::ApiAttributeInfo_isValidForResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiAttributeInfo_isValidForRequest, ::octaneapi::ApiAttributeInfo_isValidForResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isValidFor_, context, request, response, std::move(f));
}

void ApiAttributeInfoService::Stub::async::isValidFor(::grpc::ClientContext* context, const ::octaneapi::ApiAttributeInfo_isValidForRequest* request, ::octaneapi::ApiAttributeInfo_isValidForResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isValidFor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiAttributeInfo_isValidForResponse>* ApiAttributeInfoService::Stub::PrepareAsyncisValidForRaw(::grpc::ClientContext* context, const ::octaneapi::ApiAttributeInfo_isValidForRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiAttributeInfo_isValidForResponse, ::octaneapi::ApiAttributeInfo_isValidForRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isValidFor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiAttributeInfo_isValidForResponse>* ApiAttributeInfoService::Stub::AsyncisValidForRaw(::grpc::ClientContext* context, const ::octaneapi::ApiAttributeInfo_isValidForRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisValidForRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiAttributeInfoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiAttributeInfoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiAttributeInfoService::Service, ::octaneapi::ApiAttributeInfo_isValidForRequest, ::octaneapi::ApiAttributeInfo_isValidForResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiAttributeInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiAttributeInfo_isValidForRequest* req,
             ::octaneapi::ApiAttributeInfo_isValidForResponse* resp) {
               return service->isValidFor(ctx, req, resp);
             }, this)));
}

ApiAttributeInfoService::Service::~Service() {
}

::grpc::Status ApiAttributeInfoService::Service::isValidFor(::grpc::ServerContext* context, const ::octaneapi::ApiAttributeInfo_isValidForRequest* request, ::octaneapi::ApiAttributeInfo_isValidForResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ApiCompatibilityModeInfoService_method_names[] = {
  "/octaneapi.ApiCompatibilityModeInfoService/startVersion",
  "/octaneapi.ApiCompatibilityModeInfoService/name",
  "/octaneapi.ApiCompatibilityModeInfoService/description",
};

std::unique_ptr< ApiCompatibilityModeInfoService::Stub> ApiCompatibilityModeInfoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiCompatibilityModeInfoService::Stub> stub(new ApiCompatibilityModeInfoService::Stub(channel, options));
  return stub;
}

ApiCompatibilityModeInfoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_startVersion_(ApiCompatibilityModeInfoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_name_(ApiCompatibilityModeInfoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_description_(ApiCompatibilityModeInfoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiCompatibilityModeInfoService::Stub::startVersion(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_startVersionRequest& request, ::octaneapi::ApiCompatibilityModeInfo_startVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiCompatibilityModeInfo_startVersionRequest, ::octaneapi::ApiCompatibilityModeInfo_startVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_startVersion_, context, request, response);
}

void ApiCompatibilityModeInfoService::Stub::async::startVersion(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_startVersionRequest* request, ::octaneapi::ApiCompatibilityModeInfo_startVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiCompatibilityModeInfo_startVersionRequest, ::octaneapi::ApiCompatibilityModeInfo_startVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_startVersion_, context, request, response, std::move(f));
}

void ApiCompatibilityModeInfoService::Stub::async::startVersion(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_startVersionRequest* request, ::octaneapi::ApiCompatibilityModeInfo_startVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_startVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCompatibilityModeInfo_startVersionResponse>* ApiCompatibilityModeInfoService::Stub::PrepareAsyncstartVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_startVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiCompatibilityModeInfo_startVersionResponse, ::octaneapi::ApiCompatibilityModeInfo_startVersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_startVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCompatibilityModeInfo_startVersionResponse>* ApiCompatibilityModeInfoService::Stub::AsyncstartVersionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_startVersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiCompatibilityModeInfoService::Stub::name(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_nameRequest& request, ::octaneapi::ApiCompatibilityModeInfo_nameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiCompatibilityModeInfo_nameRequest, ::octaneapi::ApiCompatibilityModeInfo_nameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_name_, context, request, response);
}

void ApiCompatibilityModeInfoService::Stub::async::name(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_nameRequest* request, ::octaneapi::ApiCompatibilityModeInfo_nameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiCompatibilityModeInfo_nameRequest, ::octaneapi::ApiCompatibilityModeInfo_nameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_name_, context, request, response, std::move(f));
}

void ApiCompatibilityModeInfoService::Stub::async::name(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_nameRequest* request, ::octaneapi::ApiCompatibilityModeInfo_nameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_name_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCompatibilityModeInfo_nameResponse>* ApiCompatibilityModeInfoService::Stub::PrepareAsyncnameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_nameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiCompatibilityModeInfo_nameResponse, ::octaneapi::ApiCompatibilityModeInfo_nameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_name_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCompatibilityModeInfo_nameResponse>* ApiCompatibilityModeInfoService::Stub::AsyncnameRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_nameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiCompatibilityModeInfoService::Stub::description(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_descriptionRequest& request, ::octaneapi::ApiCompatibilityModeInfo_descriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiCompatibilityModeInfo_descriptionRequest, ::octaneapi::ApiCompatibilityModeInfo_descriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_description_, context, request, response);
}

void ApiCompatibilityModeInfoService::Stub::async::description(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_descriptionRequest* request, ::octaneapi::ApiCompatibilityModeInfo_descriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiCompatibilityModeInfo_descriptionRequest, ::octaneapi::ApiCompatibilityModeInfo_descriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_description_, context, request, response, std::move(f));
}

void ApiCompatibilityModeInfoService::Stub::async::description(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_descriptionRequest* request, ::octaneapi::ApiCompatibilityModeInfo_descriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_description_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCompatibilityModeInfo_descriptionResponse>* ApiCompatibilityModeInfoService::Stub::PrepareAsyncdescriptionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_descriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiCompatibilityModeInfo_descriptionResponse, ::octaneapi::ApiCompatibilityModeInfo_descriptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_description_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCompatibilityModeInfo_descriptionResponse>* ApiCompatibilityModeInfoService::Stub::AsyncdescriptionRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfo_descriptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdescriptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiCompatibilityModeInfoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiCompatibilityModeInfoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiCompatibilityModeInfoService::Service, ::octaneapi::ApiCompatibilityModeInfo_startVersionRequest, ::octaneapi::ApiCompatibilityModeInfo_startVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiCompatibilityModeInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiCompatibilityModeInfo_startVersionRequest* req,
             ::octaneapi::ApiCompatibilityModeInfo_startVersionResponse* resp) {
               return service->startVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiCompatibilityModeInfoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiCompatibilityModeInfoService::Service, ::octaneapi::ApiCompatibilityModeInfo_nameRequest, ::octaneapi::ApiCompatibilityModeInfo_nameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiCompatibilityModeInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiCompatibilityModeInfo_nameRequest* req,
             ::octaneapi::ApiCompatibilityModeInfo_nameResponse* resp) {
               return service->name(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiCompatibilityModeInfoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiCompatibilityModeInfoService::Service, ::octaneapi::ApiCompatibilityModeInfo_descriptionRequest, ::octaneapi::ApiCompatibilityModeInfo_descriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiCompatibilityModeInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiCompatibilityModeInfo_descriptionRequest* req,
             ::octaneapi::ApiCompatibilityModeInfo_descriptionResponse* resp) {
               return service->description(ctx, req, resp);
             }, this)));
}

ApiCompatibilityModeInfoService::Service::~Service() {
}

::grpc::Status ApiCompatibilityModeInfoService::Service::startVersion(::grpc::ServerContext* context, const ::octaneapi::ApiCompatibilityModeInfo_startVersionRequest* request, ::octaneapi::ApiCompatibilityModeInfo_startVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiCompatibilityModeInfoService::Service::name(::grpc::ServerContext* context, const ::octaneapi::ApiCompatibilityModeInfo_nameRequest* request, ::octaneapi::ApiCompatibilityModeInfo_nameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiCompatibilityModeInfoService::Service::description(::grpc::ServerContext* context, const ::octaneapi::ApiCompatibilityModeInfo_descriptionRequest* request, ::octaneapi::ApiCompatibilityModeInfo_descriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ApiCompatibilityModeInfoSetService_method_names[] = {
  "/octaneapi.ApiCompatibilityModeInfoSetService/size",
  "/octaneapi.ApiCompatibilityModeInfoSetService/info",
};

std::unique_ptr< ApiCompatibilityModeInfoSetService::Stub> ApiCompatibilityModeInfoSetService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiCompatibilityModeInfoSetService::Stub> stub(new ApiCompatibilityModeInfoSetService::Stub(channel, options));
  return stub;
}

ApiCompatibilityModeInfoSetService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_size_(ApiCompatibilityModeInfoSetService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_info_(ApiCompatibilityModeInfoSetService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiCompatibilityModeInfoSetService::Stub::size(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfoSet_sizeRequest& request, ::octaneapi::ApiCompatibilityModeInfoSet_sizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiCompatibilityModeInfoSet_sizeRequest, ::octaneapi::ApiCompatibilityModeInfoSet_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_size_, context, request, response);
}

void ApiCompatibilityModeInfoSetService::Stub::async::size(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfoSet_sizeRequest* request, ::octaneapi::ApiCompatibilityModeInfoSet_sizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiCompatibilityModeInfoSet_sizeRequest, ::octaneapi::ApiCompatibilityModeInfoSet_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_size_, context, request, response, std::move(f));
}

void ApiCompatibilityModeInfoSetService::Stub::async::size(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfoSet_sizeRequest* request, ::octaneapi::ApiCompatibilityModeInfoSet_sizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_size_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCompatibilityModeInfoSet_sizeResponse>* ApiCompatibilityModeInfoSetService::Stub::PrepareAsyncsizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfoSet_sizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiCompatibilityModeInfoSet_sizeResponse, ::octaneapi::ApiCompatibilityModeInfoSet_sizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_size_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCompatibilityModeInfoSet_sizeResponse>* ApiCompatibilityModeInfoSetService::Stub::AsyncsizeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfoSet_sizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiCompatibilityModeInfoSetService::Stub::info(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfoSet_infoRequest& request, ::octaneapi::ApiCompatibilityModeInfoSet_infoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiCompatibilityModeInfoSet_infoRequest, ::octaneapi::ApiCompatibilityModeInfoSet_infoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_info_, context, request, response);
}

void ApiCompatibilityModeInfoSetService::Stub::async::info(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfoSet_infoRequest* request, ::octaneapi::ApiCompatibilityModeInfoSet_infoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiCompatibilityModeInfoSet_infoRequest, ::octaneapi::ApiCompatibilityModeInfoSet_infoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_info_, context, request, response, std::move(f));
}

void ApiCompatibilityModeInfoSetService::Stub::async::info(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfoSet_infoRequest* request, ::octaneapi::ApiCompatibilityModeInfoSet_infoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCompatibilityModeInfoSet_infoResponse>* ApiCompatibilityModeInfoSetService::Stub::PrepareAsyncinfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfoSet_infoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiCompatibilityModeInfoSet_infoResponse, ::octaneapi::ApiCompatibilityModeInfoSet_infoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiCompatibilityModeInfoSet_infoResponse>* ApiCompatibilityModeInfoSetService::Stub::AsyncinfoRaw(::grpc::ClientContext* context, const ::octaneapi::ApiCompatibilityModeInfoSet_infoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiCompatibilityModeInfoSetService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiCompatibilityModeInfoSetService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiCompatibilityModeInfoSetService::Service, ::octaneapi::ApiCompatibilityModeInfoSet_sizeRequest, ::octaneapi::ApiCompatibilityModeInfoSet_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiCompatibilityModeInfoSetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiCompatibilityModeInfoSet_sizeRequest* req,
             ::octaneapi::ApiCompatibilityModeInfoSet_sizeResponse* resp) {
               return service->size(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiCompatibilityModeInfoSetService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiCompatibilityModeInfoSetService::Service, ::octaneapi::ApiCompatibilityModeInfoSet_infoRequest, ::octaneapi::ApiCompatibilityModeInfoSet_infoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiCompatibilityModeInfoSetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiCompatibilityModeInfoSet_infoRequest* req,
             ::octaneapi::ApiCompatibilityModeInfoSet_infoResponse* resp) {
               return service->info(ctx, req, resp);
             }, this)));
}

ApiCompatibilityModeInfoSetService::Service::~Service() {
}

::grpc::Status ApiCompatibilityModeInfoSetService::Service::size(::grpc::ServerContext* context, const ::octaneapi::ApiCompatibilityModeInfoSet_sizeRequest* request, ::octaneapi::ApiCompatibilityModeInfoSet_sizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiCompatibilityModeInfoSetService::Service::info(::grpc::ServerContext* context, const ::octaneapi::ApiCompatibilityModeInfoSet_infoRequest* request, ::octaneapi::ApiCompatibilityModeInfoSet_infoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ApiNodePinInfoService_method_names[] = {
  "/octaneapi.ApiNodePinInfoService/isValidFor1",
};

std::unique_ptr< ApiNodePinInfoService::Stub> ApiNodePinInfoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiNodePinInfoService::Stub> stub(new ApiNodePinInfoService::Stub(channel, options));
  return stub;
}

ApiNodePinInfoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_isValidFor1_(ApiNodePinInfoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiNodePinInfoService::Stub::isValidFor1(::grpc::ClientContext* context, const ::octaneapi::ApiNodePinInfo_isValidForRequest& request, ::octaneapi::ApiNodePinInfo_isValidForResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiNodePinInfo_isValidForRequest, ::octaneapi::ApiNodePinInfo_isValidForResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isValidFor1_, context, request, response);
}

void ApiNodePinInfoService::Stub::async::isValidFor1(::grpc::ClientContext* context, const ::octaneapi::ApiNodePinInfo_isValidForRequest* request, ::octaneapi::ApiNodePinInfo_isValidForResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiNodePinInfo_isValidForRequest, ::octaneapi::ApiNodePinInfo_isValidForResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isValidFor1_, context, request, response, std::move(f));
}

void ApiNodePinInfoService::Stub::async::isValidFor1(::grpc::ClientContext* context, const ::octaneapi::ApiNodePinInfo_isValidForRequest* request, ::octaneapi::ApiNodePinInfo_isValidForResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isValidFor1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodePinInfo_isValidForResponse>* ApiNodePinInfoService::Stub::PrepareAsyncisValidFor1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodePinInfo_isValidForRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiNodePinInfo_isValidForResponse, ::octaneapi::ApiNodePinInfo_isValidForRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isValidFor1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiNodePinInfo_isValidForResponse>* ApiNodePinInfoService::Stub::AsyncisValidFor1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiNodePinInfo_isValidForRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisValidFor1Raw(context, request, cq);
  result->StartCall();
  return result;
}

ApiNodePinInfoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiNodePinInfoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiNodePinInfoService::Service, ::octaneapi::ApiNodePinInfo_isValidForRequest, ::octaneapi::ApiNodePinInfo_isValidForResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiNodePinInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiNodePinInfo_isValidForRequest* req,
             ::octaneapi::ApiNodePinInfo_isValidForResponse* resp) {
               return service->isValidFor1(ctx, req, resp);
             }, this)));
}

ApiNodePinInfoService::Service::~Service() {
}

::grpc::Status ApiNodePinInfoService::Service::isValidFor1(::grpc::ServerContext* context, const ::octaneapi::ApiNodePinInfo_isValidForRequest* request, ::octaneapi::ApiNodePinInfo_isValidForResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ApiTextureNodeTypeInfoService_method_names[] = {
  "/octaneapi.ApiTextureNodeTypeInfoService/findConfiguration1",
};

std::unique_ptr< ApiTextureNodeTypeInfoService::Stub> ApiTextureNodeTypeInfoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiTextureNodeTypeInfoService::Stub> stub(new ApiTextureNodeTypeInfoService::Stub(channel, options));
  return stub;
}

ApiTextureNodeTypeInfoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_findConfiguration1_(ApiTextureNodeTypeInfoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiTextureNodeTypeInfoService::Stub::findConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Request& request, ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Request, ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_findConfiguration1_, context, request, response);
}

void ApiTextureNodeTypeInfoService::Stub::async::findConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Request* request, ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Request, ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findConfiguration1_, context, request, response, std::move(f));
}

void ApiTextureNodeTypeInfoService::Stub::async::findConfiguration1(::grpc::ClientContext* context, const ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Request* request, ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_findConfiguration1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Response>* ApiTextureNodeTypeInfoService::Stub::PrepareAsyncfindConfiguration1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Response, ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_findConfiguration1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Response>* ApiTextureNodeTypeInfoService::Stub::AsyncfindConfiguration1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfindConfiguration1Raw(context, request, cq);
  result->StartCall();
  return result;
}

ApiTextureNodeTypeInfoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTextureNodeTypeInfoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTextureNodeTypeInfoService::Service, ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Request, ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTextureNodeTypeInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Request* req,
             ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Response* resp) {
               return service->findConfiguration1(ctx, req, resp);
             }, this)));
}

ApiTextureNodeTypeInfoService::Service::~Service() {
}

::grpc::Status ApiTextureNodeTypeInfoService::Service::findConfiguration1(::grpc::ServerContext* context, const ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Request* request, ::octaneapi::ApiTextureNodeTypeInfo_findConfiguration1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ApiTexturePinTypeInfoService_method_names[] = {
  "/octaneapi.ApiTexturePinTypeInfoService/getTextureValueType",
};

std::unique_ptr< ApiTexturePinTypeInfoService::Stub> ApiTexturePinTypeInfoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiTexturePinTypeInfoService::Stub> stub(new ApiTexturePinTypeInfoService::Stub(channel, options));
  return stub;
}

ApiTexturePinTypeInfoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_getTextureValueType_(ApiTexturePinTypeInfoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiTexturePinTypeInfoService::Stub::getTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeRequest& request, ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeRequest, ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getTextureValueType_, context, request, response);
}

void ApiTexturePinTypeInfoService::Stub::async::getTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeRequest* request, ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeRequest, ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTextureValueType_, context, request, response, std::move(f));
}

void ApiTexturePinTypeInfoService::Stub::async::getTextureValueType(::grpc::ClientContext* context, const ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeRequest* request, ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTextureValueType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeResponse>* ApiTexturePinTypeInfoService::Stub::PrepareAsyncgetTextureValueTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeResponse, ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getTextureValueType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeResponse>* ApiTexturePinTypeInfoService::Stub::AsyncgetTextureValueTypeRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTextureValueTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiTexturePinTypeInfoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTexturePinTypeInfoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTexturePinTypeInfoService::Service, ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeRequest, ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTexturePinTypeInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeRequest* req,
             ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeResponse* resp) {
               return service->getTextureValueType(ctx, req, resp);
             }, this)));
}

ApiTexturePinTypeInfoService::Service::~Service() {
}

::grpc::Status ApiTexturePinTypeInfoService::Service::getTextureValueType(::grpc::ServerContext* context, const ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeRequest* request, ::octaneapi::ApiTexturePinTypeInfo_getTextureValueTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ApiTextureValueTypeSetService_method_names[] = {
  "/octaneapi.ApiTextureValueTypeSetService/size1",
  "/octaneapi.ApiTextureValueTypeSetService/at",
  "/octaneapi.ApiTextureValueTypeSetService/contains",
  "/octaneapi.ApiTextureValueTypeSetService/bitField",
};

std::unique_ptr< ApiTextureValueTypeSetService::Stub> ApiTextureValueTypeSetService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiTextureValueTypeSetService::Stub> stub(new ApiTextureValueTypeSetService::Stub(channel, options));
  return stub;
}

ApiTextureValueTypeSetService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_size1_(ApiTextureValueTypeSetService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_at_(ApiTextureValueTypeSetService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_contains_(ApiTextureValueTypeSetService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_bitField_(ApiTextureValueTypeSetService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiTextureValueTypeSetService::Stub::size1(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_sizeRequest& request, ::octaneapi::ApiTextureValueTypeSet_sizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTextureValueTypeSet_sizeRequest, ::octaneapi::ApiTextureValueTypeSet_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_size1_, context, request, response);
}

void ApiTextureValueTypeSetService::Stub::async::size1(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_sizeRequest* request, ::octaneapi::ApiTextureValueTypeSet_sizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTextureValueTypeSet_sizeRequest, ::octaneapi::ApiTextureValueTypeSet_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_size1_, context, request, response, std::move(f));
}

void ApiTextureValueTypeSetService::Stub::async::size1(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_sizeRequest* request, ::octaneapi::ApiTextureValueTypeSet_sizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_size1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTextureValueTypeSet_sizeResponse>* ApiTextureValueTypeSetService::Stub::PrepareAsyncsize1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_sizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTextureValueTypeSet_sizeResponse, ::octaneapi::ApiTextureValueTypeSet_sizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_size1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTextureValueTypeSet_sizeResponse>* ApiTextureValueTypeSetService::Stub::Asyncsize1Raw(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_sizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsize1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTextureValueTypeSetService::Stub::at(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_atRequest& request, ::octaneapi::ApiTextureValueTypeSet_atResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTextureValueTypeSet_atRequest, ::octaneapi::ApiTextureValueTypeSet_atResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_at_, context, request, response);
}

void ApiTextureValueTypeSetService::Stub::async::at(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_atRequest* request, ::octaneapi::ApiTextureValueTypeSet_atResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTextureValueTypeSet_atRequest, ::octaneapi::ApiTextureValueTypeSet_atResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_at_, context, request, response, std::move(f));
}

void ApiTextureValueTypeSetService::Stub::async::at(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_atRequest* request, ::octaneapi::ApiTextureValueTypeSet_atResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_at_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTextureValueTypeSet_atResponse>* ApiTextureValueTypeSetService::Stub::PrepareAsyncatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_atRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTextureValueTypeSet_atResponse, ::octaneapi::ApiTextureValueTypeSet_atRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_at_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTextureValueTypeSet_atResponse>* ApiTextureValueTypeSetService::Stub::AsyncatRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_atRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTextureValueTypeSetService::Stub::contains(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_containsRequest& request, ::octaneapi::ApiTextureValueTypeSet_containsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTextureValueTypeSet_containsRequest, ::octaneapi::ApiTextureValueTypeSet_containsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_contains_, context, request, response);
}

void ApiTextureValueTypeSetService::Stub::async::contains(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_containsRequest* request, ::octaneapi::ApiTextureValueTypeSet_containsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTextureValueTypeSet_containsRequest, ::octaneapi::ApiTextureValueTypeSet_containsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_contains_, context, request, response, std::move(f));
}

void ApiTextureValueTypeSetService::Stub::async::contains(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_containsRequest* request, ::octaneapi::ApiTextureValueTypeSet_containsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_contains_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTextureValueTypeSet_containsResponse>* ApiTextureValueTypeSetService::Stub::PrepareAsynccontainsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_containsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTextureValueTypeSet_containsResponse, ::octaneapi::ApiTextureValueTypeSet_containsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_contains_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTextureValueTypeSet_containsResponse>* ApiTextureValueTypeSetService::Stub::AsynccontainsRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_containsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccontainsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiTextureValueTypeSetService::Stub::bitField(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_bitFieldRequest& request, ::octaneapi::ApiTextureValueTypeSet_bitFieldResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::ApiTextureValueTypeSet_bitFieldRequest, ::octaneapi::ApiTextureValueTypeSet_bitFieldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_bitField_, context, request, response);
}

void ApiTextureValueTypeSetService::Stub::async::bitField(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_bitFieldRequest* request, ::octaneapi::ApiTextureValueTypeSet_bitFieldResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::ApiTextureValueTypeSet_bitFieldRequest, ::octaneapi::ApiTextureValueTypeSet_bitFieldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_bitField_, context, request, response, std::move(f));
}

void ApiTextureValueTypeSetService::Stub::async::bitField(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_bitFieldRequest* request, ::octaneapi::ApiTextureValueTypeSet_bitFieldResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_bitField_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTextureValueTypeSet_bitFieldResponse>* ApiTextureValueTypeSetService::Stub::PrepareAsyncbitFieldRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_bitFieldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::ApiTextureValueTypeSet_bitFieldResponse, ::octaneapi::ApiTextureValueTypeSet_bitFieldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_bitField_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::ApiTextureValueTypeSet_bitFieldResponse>* ApiTextureValueTypeSetService::Stub::AsyncbitFieldRaw(::grpc::ClientContext* context, const ::octaneapi::ApiTextureValueTypeSet_bitFieldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbitFieldRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiTextureValueTypeSetService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTextureValueTypeSetService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTextureValueTypeSetService::Service, ::octaneapi::ApiTextureValueTypeSet_sizeRequest, ::octaneapi::ApiTextureValueTypeSet_sizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTextureValueTypeSetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTextureValueTypeSet_sizeRequest* req,
             ::octaneapi::ApiTextureValueTypeSet_sizeResponse* resp) {
               return service->size1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTextureValueTypeSetService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTextureValueTypeSetService::Service, ::octaneapi::ApiTextureValueTypeSet_atRequest, ::octaneapi::ApiTextureValueTypeSet_atResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTextureValueTypeSetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTextureValueTypeSet_atRequest* req,
             ::octaneapi::ApiTextureValueTypeSet_atResponse* resp) {
               return service->at(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTextureValueTypeSetService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTextureValueTypeSetService::Service, ::octaneapi::ApiTextureValueTypeSet_containsRequest, ::octaneapi::ApiTextureValueTypeSet_containsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTextureValueTypeSetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTextureValueTypeSet_containsRequest* req,
             ::octaneapi::ApiTextureValueTypeSet_containsResponse* resp) {
               return service->contains(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiTextureValueTypeSetService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiTextureValueTypeSetService::Service, ::octaneapi::ApiTextureValueTypeSet_bitFieldRequest, ::octaneapi::ApiTextureValueTypeSet_bitFieldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiTextureValueTypeSetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::ApiTextureValueTypeSet_bitFieldRequest* req,
             ::octaneapi::ApiTextureValueTypeSet_bitFieldResponse* resp) {
               return service->bitField(ctx, req, resp);
             }, this)));
}

ApiTextureValueTypeSetService::Service::~Service() {
}

::grpc::Status ApiTextureValueTypeSetService::Service::size1(::grpc::ServerContext* context, const ::octaneapi::ApiTextureValueTypeSet_sizeRequest* request, ::octaneapi::ApiTextureValueTypeSet_sizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTextureValueTypeSetService::Service::at(::grpc::ServerContext* context, const ::octaneapi::ApiTextureValueTypeSet_atRequest* request, ::octaneapi::ApiTextureValueTypeSet_atResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTextureValueTypeSetService::Service::contains(::grpc::ServerContext* context, const ::octaneapi::ApiTextureValueTypeSet_containsRequest* request, ::octaneapi::ApiTextureValueTypeSet_containsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiTextureValueTypeSetService::Service::bitField(::grpc::ServerContext* context, const ::octaneapi::ApiTextureValueTypeSet_bitFieldRequest* request, ::octaneapi::ApiTextureValueTypeSet_bitFieldResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

