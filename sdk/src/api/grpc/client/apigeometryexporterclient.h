// Copyright (C) 2025 OTOY NZ Ltd.

#pragma once

#include "octanetypes.h"
#ifdef OCTANEAPI_DECL
#undef OCTANEAPI_DECL
#endif
#define OCTANEAPI_DECL
#include "octanevectypes.h"
#include "grpcbase.h"
#include "clientcallbackmgr.h"
#include "grpcapinodeinfo.h"
class ApiNodeGraphProxy;
class ApiItemProxy;


#include "apigeometryexporter.h"


class Convert;

class GRPCSettings;

/// Proxy class for ApiGeometryExporter
class ApiGeometryExporterProxy : public GRPCBase
{
public:
    /// Tells whether @ref ApiGeometryExporter is supported by this build
    /// @param[out] status
    ///     Contains the status of the gRPC call
    static bool isSupported();

    /// Creates an exporter to export geometry to a file.
    ///
    /// @param[in] fileName
    ///     file name, encoded as UTF-8. The file name is taken as is, it usually ends with the
    ///     ".abc" extension. if the filename is relative path, we anchor it with current projet
    ///     directory if a project exits, otherwise with the current working directory.
    /// @param[in] description
    ///     A line of text describing the contents of this file.
    /// @param[in]  exportFormat
    ///     The format that should be used for the geometry export.
    /// @param[in]  exportGeneratedGeometry
    ///     If set to TRUE, geometry generated by built-in script graphs will be exported as
    ///     regular geometry. If set to FALSE, only transformations leading up to the generator
    ///     script graph will be exported and the script graph will be linked via an input.
    /// @param[out] status
    ///     Contains the status of the gRPC call
    /// @return
    ///     the created object. If the file can't be opened this call returns NULL, which indicates
    ///     that either the file name is invalid or you don't have permissions to create the Alembic
    ///     file or an Alembic file with the same name already exists and is already open somewhere.
    static ApiGeometryExporterProxy create(
            const char *                              fileName,
            const char *                              description,
            const Octane::GeometryExportFormat        exportFormat,
            const bool                                exportGeneratedGeometry
            );

    /// Sets the aspect ratio used for exporting cameras. This is needed to export correct lens
    /// shift values. A call to this method affects any camera nodes added afterwards.
    ///
    /// @param[in] ratio
    ///     film width / film height
    /// @param[out] status
    ///     Contains the status of the gRPC call
    void setAspectRatio(
            float   ratio
            );

    /// Sets additional FBX options
    ///
    /// @param[in] fastScatterExport
    ///     If TRUE, the child of a scatter node is exported only on the first transform node.
    ///     So readers of the exported FBX should copy or attach it to all other transform nodes. Otherwise
    ///     the child will be cloned to all transform nodes.
    /// @param[in] exportMaterial
    ///     If TRUE, basic materials and textures will be exported with geometry. Textures are generated
    ///     using preview render
    /// @param[in] asStingrayMaterial
    ///     If TRUE, materials are exported in Stingray format. Read only by Max, Maya and unity applications.
    /// @param[in] renderSizeX
    ///     Texture render dimension in X. larger the value, slower the export.
    /// @param[in] renderSizeY
    ///     Texture render dimension in Y. larger the value, slower the export.
    /// @param[in] writeOcsData
    ///     export octane OCS data of the material into FBX file. all the corresponding external files are also
    ///     embedded into the FBX. This data will be read only by octane.
    /// @param[out] status
    ///     Contains the status of the gRPC call
    void setFbxOptions(
            const bool                                fastScatterExport,
            const bool                                exportMaterial,
            const bool                                asStingrayMaterial,
            const uint32_t                            renderSizeX,
            const uint32_t                            renderSizeY,
            const bool                                writeOcsData
            );

    /// Adds an item to this exporter. Currently any geometry node type, and thin lens cameras are
    /// allowed (or linker nodes with one of those as input node).
    ///
    /// If the item is a node graph, all compatible output linkers are added, and this method
    /// returns TRUE if at least one node was added successfully.
    ///
    /// All items should be added before the first frame is exported.
    /// @param[out] status
    ///     Contains the status of the gRPC call
    bool addItem(
            ApiItemProxy *   item
            );

    /// Write the current state of the node graph to the file. This is then considered one frame of
    /// the animation. This may take some time.
    ///
    /// Returns FALSE if an error occurs or the node given to create() was destroyed.
    ///
    /// @param[in] interval
    ///     The interval covered by the current frame.
    ///
    ///     If an empty interval is given, all objects are exported with one key frame for every
    ///     exported frame, based on current attribute values.
    ///
    ///     If not empty, geometry with an animator which provides more than one frame within
    ///     the given interval will be exported with a corresponding number of key frames.
    ///     To avoid interpolation between frames, the animator should provide key frames at time
    ///     stamps `interval.begin + i/N * (interval.end - interval.begin), for 0 <= i < N.
    ///
    ///     Some exporters will not change the key frame rate of an exported object once the
    ///     object is created, therefore you should consistently provide the same number of
    ///     subframes for each object as the export progresses. The last frame may be exported
    ///     with an empty frame to avoid trailing key frames after the time stamp of the last
    ///     frame.
    /// @param[out] status
    ///     Contains the status of the gRPC call
    bool writeFrame(
            const Octane::TimeSpanT   interval
            );

    /// Write the current state of the node graph to the file, using an empty interval so no
    /// sub frames will be exported for any object.
    /// @param[out] status
    ///     Contains the status of the gRPC call
    bool writeFrame();

    /// Saves the time sampling pattern to the file. This determines which time stamp is associated
    /// with every frame written with writeFrame().
    ///
    /// If this function is not called before the exporter is destroyed, then the time sampling is
    /// derived from the node graph time stamps when the frames were written.
    ///
    /// @param[in] times
    ///     The time sampling pattern which was used.
    /// @param[out] status
    ///     Contains the status of the gRPC call
    /// @return
    ///     TRUE if the given time sampling was valid and can be written to the file.
    bool writeTimeSampling(
            const Octane::ApiTimeSampling &   times
            );

    /// Creates a geometry archive node for this exported geometry, containing all the input pins
    /// which will be created when the exported file is loaded into this node. If the given parent
    /// node graph also contains the items connected to the material and object layer inputs, then
    /// these will be connected to the created geometry archive.
    ///
    /// NOTE: To be able write the scene into a package (which will copy the exported geometry file
    ///       into the package), the geometry file must be accessible, which means that the
    ///       ApiGeoemtryExporter needs to be destroyed BEFORE you call the export functions.
    ///
    /// @param[in] owner
    ///     The parent node graph where to place the node graph. Should be the same node graph where
    ///     the materials are located, so they can be connected to the inputs of the created
    ///     archive.
    /// @param[in] createObjectInputs
    ///     TRUE if the created node graph should contain inputs for object layer entries
    /// @param[out] status
    ///     Contains the status of the gRPC call
    /// @return
    ///     A geometry archive. This archive will have its file name set, but it will not be
    ///     evaluated, so its contents are not loaded. It can be exported to an ORBX package without
    ///     evaluating first.
    ApiNodeGraphProxy createGeometryArchive(
            ApiNodeGraphProxy *                       owner,
            bool                                      createObjectInputs
            ) const;

    /// Closes the file and destroys this exporter. The written file will not be usable until the
    /// exporter is closed.
    /// @param[out] status
    ///     Contains the status of the gRPC call
    void destroy();

private:
    static GRPCSettings & getGRPCSettings();
};
