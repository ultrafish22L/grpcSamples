# Node Inspector Old Unused Code
# This code was part of the NodeInspector.js but is no longer used
# The current system uses GenericNodeRenderer.renderNodeAtLevel() instead

# UNUSED METHODS FROM NodeInspector.js (lines 2658-3033):

    renderSingleParameter(param) {
        const paramType = this.detectParameterType(param);
        const icon = this.getParameterIcon(param.name, paramType);
        
        let controlHtml = '';
        
        switch (paramType) {
            case 'checkbox':
                controlHtml = this.renderCheckboxControl(param);
                break;
            case 'numeric-slider':
                controlHtml = this.renderNumericSliderControl(param);
                break;
            case 'numeric-input':
                controlHtml = this.renderNumericInputControl(param);
                break;
            case 'dropdown':
                controlHtml = this.renderDropdownControl(param);
                break;
            case 'color-picker':
                controlHtml = this.renderColorPickerControl(param);
                break;
            default:
                controlHtml = this.renderTextInputControl(param);
                break;
        }
        
        return `
            <div class="parameter-row" data-param="${param.name}" data-type="${paramType}">
                <div class="parameter-label">
                    <span class="parameter-icon">${icon}</span>
                    <span class="parameter-name">${param.name}</span>
                </div>
                <div class="parameter-control">
                    ${controlHtml}
                </div>
            </div>
        `;
    }
    
    // Parameter control rendering methods
    renderCheckboxControl(param) {
        const checked = param.value === true || param.value === 'true';
        return `
            <label class="parameter-checkbox-container">
                <input type="checkbox" 
                       class="parameter-checkbox" 
                       id="param-${param.name}"
                       ${checked ? 'checked' : ''}
                       data-param="${param.name}">
                <span class="parameter-checkbox-custom"></span>
            </label>
        `;
    }
    
    renderNumericSliderControl(param) {
        const value = param.value || 0;
        const min = param.min !== undefined ? param.min : 0;
        const max = param.max !== undefined ? param.max : 100;
        const step = param.step || 0.01;
        
        return `
            <div class="parameter-numeric-slider-container">
                <input type="range" 
                       class="parameter-slider" 
                       id="slider-${param.name}"
                       min="${min}" 
                       max="${max}" 
                       step="${step}" 
                       value="${value}"
                       data-param="${param.name}">
                <input type="number" 
                       class="parameter-number-input" 
                       id="input-${param.name}"
                       min="${min}" 
                       max="${max}" 
                       step="${step}" 
                       value="${value}"
                       data-param="${param.name}">
                <div class="parameter-controls">
                    <button class="param-increment" data-param="${param.name}" data-step="${step}">▲</button>
                    <button class="param-decrement" data-param="${param.name}" data-step="${step}">▼</button>
                </div>
            </div>
        `;
    }
    
    renderNumericInputControl(param) {
        const value = param.value || 0;
        const step = param.step || 1;
        
        return `
            <div class="parameter-numeric-input-container">
                <input type="number" 
                       class="parameter-number-input" 
                       id="input-${param.name}"
                       step="${step}" 
                       value="${value}"
                       data-param="${param.name}">
                <div class="parameter-controls">
                    <button class="param-increment" data-param="${param.name}" data-step="${step}">▲</button>
                    <button class="param-decrement" data-param="${param.name}" data-step="${step}">▼</button>
                </div>
            </div>
        `;
    }
    
    renderDropdownControl(param) {
        const options = param.options || [];
        const value = param.value || '';
        
        let optionsHtml = '';
        options.forEach(option => {
            const optionValue = typeof option === 'object' ? option.value : option;
            const optionLabel = typeof option === 'object' ? option.label : option;
            const selected = optionValue === value ? 'selected' : '';
            optionsHtml += `<option value="${optionValue}" ${selected}>${optionLabel}</option>`;
        });
        
        return `
            <select class="parameter-dropdown" 
                    id="dropdown-${param.name}"
                    data-param="${param.name}">
                ${optionsHtml}
            </select>
        `;
    }
    
    renderColorPickerControl(param) {
        const value = param.value || '#ffffff';
        const hexValue = this.colorToHex(value);
        
        return `
            <div class="parameter-color-container">
                <div class="parameter-color-preview" style="background-color: ${hexValue}"></div>
                <input type="color" 
                       class="parameter-color-picker" 
                       id="color-${param.name}"
                       value="${hexValue}"
                       data-param="${param.name}">
                <input type="text" 
                       class="parameter-color-hex" 
                       id="hex-${param.name}"
                       value="${hexValue}"
                       data-param="${param.name}"
                       maxlength="7">
            </div>
        `;
    }
    
    renderTextInputControl(param) {
        const value = param.value || '';
        
        return `
            <input type="text" 
                   class="parameter-text-input" 
                   id="text-${param.name}"
                   value="${value}"
                   data-param="${param.name}">
        `;
    }
    
    // Utility methods
    detectParameterType(param) {
        if (param.type) {
            const type = param.type.toUpperCase();
            if (type.includes('BOOL')) return 'checkbox';
            if (type.includes('FLOAT') || type.includes('DOUBLE')) {
                return param.min !== undefined && param.max !== undefined ? 'numeric-slider' : 'numeric-input';
            }
            if (type.includes('INT')) return 'numeric-input';
            if (type.includes('ENUM') || type.includes('CHOICE')) return 'dropdown';
            if (type.includes('COLOR')) return 'color-picker';
        }
        
        // Infer from value
        if (typeof param.value === 'boolean') return 'checkbox';
        if (typeof param.value === 'number') {
            return param.min !== undefined && param.max !== undefined ? 'numeric-slider' : 'numeric-input';
        }
        
        // Check for options
        if (param.options && Array.isArray(param.options)) return 'dropdown';
        
        // Check name patterns
        const lowerName = param.name.toLowerCase();
        if (lowerName.includes('color')) return 'color-picker';
        if (lowerName.includes('enable') || lowerName.includes('orthographic')) return 'checkbox';
        
        return 'text-input';
    }
    
    getParameterIcon(paramName, paramType) {
        const icons = {
            'Orthographic': '📐',
            'Sensor width': '📏',
            'Focal length': '🔍',
            'F-stop': '📷',
            'Field of view': '👁️',
            'Scale of view': '🔍',
            'Distortion': '🌀',
            'Lens shift': '↔️',
            'Near clip depth': '✂️',
            'Far clip depth': '✂️',
            'Auto-focus': '🎯',
            'Focal depth': '📏',
            'Aperture': '⭕'
        };
        
        return icons[paramName] || this.getTypeIcon(paramType);
    }
    
    getTypeIcon(paramType) {
        const typeIcons = {
            'checkbox': '☑️',
            'numeric-slider': '🎚️',
            'numeric-input': '🔢',
            'dropdown': '📋',
            'color-picker': '🎨',
            'text-input': '📝'
        };
        
        return typeIcons[paramType] || '⚙️';
    }
    
    colorToHex(color) {
        if (typeof color === 'string' && color.startsWith('#')) {
            return color;
        }
        
        if (Array.isArray(color)) {
            const r = Math.round(color[0] * 255);
            const g = Math.round(color[1] * 255);
            const b = Math.round(color[2] * 255);
            return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
        }
        
        return '#ffffff';
    }
    
    /**
     * Setup event listeners for all parameter controls
     */
    setupParameterEventListeners() {
        // Numeric slider controls
        this.element.querySelectorAll('.parameter-slider').forEach(slider => {
            slider.addEventListener('input', (e) => {
                const paramName = e.target.dataset.param;
                const value = parseFloat(e.target.value);
                const input = this.element.querySelector(`#input-${paramName}`);
                if (input) input.value = value;
                this.handleParameterChange(paramName, value);
            });
        });
        
        // Numeric input controls
        this.element.querySelectorAll('.parameter-number-input').forEach(input => {
            input.addEventListener('input', (e) => {
                const paramName = e.target.dataset.param;
                const value = parseFloat(e.target.value);
                const slider = this.element.querySelector(`#slider-${paramName}`);
                if (slider) slider.value = value;
                this.handleParameterChange(paramName, value);
            });
        });
        
        // Increment/decrement buttons
        this.element.querySelectorAll('.param-increment').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const paramName = e.target.dataset.param;
                const step = parseFloat(e.target.dataset.step);
                const input = this.element.querySelector(`#input-${paramName}`);
                if (input) {
                    const newValue = parseFloat(input.value) + step;
                    input.value = newValue;
                    const slider = this.element.querySelector(`#slider-${paramName}`);
                    if (slider) slider.value = newValue;
                    this.handleParameterChange(paramName, newValue);
                }
            });
        });
        
        this.element.querySelectorAll('.param-decrement').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const paramName = e.target.dataset.param;
                const step = parseFloat(e.target.dataset.step);
                const input = this.element.querySelector(`#input-${paramName}`);
                if (input) {
                    const newValue = parseFloat(input.value) - step;
                    input.value = newValue;
                    const slider = this.element.querySelector(`#slider-${paramName}`);
                    if (slider) slider.value = newValue;
                    this.handleParameterChange(paramName, newValue);
                }
            });
        });
        
        // Checkbox controls
        this.element.querySelectorAll('.parameter-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                const paramName = e.target.dataset.param;
                const value = e.target.checked;
                this.handleParameterChange(paramName, value);
            });
        });
        
        // Dropdown controls
        this.element.querySelectorAll('.parameter-dropdown').forEach(dropdown => {
            dropdown.addEventListener('change', (e) => {
                const paramName = e.target.dataset.param;
                const value = e.target.value;
                this.handleParameterChange(paramName, value);
            });
        });
        
        // Color picker controls
        this.element.querySelectorAll('.parameter-color-picker').forEach(picker => {
            picker.addEventListener('input', (e) => {
                const paramName = e.target.dataset.param;
                const value = e.target.value;
                const hexInput = this.element.querySelector(`#hex-${paramName}`);
                const preview = this.element.querySelector(`#color-${paramName}`).parentElement.querySelector('.parameter-color-preview');
                if (hexInput) hexInput.value = value;
                if (preview) preview.style.backgroundColor = value;
                this.handleParameterChange(paramName, value);
            });
        });
        
        // Text input controls
        this.element.querySelectorAll('.parameter-text-input').forEach(input => {
            input.addEventListener('input', (e) => {
                const paramName = e.target.dataset.param;
                const value = e.target.value;
                this.handleParameterChange(paramName, value);
            });
        });
    }
    
    /**
     * Handle parameter value changes
     */
    handleParameterChange(paramName, value) {
        console.log(`🔄 Parameter changed: ${paramName} = ${value}`);
        
        // Store the parameter value
        this.parameters[paramName] = value;
        
        // Send update to Octane if we have a selected node
        if (this.selectedNodeHandle) {
            this.updateOctaneParameter(paramName, value);
        }
        
        // Emit parameter change event for other components
        this.eventSystem.emit('parameterChanged', {
            nodeId: this.selectedNode,
            paramName: paramName,
            value: value
        });
    }
    
    /**
     * Update parameter in Octane
     */
    async updateOctaneParameter(paramName, value) {
        try {
            // This would send the parameter update to Octane
            // Implementation depends on the specific API for parameter updates
            console.log(`📤 Sending parameter update to Octane: ${paramName} = ${value}`);
            
            // For now, just log the update
            // In a real implementation, this would call the appropriate gRPC method
            
        } catch (error) {
            console.error('❌ Failed to update Octane parameter:', error);
        }
    }

# NOTES:
# - These methods were never called in the current system
# - The actual parameter rendering is done by GenericNodeRenderer.renderNodeAtLevel()
# - The interactive control infrastructure exists but needs to be integrated into renderNodeAtLevel()
# - Event handlers and parameter update logic can be reused when implementing controls