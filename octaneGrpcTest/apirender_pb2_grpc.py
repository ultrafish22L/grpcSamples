# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import apirender_pb2 as apirender__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in apirender_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ApiRenderEngineServiceStub(object):
    """GRPC interface definition for class 'ApiDeviceMemoryUsage' from 'apirender.h'

    GRPC interface definition for class 'ApiDeviceResourceStatistics' from 'apirender.h'

    GRPC interface definition for class 'ApiGeometryStatistics' from 'apirender.h'

    GRPC interface definition for class 'ApiRenderEngine' from 'apirender.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.setRenderTargetNode = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setRenderTargetNode',
                request_serializer=apirender__pb2.ApiRenderEngine.setRenderTargetNodeRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.setRenderTargetNodeResponse.FromString,
                _registered_method=True)
        self.getRenderTargetNode = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getRenderTargetNode',
                request_serializer=apirender__pb2.ApiRenderEngine.getRenderTargetNodeRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getRenderTargetNodeResponse.FromString,
                _registered_method=True)
        self.getRenderGeometryNode = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getRenderGeometryNode',
                request_serializer=apirender__pb2.ApiRenderEngine.getRenderGeometryNodeRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getRenderGeometryNodeResponse.FromString,
                _registered_method=True)
        self.getRenderCameraNode = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getRenderCameraNode',
                request_serializer=apirender__pb2.ApiRenderEngine.getRenderCameraNodeRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getRenderCameraNodeResponse.FromString,
                _registered_method=True)
        self.setRenderRegion = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setRenderRegion',
                request_serializer=apirender__pb2.ApiRenderEngine.setRenderRegionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.getRenderRegion = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getRenderRegion',
                request_serializer=apirender__pb2.ApiRenderEngine.getRenderRegionRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getRenderRegionResponse.FromString,
                _registered_method=True)
        self.setAsyncTonemapParams = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setAsyncTonemapParams',
                request_serializer=apirender__pb2.ApiRenderEngine.setAsyncTonemapParamsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.setAsyncTonemapParams1 = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setAsyncTonemapParams1',
                request_serializer=apirender__pb2.ApiRenderEngine.setAsyncTonemapParams1Request.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.asyncTonemapBufferType = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/asyncTonemapBufferType',
                request_serializer=apirender__pb2.ApiRenderEngine.asyncTonemapBufferTypeRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.asyncTonemapBufferTypeResponse.FromString,
                _registered_method=True)
        self.asyncTonemapCryptomatteFalseColor = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/asyncTonemapCryptomatteFalseColor',
                request_serializer=apirender__pb2.ApiRenderEngine.asyncTonemapCryptomatteFalseColorRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.asyncTonemapCryptomatteFalseColorResponse.FromString,
                _registered_method=True)
        self.asyncTonemapOutputColorSpaceInfo = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/asyncTonemapOutputColorSpaceInfo',
                request_serializer=apirender__pb2.ApiRenderEngine.asyncTonemapOutputColorSpaceInfoRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.asyncTonemapOutputColorSpaceInfoResponse.FromString,
                _registered_method=True)
        self.asyncTonemapColorSpace = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/asyncTonemapColorSpace',
                request_serializer=apirender__pb2.ApiRenderEngine.asyncTonemapColorSpaceRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.asyncTonemapColorSpaceResponse.FromString,
                _registered_method=True)
        self.asyncTonemapPremultipliedAlphaType = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/asyncTonemapPremultipliedAlphaType',
                request_serializer=apirender__pb2.ApiRenderEngine.asyncTonemapPremultipliedAlphaTypeRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.asyncTonemapPremultipliedAlphaTypeResponse.FromString,
                _registered_method=True)
        self.setAsyncTonemapRenderPasses = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setAsyncTonemapRenderPasses',
                request_serializer=apirender__pb2.ApiRenderEngine.setAsyncTonemapRenderPassesRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.setAsyncTonemapRenderPassesResponse.FromString,
                _registered_method=True)
        self.asyncTonemapRenderPasses = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/asyncTonemapRenderPasses',
                request_serializer=apirender__pb2.ApiRenderEngine.asyncTonemapRenderPassesRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.getEnabledAovs = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getEnabledAovs',
                request_serializer=apirender__pb2.ApiRenderEngine.getEnabledAovsRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getEnabledAovsResponse.FromString,
                _registered_method=True)
        self.freeTonemapPasses = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/freeTonemapPasses',
                request_serializer=apirender__pb2.ApiRenderEngine.freeTonemapPassesRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.displayRenderPassId = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/displayRenderPassId',
                request_serializer=apirender__pb2.ApiRenderEngine.displayRenderPassIdRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.displayRenderPassIdResponse.FromString,
                _registered_method=True)
        self.setSubSampleMode = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setSubSampleMode',
                request_serializer=apirender__pb2.ApiRenderEngine.setSubSampleModeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.getSubSampleMode = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getSubSampleMode',
                request_serializer=apirender__pb2.ApiRenderEngine.getSubSampleModeRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getSubSampleModeResponse.FromString,
                _registered_method=True)
        self.setClayMode = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setClayMode',
                request_serializer=apirender__pb2.ApiRenderEngine.setClayModeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.clayMode = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/clayMode',
                request_serializer=apirender__pb2.ApiRenderEngine.clayModeRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.clayModeResponse.FromString,
                _registered_method=True)
        self.fps = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/fps',
                request_serializer=apirender__pb2.ApiRenderEngine.fpsRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.fpsResponse.FromString,
                _registered_method=True)
        self.setFps = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setFps',
                request_serializer=apirender__pb2.ApiRenderEngine.setFpsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.isCompiling = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/isCompiling',
                request_serializer=apirender__pb2.ApiRenderEngine.isCompilingRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.isCompilingResponse.FromString,
                _registered_method=True)
        self.isCompressingTextures = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/isCompressingTextures',
                request_serializer=apirender__pb2.ApiRenderEngine.isCompressingTexturesRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.isCompressingTexturesResponse.FromString,
                _registered_method=True)
        self.hasPendingRenderData = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/hasPendingRenderData',
                request_serializer=apirender__pb2.ApiRenderEngine.hasPendingRenderDataRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.hasPendingRenderDataResponse.FromString,
                _registered_method=True)
        self.getCurrentChangeLevel = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getCurrentChangeLevel',
                request_serializer=apirender__pb2.ApiRenderEngine.getCurrentChangeLevelRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getCurrentChangeLevelResponse.FromString,
                _registered_method=True)
        self.getRenderImageChangeLevel = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getRenderImageChangeLevel',
                request_serializer=apirender__pb2.ApiRenderEngine.getRenderImageChangeLevelRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getRenderImageChangeLevelResponse.FromString,
                _registered_method=True)
        self.getRenderRestartedChangeLevel = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getRenderRestartedChangeLevel',
                request_serializer=apirender__pb2.ApiRenderEngine.getRenderRestartedChangeLevelRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getRenderRestartedChangeLevelResponse.FromString,
                _registered_method=True)
        self.setAsyncUpdateCallback = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setAsyncUpdateCallback',
                request_serializer=apirender__pb2.ApiRenderEngine.setAsyncUpdateCallbackRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.setAsyncUpdateCallbackResponse.FromString,
                _registered_method=True)
        self.updatesAreAsync = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/updatesAreAsync',
                request_serializer=apirender__pb2.ApiRenderEngine.updatesAreAsyncRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.updatesAreAsyncResponse.FromString,
                _registered_method=True)
        self.isImageReady = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/isImageReady',
                request_serializer=apirender__pb2.ApiRenderEngine.isImageReadyRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.isImageReadyResponse.FromString,
                _registered_method=True)
        self.resetImageReady = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/resetImageReady',
                request_serializer=apirender__pb2.ApiRenderEngine.resetImageReadyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.isRenderFailure = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/isRenderFailure',
                request_serializer=apirender__pb2.ApiRenderEngine.isRenderFailureRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.isRenderFailureResponse.FromString,
                _registered_method=True)
        self.resetRenderFailure = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/resetRenderFailure',
                request_serializer=apirender__pb2.ApiRenderEngine.resetRenderFailureRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.setOnTileBlendedCallback = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setOnTileBlendedCallback',
                request_serializer=apirender__pb2.ApiRenderEngine.setOnTileBlendedCallbackRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.setOnTileBlendedCallbackResponse.FromString,
                _registered_method=True)
        self.setOnNewStatisticsCallback = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setOnNewStatisticsCallback',
                request_serializer=apirender__pb2.ApiRenderEngine.setOnNewStatisticsCallbackRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.setOnNewStatisticsCallbackResponse.FromString,
                _registered_method=True)
        self.setOnNewImageCallback = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setOnNewImageCallback',
                request_serializer=apirender__pb2.ApiRenderEngine.setOnNewImageCallbackRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.setOnNewImageCallbackResponse.FromString,
                _registered_method=True)
        self.setOnOcioErrorCallback = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setOnOcioErrorCallback',
                request_serializer=apirender__pb2.ApiRenderEngine.setOnOcioErrorCallbackRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.setOnOcioErrorCallbackResponse.FromString,
                _registered_method=True)
        self.setOnRenderFailureCallback = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setOnRenderFailureCallback',
                request_serializer=apirender__pb2.ApiRenderEngine.setOnRenderFailureCallbackRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.setOnRenderFailureCallbackResponse.FromString,
                _registered_method=True)
        self.setForceCallbacksInRenderThreads = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setForceCallbacksInRenderThreads',
                request_serializer=apirender__pb2.ApiRenderEngine.setForceCallbacksInRenderThreadsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.grabRenderResult = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/grabRenderResult',
                request_serializer=apirender__pb2.ApiRenderEngine.grabRenderResultRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.grabRenderResultResponse.FromString,
                _registered_method=True)
        self.releaseRenderResult = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/releaseRenderResult',
                request_serializer=apirender__pb2.ApiRenderEngine.releaseRenderResultRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.synchronousTonemap = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/synchronousTonemap',
                request_serializer=apirender__pb2.ApiRenderEngine.synchronousTonemapRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.synchronousTonemapResponse.FromString,
                _registered_method=True)
        self.synchronousTonemap1 = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/synchronousTonemap1',
                request_serializer=apirender__pb2.ApiRenderEngine.synchronousTonemap1Request.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.synchronousTonemap1Response.FromString,
                _registered_method=True)
        self.synchronousTonemapAllRenderPasses = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/synchronousTonemapAllRenderPasses',
                request_serializer=apirender__pb2.ApiRenderEngine.synchronousTonemapAllRenderPassesRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.synchronousTonemapAllRenderPassesResponse.FromString,
                _registered_method=True)
        self.synchronousTonemapAllRenderPasses1 = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/synchronousTonemapAllRenderPasses1',
                request_serializer=apirender__pb2.ApiRenderEngine.synchronousTonemapAllRenderPasses1Request.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.synchronousTonemapAllRenderPasses1Response.FromString,
                _registered_method=True)
        self.getRenderStatistics = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getRenderStatistics',
                request_serializer=apirender__pb2.ApiRenderEngine.getRenderStatisticsRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getRenderStatisticsResponse.FromString,
                _registered_method=True)
        self.getRenderResultStatistics = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getRenderResultStatistics',
                request_serializer=apirender__pb2.ApiRenderEngine.getRenderResultStatisticsRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getRenderResultStatisticsResponse.FromString,
                _registered_method=True)
        self.saveImage = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/saveImage',
                request_serializer=apirender__pb2.ApiRenderEngine.saveImageRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.saveImageResponse.FromString,
                _registered_method=True)
        self.saveImage1 = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/saveImage1',
                request_serializer=apirender__pb2.ApiRenderEngine.saveImage1Request.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.saveImage1Response.FromString,
                _registered_method=True)
        self.saveImage2 = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/saveImage2',
                request_serializer=apirender__pb2.ApiRenderEngine.saveImage2Request.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.saveImage2Response.FromString,
                _registered_method=True)
        self.saveRenderPasses = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/saveRenderPasses',
                request_serializer=apirender__pb2.ApiRenderEngine.saveRenderPassesRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.saveRenderPassesResponse.FromString,
                _registered_method=True)
        self.saveRenderPasses1 = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/saveRenderPasses1',
                request_serializer=apirender__pb2.ApiRenderEngine.saveRenderPasses1Request.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.saveRenderPasses1Response.FromString,
                _registered_method=True)
        self.saveRenderPasses2 = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/saveRenderPasses2',
                request_serializer=apirender__pb2.ApiRenderEngine.saveRenderPasses2Request.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.saveRenderPasses2Response.FromString,
                _registered_method=True)
        self.saveRenderPassesMultiExr = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/saveRenderPassesMultiExr',
                request_serializer=apirender__pb2.ApiRenderEngine.saveRenderPassesMultiExrRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.saveRenderPassesMultiExrResponse.FromString,
                _registered_method=True)
        self.saveRenderPassesMultiExr1 = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/saveRenderPassesMultiExr1',
                request_serializer=apirender__pb2.ApiRenderEngine.saveRenderPassesMultiExr1Request.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.saveRenderPassesMultiExr1Response.FromString,
                _registered_method=True)
        self.saveRenderPassesDeepExr = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/saveRenderPassesDeepExr',
                request_serializer=apirender__pb2.ApiRenderEngine.saveRenderPassesDeepExrRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.saveRenderPassesDeepExrResponse.FromString,
                _registered_method=True)
        self.deepImageEnabled = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/deepImageEnabled',
                request_serializer=apirender__pb2.ApiRenderEngine.deepImageEnabledRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.deepImageEnabledResponse.FromString,
                _registered_method=True)
        self.deepImageEnabled1 = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/deepImageEnabled1',
                request_serializer=apirender__pb2.ApiRenderEngine.deepImageEnabled1Request.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.deepImageEnabled1Response.FromString,
                _registered_method=True)
        self.deepPassesEnabled = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/deepPassesEnabled',
                request_serializer=apirender__pb2.ApiRenderEngine.deepPassesEnabledRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.deepPassesEnabledResponse.FromString,
                _registered_method=True)
        self.canSaveDeepImage = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/canSaveDeepImage',
                request_serializer=apirender__pb2.ApiRenderEngine.canSaveDeepImageRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.canSaveDeepImageResponse.FromString,
                _registered_method=True)
        self.saveDeepImage = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/saveDeepImage',
                request_serializer=apirender__pb2.ApiRenderEngine.saveDeepImageRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.saveDeepImageResponse.FromString,
                _registered_method=True)
        self.saveRenderState = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/saveRenderState',
                request_serializer=apirender__pb2.ApiRenderEngine.saveRenderStateRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.saveRenderStateResponse.FromString,
                _registered_method=True)
        self.loadRenderState = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/loadRenderState',
                request_serializer=apirender__pb2.ApiRenderEngine.loadRenderStateRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.loadRenderStateResponse.FromString,
                _registered_method=True)
        self.previewMaterial = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/previewMaterial',
                request_serializer=apirender__pb2.ApiRenderEngine.previewMaterialRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.previewMaterialResponse.FromString,
                _registered_method=True)
        self.previewMaterialHdr = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/previewMaterialHdr',
                request_serializer=apirender__pb2.ApiRenderEngine.previewMaterialHdrRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.previewMaterialHdrResponse.FromString,
                _registered_method=True)
        self.previewMaterial1 = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/previewMaterial1',
                request_serializer=apirender__pb2.ApiRenderEngine.previewMaterial1Request.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.previewMaterial1Response.FromString,
                _registered_method=True)
        self.getMemoryUsage = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getMemoryUsage',
                request_serializer=apirender__pb2.ApiRenderEngine.getMemoryUsageRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getMemoryUsageResponse.FromString,
                _registered_method=True)
        self.getResourceStatistics = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getResourceStatistics',
                request_serializer=apirender__pb2.ApiRenderEngine.getResourceStatisticsRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getResourceStatisticsResponse.FromString,
                _registered_method=True)
        self.getGeometryStatistics = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getGeometryStatistics',
                request_serializer=apirender__pb2.ApiRenderEngine.getGeometryStatisticsRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getGeometryStatisticsResponse.FromString,
                _registered_method=True)
        self.getTexturesStatistics = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getTexturesStatistics',
                request_serializer=apirender__pb2.ApiRenderEngine.getTexturesStatisticsRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getTexturesStatisticsResponse.FromString,
                _registered_method=True)
        self.getSceneBounds = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getSceneBounds',
                request_serializer=apirender__pb2.ApiRenderEngine.getSceneBoundsRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getSceneBoundsResponse.FromString,
                _registered_method=True)
        self.getDeviceCount = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getDeviceCount',
                request_serializer=apirender__pb2.ApiRenderEngine.getDeviceCountRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getDeviceCountResponse.FromString,
                _registered_method=True)
        self.getDeviceComputeModel = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getDeviceComputeModel',
                request_serializer=apirender__pb2.ApiRenderEngine.getDeviceComputeModelRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getDeviceComputeModelResponse.FromString,
                _registered_method=True)
        self.getDeviceName = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getDeviceName',
                request_serializer=apirender__pb2.ApiRenderEngine.getDeviceNameRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getDeviceNameResponse.FromString,
                _registered_method=True)
        self.isSupportedDevice = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/isSupportedDevice',
                request_serializer=apirender__pb2.ApiRenderEngine.isSupportedDeviceRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.isSupportedDeviceResponse.FromString,
                _registered_method=True)
        self.deviceCanRender = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/deviceCanRender',
                request_serializer=apirender__pb2.ApiRenderEngine.deviceCanRenderRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.deviceCanRenderResponse.FromString,
                _registered_method=True)
        self.deviceCanDenoise = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/deviceCanDenoise',
                request_serializer=apirender__pb2.ApiRenderEngine.deviceCanDenoiseRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.deviceCanDenoiseResponse.FromString,
                _registered_method=True)
        self.deviceSupportsHardwareRayTracing = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/deviceSupportsHardwareRayTracing',
                request_serializer=apirender__pb2.ApiRenderEngine.deviceSupportsHardwareRayTracingRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.deviceSupportsHardwareRayTracingResponse.FromString,
                _registered_method=True)
        self.deviceSharedSurfaceInfo = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/deviceSharedSurfaceInfo',
                request_serializer=apirender__pb2.ApiRenderEngine.deviceSharedSurfaceInfoRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.deviceSharedSurfaceInfoResponse.FromString,
                _registered_method=True)
        self.getAvailablePeerToPeerPairs = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getAvailablePeerToPeerPairs',
                request_serializer=apirender__pb2.ApiRenderEngine.getAvailablePeerToPeerPairsRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getAvailablePeerToPeerPairsResponse.FromString,
                _registered_method=True)
        self.setDevicesActivity = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setDevicesActivity',
                request_serializer=apirender__pb2.ApiRenderEngine.setDevicesActivityRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.setDevicesActivityResponse.FromString,
                _registered_method=True)
        self.isDeviceUsedForRendering = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/isDeviceUsedForRendering',
                request_serializer=apirender__pb2.ApiRenderEngine.isDeviceUsedForRenderingRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.isDeviceUsedForRenderingResponse.FromString,
                _registered_method=True)
        self.deviceUsesPriority = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/deviceUsesPriority',
                request_serializer=apirender__pb2.ApiRenderEngine.deviceUsesPriorityRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.deviceUsesPriorityResponse.FromString,
                _registered_method=True)
        self.deviceUsesHardwareRayTracing = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/deviceUsesHardwareRayTracing',
                request_serializer=apirender__pb2.ApiRenderEngine.deviceUsesHardwareRayTracingRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.deviceUsesHardwareRayTracingResponse.FromString,
                _registered_method=True)
        self.imageDeviceIndex = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/imageDeviceIndex',
                request_serializer=apirender__pb2.ApiRenderEngine.imageDeviceIndexRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.imageDeviceIndexResponse.FromString,
                _registered_method=True)
        self.isDeviceUsedForDenoising = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/isDeviceUsedForDenoising',
                request_serializer=apirender__pb2.ApiRenderEngine.isDeviceUsedForDenoisingRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.isDeviceUsedForDenoisingResponse.FromString,
                _registered_method=True)
        self.renderPriority = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/renderPriority',
                request_serializer=apirender__pb2.ApiRenderEngine.renderPriorityRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.renderPriorityResponse.FromString,
                _registered_method=True)
        self.setRenderPriority = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setRenderPriority',
                request_serializer=apirender__pb2.ApiRenderEngine.setRenderPriorityRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.currentPeerToPeerGroups = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/currentPeerToPeerGroups',
                request_serializer=apirender__pb2.ApiRenderEngine.currentPeerToPeerGroupsRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.currentPeerToPeerGroupsResponse.FromString,
                _registered_method=True)
        self.hardwareRayTracingEnabled = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/hardwareRayTracingEnabled',
                request_serializer=apirender__pb2.ApiRenderEngine.hardwareRayTracingEnabledRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.hardwareRayTracingEnabledResponse.FromString,
                _registered_method=True)
        self.openDeviceSettings = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/openDeviceSettings',
                request_serializer=apirender__pb2.ApiRenderEngine.openDeviceSettingsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.renderDeviceState = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/renderDeviceState',
                request_serializer=apirender__pb2.ApiRenderEngine.renderDeviceStateRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.renderDeviceStateResponse.FromString,
                _registered_method=True)
        self.renderDeviceErrorCode = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/renderDeviceErrorCode',
                request_serializer=apirender__pb2.ApiRenderEngine.renderDeviceErrorCodeRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.renderDeviceErrorCodeResponse.FromString,
                _registered_method=True)
        self.errorcodeToString = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/errorcodeToString',
                request_serializer=apirender__pb2.ApiRenderEngine.errorcodeToStringRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.errorcodeToStringResponse.FromString,
                _registered_method=True)
        self.renderDeviceErrorMessage = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/renderDeviceErrorMessage',
                request_serializer=apirender__pb2.ApiRenderEngine.renderDeviceErrorMessageRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.renderDeviceErrorMessageResponse.FromString,
                _registered_method=True)
        self.saveRenderDeviceConfig = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/saveRenderDeviceConfig',
                request_serializer=apirender__pb2.ApiRenderEngine.saveRenderDeviceConfigRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.outOfCoreEnabled = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/outOfCoreEnabled',
                request_serializer=apirender__pb2.ApiRenderEngine.outOfCoreEnabledRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.outOfCoreEnabledResponse.FromString,
                _registered_method=True)
        self.enableOutOfCore = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/enableOutOfCore',
                request_serializer=apirender__pb2.ApiRenderEngine.enableOutOfCoreRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.disableOutOfCore = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/disableOutOfCore',
                request_serializer=apirender__pb2.ApiRenderEngine.disableOutOfCoreRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.getOutOfCoreMemoryUsage = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getOutOfCoreMemoryUsage',
                request_serializer=apirender__pb2.ApiRenderEngine.getOutOfCoreMemoryUsageRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getOutOfCoreMemoryUsageResponse.FromString,
                _registered_method=True)
        self.setGpuHeadroom = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setGpuHeadroom',
                request_serializer=apirender__pb2.ApiRenderEngine.setGpuHeadroomRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.getGpuHeadroom = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getGpuHeadroom',
                request_serializer=apirender__pb2.ApiRenderEngine.getGpuHeadroomRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getGpuHeadroomResponse.FromString,
                _registered_method=True)
        self.setCoreLimit = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setCoreLimit',
                request_serializer=apirender__pb2.ApiRenderEngine.setCoreLimitRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.disableCoreLimit = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/disableCoreLimit',
                request_serializer=apirender__pb2.ApiRenderEngine.disableCoreLimitRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.registerInputSharedSurface = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/registerInputSharedSurface',
                request_serializer=apirender__pb2.ApiRenderEngine.registerInputSharedSurfaceRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.registerInputSharedSurfaceResponse.FromString,
                _registered_method=True)
        self.unregisterInputSharedSurface = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/unregisterInputSharedSurface',
                request_serializer=apirender__pb2.ApiRenderEngine.unregisterInputSharedSurfaceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.triggerAsyncTonemap = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/triggerAsyncTonemap',
                request_serializer=apirender__pb2.ApiRenderEngine.triggerAsyncTonemapRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.setSharedSurfaceOutputType = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/setSharedSurfaceOutputType',
                request_serializer=apirender__pb2.ApiRenderEngine.setSharedSurfaceOutputTypeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.getSharedSurfaceOutputType = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getSharedSurfaceOutputType',
                request_serializer=apirender__pb2.ApiRenderEngine.getSharedSurfaceOutputTypeRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getSharedSurfaceOutputTypeResponse.FromString,
                _registered_method=True)
        self.getRealTime = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getRealTime',
                request_serializer=apirender__pb2.ApiRenderEngine.getRealTimeRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getRealTimeResponse.FromString,
                _registered_method=True)
        self.pauseRendering = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/pauseRendering',
                request_serializer=apirender__pb2.ApiRenderEngine.pauseRenderingRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.continueRendering = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/continueRendering',
                request_serializer=apirender__pb2.ApiRenderEngine.continueRenderingRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.isRenderingPaused = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/isRenderingPaused',
                request_serializer=apirender__pb2.ApiRenderEngine.isRenderingPausedRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.isRenderingPausedResponse.FromString,
                _registered_method=True)
        self.restartRendering = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/restartRendering',
                request_serializer=apirender__pb2.ApiRenderEngine.restartRenderingRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.stopRendering = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/stopRendering',
                request_serializer=apirender__pb2.ApiRenderEngine.stopRenderingRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.pick = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/pick',
                request_serializer=apirender__pb2.ApiRenderEngine.pickRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.pickResponse.FromString,
                _registered_method=True)
        self.pickWhitePoint = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/pickWhitePoint',
                request_serializer=apirender__pb2.ApiRenderEngine.pickWhitePointRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.pickWhitePointResponse.FromString,
                _registered_method=True)
        self.pickImagerWhitePoint = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/pickImagerWhitePoint',
                request_serializer=apirender__pb2.ApiRenderEngine.pickImagerWhitePointRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.pickImagerWhitePointResponse.FromString,
                _registered_method=True)
        self.isOutputAovWhitePointPickable = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/isOutputAovWhitePointPickable',
                request_serializer=apirender__pb2.ApiRenderEngine.isOutputAovWhitePointPickableRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.isOutputAovWhitePointPickableResponse.FromString,
                _registered_method=True)
        self.pickOutputAovWhitePoint = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/pickOutputAovWhitePoint',
                request_serializer=apirender__pb2.ApiRenderEngine.pickOutputAovWhitePointRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.pickOutputAovWhitePointResponse.FromString,
                _registered_method=True)
        self.pickCryptomatteMatte = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/pickCryptomatteMatte',
                request_serializer=apirender__pb2.ApiRenderEngine.pickCryptomatteMatteRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.pickCryptomatteMatteResponse.FromString,
                _registered_method=True)
        self.modifyCryptomatteMatteSelection = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/modifyCryptomatteMatteSelection',
                request_serializer=apirender__pb2.ApiRenderEngine.modifyCryptomatteMatteSelectionRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.modifyCryptomatteMatteSelectionResponse.FromString,
                _registered_method=True)
        self.toString = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/toString',
                request_serializer=apirender__pb2.ApiRenderEngine.toStringRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.toStringResponse.FromString,
                _registered_method=True)
        self.getDevicePciIds = channel.unary_unary(
                '/octaneapi.ApiRenderEngineService/getDevicePciIds',
                request_serializer=apirender__pb2.ApiRenderEngine.getDevicePciIdsRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderEngine.getDevicePciIdsResponse.FromString,
                _registered_method=True)


class ApiRenderEngineServiceServicer(object):
    """GRPC interface definition for class 'ApiDeviceMemoryUsage' from 'apirender.h'

    GRPC interface definition for class 'ApiDeviceResourceStatistics' from 'apirender.h'

    GRPC interface definition for class 'ApiGeometryStatistics' from 'apirender.h'

    GRPC interface definition for class 'ApiRenderEngine' from 'apirender.h'
    """

    def setRenderTargetNode(self, request, context):
        """/ Sets the render target node that should be rendered
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRenderTargetNode(self, request, context):
        """/ Returns render target node that's currently being rendered (can be NULL)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRenderGeometryNode(self, request, context):
        """/ Returns the geometry root node that's currently being rendered (can be NULL)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRenderCameraNode(self, request, context):
        """/ Returns the camera node that's currently being rendered (can be NULL)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setRenderRegion(self, request, context):
        """/ Sets the render region
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRenderRegion(self, request, context):
        """/ Fetches the current render region settings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setAsyncTonemapParams(self, request, context):
        """/ Sets parameters for asynchronous tonemapping
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setAsyncTonemapParams1(self, request, context):
        """/ Convenience overload that does the same thing as:
        /
        /     auto info = ApiOutputColorSpaceInfo::createKnownColorSpace(colorSpace, false);
        /     setAsyncTonemapParams(
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def asyncTonemapBufferType(self, request, context):
        """/ Returns the current asynchronous tonemap buffer type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def asyncTonemapCryptomatteFalseColor(self, request, context):
        """/ Returns the current value of whether to apply false color to cryptomatte passes for
        / asynchronous tonemapping
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def asyncTonemapOutputColorSpaceInfo(self, request, context):
        """/ Returns the current asynchronous tonemap output color space info
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def asyncTonemapColorSpace(self, request, context):
        """/ Returns the current asynchronous tonemap output color space
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def asyncTonemapPremultipliedAlphaType(self, request, context):
        """/ Returns the current asynchronous tonemap premultiplied alpha type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setAsyncTonemapRenderPasses(self, request, context):
        """/ Sets the render passes that are tonemapped all the time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def asyncTonemapRenderPasses(self, request, context):
        """/ Returns the set of tonemap render passes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getEnabledAovs(self, request, context):
        """/ Returns the render AOVs and output AOVs that are enabled in the specified render target
        / node as a set of render pass IDs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def freeTonemapPasses(self, request, context):
        """/ Frees the set of tonemap passes returned by 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def displayRenderPassId(self, request, context):
        """/ Returns the display pass in the current render
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setSubSampleMode(self, request, context):
        """/ Sets the sub-sampling mode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSubSampleMode(self, request, context):
        """/ Returns the current sub-sampling mode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setClayMode(self, request, context):
        """/ Sets the current clay render mode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clayMode(self, request, context):
        """/ Returns the current clay mode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fps(self, request, context):
        """/ Returns the current fps
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setFps(self, request, context):
        """/ Sets the current fps
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isCompiling(self, request, context):
        """/ Returns TRUE if the render engine is currently running a compilation job
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isCompressingTextures(self, request, context):
        """/ Deprecated, this returns the same value as hasPendingRenderData()
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasPendingRenderData(self, request, context):
        """/ Returns TRUE if there is render data that has not finished compiling
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCurrentChangeLevel(self, request, context):
        """/ Returns the change level after the last update
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRenderImageChangeLevel(self, request, context):
        """/ Returns the change level of the last rendered image, which can be lower than
        / getCurrentChangeLevel()
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRenderRestartedChangeLevel(self, request, context):
        """/ Returns the change level of the last time the rendering was restarted
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setAsyncUpdateCallback(self, request, context):
        """/ Registers an asynchronous update callback
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updatesAreAsync(self, request, context):
        """/ Checks if updates are done asynchronously
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isImageReady(self, request, context):
        """/ 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resetImageReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isRenderFailure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resetRenderFailure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setOnTileBlendedCallback(self, request, context):
        """/ Registers a callback with the render target that is called when a tile was blended in one
        / of the two render films and the render statistics did not change
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setOnNewStatisticsCallback(self, request, context):
        """/ Registers a callback with the render target that is called when the statistics in the
        / render target changed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setOnNewImageCallback(self, request, context):
        """/ Registers a callback with the render target that is called when a new tonemapped result
        / is available
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setOnOcioErrorCallback(self, request, context):
        """/ Registers a callback with the render target that is called when OCIO errors are encountered
        / when updating render data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setOnRenderFailureCallback(self, request, context):
        """/ Registers a callback with the render target that is called when rendering fails
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setForceCallbacksInRenderThreads(self, request, context):
        """/ Forces render engine callbacks to be made in render threads instead of the main message
        / thread
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def grabRenderResult(self, request, context):
        """/ Grabs the latest render result in the passed in array
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def releaseRenderResult(self, request, context):
        """/ Releases the results again so that the engine can reuse it
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def synchronousTonemap(self, request, context):
        """/ Runs a synchronous tonemap and returns the result
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def synchronousTonemap1(self, request, context):
        """/ Convenience overload that does the same thing as:
        /
        /     auto info = ApiOutputColorSpaceInfo::createKnownColorSpace(colorSpace, false);
        /     auto result = synchronousTonemap(
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def synchronousTonemapAllRenderPasses(self, request, context):
        """/ Runs a synchronous tonemap for all render passes that are already started by the render 
        / engine and returns the results
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def synchronousTonemapAllRenderPasses1(self, request, context):
        """/ Convenience overload that does the same thing as:
        /
        /     auto info = ApiOutputColorSpaceInfo::createKnownColorSpace(colorSpace, false);
        /     auto result = synchronousTonemapAllRenderPasses(
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRenderStatistics(self, request, context):
        """/ Returns the statistics for the current render progress
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRenderResultStatistics(self, request, context):
        """/ Returns the statistics for the render results
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveImage(self, request, context):
        """/ Saves the current result of the render target to the specified file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveImage1(self, request, context):
        """/ Convenience overload that does the same thing as:
        /
        /     auto info = ApiOutputColorSpaceInfo::createKnownColorSpace(colorSpace, false);
        /     auto result = saveImage(
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveImage2(self, request, context):
        """/ Saves the current result of the render target to the specified file using provided export settings
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveRenderPasses(self, request, context):
        """/ Saves the render passes as discrete files in the provided output directory
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveRenderPasses1(self, request, context):
        """/ Convenience overload that does the same thing as:
        /
        /     auto info = ApiOutputColorSpaceInfo::createKnownColorSpace(colorSpace, false);
        /     auto result = saveRenderPasses(
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveRenderPasses2(self, request, context):
        """/ Saves the render passes as discrete files in the provided output directory
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveRenderPassesMultiExr(self, request, context):
        """/ Saves the render passes in a multi layer EXR file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveRenderPassesMultiExr1(self, request, context):
        """/ Convenience overload that does the same thing as:
        /
        /     auto info = ApiOutputColorSpaceInfo::createKnownColorSpace(colorSpace, false);
        /     auto result = saveRenderPassesMultiExr(
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveRenderPassesDeepExr(self, request, context):
        """/ Saves the render passes in a deep image EXR file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deepImageEnabled(self, request, context):
        """/ Checks whether the provided render target both supports and has enabled deep pixel rendering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deepImageEnabled1(self, request, context):
        """/ Checks if deep image rendering is enabled for the current render task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deepPassesEnabled(self, request, context):
        """/ Checks if deep image rendering and deep render AOVs are enabled for the current render task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def canSaveDeepImage(self, request, context):
        """/ Checks if we can save a deep image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveDeepImage(self, request, context):
        """/ Saves the current render as a deep image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveRenderState(self, request, context):
        """/ Saves the current render state plus a reference to the project file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loadRenderState(self, request, context):
        """/ Loads an Octane render state file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def previewMaterial(self, request, context):
        """/ Renders a preview image of a texture / material node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def previewMaterialHdr(self, request, context):
        """/ Same as above but return HDR buffer
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def previewMaterial1(self, request, context):
        """/ Preview a material or texture node
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMemoryUsage(self, request, context):
        """/ Returns the overall memory usage of a device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getResourceStatistics(self, request, context):
        """/ Returns memory usage statistics for a device
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGeometryStatistics(self, request, context):
        """/ Returns the geometry statistics of the current scene
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTexturesStatistics(self, request, context):
        """/ Returns the texture usage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSceneBounds(self, request, context):
        """/ If the currently rendered scene contains geometry, its bounding box is stored in the
        / provided vectors and TRUE is returned
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDeviceCount(self, request, context):
        """/ Returns the number of render devices (GPUs) in this machine
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDeviceComputeModel(self, request, context):
        """/ Returns the compute model of the device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDeviceName(self, request, context):
        """/ Returns the name of the device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isSupportedDevice(self, request, context):
        """/ Returns TRUE if the device with the provided index is supported by Octane, i
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deviceCanRender(self, request, context):
        """/ Returns TRUE if the device with the provided index can be used for rendering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deviceCanDenoise(self, request, context):
        """/ Returns TRUE if the device with the provided index can be used for denoising
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deviceSupportsHardwareRayTracing(self, request, context):
        """/ Returns TRUE if the device with the provided index supports hardware ray-tracing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deviceSharedSurfaceInfo(self, request, context):
        """/ Returns details of the shared surface capabilities of the device with the provided index
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAvailablePeerToPeerPairs(self, request, context):
        """/ Returns an array of available peer-to-peer (NVlink) pairs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setDevicesActivity(self, request, context):
        """/ List of devices to enable for rendering and denoising
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isDeviceUsedForRendering(self, request, context):
        """/ Returns TRUE if the device is used for rendering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deviceUsesPriority(self, request, context):
        """/ Returns TRUE if the device with index uses render priority
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deviceUsesHardwareRayTracing(self, request, context):
        """/ Returns TRUE if the device at the provided index is using hardware ray-tracing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def imageDeviceIndex(self, request, context):
        """/ Returns the index of the device used for imaging, or -1 if no device is capable
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isDeviceUsedForDenoising(self, request, context):
        """/ Returns TRUE if the device is used for denoising
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def renderPriority(self, request, context):
        """/ Returns the current render priority
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setRenderPriority(self, request, context):
        """/ Sets the current render priority
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def currentPeerToPeerGroups(self, request, context):
        """/ Returns the current peer-to-peer configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hardwareRayTracingEnabled(self, request, context):
        """/ Returns TRUE if hardware raytracing is currently enabled for all devices with support for it
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openDeviceSettings(self, request, context):
        """/ Opens a modal dialog to allow the user to set devices configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def renderDeviceState(self, request, context):
        """/ Returns the state of the device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def renderDeviceErrorCode(self, request, context):
        """/ Returns the error state of a device or RENDER_ERROR_NONE if the device has not failed or
        / is not active
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def errorcodeToString(self, request, context):
        """/ Returns the error state of a device as string or an empty string if the device is not in an
        / error state or is not active
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def renderDeviceErrorMessage(self, request, context):
        """/ Returns the (low-level) error message that triggered the device to fail or an empty string
        / if it hasn't failed or isn't active
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveRenderDeviceConfig(self, request, context):
        """/ Saves the current render device configuration (device activity and priority usage in the
        / Octane preferences, which are shared between Octane Standalone and all plugins)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def outOfCoreEnabled(self, request, context):
        """/ Returns true if out-of-core textures are enabled
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def enableOutOfCore(self, request, context):
        """/ Enable out-of-core textures and geometry, or update the maximum amount of system memory
        / to allow for use
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disableOutOfCore(self, request, context):
        """/ Disables out-of-core
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getOutOfCoreMemoryUsage(self, request, context):
        """/ Returns RAM usage by out-of-core textures
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setGpuHeadroom(self, request, context):
        """/ To run the render kernels successfully, there needs to be some amount of free GPU memory
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGpuHeadroom(self, request, context):
        """/ Gets the GPU headroom value
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setCoreLimit(self, request, context):
        """/ Sets the maximum number of system cores to use for the following subsystems:
        / 1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disableCoreLimit(self, request, context):
        """/ Disables the core limit, meaning Octane will use all cores available for the subsystems
        / listed in the comments above on setCoreLimit()
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerInputSharedSurface(self, request, context):
        """/ Registers a shared surface to be used for compositor input
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unregisterInputSharedSurface(self, request, context):
        """/ Unregisters an input shared surface that was registered with registerInputSharedSurface
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def triggerAsyncTonemap(self, request, context):
        """/ Causes an asynchronous tonemap operation to run even if one wouldn't otherwise have been
        / run
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setSharedSurfaceOutputType(self, request, context):
        """/ Sets the shared surface output type and whether to use real time mode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSharedSurfaceOutputType(self, request, context):
        """/ Gets the current shared surface output type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRealTime(self, request, context):
        """/ Gets whether the renderer is in real time mode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pauseRendering(self, request, context):
        """/ Pauses rendering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def continueRendering(self, request, context):
        """/ Continues rendering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isRenderingPaused(self, request, context):
        """/ Returns TRUE if rendering is currently paused
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def restartRendering(self, request, context):
        """/ Restarts the rendering, i
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopRendering(self, request, context):
        """/ Stops the rendering completely, i
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pick(self, request, context):
        """/ Shoots a viewing ray from the camera through the specified pixel and records all
        / intersections with the scene ordered by distance from camera
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pickWhitePoint(self, request, context):
        """/ 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pickImagerWhitePoint(self, request, context):
        """/ Determines the average color around a specified location in the main beauty pass and
        / calculates the required color to white balance those pixels, i
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isOutputAovWhitePointPickable(self, request, context):
        """/ Checks whether a white point is pickable for a given output AOV and "Adjust white balance"
        / output AOV layer node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pickOutputAovWhitePoint(self, request, context):
        """/ Determines the average color around a specified location before applying an "Adjust white
        / balance" output AOV layer while compositing an output AOV, and calculates the required white
        / point to use for the layer so that it will make that location neutral
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pickCryptomatteMatte(self, request, context):
        """/ Gets the name of the cryptomatte matte with the most coverage at a given position
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def modifyCryptomatteMatteSelection(self, request, context):
        """/ Modifies a cryptomatte matte selection string (e
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def toString(self, request, context):
        """/ Returns a human readable string for a render priority
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDevicePciIds(self, request, context):
        """/ Returns PCI bus and device ids of the device
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiRenderEngineServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'setRenderTargetNode': grpc.unary_unary_rpc_method_handler(
                    servicer.setRenderTargetNode,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setRenderTargetNodeRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.setRenderTargetNodeResponse.SerializeToString,
            ),
            'getRenderTargetNode': grpc.unary_unary_rpc_method_handler(
                    servicer.getRenderTargetNode,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getRenderTargetNodeRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getRenderTargetNodeResponse.SerializeToString,
            ),
            'getRenderGeometryNode': grpc.unary_unary_rpc_method_handler(
                    servicer.getRenderGeometryNode,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getRenderGeometryNodeRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getRenderGeometryNodeResponse.SerializeToString,
            ),
            'getRenderCameraNode': grpc.unary_unary_rpc_method_handler(
                    servicer.getRenderCameraNode,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getRenderCameraNodeRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getRenderCameraNodeResponse.SerializeToString,
            ),
            'setRenderRegion': grpc.unary_unary_rpc_method_handler(
                    servicer.setRenderRegion,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setRenderRegionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getRenderRegion': grpc.unary_unary_rpc_method_handler(
                    servicer.getRenderRegion,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getRenderRegionRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getRenderRegionResponse.SerializeToString,
            ),
            'setAsyncTonemapParams': grpc.unary_unary_rpc_method_handler(
                    servicer.setAsyncTonemapParams,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setAsyncTonemapParamsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'setAsyncTonemapParams1': grpc.unary_unary_rpc_method_handler(
                    servicer.setAsyncTonemapParams1,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setAsyncTonemapParams1Request.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'asyncTonemapBufferType': grpc.unary_unary_rpc_method_handler(
                    servicer.asyncTonemapBufferType,
                    request_deserializer=apirender__pb2.ApiRenderEngine.asyncTonemapBufferTypeRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.asyncTonemapBufferTypeResponse.SerializeToString,
            ),
            'asyncTonemapCryptomatteFalseColor': grpc.unary_unary_rpc_method_handler(
                    servicer.asyncTonemapCryptomatteFalseColor,
                    request_deserializer=apirender__pb2.ApiRenderEngine.asyncTonemapCryptomatteFalseColorRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.asyncTonemapCryptomatteFalseColorResponse.SerializeToString,
            ),
            'asyncTonemapOutputColorSpaceInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.asyncTonemapOutputColorSpaceInfo,
                    request_deserializer=apirender__pb2.ApiRenderEngine.asyncTonemapOutputColorSpaceInfoRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.asyncTonemapOutputColorSpaceInfoResponse.SerializeToString,
            ),
            'asyncTonemapColorSpace': grpc.unary_unary_rpc_method_handler(
                    servicer.asyncTonemapColorSpace,
                    request_deserializer=apirender__pb2.ApiRenderEngine.asyncTonemapColorSpaceRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.asyncTonemapColorSpaceResponse.SerializeToString,
            ),
            'asyncTonemapPremultipliedAlphaType': grpc.unary_unary_rpc_method_handler(
                    servicer.asyncTonemapPremultipliedAlphaType,
                    request_deserializer=apirender__pb2.ApiRenderEngine.asyncTonemapPremultipliedAlphaTypeRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.asyncTonemapPremultipliedAlphaTypeResponse.SerializeToString,
            ),
            'setAsyncTonemapRenderPasses': grpc.unary_unary_rpc_method_handler(
                    servicer.setAsyncTonemapRenderPasses,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setAsyncTonemapRenderPassesRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.setAsyncTonemapRenderPassesResponse.SerializeToString,
            ),
            'asyncTonemapRenderPasses': grpc.unary_unary_rpc_method_handler(
                    servicer.asyncTonemapRenderPasses,
                    request_deserializer=apirender__pb2.ApiRenderEngine.asyncTonemapRenderPassesRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getEnabledAovs': grpc.unary_unary_rpc_method_handler(
                    servicer.getEnabledAovs,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getEnabledAovsRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getEnabledAovsResponse.SerializeToString,
            ),
            'freeTonemapPasses': grpc.unary_unary_rpc_method_handler(
                    servicer.freeTonemapPasses,
                    request_deserializer=apirender__pb2.ApiRenderEngine.freeTonemapPassesRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'displayRenderPassId': grpc.unary_unary_rpc_method_handler(
                    servicer.displayRenderPassId,
                    request_deserializer=apirender__pb2.ApiRenderEngine.displayRenderPassIdRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.displayRenderPassIdResponse.SerializeToString,
            ),
            'setSubSampleMode': grpc.unary_unary_rpc_method_handler(
                    servicer.setSubSampleMode,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setSubSampleModeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getSubSampleMode': grpc.unary_unary_rpc_method_handler(
                    servicer.getSubSampleMode,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getSubSampleModeRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getSubSampleModeResponse.SerializeToString,
            ),
            'setClayMode': grpc.unary_unary_rpc_method_handler(
                    servicer.setClayMode,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setClayModeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'clayMode': grpc.unary_unary_rpc_method_handler(
                    servicer.clayMode,
                    request_deserializer=apirender__pb2.ApiRenderEngine.clayModeRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.clayModeResponse.SerializeToString,
            ),
            'fps': grpc.unary_unary_rpc_method_handler(
                    servicer.fps,
                    request_deserializer=apirender__pb2.ApiRenderEngine.fpsRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.fpsResponse.SerializeToString,
            ),
            'setFps': grpc.unary_unary_rpc_method_handler(
                    servicer.setFps,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setFpsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'isCompiling': grpc.unary_unary_rpc_method_handler(
                    servicer.isCompiling,
                    request_deserializer=apirender__pb2.ApiRenderEngine.isCompilingRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.isCompilingResponse.SerializeToString,
            ),
            'isCompressingTextures': grpc.unary_unary_rpc_method_handler(
                    servicer.isCompressingTextures,
                    request_deserializer=apirender__pb2.ApiRenderEngine.isCompressingTexturesRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.isCompressingTexturesResponse.SerializeToString,
            ),
            'hasPendingRenderData': grpc.unary_unary_rpc_method_handler(
                    servicer.hasPendingRenderData,
                    request_deserializer=apirender__pb2.ApiRenderEngine.hasPendingRenderDataRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.hasPendingRenderDataResponse.SerializeToString,
            ),
            'getCurrentChangeLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.getCurrentChangeLevel,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getCurrentChangeLevelRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getCurrentChangeLevelResponse.SerializeToString,
            ),
            'getRenderImageChangeLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.getRenderImageChangeLevel,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getRenderImageChangeLevelRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getRenderImageChangeLevelResponse.SerializeToString,
            ),
            'getRenderRestartedChangeLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.getRenderRestartedChangeLevel,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getRenderRestartedChangeLevelRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getRenderRestartedChangeLevelResponse.SerializeToString,
            ),
            'setAsyncUpdateCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.setAsyncUpdateCallback,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setAsyncUpdateCallbackRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.setAsyncUpdateCallbackResponse.SerializeToString,
            ),
            'updatesAreAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.updatesAreAsync,
                    request_deserializer=apirender__pb2.ApiRenderEngine.updatesAreAsyncRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.updatesAreAsyncResponse.SerializeToString,
            ),
            'isImageReady': grpc.unary_unary_rpc_method_handler(
                    servicer.isImageReady,
                    request_deserializer=apirender__pb2.ApiRenderEngine.isImageReadyRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.isImageReadyResponse.SerializeToString,
            ),
            'resetImageReady': grpc.unary_unary_rpc_method_handler(
                    servicer.resetImageReady,
                    request_deserializer=apirender__pb2.ApiRenderEngine.resetImageReadyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'isRenderFailure': grpc.unary_unary_rpc_method_handler(
                    servicer.isRenderFailure,
                    request_deserializer=apirender__pb2.ApiRenderEngine.isRenderFailureRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.isRenderFailureResponse.SerializeToString,
            ),
            'resetRenderFailure': grpc.unary_unary_rpc_method_handler(
                    servicer.resetRenderFailure,
                    request_deserializer=apirender__pb2.ApiRenderEngine.resetRenderFailureRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'setOnTileBlendedCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.setOnTileBlendedCallback,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setOnTileBlendedCallbackRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.setOnTileBlendedCallbackResponse.SerializeToString,
            ),
            'setOnNewStatisticsCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.setOnNewStatisticsCallback,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setOnNewStatisticsCallbackRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.setOnNewStatisticsCallbackResponse.SerializeToString,
            ),
            'setOnNewImageCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.setOnNewImageCallback,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setOnNewImageCallbackRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.setOnNewImageCallbackResponse.SerializeToString,
            ),
            'setOnOcioErrorCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.setOnOcioErrorCallback,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setOnOcioErrorCallbackRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.setOnOcioErrorCallbackResponse.SerializeToString,
            ),
            'setOnRenderFailureCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.setOnRenderFailureCallback,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setOnRenderFailureCallbackRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.setOnRenderFailureCallbackResponse.SerializeToString,
            ),
            'setForceCallbacksInRenderThreads': grpc.unary_unary_rpc_method_handler(
                    servicer.setForceCallbacksInRenderThreads,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setForceCallbacksInRenderThreadsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'grabRenderResult': grpc.unary_unary_rpc_method_handler(
                    servicer.grabRenderResult,
                    request_deserializer=apirender__pb2.ApiRenderEngine.grabRenderResultRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.grabRenderResultResponse.SerializeToString,
            ),
            'releaseRenderResult': grpc.unary_unary_rpc_method_handler(
                    servicer.releaseRenderResult,
                    request_deserializer=apirender__pb2.ApiRenderEngine.releaseRenderResultRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'synchronousTonemap': grpc.unary_unary_rpc_method_handler(
                    servicer.synchronousTonemap,
                    request_deserializer=apirender__pb2.ApiRenderEngine.synchronousTonemapRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.synchronousTonemapResponse.SerializeToString,
            ),
            'synchronousTonemap1': grpc.unary_unary_rpc_method_handler(
                    servicer.synchronousTonemap1,
                    request_deserializer=apirender__pb2.ApiRenderEngine.synchronousTonemap1Request.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.synchronousTonemap1Response.SerializeToString,
            ),
            'synchronousTonemapAllRenderPasses': grpc.unary_unary_rpc_method_handler(
                    servicer.synchronousTonemapAllRenderPasses,
                    request_deserializer=apirender__pb2.ApiRenderEngine.synchronousTonemapAllRenderPassesRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.synchronousTonemapAllRenderPassesResponse.SerializeToString,
            ),
            'synchronousTonemapAllRenderPasses1': grpc.unary_unary_rpc_method_handler(
                    servicer.synchronousTonemapAllRenderPasses1,
                    request_deserializer=apirender__pb2.ApiRenderEngine.synchronousTonemapAllRenderPasses1Request.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.synchronousTonemapAllRenderPasses1Response.SerializeToString,
            ),
            'getRenderStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.getRenderStatistics,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getRenderStatisticsRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getRenderStatisticsResponse.SerializeToString,
            ),
            'getRenderResultStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.getRenderResultStatistics,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getRenderResultStatisticsRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getRenderResultStatisticsResponse.SerializeToString,
            ),
            'saveImage': grpc.unary_unary_rpc_method_handler(
                    servicer.saveImage,
                    request_deserializer=apirender__pb2.ApiRenderEngine.saveImageRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.saveImageResponse.SerializeToString,
            ),
            'saveImage1': grpc.unary_unary_rpc_method_handler(
                    servicer.saveImage1,
                    request_deserializer=apirender__pb2.ApiRenderEngine.saveImage1Request.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.saveImage1Response.SerializeToString,
            ),
            'saveImage2': grpc.unary_unary_rpc_method_handler(
                    servicer.saveImage2,
                    request_deserializer=apirender__pb2.ApiRenderEngine.saveImage2Request.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.saveImage2Response.SerializeToString,
            ),
            'saveRenderPasses': grpc.unary_unary_rpc_method_handler(
                    servicer.saveRenderPasses,
                    request_deserializer=apirender__pb2.ApiRenderEngine.saveRenderPassesRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.saveRenderPassesResponse.SerializeToString,
            ),
            'saveRenderPasses1': grpc.unary_unary_rpc_method_handler(
                    servicer.saveRenderPasses1,
                    request_deserializer=apirender__pb2.ApiRenderEngine.saveRenderPasses1Request.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.saveRenderPasses1Response.SerializeToString,
            ),
            'saveRenderPasses2': grpc.unary_unary_rpc_method_handler(
                    servicer.saveRenderPasses2,
                    request_deserializer=apirender__pb2.ApiRenderEngine.saveRenderPasses2Request.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.saveRenderPasses2Response.SerializeToString,
            ),
            'saveRenderPassesMultiExr': grpc.unary_unary_rpc_method_handler(
                    servicer.saveRenderPassesMultiExr,
                    request_deserializer=apirender__pb2.ApiRenderEngine.saveRenderPassesMultiExrRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.saveRenderPassesMultiExrResponse.SerializeToString,
            ),
            'saveRenderPassesMultiExr1': grpc.unary_unary_rpc_method_handler(
                    servicer.saveRenderPassesMultiExr1,
                    request_deserializer=apirender__pb2.ApiRenderEngine.saveRenderPassesMultiExr1Request.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.saveRenderPassesMultiExr1Response.SerializeToString,
            ),
            'saveRenderPassesDeepExr': grpc.unary_unary_rpc_method_handler(
                    servicer.saveRenderPassesDeepExr,
                    request_deserializer=apirender__pb2.ApiRenderEngine.saveRenderPassesDeepExrRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.saveRenderPassesDeepExrResponse.SerializeToString,
            ),
            'deepImageEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.deepImageEnabled,
                    request_deserializer=apirender__pb2.ApiRenderEngine.deepImageEnabledRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.deepImageEnabledResponse.SerializeToString,
            ),
            'deepImageEnabled1': grpc.unary_unary_rpc_method_handler(
                    servicer.deepImageEnabled1,
                    request_deserializer=apirender__pb2.ApiRenderEngine.deepImageEnabled1Request.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.deepImageEnabled1Response.SerializeToString,
            ),
            'deepPassesEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.deepPassesEnabled,
                    request_deserializer=apirender__pb2.ApiRenderEngine.deepPassesEnabledRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.deepPassesEnabledResponse.SerializeToString,
            ),
            'canSaveDeepImage': grpc.unary_unary_rpc_method_handler(
                    servicer.canSaveDeepImage,
                    request_deserializer=apirender__pb2.ApiRenderEngine.canSaveDeepImageRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.canSaveDeepImageResponse.SerializeToString,
            ),
            'saveDeepImage': grpc.unary_unary_rpc_method_handler(
                    servicer.saveDeepImage,
                    request_deserializer=apirender__pb2.ApiRenderEngine.saveDeepImageRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.saveDeepImageResponse.SerializeToString,
            ),
            'saveRenderState': grpc.unary_unary_rpc_method_handler(
                    servicer.saveRenderState,
                    request_deserializer=apirender__pb2.ApiRenderEngine.saveRenderStateRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.saveRenderStateResponse.SerializeToString,
            ),
            'loadRenderState': grpc.unary_unary_rpc_method_handler(
                    servicer.loadRenderState,
                    request_deserializer=apirender__pb2.ApiRenderEngine.loadRenderStateRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.loadRenderStateResponse.SerializeToString,
            ),
            'previewMaterial': grpc.unary_unary_rpc_method_handler(
                    servicer.previewMaterial,
                    request_deserializer=apirender__pb2.ApiRenderEngine.previewMaterialRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.previewMaterialResponse.SerializeToString,
            ),
            'previewMaterialHdr': grpc.unary_unary_rpc_method_handler(
                    servicer.previewMaterialHdr,
                    request_deserializer=apirender__pb2.ApiRenderEngine.previewMaterialHdrRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.previewMaterialHdrResponse.SerializeToString,
            ),
            'previewMaterial1': grpc.unary_unary_rpc_method_handler(
                    servicer.previewMaterial1,
                    request_deserializer=apirender__pb2.ApiRenderEngine.previewMaterial1Request.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.previewMaterial1Response.SerializeToString,
            ),
            'getMemoryUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.getMemoryUsage,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getMemoryUsageRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getMemoryUsageResponse.SerializeToString,
            ),
            'getResourceStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.getResourceStatistics,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getResourceStatisticsRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getResourceStatisticsResponse.SerializeToString,
            ),
            'getGeometryStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.getGeometryStatistics,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getGeometryStatisticsRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getGeometryStatisticsResponse.SerializeToString,
            ),
            'getTexturesStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.getTexturesStatistics,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getTexturesStatisticsRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getTexturesStatisticsResponse.SerializeToString,
            ),
            'getSceneBounds': grpc.unary_unary_rpc_method_handler(
                    servicer.getSceneBounds,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getSceneBoundsRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getSceneBoundsResponse.SerializeToString,
            ),
            'getDeviceCount': grpc.unary_unary_rpc_method_handler(
                    servicer.getDeviceCount,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getDeviceCountRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getDeviceCountResponse.SerializeToString,
            ),
            'getDeviceComputeModel': grpc.unary_unary_rpc_method_handler(
                    servicer.getDeviceComputeModel,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getDeviceComputeModelRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getDeviceComputeModelResponse.SerializeToString,
            ),
            'getDeviceName': grpc.unary_unary_rpc_method_handler(
                    servicer.getDeviceName,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getDeviceNameRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getDeviceNameResponse.SerializeToString,
            ),
            'isSupportedDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.isSupportedDevice,
                    request_deserializer=apirender__pb2.ApiRenderEngine.isSupportedDeviceRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.isSupportedDeviceResponse.SerializeToString,
            ),
            'deviceCanRender': grpc.unary_unary_rpc_method_handler(
                    servicer.deviceCanRender,
                    request_deserializer=apirender__pb2.ApiRenderEngine.deviceCanRenderRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.deviceCanRenderResponse.SerializeToString,
            ),
            'deviceCanDenoise': grpc.unary_unary_rpc_method_handler(
                    servicer.deviceCanDenoise,
                    request_deserializer=apirender__pb2.ApiRenderEngine.deviceCanDenoiseRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.deviceCanDenoiseResponse.SerializeToString,
            ),
            'deviceSupportsHardwareRayTracing': grpc.unary_unary_rpc_method_handler(
                    servicer.deviceSupportsHardwareRayTracing,
                    request_deserializer=apirender__pb2.ApiRenderEngine.deviceSupportsHardwareRayTracingRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.deviceSupportsHardwareRayTracingResponse.SerializeToString,
            ),
            'deviceSharedSurfaceInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.deviceSharedSurfaceInfo,
                    request_deserializer=apirender__pb2.ApiRenderEngine.deviceSharedSurfaceInfoRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.deviceSharedSurfaceInfoResponse.SerializeToString,
            ),
            'getAvailablePeerToPeerPairs': grpc.unary_unary_rpc_method_handler(
                    servicer.getAvailablePeerToPeerPairs,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getAvailablePeerToPeerPairsRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getAvailablePeerToPeerPairsResponse.SerializeToString,
            ),
            'setDevicesActivity': grpc.unary_unary_rpc_method_handler(
                    servicer.setDevicesActivity,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setDevicesActivityRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.setDevicesActivityResponse.SerializeToString,
            ),
            'isDeviceUsedForRendering': grpc.unary_unary_rpc_method_handler(
                    servicer.isDeviceUsedForRendering,
                    request_deserializer=apirender__pb2.ApiRenderEngine.isDeviceUsedForRenderingRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.isDeviceUsedForRenderingResponse.SerializeToString,
            ),
            'deviceUsesPriority': grpc.unary_unary_rpc_method_handler(
                    servicer.deviceUsesPriority,
                    request_deserializer=apirender__pb2.ApiRenderEngine.deviceUsesPriorityRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.deviceUsesPriorityResponse.SerializeToString,
            ),
            'deviceUsesHardwareRayTracing': grpc.unary_unary_rpc_method_handler(
                    servicer.deviceUsesHardwareRayTracing,
                    request_deserializer=apirender__pb2.ApiRenderEngine.deviceUsesHardwareRayTracingRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.deviceUsesHardwareRayTracingResponse.SerializeToString,
            ),
            'imageDeviceIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.imageDeviceIndex,
                    request_deserializer=apirender__pb2.ApiRenderEngine.imageDeviceIndexRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.imageDeviceIndexResponse.SerializeToString,
            ),
            'isDeviceUsedForDenoising': grpc.unary_unary_rpc_method_handler(
                    servicer.isDeviceUsedForDenoising,
                    request_deserializer=apirender__pb2.ApiRenderEngine.isDeviceUsedForDenoisingRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.isDeviceUsedForDenoisingResponse.SerializeToString,
            ),
            'renderPriority': grpc.unary_unary_rpc_method_handler(
                    servicer.renderPriority,
                    request_deserializer=apirender__pb2.ApiRenderEngine.renderPriorityRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.renderPriorityResponse.SerializeToString,
            ),
            'setRenderPriority': grpc.unary_unary_rpc_method_handler(
                    servicer.setRenderPriority,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setRenderPriorityRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'currentPeerToPeerGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.currentPeerToPeerGroups,
                    request_deserializer=apirender__pb2.ApiRenderEngine.currentPeerToPeerGroupsRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.currentPeerToPeerGroupsResponse.SerializeToString,
            ),
            'hardwareRayTracingEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.hardwareRayTracingEnabled,
                    request_deserializer=apirender__pb2.ApiRenderEngine.hardwareRayTracingEnabledRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.hardwareRayTracingEnabledResponse.SerializeToString,
            ),
            'openDeviceSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.openDeviceSettings,
                    request_deserializer=apirender__pb2.ApiRenderEngine.openDeviceSettingsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'renderDeviceState': grpc.unary_unary_rpc_method_handler(
                    servicer.renderDeviceState,
                    request_deserializer=apirender__pb2.ApiRenderEngine.renderDeviceStateRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.renderDeviceStateResponse.SerializeToString,
            ),
            'renderDeviceErrorCode': grpc.unary_unary_rpc_method_handler(
                    servicer.renderDeviceErrorCode,
                    request_deserializer=apirender__pb2.ApiRenderEngine.renderDeviceErrorCodeRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.renderDeviceErrorCodeResponse.SerializeToString,
            ),
            'errorcodeToString': grpc.unary_unary_rpc_method_handler(
                    servicer.errorcodeToString,
                    request_deserializer=apirender__pb2.ApiRenderEngine.errorcodeToStringRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.errorcodeToStringResponse.SerializeToString,
            ),
            'renderDeviceErrorMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.renderDeviceErrorMessage,
                    request_deserializer=apirender__pb2.ApiRenderEngine.renderDeviceErrorMessageRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.renderDeviceErrorMessageResponse.SerializeToString,
            ),
            'saveRenderDeviceConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.saveRenderDeviceConfig,
                    request_deserializer=apirender__pb2.ApiRenderEngine.saveRenderDeviceConfigRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'outOfCoreEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.outOfCoreEnabled,
                    request_deserializer=apirender__pb2.ApiRenderEngine.outOfCoreEnabledRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.outOfCoreEnabledResponse.SerializeToString,
            ),
            'enableOutOfCore': grpc.unary_unary_rpc_method_handler(
                    servicer.enableOutOfCore,
                    request_deserializer=apirender__pb2.ApiRenderEngine.enableOutOfCoreRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'disableOutOfCore': grpc.unary_unary_rpc_method_handler(
                    servicer.disableOutOfCore,
                    request_deserializer=apirender__pb2.ApiRenderEngine.disableOutOfCoreRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getOutOfCoreMemoryUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.getOutOfCoreMemoryUsage,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getOutOfCoreMemoryUsageRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getOutOfCoreMemoryUsageResponse.SerializeToString,
            ),
            'setGpuHeadroom': grpc.unary_unary_rpc_method_handler(
                    servicer.setGpuHeadroom,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setGpuHeadroomRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getGpuHeadroom': grpc.unary_unary_rpc_method_handler(
                    servicer.getGpuHeadroom,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getGpuHeadroomRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getGpuHeadroomResponse.SerializeToString,
            ),
            'setCoreLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.setCoreLimit,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setCoreLimitRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'disableCoreLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.disableCoreLimit,
                    request_deserializer=apirender__pb2.ApiRenderEngine.disableCoreLimitRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'registerInputSharedSurface': grpc.unary_unary_rpc_method_handler(
                    servicer.registerInputSharedSurface,
                    request_deserializer=apirender__pb2.ApiRenderEngine.registerInputSharedSurfaceRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.registerInputSharedSurfaceResponse.SerializeToString,
            ),
            'unregisterInputSharedSurface': grpc.unary_unary_rpc_method_handler(
                    servicer.unregisterInputSharedSurface,
                    request_deserializer=apirender__pb2.ApiRenderEngine.unregisterInputSharedSurfaceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'triggerAsyncTonemap': grpc.unary_unary_rpc_method_handler(
                    servicer.triggerAsyncTonemap,
                    request_deserializer=apirender__pb2.ApiRenderEngine.triggerAsyncTonemapRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'setSharedSurfaceOutputType': grpc.unary_unary_rpc_method_handler(
                    servicer.setSharedSurfaceOutputType,
                    request_deserializer=apirender__pb2.ApiRenderEngine.setSharedSurfaceOutputTypeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getSharedSurfaceOutputType': grpc.unary_unary_rpc_method_handler(
                    servicer.getSharedSurfaceOutputType,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getSharedSurfaceOutputTypeRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getSharedSurfaceOutputTypeResponse.SerializeToString,
            ),
            'getRealTime': grpc.unary_unary_rpc_method_handler(
                    servicer.getRealTime,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getRealTimeRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getRealTimeResponse.SerializeToString,
            ),
            'pauseRendering': grpc.unary_unary_rpc_method_handler(
                    servicer.pauseRendering,
                    request_deserializer=apirender__pb2.ApiRenderEngine.pauseRenderingRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'continueRendering': grpc.unary_unary_rpc_method_handler(
                    servicer.continueRendering,
                    request_deserializer=apirender__pb2.ApiRenderEngine.continueRenderingRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'isRenderingPaused': grpc.unary_unary_rpc_method_handler(
                    servicer.isRenderingPaused,
                    request_deserializer=apirender__pb2.ApiRenderEngine.isRenderingPausedRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.isRenderingPausedResponse.SerializeToString,
            ),
            'restartRendering': grpc.unary_unary_rpc_method_handler(
                    servicer.restartRendering,
                    request_deserializer=apirender__pb2.ApiRenderEngine.restartRenderingRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'stopRendering': grpc.unary_unary_rpc_method_handler(
                    servicer.stopRendering,
                    request_deserializer=apirender__pb2.ApiRenderEngine.stopRenderingRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'pick': grpc.unary_unary_rpc_method_handler(
                    servicer.pick,
                    request_deserializer=apirender__pb2.ApiRenderEngine.pickRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.pickResponse.SerializeToString,
            ),
            'pickWhitePoint': grpc.unary_unary_rpc_method_handler(
                    servicer.pickWhitePoint,
                    request_deserializer=apirender__pb2.ApiRenderEngine.pickWhitePointRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.pickWhitePointResponse.SerializeToString,
            ),
            'pickImagerWhitePoint': grpc.unary_unary_rpc_method_handler(
                    servicer.pickImagerWhitePoint,
                    request_deserializer=apirender__pb2.ApiRenderEngine.pickImagerWhitePointRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.pickImagerWhitePointResponse.SerializeToString,
            ),
            'isOutputAovWhitePointPickable': grpc.unary_unary_rpc_method_handler(
                    servicer.isOutputAovWhitePointPickable,
                    request_deserializer=apirender__pb2.ApiRenderEngine.isOutputAovWhitePointPickableRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.isOutputAovWhitePointPickableResponse.SerializeToString,
            ),
            'pickOutputAovWhitePoint': grpc.unary_unary_rpc_method_handler(
                    servicer.pickOutputAovWhitePoint,
                    request_deserializer=apirender__pb2.ApiRenderEngine.pickOutputAovWhitePointRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.pickOutputAovWhitePointResponse.SerializeToString,
            ),
            'pickCryptomatteMatte': grpc.unary_unary_rpc_method_handler(
                    servicer.pickCryptomatteMatte,
                    request_deserializer=apirender__pb2.ApiRenderEngine.pickCryptomatteMatteRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.pickCryptomatteMatteResponse.SerializeToString,
            ),
            'modifyCryptomatteMatteSelection': grpc.unary_unary_rpc_method_handler(
                    servicer.modifyCryptomatteMatteSelection,
                    request_deserializer=apirender__pb2.ApiRenderEngine.modifyCryptomatteMatteSelectionRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.modifyCryptomatteMatteSelectionResponse.SerializeToString,
            ),
            'toString': grpc.unary_unary_rpc_method_handler(
                    servicer.toString,
                    request_deserializer=apirender__pb2.ApiRenderEngine.toStringRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.toStringResponse.SerializeToString,
            ),
            'getDevicePciIds': grpc.unary_unary_rpc_method_handler(
                    servicer.getDevicePciIds,
                    request_deserializer=apirender__pb2.ApiRenderEngine.getDevicePciIdsRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderEngine.getDevicePciIdsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiRenderEngineService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiRenderEngineService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiRenderEngineService(object):
    """GRPC interface definition for class 'ApiDeviceMemoryUsage' from 'apirender.h'

    GRPC interface definition for class 'ApiDeviceResourceStatistics' from 'apirender.h'

    GRPC interface definition for class 'ApiGeometryStatistics' from 'apirender.h'

    GRPC interface definition for class 'ApiRenderEngine' from 'apirender.h'
    """

    @staticmethod
    def setRenderTargetNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setRenderTargetNode',
            apirender__pb2.ApiRenderEngine.setRenderTargetNodeRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.setRenderTargetNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getRenderTargetNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getRenderTargetNode',
            apirender__pb2.ApiRenderEngine.getRenderTargetNodeRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getRenderTargetNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getRenderGeometryNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getRenderGeometryNode',
            apirender__pb2.ApiRenderEngine.getRenderGeometryNodeRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getRenderGeometryNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getRenderCameraNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getRenderCameraNode',
            apirender__pb2.ApiRenderEngine.getRenderCameraNodeRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getRenderCameraNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setRenderRegion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setRenderRegion',
            apirender__pb2.ApiRenderEngine.setRenderRegionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getRenderRegion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getRenderRegion',
            apirender__pb2.ApiRenderEngine.getRenderRegionRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getRenderRegionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setAsyncTonemapParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setAsyncTonemapParams',
            apirender__pb2.ApiRenderEngine.setAsyncTonemapParamsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setAsyncTonemapParams1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setAsyncTonemapParams1',
            apirender__pb2.ApiRenderEngine.setAsyncTonemapParams1Request.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def asyncTonemapBufferType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/asyncTonemapBufferType',
            apirender__pb2.ApiRenderEngine.asyncTonemapBufferTypeRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.asyncTonemapBufferTypeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def asyncTonemapCryptomatteFalseColor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/asyncTonemapCryptomatteFalseColor',
            apirender__pb2.ApiRenderEngine.asyncTonemapCryptomatteFalseColorRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.asyncTonemapCryptomatteFalseColorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def asyncTonemapOutputColorSpaceInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/asyncTonemapOutputColorSpaceInfo',
            apirender__pb2.ApiRenderEngine.asyncTonemapOutputColorSpaceInfoRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.asyncTonemapOutputColorSpaceInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def asyncTonemapColorSpace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/asyncTonemapColorSpace',
            apirender__pb2.ApiRenderEngine.asyncTonemapColorSpaceRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.asyncTonemapColorSpaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def asyncTonemapPremultipliedAlphaType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/asyncTonemapPremultipliedAlphaType',
            apirender__pb2.ApiRenderEngine.asyncTonemapPremultipliedAlphaTypeRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.asyncTonemapPremultipliedAlphaTypeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setAsyncTonemapRenderPasses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setAsyncTonemapRenderPasses',
            apirender__pb2.ApiRenderEngine.setAsyncTonemapRenderPassesRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.setAsyncTonemapRenderPassesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def asyncTonemapRenderPasses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/asyncTonemapRenderPasses',
            apirender__pb2.ApiRenderEngine.asyncTonemapRenderPassesRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getEnabledAovs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getEnabledAovs',
            apirender__pb2.ApiRenderEngine.getEnabledAovsRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getEnabledAovsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def freeTonemapPasses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/freeTonemapPasses',
            apirender__pb2.ApiRenderEngine.freeTonemapPassesRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def displayRenderPassId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/displayRenderPassId',
            apirender__pb2.ApiRenderEngine.displayRenderPassIdRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.displayRenderPassIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setSubSampleMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setSubSampleMode',
            apirender__pb2.ApiRenderEngine.setSubSampleModeRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getSubSampleMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getSubSampleMode',
            apirender__pb2.ApiRenderEngine.getSubSampleModeRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getSubSampleModeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setClayMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setClayMode',
            apirender__pb2.ApiRenderEngine.setClayModeRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def clayMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/clayMode',
            apirender__pb2.ApiRenderEngine.clayModeRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.clayModeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def fps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/fps',
            apirender__pb2.ApiRenderEngine.fpsRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.fpsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setFps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setFps',
            apirender__pb2.ApiRenderEngine.setFpsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isCompiling(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/isCompiling',
            apirender__pb2.ApiRenderEngine.isCompilingRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.isCompilingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isCompressingTextures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/isCompressingTextures',
            apirender__pb2.ApiRenderEngine.isCompressingTexturesRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.isCompressingTexturesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def hasPendingRenderData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/hasPendingRenderData',
            apirender__pb2.ApiRenderEngine.hasPendingRenderDataRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.hasPendingRenderDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getCurrentChangeLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getCurrentChangeLevel',
            apirender__pb2.ApiRenderEngine.getCurrentChangeLevelRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getCurrentChangeLevelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getRenderImageChangeLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getRenderImageChangeLevel',
            apirender__pb2.ApiRenderEngine.getRenderImageChangeLevelRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getRenderImageChangeLevelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getRenderRestartedChangeLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getRenderRestartedChangeLevel',
            apirender__pb2.ApiRenderEngine.getRenderRestartedChangeLevelRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getRenderRestartedChangeLevelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setAsyncUpdateCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setAsyncUpdateCallback',
            apirender__pb2.ApiRenderEngine.setAsyncUpdateCallbackRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.setAsyncUpdateCallbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updatesAreAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/updatesAreAsync',
            apirender__pb2.ApiRenderEngine.updatesAreAsyncRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.updatesAreAsyncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isImageReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/isImageReady',
            apirender__pb2.ApiRenderEngine.isImageReadyRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.isImageReadyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def resetImageReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/resetImageReady',
            apirender__pb2.ApiRenderEngine.resetImageReadyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isRenderFailure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/isRenderFailure',
            apirender__pb2.ApiRenderEngine.isRenderFailureRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.isRenderFailureResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def resetRenderFailure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/resetRenderFailure',
            apirender__pb2.ApiRenderEngine.resetRenderFailureRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setOnTileBlendedCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setOnTileBlendedCallback',
            apirender__pb2.ApiRenderEngine.setOnTileBlendedCallbackRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.setOnTileBlendedCallbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setOnNewStatisticsCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setOnNewStatisticsCallback',
            apirender__pb2.ApiRenderEngine.setOnNewStatisticsCallbackRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.setOnNewStatisticsCallbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setOnNewImageCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setOnNewImageCallback',
            apirender__pb2.ApiRenderEngine.setOnNewImageCallbackRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.setOnNewImageCallbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setOnOcioErrorCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setOnOcioErrorCallback',
            apirender__pb2.ApiRenderEngine.setOnOcioErrorCallbackRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.setOnOcioErrorCallbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setOnRenderFailureCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setOnRenderFailureCallback',
            apirender__pb2.ApiRenderEngine.setOnRenderFailureCallbackRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.setOnRenderFailureCallbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setForceCallbacksInRenderThreads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setForceCallbacksInRenderThreads',
            apirender__pb2.ApiRenderEngine.setForceCallbacksInRenderThreadsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def grabRenderResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/grabRenderResult',
            apirender__pb2.ApiRenderEngine.grabRenderResultRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.grabRenderResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def releaseRenderResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/releaseRenderResult',
            apirender__pb2.ApiRenderEngine.releaseRenderResultRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def synchronousTonemap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/synchronousTonemap',
            apirender__pb2.ApiRenderEngine.synchronousTonemapRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.synchronousTonemapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def synchronousTonemap1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/synchronousTonemap1',
            apirender__pb2.ApiRenderEngine.synchronousTonemap1Request.SerializeToString,
            apirender__pb2.ApiRenderEngine.synchronousTonemap1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def synchronousTonemapAllRenderPasses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/synchronousTonemapAllRenderPasses',
            apirender__pb2.ApiRenderEngine.synchronousTonemapAllRenderPassesRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.synchronousTonemapAllRenderPassesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def synchronousTonemapAllRenderPasses1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/synchronousTonemapAllRenderPasses1',
            apirender__pb2.ApiRenderEngine.synchronousTonemapAllRenderPasses1Request.SerializeToString,
            apirender__pb2.ApiRenderEngine.synchronousTonemapAllRenderPasses1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getRenderStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getRenderStatistics',
            apirender__pb2.ApiRenderEngine.getRenderStatisticsRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getRenderStatisticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getRenderResultStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getRenderResultStatistics',
            apirender__pb2.ApiRenderEngine.getRenderResultStatisticsRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getRenderResultStatisticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/saveImage',
            apirender__pb2.ApiRenderEngine.saveImageRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.saveImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveImage1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/saveImage1',
            apirender__pb2.ApiRenderEngine.saveImage1Request.SerializeToString,
            apirender__pb2.ApiRenderEngine.saveImage1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveImage2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/saveImage2',
            apirender__pb2.ApiRenderEngine.saveImage2Request.SerializeToString,
            apirender__pb2.ApiRenderEngine.saveImage2Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveRenderPasses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/saveRenderPasses',
            apirender__pb2.ApiRenderEngine.saveRenderPassesRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.saveRenderPassesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveRenderPasses1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/saveRenderPasses1',
            apirender__pb2.ApiRenderEngine.saveRenderPasses1Request.SerializeToString,
            apirender__pb2.ApiRenderEngine.saveRenderPasses1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveRenderPasses2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/saveRenderPasses2',
            apirender__pb2.ApiRenderEngine.saveRenderPasses2Request.SerializeToString,
            apirender__pb2.ApiRenderEngine.saveRenderPasses2Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveRenderPassesMultiExr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/saveRenderPassesMultiExr',
            apirender__pb2.ApiRenderEngine.saveRenderPassesMultiExrRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.saveRenderPassesMultiExrResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveRenderPassesMultiExr1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/saveRenderPassesMultiExr1',
            apirender__pb2.ApiRenderEngine.saveRenderPassesMultiExr1Request.SerializeToString,
            apirender__pb2.ApiRenderEngine.saveRenderPassesMultiExr1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveRenderPassesDeepExr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/saveRenderPassesDeepExr',
            apirender__pb2.ApiRenderEngine.saveRenderPassesDeepExrRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.saveRenderPassesDeepExrResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deepImageEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/deepImageEnabled',
            apirender__pb2.ApiRenderEngine.deepImageEnabledRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.deepImageEnabledResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deepImageEnabled1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/deepImageEnabled1',
            apirender__pb2.ApiRenderEngine.deepImageEnabled1Request.SerializeToString,
            apirender__pb2.ApiRenderEngine.deepImageEnabled1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deepPassesEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/deepPassesEnabled',
            apirender__pb2.ApiRenderEngine.deepPassesEnabledRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.deepPassesEnabledResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def canSaveDeepImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/canSaveDeepImage',
            apirender__pb2.ApiRenderEngine.canSaveDeepImageRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.canSaveDeepImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveDeepImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/saveDeepImage',
            apirender__pb2.ApiRenderEngine.saveDeepImageRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.saveDeepImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveRenderState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/saveRenderState',
            apirender__pb2.ApiRenderEngine.saveRenderStateRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.saveRenderStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def loadRenderState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/loadRenderState',
            apirender__pb2.ApiRenderEngine.loadRenderStateRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.loadRenderStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def previewMaterial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/previewMaterial',
            apirender__pb2.ApiRenderEngine.previewMaterialRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.previewMaterialResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def previewMaterialHdr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/previewMaterialHdr',
            apirender__pb2.ApiRenderEngine.previewMaterialHdrRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.previewMaterialHdrResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def previewMaterial1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/previewMaterial1',
            apirender__pb2.ApiRenderEngine.previewMaterial1Request.SerializeToString,
            apirender__pb2.ApiRenderEngine.previewMaterial1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMemoryUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getMemoryUsage',
            apirender__pb2.ApiRenderEngine.getMemoryUsageRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getMemoryUsageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getResourceStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getResourceStatistics',
            apirender__pb2.ApiRenderEngine.getResourceStatisticsRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getResourceStatisticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getGeometryStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getGeometryStatistics',
            apirender__pb2.ApiRenderEngine.getGeometryStatisticsRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getGeometryStatisticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTexturesStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getTexturesStatistics',
            apirender__pb2.ApiRenderEngine.getTexturesStatisticsRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getTexturesStatisticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getSceneBounds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getSceneBounds',
            apirender__pb2.ApiRenderEngine.getSceneBoundsRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getSceneBoundsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getDeviceCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getDeviceCount',
            apirender__pb2.ApiRenderEngine.getDeviceCountRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getDeviceCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getDeviceComputeModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getDeviceComputeModel',
            apirender__pb2.ApiRenderEngine.getDeviceComputeModelRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getDeviceComputeModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getDeviceName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getDeviceName',
            apirender__pb2.ApiRenderEngine.getDeviceNameRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getDeviceNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isSupportedDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/isSupportedDevice',
            apirender__pb2.ApiRenderEngine.isSupportedDeviceRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.isSupportedDeviceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deviceCanRender(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/deviceCanRender',
            apirender__pb2.ApiRenderEngine.deviceCanRenderRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.deviceCanRenderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deviceCanDenoise(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/deviceCanDenoise',
            apirender__pb2.ApiRenderEngine.deviceCanDenoiseRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.deviceCanDenoiseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deviceSupportsHardwareRayTracing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/deviceSupportsHardwareRayTracing',
            apirender__pb2.ApiRenderEngine.deviceSupportsHardwareRayTracingRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.deviceSupportsHardwareRayTracingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deviceSharedSurfaceInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/deviceSharedSurfaceInfo',
            apirender__pb2.ApiRenderEngine.deviceSharedSurfaceInfoRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.deviceSharedSurfaceInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAvailablePeerToPeerPairs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getAvailablePeerToPeerPairs',
            apirender__pb2.ApiRenderEngine.getAvailablePeerToPeerPairsRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getAvailablePeerToPeerPairsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setDevicesActivity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setDevicesActivity',
            apirender__pb2.ApiRenderEngine.setDevicesActivityRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.setDevicesActivityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isDeviceUsedForRendering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/isDeviceUsedForRendering',
            apirender__pb2.ApiRenderEngine.isDeviceUsedForRenderingRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.isDeviceUsedForRenderingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deviceUsesPriority(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/deviceUsesPriority',
            apirender__pb2.ApiRenderEngine.deviceUsesPriorityRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.deviceUsesPriorityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deviceUsesHardwareRayTracing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/deviceUsesHardwareRayTracing',
            apirender__pb2.ApiRenderEngine.deviceUsesHardwareRayTracingRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.deviceUsesHardwareRayTracingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def imageDeviceIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/imageDeviceIndex',
            apirender__pb2.ApiRenderEngine.imageDeviceIndexRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.imageDeviceIndexResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isDeviceUsedForDenoising(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/isDeviceUsedForDenoising',
            apirender__pb2.ApiRenderEngine.isDeviceUsedForDenoisingRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.isDeviceUsedForDenoisingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def renderPriority(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/renderPriority',
            apirender__pb2.ApiRenderEngine.renderPriorityRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.renderPriorityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setRenderPriority(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setRenderPriority',
            apirender__pb2.ApiRenderEngine.setRenderPriorityRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def currentPeerToPeerGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/currentPeerToPeerGroups',
            apirender__pb2.ApiRenderEngine.currentPeerToPeerGroupsRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.currentPeerToPeerGroupsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def hardwareRayTracingEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/hardwareRayTracingEnabled',
            apirender__pb2.ApiRenderEngine.hardwareRayTracingEnabledRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.hardwareRayTracingEnabledResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def openDeviceSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/openDeviceSettings',
            apirender__pb2.ApiRenderEngine.openDeviceSettingsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def renderDeviceState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/renderDeviceState',
            apirender__pb2.ApiRenderEngine.renderDeviceStateRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.renderDeviceStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def renderDeviceErrorCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/renderDeviceErrorCode',
            apirender__pb2.ApiRenderEngine.renderDeviceErrorCodeRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.renderDeviceErrorCodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def errorcodeToString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/errorcodeToString',
            apirender__pb2.ApiRenderEngine.errorcodeToStringRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.errorcodeToStringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def renderDeviceErrorMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/renderDeviceErrorMessage',
            apirender__pb2.ApiRenderEngine.renderDeviceErrorMessageRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.renderDeviceErrorMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveRenderDeviceConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/saveRenderDeviceConfig',
            apirender__pb2.ApiRenderEngine.saveRenderDeviceConfigRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def outOfCoreEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/outOfCoreEnabled',
            apirender__pb2.ApiRenderEngine.outOfCoreEnabledRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.outOfCoreEnabledResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def enableOutOfCore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/enableOutOfCore',
            apirender__pb2.ApiRenderEngine.enableOutOfCoreRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def disableOutOfCore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/disableOutOfCore',
            apirender__pb2.ApiRenderEngine.disableOutOfCoreRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getOutOfCoreMemoryUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getOutOfCoreMemoryUsage',
            apirender__pb2.ApiRenderEngine.getOutOfCoreMemoryUsageRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getOutOfCoreMemoryUsageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setGpuHeadroom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setGpuHeadroom',
            apirender__pb2.ApiRenderEngine.setGpuHeadroomRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getGpuHeadroom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getGpuHeadroom',
            apirender__pb2.ApiRenderEngine.getGpuHeadroomRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getGpuHeadroomResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setCoreLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setCoreLimit',
            apirender__pb2.ApiRenderEngine.setCoreLimitRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def disableCoreLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/disableCoreLimit',
            apirender__pb2.ApiRenderEngine.disableCoreLimitRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def registerInputSharedSurface(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/registerInputSharedSurface',
            apirender__pb2.ApiRenderEngine.registerInputSharedSurfaceRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.registerInputSharedSurfaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def unregisterInputSharedSurface(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/unregisterInputSharedSurface',
            apirender__pb2.ApiRenderEngine.unregisterInputSharedSurfaceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def triggerAsyncTonemap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/triggerAsyncTonemap',
            apirender__pb2.ApiRenderEngine.triggerAsyncTonemapRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setSharedSurfaceOutputType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/setSharedSurfaceOutputType',
            apirender__pb2.ApiRenderEngine.setSharedSurfaceOutputTypeRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getSharedSurfaceOutputType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getSharedSurfaceOutputType',
            apirender__pb2.ApiRenderEngine.getSharedSurfaceOutputTypeRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getSharedSurfaceOutputTypeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getRealTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getRealTime',
            apirender__pb2.ApiRenderEngine.getRealTimeRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getRealTimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pauseRendering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/pauseRendering',
            apirender__pb2.ApiRenderEngine.pauseRenderingRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def continueRendering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/continueRendering',
            apirender__pb2.ApiRenderEngine.continueRenderingRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isRenderingPaused(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/isRenderingPaused',
            apirender__pb2.ApiRenderEngine.isRenderingPausedRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.isRenderingPausedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def restartRendering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/restartRendering',
            apirender__pb2.ApiRenderEngine.restartRenderingRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def stopRendering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/stopRendering',
            apirender__pb2.ApiRenderEngine.stopRenderingRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pick(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/pick',
            apirender__pb2.ApiRenderEngine.pickRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.pickResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pickWhitePoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/pickWhitePoint',
            apirender__pb2.ApiRenderEngine.pickWhitePointRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.pickWhitePointResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pickImagerWhitePoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/pickImagerWhitePoint',
            apirender__pb2.ApiRenderEngine.pickImagerWhitePointRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.pickImagerWhitePointResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isOutputAovWhitePointPickable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/isOutputAovWhitePointPickable',
            apirender__pb2.ApiRenderEngine.isOutputAovWhitePointPickableRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.isOutputAovWhitePointPickableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pickOutputAovWhitePoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/pickOutputAovWhitePoint',
            apirender__pb2.ApiRenderEngine.pickOutputAovWhitePointRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.pickOutputAovWhitePointResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pickCryptomatteMatte(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/pickCryptomatteMatte',
            apirender__pb2.ApiRenderEngine.pickCryptomatteMatteRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.pickCryptomatteMatteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def modifyCryptomatteMatteSelection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/modifyCryptomatteMatteSelection',
            apirender__pb2.ApiRenderEngine.modifyCryptomatteMatteSelectionRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.modifyCryptomatteMatteSelectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def toString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/toString',
            apirender__pb2.ApiRenderEngine.toStringRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.toStringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getDevicePciIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderEngineService/getDevicePciIds',
            apirender__pb2.ApiRenderEngine.getDevicePciIdsRequest.SerializeToString,
            apirender__pb2.ApiRenderEngine.getDevicePciIdsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ApiRenderImageServiceStub(object):
    """GRPC interface definition for class 'ApiRenderEngine_PickIntersection' from 'apirender.h'

    GRPC interface definition for class 'ApiRenderImage' from 'apirender.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.isEmpty = channel.unary_unary(
                '/octaneapi.ApiRenderImageService/isEmpty',
                request_serializer=apirender__pb2.ApiRenderImage.isEmptyRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderImage.isEmptyResponse.FromString,
                _registered_method=True)
        self.isHdr = channel.unary_unary(
                '/octaneapi.ApiRenderImageService/isHdr',
                request_serializer=apirender__pb2.ApiRenderImage.isHdrRequest.SerializeToString,
                response_deserializer=apirender__pb2.ApiRenderImage.isHdrResponse.FromString,
                _registered_method=True)


class ApiRenderImageServiceServicer(object):
    """GRPC interface definition for class 'ApiRenderEngine_PickIntersection' from 'apirender.h'

    GRPC interface definition for class 'ApiRenderImage' from 'apirender.h'
    """

    def isEmpty(self, request, context):
        """/ Little convenience function to check if this buffer is empty
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isHdr(self, request, context):
        """/ Little convenience function to check if a render result is LDR (1 byte per channel) or HDR
        / (2 or 4 bytes per channel)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiRenderImageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'isEmpty': grpc.unary_unary_rpc_method_handler(
                    servicer.isEmpty,
                    request_deserializer=apirender__pb2.ApiRenderImage.isEmptyRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderImage.isEmptyResponse.SerializeToString,
            ),
            'isHdr': grpc.unary_unary_rpc_method_handler(
                    servicer.isHdr,
                    request_deserializer=apirender__pb2.ApiRenderImage.isHdrRequest.FromString,
                    response_serializer=apirender__pb2.ApiRenderImage.isHdrResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiRenderImageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiRenderImageService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiRenderImageService(object):
    """GRPC interface definition for class 'ApiRenderEngine_PickIntersection' from 'apirender.h'

    GRPC interface definition for class 'ApiRenderImage' from 'apirender.h'
    """

    @staticmethod
    def isEmpty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderImageService/isEmpty',
            apirender__pb2.ApiRenderImage.isEmptyRequest.SerializeToString,
            apirender__pb2.ApiRenderImage.isEmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isHdr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderImageService/isHdr',
            apirender__pb2.ApiRenderImage.isHdrRequest.SerializeToString,
            apirender__pb2.ApiRenderImage.isHdrResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
