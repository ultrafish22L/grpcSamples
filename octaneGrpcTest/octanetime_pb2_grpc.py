# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import octanetime_pb2 as octanetime__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in octanetime_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FrameRangeTServiceStub(object):
    """GRPC interface definition for class 'FrameRangeT' from 'octanetime.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.make = channel.unary_unary(
                '/octaneapi.FrameRangeTService/make',
                request_serializer=octanetime__pb2.FrameRangeT.makeRequest.SerializeToString,
                response_deserializer=octanetime__pb2.FrameRangeT.makeResponse.FromString,
                _registered_method=True)
        self.count = channel.unary_unary(
                '/octaneapi.FrameRangeTService/count',
                request_serializer=octanetime__pb2.FrameRangeT.countRequest.SerializeToString,
                response_deserializer=octanetime__pb2.FrameRangeT.countResponse.FromString,
                _registered_method=True)


class FrameRangeTServiceServicer(object):
    """GRPC interface definition for class 'FrameRangeT' from 'octanetime.h'
    """

    def make(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def count(self, request, context):
        """/ returns the amount of frames
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FrameRangeTServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'make': grpc.unary_unary_rpc_method_handler(
                    servicer.make,
                    request_deserializer=octanetime__pb2.FrameRangeT.makeRequest.FromString,
                    response_serializer=octanetime__pb2.FrameRangeT.makeResponse.SerializeToString,
            ),
            'count': grpc.unary_unary_rpc_method_handler(
                    servicer.count,
                    request_deserializer=octanetime__pb2.FrameRangeT.countRequest.FromString,
                    response_serializer=octanetime__pb2.FrameRangeT.countResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.FrameRangeTService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.FrameRangeTService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FrameRangeTService(object):
    """GRPC interface definition for class 'FrameRangeT' from 'octanetime.h'
    """

    @staticmethod
    def make(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.FrameRangeTService/make',
            octanetime__pb2.FrameRangeT.makeRequest.SerializeToString,
            octanetime__pb2.FrameRangeT.makeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def count(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.FrameRangeTService/count',
            octanetime__pb2.FrameRangeT.countRequest.SerializeToString,
            octanetime__pb2.FrameRangeT.countResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TimeSpanTServiceStub(object):
    """GRPC interface definition for class 'TimeSpanT' from 'octanetime.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.make1 = channel.unary_unary(
                '/octaneapi.TimeSpanTService/make1',
                request_serializer=octanetime__pb2.TimeSpanT.makeRequest.SerializeToString,
                response_deserializer=octanetime__pb2.TimeSpanT.makeResponse.FromString,
                _registered_method=True)
        self.length = channel.unary_unary(
                '/octaneapi.TimeSpanTService/length',
                request_serializer=octanetime__pb2.TimeSpanT.lengthRequest.SerializeToString,
                response_deserializer=octanetime__pb2.TimeSpanT.lengthResponse.FromString,
                _registered_method=True)
        self.empty = channel.unary_unary(
                '/octaneapi.TimeSpanTService/empty',
                request_serializer=octanetime__pb2.TimeSpanT.emptyRequest.SerializeToString,
                response_deserializer=octanetime__pb2.TimeSpanT.emptyResponse.FromString,
                _registered_method=True)
        self.shift = channel.unary_unary(
                '/octaneapi.TimeSpanTService/shift',
                request_serializer=octanetime__pb2.TimeSpanT.shiftRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.contains = channel.unary_unary(
                '/octaneapi.TimeSpanTService/contains',
                request_serializer=octanetime__pb2.TimeSpanT.containsRequest.SerializeToString,
                response_deserializer=octanetime__pb2.TimeSpanT.containsResponse.FromString,
                _registered_method=True)


class TimeSpanTServiceServicer(object):
    """GRPC interface definition for class 'TimeSpanT' from 'octanetime.h'
    """

    def make1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def length(self, request, context):
        """/ Returns the length of this time interval
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def empty(self, request, context):
        """/ Returns TRUE if this interval has zero length
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def shift(self, request, context):
        """/ Adds an offset to the start and end of the interval
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def contains(self, request, context):
        """/ Returns TRUE if the passed time is inside the interval
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TimeSpanTServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'make1': grpc.unary_unary_rpc_method_handler(
                    servicer.make1,
                    request_deserializer=octanetime__pb2.TimeSpanT.makeRequest.FromString,
                    response_serializer=octanetime__pb2.TimeSpanT.makeResponse.SerializeToString,
            ),
            'length': grpc.unary_unary_rpc_method_handler(
                    servicer.length,
                    request_deserializer=octanetime__pb2.TimeSpanT.lengthRequest.FromString,
                    response_serializer=octanetime__pb2.TimeSpanT.lengthResponse.SerializeToString,
            ),
            'empty': grpc.unary_unary_rpc_method_handler(
                    servicer.empty,
                    request_deserializer=octanetime__pb2.TimeSpanT.emptyRequest.FromString,
                    response_serializer=octanetime__pb2.TimeSpanT.emptyResponse.SerializeToString,
            ),
            'shift': grpc.unary_unary_rpc_method_handler(
                    servicer.shift,
                    request_deserializer=octanetime__pb2.TimeSpanT.shiftRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'contains': grpc.unary_unary_rpc_method_handler(
                    servicer.contains,
                    request_deserializer=octanetime__pb2.TimeSpanT.containsRequest.FromString,
                    response_serializer=octanetime__pb2.TimeSpanT.containsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.TimeSpanTService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.TimeSpanTService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TimeSpanTService(object):
    """GRPC interface definition for class 'TimeSpanT' from 'octanetime.h'
    """

    @staticmethod
    def make1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.TimeSpanTService/make1',
            octanetime__pb2.TimeSpanT.makeRequest.SerializeToString,
            octanetime__pb2.TimeSpanT.makeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def length(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.TimeSpanTService/length',
            octanetime__pb2.TimeSpanT.lengthRequest.SerializeToString,
            octanetime__pb2.TimeSpanT.lengthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def empty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.TimeSpanTService/empty',
            octanetime__pb2.TimeSpanT.emptyRequest.SerializeToString,
            octanetime__pb2.TimeSpanT.emptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def shift(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.TimeSpanTService/shift',
            octanetime__pb2.TimeSpanT.shiftRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def contains(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.TimeSpanTService/contains',
            octanetime__pb2.TimeSpanT.containsRequest.SerializeToString,
            octanetime__pb2.TimeSpanT.containsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
