// source: livelink.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.livelinkapi.CameraState', null, global);
goog.exportSymbol('proto.livelinkapi.CameraState.FovSetCase', null, global);
goog.exportSymbol('proto.livelinkapi.CameraState.PosSetCase', null, global);
goog.exportSymbol('proto.livelinkapi.CameraState.TargetSetCase', null, global);
goog.exportSymbol('proto.livelinkapi.CameraState.UpSetCase', null, global);
goog.exportSymbol('proto.livelinkapi.Empty', null, global);
goog.exportSymbol('proto.livelinkapi.MatrixD', null, global);
goog.exportSymbol('proto.livelinkapi.Mesh', null, global);
goog.exportSymbol('proto.livelinkapi.MeshData', null, global);
goog.exportSymbol('proto.livelinkapi.MeshList', null, global);
goog.exportSymbol('proto.livelinkapi.MeshRequest', null, global);
goog.exportSymbol('proto.livelinkapi.Vec3', null, global);
goog.exportSymbol('proto.livelinkapi.Vec4D', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.livelinkapi.Vec3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.livelinkapi.Vec3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.livelinkapi.Vec3.displayName = 'proto.livelinkapi.Vec3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.livelinkapi.Vec4D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.livelinkapi.Vec4D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.livelinkapi.Vec4D.displayName = 'proto.livelinkapi.Vec4D';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.livelinkapi.MatrixD = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.livelinkapi.MatrixD, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.livelinkapi.MatrixD.displayName = 'proto.livelinkapi.MatrixD';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.livelinkapi.Mesh = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.livelinkapi.Mesh, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.livelinkapi.Mesh.displayName = 'proto.livelinkapi.Mesh';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.livelinkapi.MeshList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.livelinkapi.MeshList.repeatedFields_, null);
};
goog.inherits(proto.livelinkapi.MeshList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.livelinkapi.MeshList.displayName = 'proto.livelinkapi.MeshList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.livelinkapi.CameraState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.livelinkapi.CameraState.oneofGroups_);
};
goog.inherits(proto.livelinkapi.CameraState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.livelinkapi.CameraState.displayName = 'proto.livelinkapi.CameraState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.livelinkapi.MeshRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.livelinkapi.MeshRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.livelinkapi.MeshRequest.displayName = 'proto.livelinkapi.MeshRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.livelinkapi.MeshData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.livelinkapi.MeshData.repeatedFields_, null);
};
goog.inherits(proto.livelinkapi.MeshData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.livelinkapi.MeshData.displayName = 'proto.livelinkapi.MeshData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.livelinkapi.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.livelinkapi.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.livelinkapi.Empty.displayName = 'proto.livelinkapi.Empty';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.livelinkapi.Vec3.prototype.toObject = function(opt_includeInstance) {
  return proto.livelinkapi.Vec3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.livelinkapi.Vec3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.Vec3.toObject = function(includeInstance, msg) {
  var f, obj = {
x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.livelinkapi.Vec3}
 */
proto.livelinkapi.Vec3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.livelinkapi.Vec3;
  return proto.livelinkapi.Vec3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.livelinkapi.Vec3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.livelinkapi.Vec3}
 */
proto.livelinkapi.Vec3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.livelinkapi.Vec3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.livelinkapi.Vec3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.livelinkapi.Vec3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.Vec3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.livelinkapi.Vec3.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.livelinkapi.Vec3} returns this
 */
proto.livelinkapi.Vec3.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.livelinkapi.Vec3.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.livelinkapi.Vec3} returns this
 */
proto.livelinkapi.Vec3.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.livelinkapi.Vec3.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.livelinkapi.Vec3} returns this
 */
proto.livelinkapi.Vec3.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.livelinkapi.Vec4D.prototype.toObject = function(opt_includeInstance) {
  return proto.livelinkapi.Vec4D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.livelinkapi.Vec4D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.Vec4D.toObject = function(includeInstance, msg) {
  var f, obj = {
x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
w: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.livelinkapi.Vec4D}
 */
proto.livelinkapi.Vec4D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.livelinkapi.Vec4D;
  return proto.livelinkapi.Vec4D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.livelinkapi.Vec4D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.livelinkapi.Vec4D}
 */
proto.livelinkapi.Vec4D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setW(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.livelinkapi.Vec4D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.livelinkapi.Vec4D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.livelinkapi.Vec4D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.Vec4D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getW();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.livelinkapi.Vec4D.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.livelinkapi.Vec4D} returns this
 */
proto.livelinkapi.Vec4D.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.livelinkapi.Vec4D.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.livelinkapi.Vec4D} returns this
 */
proto.livelinkapi.Vec4D.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.livelinkapi.Vec4D.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.livelinkapi.Vec4D} returns this
 */
proto.livelinkapi.Vec4D.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double w = 4;
 * @return {number}
 */
proto.livelinkapi.Vec4D.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.livelinkapi.Vec4D} returns this
 */
proto.livelinkapi.Vec4D.prototype.setW = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.livelinkapi.MatrixD.prototype.toObject = function(opt_includeInstance) {
  return proto.livelinkapi.MatrixD.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.livelinkapi.MatrixD} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.MatrixD.toObject = function(includeInstance, msg) {
  var f, obj = {
row0: (f = msg.getRow0()) && proto.livelinkapi.Vec4D.toObject(includeInstance, f),
row1: (f = msg.getRow1()) && proto.livelinkapi.Vec4D.toObject(includeInstance, f),
row2: (f = msg.getRow2()) && proto.livelinkapi.Vec4D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.livelinkapi.MatrixD}
 */
proto.livelinkapi.MatrixD.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.livelinkapi.MatrixD;
  return proto.livelinkapi.MatrixD.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.livelinkapi.MatrixD} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.livelinkapi.MatrixD}
 */
proto.livelinkapi.MatrixD.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.livelinkapi.Vec4D;
      reader.readMessage(value,proto.livelinkapi.Vec4D.deserializeBinaryFromReader);
      msg.setRow0(value);
      break;
    case 2:
      var value = new proto.livelinkapi.Vec4D;
      reader.readMessage(value,proto.livelinkapi.Vec4D.deserializeBinaryFromReader);
      msg.setRow1(value);
      break;
    case 3:
      var value = new proto.livelinkapi.Vec4D;
      reader.readMessage(value,proto.livelinkapi.Vec4D.deserializeBinaryFromReader);
      msg.setRow2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.livelinkapi.MatrixD.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.livelinkapi.MatrixD.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.livelinkapi.MatrixD} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.MatrixD.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRow0();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.livelinkapi.Vec4D.serializeBinaryToWriter
    );
  }
  f = message.getRow1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.livelinkapi.Vec4D.serializeBinaryToWriter
    );
  }
  f = message.getRow2();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.livelinkapi.Vec4D.serializeBinaryToWriter
    );
  }
};


/**
 * optional Vec4D row0 = 1;
 * @return {?proto.livelinkapi.Vec4D}
 */
proto.livelinkapi.MatrixD.prototype.getRow0 = function() {
  return /** @type{?proto.livelinkapi.Vec4D} */ (
    jspb.Message.getWrapperField(this, proto.livelinkapi.Vec4D, 1));
};


/**
 * @param {?proto.livelinkapi.Vec4D|undefined} value
 * @return {!proto.livelinkapi.MatrixD} returns this
*/
proto.livelinkapi.MatrixD.prototype.setRow0 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.livelinkapi.MatrixD} returns this
 */
proto.livelinkapi.MatrixD.prototype.clearRow0 = function() {
  return this.setRow0(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.livelinkapi.MatrixD.prototype.hasRow0 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Vec4D row1 = 2;
 * @return {?proto.livelinkapi.Vec4D}
 */
proto.livelinkapi.MatrixD.prototype.getRow1 = function() {
  return /** @type{?proto.livelinkapi.Vec4D} */ (
    jspb.Message.getWrapperField(this, proto.livelinkapi.Vec4D, 2));
};


/**
 * @param {?proto.livelinkapi.Vec4D|undefined} value
 * @return {!proto.livelinkapi.MatrixD} returns this
*/
proto.livelinkapi.MatrixD.prototype.setRow1 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.livelinkapi.MatrixD} returns this
 */
proto.livelinkapi.MatrixD.prototype.clearRow1 = function() {
  return this.setRow1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.livelinkapi.MatrixD.prototype.hasRow1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Vec4D row2 = 3;
 * @return {?proto.livelinkapi.Vec4D}
 */
proto.livelinkapi.MatrixD.prototype.getRow2 = function() {
  return /** @type{?proto.livelinkapi.Vec4D} */ (
    jspb.Message.getWrapperField(this, proto.livelinkapi.Vec4D, 3));
};


/**
 * @param {?proto.livelinkapi.Vec4D|undefined} value
 * @return {!proto.livelinkapi.MatrixD} returns this
*/
proto.livelinkapi.MatrixD.prototype.setRow2 = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.livelinkapi.MatrixD} returns this
 */
proto.livelinkapi.MatrixD.prototype.clearRow2 = function() {
  return this.setRow2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.livelinkapi.MatrixD.prototype.hasRow2 = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.livelinkapi.Mesh.prototype.toObject = function(opt_includeInstance) {
  return proto.livelinkapi.Mesh.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.livelinkapi.Mesh} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.Mesh.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
id: jspb.Message.getFieldWithDefault(msg, 2, 0),
objecthandle: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.livelinkapi.Mesh}
 */
proto.livelinkapi.Mesh.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.livelinkapi.Mesh;
  return proto.livelinkapi.Mesh.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.livelinkapi.Mesh} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.livelinkapi.Mesh}
 */
proto.livelinkapi.Mesh.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setObjecthandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.livelinkapi.Mesh.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.livelinkapi.Mesh.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.livelinkapi.Mesh} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.Mesh.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getObjecthandle();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.livelinkapi.Mesh.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.livelinkapi.Mesh} returns this
 */
proto.livelinkapi.Mesh.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.livelinkapi.Mesh.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.livelinkapi.Mesh} returns this
 */
proto.livelinkapi.Mesh.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 objectHandle = 3;
 * @return {number}
 */
proto.livelinkapi.Mesh.prototype.getObjecthandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.livelinkapi.Mesh} returns this
 */
proto.livelinkapi.Mesh.prototype.setObjecthandle = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.livelinkapi.MeshList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.livelinkapi.MeshList.prototype.toObject = function(opt_includeInstance) {
  return proto.livelinkapi.MeshList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.livelinkapi.MeshList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.MeshList.toObject = function(includeInstance, msg) {
  var f, obj = {
meshesList: jspb.Message.toObjectList(msg.getMeshesList(),
    proto.livelinkapi.Mesh.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.livelinkapi.MeshList}
 */
proto.livelinkapi.MeshList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.livelinkapi.MeshList;
  return proto.livelinkapi.MeshList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.livelinkapi.MeshList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.livelinkapi.MeshList}
 */
proto.livelinkapi.MeshList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.livelinkapi.Mesh;
      reader.readMessage(value,proto.livelinkapi.Mesh.deserializeBinaryFromReader);
      msg.addMeshes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.livelinkapi.MeshList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.livelinkapi.MeshList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.livelinkapi.MeshList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.MeshList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeshesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.livelinkapi.Mesh.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Mesh meshes = 1;
 * @return {!Array<!proto.livelinkapi.Mesh>}
 */
proto.livelinkapi.MeshList.prototype.getMeshesList = function() {
  return /** @type{!Array<!proto.livelinkapi.Mesh>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.livelinkapi.Mesh, 1));
};


/**
 * @param {!Array<!proto.livelinkapi.Mesh>} value
 * @return {!proto.livelinkapi.MeshList} returns this
*/
proto.livelinkapi.MeshList.prototype.setMeshesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.livelinkapi.Mesh=} opt_value
 * @param {number=} opt_index
 * @return {!proto.livelinkapi.Mesh}
 */
proto.livelinkapi.MeshList.prototype.addMeshes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.livelinkapi.Mesh, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.livelinkapi.MeshList} returns this
 */
proto.livelinkapi.MeshList.prototype.clearMeshesList = function() {
  return this.setMeshesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.livelinkapi.CameraState.oneofGroups_ = [[1],[2],[3],[4]];

/**
 * @enum {number}
 */
proto.livelinkapi.CameraState.PosSetCase = {
  POS_SET_NOT_SET: 0,
  POSITION: 1
};

/**
 * @return {proto.livelinkapi.CameraState.PosSetCase}
 */
proto.livelinkapi.CameraState.prototype.getPosSetCase = function() {
  return /** @type {proto.livelinkapi.CameraState.PosSetCase} */(jspb.Message.computeOneofCase(this, proto.livelinkapi.CameraState.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.livelinkapi.CameraState.TargetSetCase = {
  TARGET_SET_NOT_SET: 0,
  TARGET: 2
};

/**
 * @return {proto.livelinkapi.CameraState.TargetSetCase}
 */
proto.livelinkapi.CameraState.prototype.getTargetSetCase = function() {
  return /** @type {proto.livelinkapi.CameraState.TargetSetCase} */(jspb.Message.computeOneofCase(this, proto.livelinkapi.CameraState.oneofGroups_[1]));
};

/**
 * @enum {number}
 */
proto.livelinkapi.CameraState.UpSetCase = {
  UP_SET_NOT_SET: 0,
  UP: 3
};

/**
 * @return {proto.livelinkapi.CameraState.UpSetCase}
 */
proto.livelinkapi.CameraState.prototype.getUpSetCase = function() {
  return /** @type {proto.livelinkapi.CameraState.UpSetCase} */(jspb.Message.computeOneofCase(this, proto.livelinkapi.CameraState.oneofGroups_[2]));
};

/**
 * @enum {number}
 */
proto.livelinkapi.CameraState.FovSetCase = {
  FOV_SET_NOT_SET: 0,
  FOV: 4
};

/**
 * @return {proto.livelinkapi.CameraState.FovSetCase}
 */
proto.livelinkapi.CameraState.prototype.getFovSetCase = function() {
  return /** @type {proto.livelinkapi.CameraState.FovSetCase} */(jspb.Message.computeOneofCase(this, proto.livelinkapi.CameraState.oneofGroups_[3]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.livelinkapi.CameraState.prototype.toObject = function(opt_includeInstance) {
  return proto.livelinkapi.CameraState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.livelinkapi.CameraState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.CameraState.toObject = function(includeInstance, msg) {
  var f, obj = {
position: (f = msg.getPosition()) && proto.livelinkapi.Vec3.toObject(includeInstance, f),
target: (f = msg.getTarget()) && proto.livelinkapi.Vec3.toObject(includeInstance, f),
up: (f = msg.getUp()) && proto.livelinkapi.Vec3.toObject(includeInstance, f),
fov: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.livelinkapi.CameraState}
 */
proto.livelinkapi.CameraState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.livelinkapi.CameraState;
  return proto.livelinkapi.CameraState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.livelinkapi.CameraState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.livelinkapi.CameraState}
 */
proto.livelinkapi.CameraState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.livelinkapi.Vec3;
      reader.readMessage(value,proto.livelinkapi.Vec3.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new proto.livelinkapi.Vec3;
      reader.readMessage(value,proto.livelinkapi.Vec3.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 3:
      var value = new proto.livelinkapi.Vec3;
      reader.readMessage(value,proto.livelinkapi.Vec3.deserializeBinaryFromReader);
      msg.setUp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFov(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.livelinkapi.CameraState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.livelinkapi.CameraState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.livelinkapi.CameraState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.CameraState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.livelinkapi.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.livelinkapi.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getUp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.livelinkapi.Vec3.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional Vec3 position = 1;
 * @return {?proto.livelinkapi.Vec3}
 */
proto.livelinkapi.CameraState.prototype.getPosition = function() {
  return /** @type{?proto.livelinkapi.Vec3} */ (
    jspb.Message.getWrapperField(this, proto.livelinkapi.Vec3, 1));
};


/**
 * @param {?proto.livelinkapi.Vec3|undefined} value
 * @return {!proto.livelinkapi.CameraState} returns this
*/
proto.livelinkapi.CameraState.prototype.setPosition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.livelinkapi.CameraState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.livelinkapi.CameraState} returns this
 */
proto.livelinkapi.CameraState.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.livelinkapi.CameraState.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Vec3 target = 2;
 * @return {?proto.livelinkapi.Vec3}
 */
proto.livelinkapi.CameraState.prototype.getTarget = function() {
  return /** @type{?proto.livelinkapi.Vec3} */ (
    jspb.Message.getWrapperField(this, proto.livelinkapi.Vec3, 2));
};


/**
 * @param {?proto.livelinkapi.Vec3|undefined} value
 * @return {!proto.livelinkapi.CameraState} returns this
*/
proto.livelinkapi.CameraState.prototype.setTarget = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.livelinkapi.CameraState.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.livelinkapi.CameraState} returns this
 */
proto.livelinkapi.CameraState.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.livelinkapi.CameraState.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Vec3 up = 3;
 * @return {?proto.livelinkapi.Vec3}
 */
proto.livelinkapi.CameraState.prototype.getUp = function() {
  return /** @type{?proto.livelinkapi.Vec3} */ (
    jspb.Message.getWrapperField(this, proto.livelinkapi.Vec3, 3));
};


/**
 * @param {?proto.livelinkapi.Vec3|undefined} value
 * @return {!proto.livelinkapi.CameraState} returns this
*/
proto.livelinkapi.CameraState.prototype.setUp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.livelinkapi.CameraState.oneofGroups_[2], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.livelinkapi.CameraState} returns this
 */
proto.livelinkapi.CameraState.prototype.clearUp = function() {
  return this.setUp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.livelinkapi.CameraState.prototype.hasUp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float fov = 4;
 * @return {number}
 */
proto.livelinkapi.CameraState.prototype.getFov = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.livelinkapi.CameraState} returns this
 */
proto.livelinkapi.CameraState.prototype.setFov = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.livelinkapi.CameraState.oneofGroups_[3], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.livelinkapi.CameraState} returns this
 */
proto.livelinkapi.CameraState.prototype.clearFov = function() {
  return jspb.Message.setOneofField(this, 4, proto.livelinkapi.CameraState.oneofGroups_[3], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.livelinkapi.CameraState.prototype.hasFov = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.livelinkapi.MeshRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.livelinkapi.MeshRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.livelinkapi.MeshRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.MeshRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
objecthandle: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.livelinkapi.MeshRequest}
 */
proto.livelinkapi.MeshRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.livelinkapi.MeshRequest;
  return proto.livelinkapi.MeshRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.livelinkapi.MeshRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.livelinkapi.MeshRequest}
 */
proto.livelinkapi.MeshRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setObjecthandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.livelinkapi.MeshRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.livelinkapi.MeshRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.livelinkapi.MeshRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.MeshRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjecthandle();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 objecthandle = 1;
 * @return {number}
 */
proto.livelinkapi.MeshRequest.prototype.getObjecthandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.livelinkapi.MeshRequest} returns this
 */
proto.livelinkapi.MeshRequest.prototype.setObjecthandle = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.livelinkapi.MeshData.repeatedFields_ = [2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.livelinkapi.MeshData.prototype.toObject = function(opt_includeInstance) {
  return proto.livelinkapi.MeshData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.livelinkapi.MeshData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.MeshData.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
positionsList: jspb.Message.toObjectList(msg.getPositionsList(),
    proto.livelinkapi.Vec3.toObject, includeInstance),
normalsList: jspb.Message.toObjectList(msg.getNormalsList(),
    proto.livelinkapi.Vec3.toObject, includeInstance),
vertsperpolyList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
polyvertindicesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
polynormalindicesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
windingorder: jspb.Message.getFieldWithDefault(msg, 7, 0),
worldmatrix: (f = msg.getWorldmatrix()) && proto.livelinkapi.MatrixD.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.livelinkapi.MeshData}
 */
proto.livelinkapi.MeshData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.livelinkapi.MeshData;
  return proto.livelinkapi.MeshData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.livelinkapi.MeshData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.livelinkapi.MeshData}
 */
proto.livelinkapi.MeshData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.livelinkapi.Vec3;
      reader.readMessage(value,proto.livelinkapi.Vec3.deserializeBinaryFromReader);
      msg.addPositions(value);
      break;
    case 3:
      var value = new proto.livelinkapi.Vec3;
      reader.readMessage(value,proto.livelinkapi.Vec3.deserializeBinaryFromReader);
      msg.addNormals(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVertsperpoly(values[i]);
      }
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPolyvertindices(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPolynormalindices(values[i]);
      }
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWindingorder(value);
      break;
    case 8:
      var value = new proto.livelinkapi.MatrixD;
      reader.readMessage(value,proto.livelinkapi.MatrixD.deserializeBinaryFromReader);
      msg.setWorldmatrix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.livelinkapi.MeshData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.livelinkapi.MeshData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.livelinkapi.MeshData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.MeshData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.livelinkapi.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getNormalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.livelinkapi.Vec3.serializeBinaryToWriter
    );
  }
  f = message.getVertsperpolyList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getPolyvertindicesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = message.getPolynormalindicesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      6,
      f
    );
  }
  f = message.getWindingorder();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getWorldmatrix();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.livelinkapi.MatrixD.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.livelinkapi.MeshData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.livelinkapi.MeshData} returns this
 */
proto.livelinkapi.MeshData.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Vec3 positions = 2;
 * @return {!Array<!proto.livelinkapi.Vec3>}
 */
proto.livelinkapi.MeshData.prototype.getPositionsList = function() {
  return /** @type{!Array<!proto.livelinkapi.Vec3>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.livelinkapi.Vec3, 2));
};


/**
 * @param {!Array<!proto.livelinkapi.Vec3>} value
 * @return {!proto.livelinkapi.MeshData} returns this
*/
proto.livelinkapi.MeshData.prototype.setPositionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.livelinkapi.Vec3=} opt_value
 * @param {number=} opt_index
 * @return {!proto.livelinkapi.Vec3}
 */
proto.livelinkapi.MeshData.prototype.addPositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.livelinkapi.Vec3, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.livelinkapi.MeshData} returns this
 */
proto.livelinkapi.MeshData.prototype.clearPositionsList = function() {
  return this.setPositionsList([]);
};


/**
 * repeated Vec3 normals = 3;
 * @return {!Array<!proto.livelinkapi.Vec3>}
 */
proto.livelinkapi.MeshData.prototype.getNormalsList = function() {
  return /** @type{!Array<!proto.livelinkapi.Vec3>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.livelinkapi.Vec3, 3));
};


/**
 * @param {!Array<!proto.livelinkapi.Vec3>} value
 * @return {!proto.livelinkapi.MeshData} returns this
*/
proto.livelinkapi.MeshData.prototype.setNormalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.livelinkapi.Vec3=} opt_value
 * @param {number=} opt_index
 * @return {!proto.livelinkapi.Vec3}
 */
proto.livelinkapi.MeshData.prototype.addNormals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.livelinkapi.Vec3, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.livelinkapi.MeshData} returns this
 */
proto.livelinkapi.MeshData.prototype.clearNormalsList = function() {
  return this.setNormalsList([]);
};


/**
 * repeated uint32 vertsPerPoly = 4;
 * @return {!Array<number>}
 */
proto.livelinkapi.MeshData.prototype.getVertsperpolyList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.livelinkapi.MeshData} returns this
 */
proto.livelinkapi.MeshData.prototype.setVertsperpolyList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.livelinkapi.MeshData} returns this
 */
proto.livelinkapi.MeshData.prototype.addVertsperpoly = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.livelinkapi.MeshData} returns this
 */
proto.livelinkapi.MeshData.prototype.clearVertsperpolyList = function() {
  return this.setVertsperpolyList([]);
};


/**
 * repeated uint32 polyVertIndices = 5;
 * @return {!Array<number>}
 */
proto.livelinkapi.MeshData.prototype.getPolyvertindicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.livelinkapi.MeshData} returns this
 */
proto.livelinkapi.MeshData.prototype.setPolyvertindicesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.livelinkapi.MeshData} returns this
 */
proto.livelinkapi.MeshData.prototype.addPolyvertindices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.livelinkapi.MeshData} returns this
 */
proto.livelinkapi.MeshData.prototype.clearPolyvertindicesList = function() {
  return this.setPolyvertindicesList([]);
};


/**
 * repeated uint32 polyNormalIndices = 6;
 * @return {!Array<number>}
 */
proto.livelinkapi.MeshData.prototype.getPolynormalindicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.livelinkapi.MeshData} returns this
 */
proto.livelinkapi.MeshData.prototype.setPolynormalindicesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.livelinkapi.MeshData} returns this
 */
proto.livelinkapi.MeshData.prototype.addPolynormalindices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.livelinkapi.MeshData} returns this
 */
proto.livelinkapi.MeshData.prototype.clearPolynormalindicesList = function() {
  return this.setPolynormalindicesList([]);
};


/**
 * optional int32 windingOrder = 7;
 * @return {number}
 */
proto.livelinkapi.MeshData.prototype.getWindingorder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.livelinkapi.MeshData} returns this
 */
proto.livelinkapi.MeshData.prototype.setWindingorder = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional MatrixD worldMatrix = 8;
 * @return {?proto.livelinkapi.MatrixD}
 */
proto.livelinkapi.MeshData.prototype.getWorldmatrix = function() {
  return /** @type{?proto.livelinkapi.MatrixD} */ (
    jspb.Message.getWrapperField(this, proto.livelinkapi.MatrixD, 8));
};


/**
 * @param {?proto.livelinkapi.MatrixD|undefined} value
 * @return {!proto.livelinkapi.MeshData} returns this
*/
proto.livelinkapi.MeshData.prototype.setWorldmatrix = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.livelinkapi.MeshData} returns this
 */
proto.livelinkapi.MeshData.prototype.clearWorldmatrix = function() {
  return this.setWorldmatrix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.livelinkapi.MeshData.prototype.hasWorldmatrix = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.livelinkapi.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.livelinkapi.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.livelinkapi.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.livelinkapi.Empty}
 */
proto.livelinkapi.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.livelinkapi.Empty;
  return proto.livelinkapi.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.livelinkapi.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.livelinkapi.Empty}
 */
proto.livelinkapi.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.livelinkapi.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.livelinkapi.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.livelinkapi.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.livelinkapi.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.livelinkapi);
