# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import camera_control_pb2 as camera__control__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in camera_control_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CameraControlStub(object):
    """Basic camera control service for simpleGlGrpc
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetCameraPosition = channel.unary_unary(
                '/octaneapi.CameraControl/SetCameraPosition',
                request_serializer=camera__control__pb2.CameraPositionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.GetCameraPosition = channel.unary_unary(
                '/octaneapi.CameraControl/GetCameraPosition',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=camera__control__pb2.CameraPositionResponse.FromString,
                _registered_method=True)
        self.SetCameraTarget = channel.unary_unary(
                '/octaneapi.CameraControl/SetCameraTarget',
                request_serializer=camera__control__pb2.CameraTargetRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.GetCameraTarget = channel.unary_unary(
                '/octaneapi.CameraControl/GetCameraTarget',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=camera__control__pb2.CameraTargetResponse.FromString,
                _registered_method=True)
        self.SetCameraUp = channel.unary_unary(
                '/octaneapi.CameraControl/SetCameraUp',
                request_serializer=camera__control__pb2.CameraUpRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.GetCameraUp = channel.unary_unary(
                '/octaneapi.CameraControl/GetCameraUp',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=camera__control__pb2.CameraUpResponse.FromString,
                _registered_method=True)


class CameraControlServicer(object):
    """Basic camera control service for simpleGlGrpc
    """

    def SetCameraPosition(self, request, context):
        """Set camera position
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCameraPosition(self, request, context):
        """Get camera position
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCameraTarget(self, request, context):
        """Set camera target (look at point)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCameraTarget(self, request, context):
        """Get camera target
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCameraUp(self, request, context):
        """Set camera up vector
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCameraUp(self, request, context):
        """Get camera up vector
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CameraControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetCameraPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCameraPosition,
                    request_deserializer=camera__control__pb2.CameraPositionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetCameraPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCameraPosition,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=camera__control__pb2.CameraPositionResponse.SerializeToString,
            ),
            'SetCameraTarget': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCameraTarget,
                    request_deserializer=camera__control__pb2.CameraTargetRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetCameraTarget': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCameraTarget,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=camera__control__pb2.CameraTargetResponse.SerializeToString,
            ),
            'SetCameraUp': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCameraUp,
                    request_deserializer=camera__control__pb2.CameraUpRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetCameraUp': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCameraUp,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=camera__control__pb2.CameraUpResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.CameraControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.CameraControl', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CameraControl(object):
    """Basic camera control service for simpleGlGrpc
    """

    @staticmethod
    def SetCameraPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CameraControl/SetCameraPosition',
            camera__control__pb2.CameraPositionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCameraPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CameraControl/GetCameraPosition',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            camera__control__pb2.CameraPositionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetCameraTarget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CameraControl/SetCameraTarget',
            camera__control__pb2.CameraTargetRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCameraTarget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CameraControl/GetCameraTarget',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            camera__control__pb2.CameraTargetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetCameraUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CameraControl/SetCameraUp',
            camera__control__pb2.CameraUpRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCameraUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CameraControl/GetCameraUp',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            camera__control__pb2.CameraUpResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
