# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import apilogmanager_pb2 as apilogmanager__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in apilogmanager_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ApiLogManagerServiceStub(object):
    """GRPC interface definition for class 'ApiLogManager' from 'apilogmanager.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.registerLogCallbackProc = channel.unary_unary(
                '/octaneapi.ApiLogManagerService/registerLogCallbackProc',
                request_serializer=apilogmanager__pb2.ApiLogManager.registerLogCallbackProcRequest.SerializeToString,
                response_deserializer=apilogmanager__pb2.ApiLogManager.registerLogCallbackProcResponse.FromString,
                _registered_method=True)
        self.unregisterLogCallbackProc = channel.unary_unary(
                '/octaneapi.ApiLogManagerService/unregisterLogCallbackProc',
                request_serializer=apilogmanager__pb2.ApiLogManager.unregisterLogCallbackProcRequest.SerializeToString,
                response_deserializer=apilogmanager__pb2.ApiLogManager.unregisterLogCallbackProcResponse.FromString,
                _registered_method=True)
        self.openOctaneLogWindow = channel.unary_unary(
                '/octaneapi.ApiLogManagerService/openOctaneLogWindow',
                request_serializer=apilogmanager__pb2.ApiLogManager.openOctaneLogWindowRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.log = channel.unary_unary(
                '/octaneapi.ApiLogManagerService/log',
                request_serializer=apilogmanager__pb2.ApiLogManager.logRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.logError = channel.unary_unary(
                '/octaneapi.ApiLogManagerService/logError',
                request_serializer=apilogmanager__pb2.ApiLogManager.logErrorRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.logFmt = channel.unary_unary(
                '/octaneapi.ApiLogManagerService/logFmt',
                request_serializer=apilogmanager__pb2.ApiLogManager.logFmtRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.logErrorFmt = channel.unary_unary(
                '/octaneapi.ApiLogManagerService/logErrorFmt',
                request_serializer=apilogmanager__pb2.ApiLogManager.logErrorFmtRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.isFlagRegistered = channel.unary_unary(
                '/octaneapi.ApiLogManagerService/isFlagRegistered',
                request_serializer=apilogmanager__pb2.ApiLogManager.isFlagRegisteredRequest.SerializeToString,
                response_deserializer=apilogmanager__pb2.ApiLogManager.isFlagRegisteredResponse.FromString,
                _registered_method=True)
        self.setFlag = channel.unary_unary(
                '/octaneapi.ApiLogManagerService/setFlag',
                request_serializer=apilogmanager__pb2.ApiLogManager.setFlagRequest.SerializeToString,
                response_deserializer=apilogmanager__pb2.ApiLogManager.setFlagResponse.FromString,
                _registered_method=True)
        self.__registerLogFlag = channel.unary_unary(
                '/octaneapi.ApiLogManagerService/__registerLogFlag',
                request_serializer=apilogmanager__pb2.ApiLogManager.__registerLogFlagRequest.SerializeToString,
                response_deserializer=apilogmanager__pb2.ApiLogManager.__registerLogFlagResponse.FromString,
                _registered_method=True)
        self.__logFmtPrefix = channel.unary_unary(
                '/octaneapi.ApiLogManagerService/__logFmtPrefix',
                request_serializer=apilogmanager__pb2.ApiLogManager.__logFmtPrefixRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class ApiLogManagerServiceServicer(object):
    """GRPC interface definition for class 'ApiLogManager' from 'apilogmanager.h'
    """

    def registerLogCallbackProc(self, request, context):
        """/ Registers a callback that gets called every time there is a log message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unregisterLogCallbackProc(self, request, context):
        """/ Removes a previously registered log callback
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openOctaneLogWindow(self, request, context):
        """/ Opens the Octane log into a separate window
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def log(self, request, context):
        """/ Writes the specified text to the Octane log
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logError(self, request, context):
        """/ Writes the specified text to the Octane log
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logFmt(self, request, context):
        """/ Writes the specified text to the Octane log
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logErrorFmt(self, request, context):
        """/ Writes the specified text to the Octane log
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isFlagRegistered(self, request, context):
        """/ Returns TRUE if a flag with the passed in name was registered
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setFlag(self, request, context):
        """/ Sets a log flag to the specified value
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def __registerLogFlag(self, request, context):
        """/ Registers a new log flag
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def __logFmtPrefix(self, request, context):
        """/ You should not call this function directly
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiLogManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'registerLogCallbackProc': grpc.unary_unary_rpc_method_handler(
                    servicer.registerLogCallbackProc,
                    request_deserializer=apilogmanager__pb2.ApiLogManager.registerLogCallbackProcRequest.FromString,
                    response_serializer=apilogmanager__pb2.ApiLogManager.registerLogCallbackProcResponse.SerializeToString,
            ),
            'unregisterLogCallbackProc': grpc.unary_unary_rpc_method_handler(
                    servicer.unregisterLogCallbackProc,
                    request_deserializer=apilogmanager__pb2.ApiLogManager.unregisterLogCallbackProcRequest.FromString,
                    response_serializer=apilogmanager__pb2.ApiLogManager.unregisterLogCallbackProcResponse.SerializeToString,
            ),
            'openOctaneLogWindow': grpc.unary_unary_rpc_method_handler(
                    servicer.openOctaneLogWindow,
                    request_deserializer=apilogmanager__pb2.ApiLogManager.openOctaneLogWindowRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'log': grpc.unary_unary_rpc_method_handler(
                    servicer.log,
                    request_deserializer=apilogmanager__pb2.ApiLogManager.logRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'logError': grpc.unary_unary_rpc_method_handler(
                    servicer.logError,
                    request_deserializer=apilogmanager__pb2.ApiLogManager.logErrorRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'logFmt': grpc.unary_unary_rpc_method_handler(
                    servicer.logFmt,
                    request_deserializer=apilogmanager__pb2.ApiLogManager.logFmtRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'logErrorFmt': grpc.unary_unary_rpc_method_handler(
                    servicer.logErrorFmt,
                    request_deserializer=apilogmanager__pb2.ApiLogManager.logErrorFmtRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'isFlagRegistered': grpc.unary_unary_rpc_method_handler(
                    servicer.isFlagRegistered,
                    request_deserializer=apilogmanager__pb2.ApiLogManager.isFlagRegisteredRequest.FromString,
                    response_serializer=apilogmanager__pb2.ApiLogManager.isFlagRegisteredResponse.SerializeToString,
            ),
            'setFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.setFlag,
                    request_deserializer=apilogmanager__pb2.ApiLogManager.setFlagRequest.FromString,
                    response_serializer=apilogmanager__pb2.ApiLogManager.setFlagResponse.SerializeToString,
            ),
            '__registerLogFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.__registerLogFlag,
                    request_deserializer=apilogmanager__pb2.ApiLogManager.__registerLogFlagRequest.FromString,
                    response_serializer=apilogmanager__pb2.ApiLogManager.__registerLogFlagResponse.SerializeToString,
            ),
            '__logFmtPrefix': grpc.unary_unary_rpc_method_handler(
                    servicer.__logFmtPrefix,
                    request_deserializer=apilogmanager__pb2.ApiLogManager.__logFmtPrefixRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiLogManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiLogManagerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiLogManagerService(object):
    """GRPC interface definition for class 'ApiLogManager' from 'apilogmanager.h'
    """

    @staticmethod
    def registerLogCallbackProc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiLogManagerService/registerLogCallbackProc',
            apilogmanager__pb2.ApiLogManager.registerLogCallbackProcRequest.SerializeToString,
            apilogmanager__pb2.ApiLogManager.registerLogCallbackProcResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def unregisterLogCallbackProc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiLogManagerService/unregisterLogCallbackProc',
            apilogmanager__pb2.ApiLogManager.unregisterLogCallbackProcRequest.SerializeToString,
            apilogmanager__pb2.ApiLogManager.unregisterLogCallbackProcResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def openOctaneLogWindow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiLogManagerService/openOctaneLogWindow',
            apilogmanager__pb2.ApiLogManager.openOctaneLogWindowRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def log(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiLogManagerService/log',
            apilogmanager__pb2.ApiLogManager.logRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def logError(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiLogManagerService/logError',
            apilogmanager__pb2.ApiLogManager.logErrorRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def logFmt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiLogManagerService/logFmt',
            apilogmanager__pb2.ApiLogManager.logFmtRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def logErrorFmt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiLogManagerService/logErrorFmt',
            apilogmanager__pb2.ApiLogManager.logErrorFmtRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isFlagRegistered(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiLogManagerService/isFlagRegistered',
            apilogmanager__pb2.ApiLogManager.isFlagRegisteredRequest.SerializeToString,
            apilogmanager__pb2.ApiLogManager.isFlagRegisteredResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiLogManagerService/setFlag',
            apilogmanager__pb2.ApiLogManager.setFlagRequest.SerializeToString,
            apilogmanager__pb2.ApiLogManager.setFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def __registerLogFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiLogManagerService/__registerLogFlag',
            apilogmanager__pb2.ApiLogManager.__registerLogFlagRequest.SerializeToString,
            apilogmanager__pb2.ApiLogManager.__registerLogFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def __logFmtPrefix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiLogManagerService/__logFmtPrefix',
            apilogmanager__pb2.ApiLogManager.__logFmtPrefixRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
