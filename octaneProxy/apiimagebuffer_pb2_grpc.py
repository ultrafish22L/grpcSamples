# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import apiimagebuffer_pb2 as apiimagebuffer__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in apiimagebuffer_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ApiImageBufferServiceStub(object):
    """GRPC interface definition for class 'ApiImageBuffer' from 'apiimagebuffer.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/create',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.createRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.createResponse.FromString,
                _registered_method=True)
        self.create1 = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/create1',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.create1Request.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.create1Response.FromString,
                _registered_method=True)
        self.load = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/load',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.loadRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.loadResponse.FromString,
                _registered_method=True)
        self.load1 = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/load1',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.load1Request.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.load1Response.FromString,
                _registered_method=True)
        self.convertTo = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/convertTo',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.convertToRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.convertToResponse.FromString,
                _registered_method=True)
        self.destroy = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/destroy',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.destroyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.bytesPerPixel = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/bytesPerPixel',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.bytesPerPixelRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.bytesPerPixelResponse.FromString,
                _registered_method=True)
        self.bytesPerChannel = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/bytesPerChannel',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.bytesPerChannelRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.bytesPerChannelResponse.FromString,
                _registered_method=True)
        self.channelCount = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/channelCount',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.channelCountRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.channelCountResponse.FromString,
                _registered_method=True)
        self.size = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/size',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.sizeRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.sizeResponse.FromString,
                _registered_method=True)
        self.sizeInBytes = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/sizeInBytes',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.sizeInBytesRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.sizeInBytesResponse.FromString,
                _registered_method=True)
        self.type = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/type',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.typeRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.typeResponse.FromString,
                _registered_method=True)
        self.sourceInfo = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/sourceInfo',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.sourceInfoRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.sourceInfoResponse.FromString,
                _registered_method=True)
        self.canWrapX = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/canWrapX',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.canWrapXRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.canWrapXResponse.FromString,
                _registered_method=True)
        self.canWrapY = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/canWrapY',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.canWrapYRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.canWrapYResponse.FromString,
                _registered_method=True)
        self.needsFlip = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/needsFlip',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.needsFlipRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.needsFlipResponse.FromString,
                _registered_method=True)
        self.hasAlpha = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/hasAlpha',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.hasAlphaRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.hasAlphaResponse.FromString,
                _registered_method=True)
        self.hasColor = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/hasColor',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.hasColorRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.hasColorResponse.FromString,
                _registered_method=True)
        self.isCompressed = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/isCompressed',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.isCompressedRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.isCompressedResponse.FromString,
                _registered_method=True)
        self.isEmpty = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/isEmpty',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.isEmptyRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.isEmptyResponse.FromString,
                _registered_method=True)
        self.isHalf = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/isHalf',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.isHalfRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.isHalfResponse.FromString,
                _registered_method=True)
        self.isHdr = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/isHdr',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.isHdrRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.isHdrResponse.FromString,
                _registered_method=True)
        self.isMono = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/isMono',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.isMonoRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.isMonoResponse.FromString,
                _registered_method=True)
        self.isPixelValid = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/isPixelValid',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.isPixelValidRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.isPixelValidResponse.FromString,
                _registered_method=True)
        self.compress = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/compress',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.compressRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.setPixelLdr = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/setPixelLdr',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.setPixelLdrRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.setPixelHalf = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/setPixelHalf',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.setPixelHalfRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.setPixelHdr = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/setPixelHdr',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.setPixelHdrRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.copyRegion = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/copyRegion',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.copyRegionRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.copyRegionResponse.FromString,
                _registered_method=True)
        self.compositeOnBlack = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/compositeOnBlack',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.compositeOnBlackRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.flipVertical = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/flipVertical',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.flipVerticalRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.convert = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/convert',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.convertRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.applyGaussianFilter = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/applyGaussianFilter',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.applyGaussianFilterRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.applyBoxFilter = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/applyBoxFilter',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.applyBoxFilterRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.applyLevels = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/applyLevels',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.applyLevelsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.compareValues = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/compareValues',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.compareValuesRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.calculateMeanSquareError = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/calculateMeanSquareError',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.calculateMeanSquareErrorRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.calculateMeanSquareErrorResponse.FromString,
                _registered_method=True)
        self.save = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/save',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.saveRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.saveResponse.FromString,
                _registered_method=True)
        self.saveAsync = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/saveAsync',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.saveAsyncRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.saveAsyncResponse.FromString,
                _registered_method=True)
        self.pixelAddr = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/pixelAddr',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.pixelAddrRequest.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.pixelAddrResponse.FromString,
                _registered_method=True)
        self.pixelAddr1 = channel.unary_unary(
                '/octaneapi.ApiImageBufferService/pixelAddr1',
                request_serializer=apiimagebuffer__pb2.ApiImageBuffer.pixelAddr1Request.SerializeToString,
                response_deserializer=apiimagebuffer__pb2.ApiImageBuffer.pixelAddr1Response.FromString,
                _registered_method=True)


class ApiImageBufferServiceServicer(object):
    """GRPC interface definition for class 'ApiImageBuffer' from 'apiimagebuffer.h'
    """

    def create(self, request, context):
        """/ Creates an empty image buffer
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create1(self, request, context):
        """/ Creates an image buffer using the given data
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def load(self, request, context):
        """/ Loads an image from file
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def load1(self, request, context):
        """/ Loads an image from encoded data(for instance, from a memory block of a png file)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def convertTo(self, request, context):
        """/ Convert the source image buffer to another one using the destination type
        / NOTE: Only works for uncompressed images
        / Meta data (like wrapping and alpha flags) are copied to the returned image
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def destroy(self, request, context):
        """/ Destroys the ApiImageBuffer object created by create()
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def bytesPerPixel(self, request, context):
        """/ Returns the bytes per pixel
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def bytesPerChannel(self, request, context):
        """/ Returns the bytes per pixel channel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def channelCount(self, request, context):
        """/ Returns the number of channels of a pixel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def size(self, request, context):
        """/ Returns the dimensions of the image in pixels
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sizeInBytes(self, request, context):
        """/ Returns the size in bytes of the image data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def type(self, request, context):
        """/ Returns the image buffer's type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sourceInfo(self, request, context):
        """/ Returns the image source information string
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def canWrapX(self, request, context):
        """/ TRUE if the image can wrap in horizontal direction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def canWrapY(self, request, context):
        """/ TRUE if the image can wrap in vertical direction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def needsFlip(self, request, context):
        """/ TRUE if the image has Y down (currently only for BC compressed images)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasAlpha(self, request, context):
        """/ TRUE for a transparent image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasColor(self, request, context):
        """/ TRUE for a chormatic image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isCompressed(self, request, context):
        """/ TRUE for a compressed image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isEmpty(self, request, context):
        """/ Checks if this image has data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isHalf(self, request, context):
        """/ TRUE for a 16bits Hdr image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isHdr(self, request, context):
        """/ TRUE for a Hdr image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isMono(self, request, context):
        """/ TRUE for a single channel image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isPixelValid(self, request, context):
        """/ TRUE is the given pixel location is valid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def compress(self, request, context):
        """/ Compresses this image buffer
        / NOTE: Only works for uncompressed images
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setPixelLdr(self, request, context):
        """/ Modifies a pixel in a Ldr image buffer
        / NOTE: This assumes that the buffer represents a un-compressed Ldr image and
        /       image that goes bottom-to-top (y points down)
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setPixelHalf(self, request, context):
        """/ Modifies a pixel in a 16bits Hdr image buffer
        / NOTE: This assumes that the buffer represents a 16bits un-compressed Hdr image and
        /       image that goes bottom-to-top (y points down)
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setPixelHdr(self, request, context):
        """/ Modifies a pixel in a 326bits Hdr image buffer
        / NOTE: This assumes that the buffer represents a 32bits un-compressed Hdr image and
        /       image that goes bottom-to-top (y points down)
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def copyRegion(self, request, context):
        """/ Copies a region from another ImageBuffer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def compositeOnBlack(self, request, context):
        """/ eliminates the alpha channel by multiplying the color channels by the alpha channel, and
        / setting the alpha channel to 1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def flipVertical(self, request, context):
        """/ vertical flip (in place)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def convert(self, request, context):
        """/ Convert the current image bufer to another type
        / NOTE: Only works for uncompressed images
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyGaussianFilter(self, request, context):
        """/ Applies gaussian filter to the image
        / NOTE: Only works for uncompressed images
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyBoxFilter(self, request, context):
        """/ Applies Box filter to the image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyLevels(self, request, context):
        """/ Applies level correction to the image
        / NOTE: the image must be un-compressed image and have float channels
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def compareValues(self, request, context):
        """/ Compares this image to another image, and puts the difference in this image
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def calculateMeanSquareError(self, request, context):
        """/ Compares this image to another image, and returns the mean square error for it
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def save(self, request, context):
        """/ Saves an image to disk
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveAsync(self, request, context):
        """/ Starts saving an image to disk on a background thread
        / Compressed images are saved as DDS, HDR images are saved as EXR and LDR images are saved as PNG
        / NOTE:  The correct extension is added to the path (if it didn't exist yet)
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pixelAddr(self, request, context):
        """/ Gets the constant reference to the memory location of a pixel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pixelAddr1(self, request, context):
        """/ Gets the mutable reference to the memory location of a pixel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiImageBufferServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.createRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.createResponse.SerializeToString,
            ),
            'create1': grpc.unary_unary_rpc_method_handler(
                    servicer.create1,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.create1Request.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.create1Response.SerializeToString,
            ),
            'load': grpc.unary_unary_rpc_method_handler(
                    servicer.load,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.loadRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.loadResponse.SerializeToString,
            ),
            'load1': grpc.unary_unary_rpc_method_handler(
                    servicer.load1,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.load1Request.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.load1Response.SerializeToString,
            ),
            'convertTo': grpc.unary_unary_rpc_method_handler(
                    servicer.convertTo,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.convertToRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.convertToResponse.SerializeToString,
            ),
            'destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.destroy,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.destroyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'bytesPerPixel': grpc.unary_unary_rpc_method_handler(
                    servicer.bytesPerPixel,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.bytesPerPixelRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.bytesPerPixelResponse.SerializeToString,
            ),
            'bytesPerChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.bytesPerChannel,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.bytesPerChannelRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.bytesPerChannelResponse.SerializeToString,
            ),
            'channelCount': grpc.unary_unary_rpc_method_handler(
                    servicer.channelCount,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.channelCountRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.channelCountResponse.SerializeToString,
            ),
            'size': grpc.unary_unary_rpc_method_handler(
                    servicer.size,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.sizeRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.sizeResponse.SerializeToString,
            ),
            'sizeInBytes': grpc.unary_unary_rpc_method_handler(
                    servicer.sizeInBytes,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.sizeInBytesRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.sizeInBytesResponse.SerializeToString,
            ),
            'type': grpc.unary_unary_rpc_method_handler(
                    servicer.type,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.typeRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.typeResponse.SerializeToString,
            ),
            'sourceInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.sourceInfo,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.sourceInfoRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.sourceInfoResponse.SerializeToString,
            ),
            'canWrapX': grpc.unary_unary_rpc_method_handler(
                    servicer.canWrapX,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.canWrapXRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.canWrapXResponse.SerializeToString,
            ),
            'canWrapY': grpc.unary_unary_rpc_method_handler(
                    servicer.canWrapY,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.canWrapYRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.canWrapYResponse.SerializeToString,
            ),
            'needsFlip': grpc.unary_unary_rpc_method_handler(
                    servicer.needsFlip,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.needsFlipRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.needsFlipResponse.SerializeToString,
            ),
            'hasAlpha': grpc.unary_unary_rpc_method_handler(
                    servicer.hasAlpha,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.hasAlphaRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.hasAlphaResponse.SerializeToString,
            ),
            'hasColor': grpc.unary_unary_rpc_method_handler(
                    servicer.hasColor,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.hasColorRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.hasColorResponse.SerializeToString,
            ),
            'isCompressed': grpc.unary_unary_rpc_method_handler(
                    servicer.isCompressed,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.isCompressedRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.isCompressedResponse.SerializeToString,
            ),
            'isEmpty': grpc.unary_unary_rpc_method_handler(
                    servicer.isEmpty,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.isEmptyRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.isEmptyResponse.SerializeToString,
            ),
            'isHalf': grpc.unary_unary_rpc_method_handler(
                    servicer.isHalf,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.isHalfRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.isHalfResponse.SerializeToString,
            ),
            'isHdr': grpc.unary_unary_rpc_method_handler(
                    servicer.isHdr,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.isHdrRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.isHdrResponse.SerializeToString,
            ),
            'isMono': grpc.unary_unary_rpc_method_handler(
                    servicer.isMono,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.isMonoRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.isMonoResponse.SerializeToString,
            ),
            'isPixelValid': grpc.unary_unary_rpc_method_handler(
                    servicer.isPixelValid,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.isPixelValidRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.isPixelValidResponse.SerializeToString,
            ),
            'compress': grpc.unary_unary_rpc_method_handler(
                    servicer.compress,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.compressRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'setPixelLdr': grpc.unary_unary_rpc_method_handler(
                    servicer.setPixelLdr,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.setPixelLdrRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'setPixelHalf': grpc.unary_unary_rpc_method_handler(
                    servicer.setPixelHalf,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.setPixelHalfRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'setPixelHdr': grpc.unary_unary_rpc_method_handler(
                    servicer.setPixelHdr,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.setPixelHdrRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'copyRegion': grpc.unary_unary_rpc_method_handler(
                    servicer.copyRegion,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.copyRegionRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.copyRegionResponse.SerializeToString,
            ),
            'compositeOnBlack': grpc.unary_unary_rpc_method_handler(
                    servicer.compositeOnBlack,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.compositeOnBlackRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'flipVertical': grpc.unary_unary_rpc_method_handler(
                    servicer.flipVertical,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.flipVerticalRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'convert': grpc.unary_unary_rpc_method_handler(
                    servicer.convert,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.convertRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'applyGaussianFilter': grpc.unary_unary_rpc_method_handler(
                    servicer.applyGaussianFilter,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.applyGaussianFilterRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'applyBoxFilter': grpc.unary_unary_rpc_method_handler(
                    servicer.applyBoxFilter,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.applyBoxFilterRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'applyLevels': grpc.unary_unary_rpc_method_handler(
                    servicer.applyLevels,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.applyLevelsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'compareValues': grpc.unary_unary_rpc_method_handler(
                    servicer.compareValues,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.compareValuesRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'calculateMeanSquareError': grpc.unary_unary_rpc_method_handler(
                    servicer.calculateMeanSquareError,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.calculateMeanSquareErrorRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.calculateMeanSquareErrorResponse.SerializeToString,
            ),
            'save': grpc.unary_unary_rpc_method_handler(
                    servicer.save,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.saveRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.saveResponse.SerializeToString,
            ),
            'saveAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.saveAsync,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.saveAsyncRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.saveAsyncResponse.SerializeToString,
            ),
            'pixelAddr': grpc.unary_unary_rpc_method_handler(
                    servicer.pixelAddr,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.pixelAddrRequest.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.pixelAddrResponse.SerializeToString,
            ),
            'pixelAddr1': grpc.unary_unary_rpc_method_handler(
                    servicer.pixelAddr1,
                    request_deserializer=apiimagebuffer__pb2.ApiImageBuffer.pixelAddr1Request.FromString,
                    response_serializer=apiimagebuffer__pb2.ApiImageBuffer.pixelAddr1Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiImageBufferService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiImageBufferService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiImageBufferService(object):
    """GRPC interface definition for class 'ApiImageBuffer' from 'apiimagebuffer.h'
    """

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/create',
            apiimagebuffer__pb2.ApiImageBuffer.createRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.createResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def create1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/create1',
            apiimagebuffer__pb2.ApiImageBuffer.create1Request.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.create1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/load',
            apiimagebuffer__pb2.ApiImageBuffer.loadRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.loadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def load1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/load1',
            apiimagebuffer__pb2.ApiImageBuffer.load1Request.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.load1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def convertTo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/convertTo',
            apiimagebuffer__pb2.ApiImageBuffer.convertToRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.convertToResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/destroy',
            apiimagebuffer__pb2.ApiImageBuffer.destroyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def bytesPerPixel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/bytesPerPixel',
            apiimagebuffer__pb2.ApiImageBuffer.bytesPerPixelRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.bytesPerPixelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def bytesPerChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/bytesPerChannel',
            apiimagebuffer__pb2.ApiImageBuffer.bytesPerChannelRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.bytesPerChannelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def channelCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/channelCount',
            apiimagebuffer__pb2.ApiImageBuffer.channelCountRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.channelCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def size(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/size',
            apiimagebuffer__pb2.ApiImageBuffer.sizeRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.sizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def sizeInBytes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/sizeInBytes',
            apiimagebuffer__pb2.ApiImageBuffer.sizeInBytesRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.sizeInBytesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def type(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/type',
            apiimagebuffer__pb2.ApiImageBuffer.typeRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.typeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def sourceInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/sourceInfo',
            apiimagebuffer__pb2.ApiImageBuffer.sourceInfoRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.sourceInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def canWrapX(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/canWrapX',
            apiimagebuffer__pb2.ApiImageBuffer.canWrapXRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.canWrapXResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def canWrapY(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/canWrapY',
            apiimagebuffer__pb2.ApiImageBuffer.canWrapYRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.canWrapYResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def needsFlip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/needsFlip',
            apiimagebuffer__pb2.ApiImageBuffer.needsFlipRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.needsFlipResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def hasAlpha(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/hasAlpha',
            apiimagebuffer__pb2.ApiImageBuffer.hasAlphaRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.hasAlphaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def hasColor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/hasColor',
            apiimagebuffer__pb2.ApiImageBuffer.hasColorRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.hasColorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isCompressed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/isCompressed',
            apiimagebuffer__pb2.ApiImageBuffer.isCompressedRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.isCompressedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isEmpty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/isEmpty',
            apiimagebuffer__pb2.ApiImageBuffer.isEmptyRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.isEmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isHalf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/isHalf',
            apiimagebuffer__pb2.ApiImageBuffer.isHalfRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.isHalfResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isHdr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/isHdr',
            apiimagebuffer__pb2.ApiImageBuffer.isHdrRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.isHdrResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isMono(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/isMono',
            apiimagebuffer__pb2.ApiImageBuffer.isMonoRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.isMonoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isPixelValid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/isPixelValid',
            apiimagebuffer__pb2.ApiImageBuffer.isPixelValidRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.isPixelValidResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def compress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/compress',
            apiimagebuffer__pb2.ApiImageBuffer.compressRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setPixelLdr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/setPixelLdr',
            apiimagebuffer__pb2.ApiImageBuffer.setPixelLdrRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setPixelHalf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/setPixelHalf',
            apiimagebuffer__pb2.ApiImageBuffer.setPixelHalfRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setPixelHdr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/setPixelHdr',
            apiimagebuffer__pb2.ApiImageBuffer.setPixelHdrRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def copyRegion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/copyRegion',
            apiimagebuffer__pb2.ApiImageBuffer.copyRegionRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.copyRegionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def compositeOnBlack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/compositeOnBlack',
            apiimagebuffer__pb2.ApiImageBuffer.compositeOnBlackRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def flipVertical(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/flipVertical',
            apiimagebuffer__pb2.ApiImageBuffer.flipVerticalRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def convert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/convert',
            apiimagebuffer__pb2.ApiImageBuffer.convertRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def applyGaussianFilter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/applyGaussianFilter',
            apiimagebuffer__pb2.ApiImageBuffer.applyGaussianFilterRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def applyBoxFilter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/applyBoxFilter',
            apiimagebuffer__pb2.ApiImageBuffer.applyBoxFilterRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def applyLevels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/applyLevels',
            apiimagebuffer__pb2.ApiImageBuffer.applyLevelsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def compareValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/compareValues',
            apiimagebuffer__pb2.ApiImageBuffer.compareValuesRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def calculateMeanSquareError(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/calculateMeanSquareError',
            apiimagebuffer__pb2.ApiImageBuffer.calculateMeanSquareErrorRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.calculateMeanSquareErrorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def save(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/save',
            apiimagebuffer__pb2.ApiImageBuffer.saveRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.saveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/saveAsync',
            apiimagebuffer__pb2.ApiImageBuffer.saveAsyncRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.saveAsyncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pixelAddr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/pixelAddr',
            apiimagebuffer__pb2.ApiImageBuffer.pixelAddrRequest.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.pixelAddrResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pixelAddr1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageBufferService/pixelAddr1',
            apiimagebuffer__pb2.ApiImageBuffer.pixelAddr1Request.SerializeToString,
            apiimagebuffer__pb2.ApiImageBuffer.pixelAddr1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
