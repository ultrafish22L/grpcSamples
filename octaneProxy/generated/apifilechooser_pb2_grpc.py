# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apifilechooser_pb2 as apifilechooser__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ApiFileChooserServiceStub(object):
    """GRPC interface definition for class 'ApiFileChooser' from 'apifilechooser.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/octaneapi.ApiFileChooserService/create',
                request_serializer=apifilechooser__pb2.ApiFileChooser.createRequest.SerializeToString,
                response_deserializer=apifilechooser__pb2.ApiFileChooser.createResponse.FromString,
                _registered_method=True)
        self.destroy = channel.unary_unary(
                '/octaneapi.ApiFileChooserService/destroy',
                request_serializer=apifilechooser__pb2.ApiFileChooser.destroyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.browseForFileToOpen = channel.unary_unary(
                '/octaneapi.ApiFileChooserService/browseForFileToOpen',
                request_serializer=apifilechooser__pb2.ApiFileChooser.browseForFileToOpenRequest.SerializeToString,
                response_deserializer=apifilechooser__pb2.ApiFileChooser.browseForFileToOpenResponse.FromString,
                _registered_method=True)
        self.browseForMultipleFilesToOpen = channel.unary_unary(
                '/octaneapi.ApiFileChooserService/browseForMultipleFilesToOpen',
                request_serializer=apifilechooser__pb2.ApiFileChooser.browseForMultipleFilesToOpenRequest.SerializeToString,
                response_deserializer=apifilechooser__pb2.ApiFileChooser.browseForMultipleFilesToOpenResponse.FromString,
                _registered_method=True)
        self.browseForFileToSave = channel.unary_unary(
                '/octaneapi.ApiFileChooserService/browseForFileToSave',
                request_serializer=apifilechooser__pb2.ApiFileChooser.browseForFileToSaveRequest.SerializeToString,
                response_deserializer=apifilechooser__pb2.ApiFileChooser.browseForFileToSaveResponse.FromString,
                _registered_method=True)
        self.browseForDirectory = channel.unary_unary(
                '/octaneapi.ApiFileChooserService/browseForDirectory',
                request_serializer=apifilechooser__pb2.ApiFileChooser.browseForDirectoryRequest.SerializeToString,
                response_deserializer=apifilechooser__pb2.ApiFileChooser.browseForDirectoryResponse.FromString,
                _registered_method=True)
        self.browseForMultipleFilesOrDirectories = channel.unary_unary(
                '/octaneapi.ApiFileChooserService/browseForMultipleFilesOrDirectories',
                request_serializer=apifilechooser__pb2.ApiFileChooser.browseForMultipleFilesOrDirectoriesRequest.SerializeToString,
                response_deserializer=apifilechooser__pb2.ApiFileChooser.browseForMultipleFilesOrDirectoriesResponse.FromString,
                _registered_method=True)
        self.result = channel.unary_unary(
                '/octaneapi.ApiFileChooserService/result',
                request_serializer=apifilechooser__pb2.ApiFileChooser.resultRequest.SerializeToString,
                response_deserializer=apifilechooser__pb2.ApiFileChooser.resultResponse.FromString,
                _registered_method=True)
        self.results = channel.unary_unary(
                '/octaneapi.ApiFileChooserService/results',
                request_serializer=apifilechooser__pb2.ApiFileChooser.resultsRequest.SerializeToString,
                response_deserializer=apifilechooser__pb2.ApiFileChooser.resultsResponse.FromString,
                _registered_method=True)


class ApiFileChooserServiceServicer(object):
    """GRPC interface definition for class 'ApiFileChooser' from 'apifilechooser.h'
    """

    def create(self, request, context):
        """/ Creates a new file chooser
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def destroy(self, request, context):
        """/ Destroys this file chooser created by create
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def browseForFileToOpen(self, request, context):
        """/ Shows a dialog box to choose a file to open
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def browseForMultipleFilesToOpen(self, request, context):
        """/ Same as browseForFileToOpen(), but allows the user to select multiple files
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def browseForFileToSave(self, request, context):
        """/ Shows a dialog box to choose a file to save
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def browseForDirectory(self, request, context):
        """/ Shows a dialog box to choose a directory
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def browseForMultipleFilesOrDirectories(self, request, context):
        """/ Same as browseForFileToOpen(), but allows the user to select multiple files and directories
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def result(self, request, context):
        """/ Returns the last file that was chosen by one of the browseFor methods
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def results(self, request, context):
        """/ Returns a list of all the files that were chosen during the last call to a browse method
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiFileChooserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=apifilechooser__pb2.ApiFileChooser.createRequest.FromString,
                    response_serializer=apifilechooser__pb2.ApiFileChooser.createResponse.SerializeToString,
            ),
            'destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.destroy,
                    request_deserializer=apifilechooser__pb2.ApiFileChooser.destroyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'browseForFileToOpen': grpc.unary_unary_rpc_method_handler(
                    servicer.browseForFileToOpen,
                    request_deserializer=apifilechooser__pb2.ApiFileChooser.browseForFileToOpenRequest.FromString,
                    response_serializer=apifilechooser__pb2.ApiFileChooser.browseForFileToOpenResponse.SerializeToString,
            ),
            'browseForMultipleFilesToOpen': grpc.unary_unary_rpc_method_handler(
                    servicer.browseForMultipleFilesToOpen,
                    request_deserializer=apifilechooser__pb2.ApiFileChooser.browseForMultipleFilesToOpenRequest.FromString,
                    response_serializer=apifilechooser__pb2.ApiFileChooser.browseForMultipleFilesToOpenResponse.SerializeToString,
            ),
            'browseForFileToSave': grpc.unary_unary_rpc_method_handler(
                    servicer.browseForFileToSave,
                    request_deserializer=apifilechooser__pb2.ApiFileChooser.browseForFileToSaveRequest.FromString,
                    response_serializer=apifilechooser__pb2.ApiFileChooser.browseForFileToSaveResponse.SerializeToString,
            ),
            'browseForDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.browseForDirectory,
                    request_deserializer=apifilechooser__pb2.ApiFileChooser.browseForDirectoryRequest.FromString,
                    response_serializer=apifilechooser__pb2.ApiFileChooser.browseForDirectoryResponse.SerializeToString,
            ),
            'browseForMultipleFilesOrDirectories': grpc.unary_unary_rpc_method_handler(
                    servicer.browseForMultipleFilesOrDirectories,
                    request_deserializer=apifilechooser__pb2.ApiFileChooser.browseForMultipleFilesOrDirectoriesRequest.FromString,
                    response_serializer=apifilechooser__pb2.ApiFileChooser.browseForMultipleFilesOrDirectoriesResponse.SerializeToString,
            ),
            'result': grpc.unary_unary_rpc_method_handler(
                    servicer.result,
                    request_deserializer=apifilechooser__pb2.ApiFileChooser.resultRequest.FromString,
                    response_serializer=apifilechooser__pb2.ApiFileChooser.resultResponse.SerializeToString,
            ),
            'results': grpc.unary_unary_rpc_method_handler(
                    servicer.results,
                    request_deserializer=apifilechooser__pb2.ApiFileChooser.resultsRequest.FromString,
                    response_serializer=apifilechooser__pb2.ApiFileChooser.resultsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiFileChooserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiFileChooserService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiFileChooserService(object):
    """GRPC interface definition for class 'ApiFileChooser' from 'apifilechooser.h'
    """

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileChooserService/create',
            apifilechooser__pb2.ApiFileChooser.createRequest.SerializeToString,
            apifilechooser__pb2.ApiFileChooser.createResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileChooserService/destroy',
            apifilechooser__pb2.ApiFileChooser.destroyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def browseForFileToOpen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileChooserService/browseForFileToOpen',
            apifilechooser__pb2.ApiFileChooser.browseForFileToOpenRequest.SerializeToString,
            apifilechooser__pb2.ApiFileChooser.browseForFileToOpenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def browseForMultipleFilesToOpen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileChooserService/browseForMultipleFilesToOpen',
            apifilechooser__pb2.ApiFileChooser.browseForMultipleFilesToOpenRequest.SerializeToString,
            apifilechooser__pb2.ApiFileChooser.browseForMultipleFilesToOpenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def browseForFileToSave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileChooserService/browseForFileToSave',
            apifilechooser__pb2.ApiFileChooser.browseForFileToSaveRequest.SerializeToString,
            apifilechooser__pb2.ApiFileChooser.browseForFileToSaveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def browseForDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileChooserService/browseForDirectory',
            apifilechooser__pb2.ApiFileChooser.browseForDirectoryRequest.SerializeToString,
            apifilechooser__pb2.ApiFileChooser.browseForDirectoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def browseForMultipleFilesOrDirectories(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileChooserService/browseForMultipleFilesOrDirectories',
            apifilechooser__pb2.ApiFileChooser.browseForMultipleFilesOrDirectoriesRequest.SerializeToString,
            apifilechooser__pb2.ApiFileChooser.browseForMultipleFilesOrDirectoriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileChooserService/result',
            apifilechooser__pb2.ApiFileChooser.resultRequest.SerializeToString,
            apifilechooser__pb2.ApiFileChooser.resultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def results(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileChooserService/results',
            apifilechooser__pb2.ApiFileChooser.resultsRequest.SerializeToString,
            apifilechooser__pb2.ApiFileChooser.resultsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
