# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import callback_pb2 as callback__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class CallbackHandlerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Start = channel.unary_unary(
                '/octaneapi.CallbackHandler/Start',
                request_serializer=callback__pb2.StartRequest.SerializeToString,
                response_deserializer=callback__pb2.StartResponse.FromString,
                _registered_method=True)
        self.Stop = channel.unary_unary(
                '/octaneapi.CallbackHandler/Stop',
                request_serializer=callback__pb2.StopRequest.SerializeToString,
                response_deserializer=callback__pb2.StopResponse.FromString,
                _registered_method=True)
        self.PerformBlocking = channel.unary_unary(
                '/octaneapi.CallbackHandler/PerformBlocking',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.LoadRenderStateProject = channel.unary_unary(
                '/octaneapi.CallbackHandler/LoadRenderStateProject',
                request_serializer=callback__pb2.LoadRenderStateProjectRequest.SerializeToString,
                response_deserializer=callback__pb2.LoadRenderStateProjectResponse.FromString,
                _registered_method=True)
        self.OnDaemonUpdate = channel.unary_unary(
                '/octaneapi.CallbackHandler/OnDaemonUpdate',
                request_serializer=callback__pb2.DaemonUpdateRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.OnStatusUpdate = channel.unary_unary(
                '/octaneapi.CallbackHandler/OnStatusUpdate',
                request_serializer=callback__pb2.StatusUpdateRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.TriggerFunc = channel.unary_unary(
                '/octaneapi.CallbackHandler/TriggerFunc',
                request_serializer=callback__pb2.TriggerFuncRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.EvaluateFunc = channel.unary_unary(
                '/octaneapi.CallbackHandler/EvaluateFunc',
                request_serializer=callback__pb2.EvaluateFuncRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.CleanupFunc = channel.unary_unary(
                '/octaneapi.CallbackHandler/CleanupFunc',
                request_serializer=callback__pb2.CleanupFuncRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.DestroyFunc = channel.unary_unary(
                '/octaneapi.CallbackHandler/DestroyFunc',
                request_serializer=callback__pb2.DestroyFuncRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.ColorChanged = channel.unary_unary(
                '/octaneapi.CallbackHandler/ColorChanged',
                request_serializer=callback__pb2.ColorChangedRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.CreateFunc = channel.unary_unary(
                '/octaneapi.CallbackHandler/CreateFunc',
                request_serializer=callback__pb2.CreateFuncRequest.SerializeToString,
                response_deserializer=callback__pb2.CreateFuncResponse.FromString,
                _registered_method=True)
        self.InitFunc = channel.unary_unary(
                '/octaneapi.CallbackHandler/InitFunc',
                request_serializer=callback__pb2.InitFuncRequest.SerializeToString,
                response_deserializer=callback__pb2.InitFuncResponse.FromString,
                _registered_method=True)
        self.ChangeManagerObserver = channel.unary_unary(
                '/octaneapi.CallbackHandler/ChangeManagerObserver',
                request_serializer=callback__pb2.ChangeManagerObserverRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.ChangeManagerTimeObserver = channel.unary_unary(
                '/octaneapi.CallbackHandler/ChangeManagerTimeObserver',
                request_serializer=callback__pb2.ChangeManagerTimeObserverRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.ProjectManagerObserver = channel.unary_unary(
                '/octaneapi.CallbackHandler/ProjectManagerObserver',
                request_serializer=callback__pb2.ObserverRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.SelectionManagerObserver = channel.unary_unary(
                '/octaneapi.CallbackHandler/SelectionManagerObserver',
                request_serializer=callback__pb2.ObserverRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.IsReady = channel.unary_unary(
                '/octaneapi.CallbackHandler/IsReady',
                request_serializer=callback__pb2.IsReadyRequest.SerializeToString,
                response_deserializer=callback__pb2.IsReadyResponse.FromString,
                _registered_method=True)
        self.Notify = channel.unary_unary(
                '/octaneapi.CallbackHandler/Notify',
                request_serializer=callback__pb2.NotificationRequest.SerializeToString,
                response_deserializer=callback__pb2.NotificationResponse.FromString,
                _registered_method=True)
        self.CommandModuleRunFunc = channel.unary_unary(
                '/octaneapi.CallbackHandler/CommandModuleRunFunc',
                request_serializer=callback__pb2.CommandModuleRunFuncRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.ObserverCallback = channel.unary_unary(
                '/octaneapi.CallbackHandler/ObserverCallback',
                request_serializer=callback__pb2.ObserverCallbackRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.DbViewLoaded = channel.unary_unary(
                '/octaneapi.CallbackHandler/DbViewLoaded',
                request_serializer=callback__pb2.DbViewLoadedRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.Finish = channel.unary_unary(
                '/octaneapi.CallbackHandler/Finish',
                request_serializer=callback__pb2.FinishRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.OnTileBlended = channel.unary_unary(
                '/octaneapi.CallbackHandler/OnTileBlended',
                request_serializer=callback__pb2.BasicCallbackRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.OnNewStatistics = channel.unary_unary(
                '/octaneapi.CallbackHandler/OnNewStatistics',
                request_serializer=callback__pb2.BasicCallbackRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.OnNewImage = channel.unary_unary(
                '/octaneapi.CallbackHandler/OnNewImage',
                request_serializer=callback__pb2.OnNewImageRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.OnOcioError = channel.unary_unary(
                '/octaneapi.CallbackHandler/OnOcioError',
                request_serializer=callback__pb2.OnOcioErrorRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.OnRenderFailure = channel.unary_unary(
                '/octaneapi.CallbackHandler/OnRenderFailure',
                request_serializer=callback__pb2.BasicCallbackRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.NextChunk = channel.unary_unary(
                '/octaneapi.CallbackHandler/NextChunk',
                request_serializer=callback__pb2.NextChunkRequest.SerializeToString,
                response_deserializer=callback__pb2.NextChunkResponse.FromString,
                _registered_method=True)
        self.Checked = channel.unary_unary(
                '/octaneapi.CallbackHandler/Checked',
                request_serializer=callback__pb2.CheckedRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.ComboBoxChanged = channel.unary_unary(
                '/octaneapi.CallbackHandler/ComboBoxChanged',
                request_serializer=callback__pb2.ComboBoxChangedRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.ApiLog = channel.unary_unary(
                '/octaneapi.CallbackHandler/ApiLog',
                request_serializer=callback__pb2.ApiLogRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.OnMainWindowClose = channel.unary_unary(
                '/octaneapi.CallbackHandler/OnMainWindowClose',
                request_serializer=callback__pb2.BasicCallbackRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.MouseEvent = channel.unary_unary(
                '/octaneapi.CallbackHandler/MouseEvent',
                request_serializer=callback__pb2.MouseEventRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.DbViewClosing = channel.unary_unary(
                '/octaneapi.CallbackHandler/DbViewClosing',
                request_serializer=callback__pb2.BasicCallbackRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.NumericBoxChanged = channel.unary_unary(
                '/octaneapi.CallbackHandler/NumericBoxChanged',
                request_serializer=callback__pb2.NumericBoxChangedRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.Callback1 = channel.unary_unary(
                '/octaneapi.CallbackHandler/Callback1',
                request_serializer=callback__pb2.Callback1Request.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.Callback2 = channel.unary_unary(
                '/octaneapi.CallbackHandler/Callback2',
                request_serializer=callback__pb2.Callback2Request.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.ApiProjectManager_AssetMissing = channel.unary_unary(
                '/octaneapi.CallbackHandler/ApiProjectManager_AssetMissing',
                request_serializer=callback__pb2.AssetMissingRequest.SerializeToString,
                response_deserializer=callback__pb2.AssetMissingResponse.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/octaneapi.CallbackHandler/Update',
                request_serializer=callback__pb2.UpdateRequest.SerializeToString,
                response_deserializer=callback__pb2.UpdateResponse.FromString,
                _registered_method=True)
        self.AsyncUpdate = channel.unary_unary(
                '/octaneapi.CallbackHandler/AsyncUpdate',
                request_serializer=callback__pb2.AsyncUpdateRequest.SerializeToString,
                response_deserializer=callback__pb2.UpdateResponse.FromString,
                _registered_method=True)
        self.AssetMissing = channel.unary_unary(
                '/octaneapi.CallbackHandler/AssetMissing',
                request_serializer=callback__pb2.AssetMissingRequest.SerializeToString,
                response_deserializer=callback__pb2.AssetMissingResponse.FromString,
                _registered_method=True)
        self.NumRows = channel.unary_unary(
                '/octaneapi.CallbackHandler/NumRows',
                request_serializer=callback__pb2.BasicCallbackRequest.SerializeToString,
                response_deserializer=callback__pb2.NumRowsResponse.FromString,
                _registered_method=True)
        self.Content = channel.unary_unary(
                '/octaneapi.CallbackHandler/Content',
                request_serializer=callback__pb2.ContentRequest.SerializeToString,
                response_deserializer=callback__pb2.ContentResponse.FromString,
                _registered_method=True)
        self.ButtonClicked = channel.unary_unary(
                '/octaneapi.CallbackHandler/ButtonClicked',
                request_serializer=callback__pb2.ButtonClickedRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.SelectionChanged = channel.unary_unary(
                '/octaneapi.CallbackHandler/SelectionChanged',
                request_serializer=callback__pb2.SelectionChangedRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.TextEditorChanged = channel.unary_unary(
                '/octaneapi.CallbackHandler/TextEditorChanged',
                request_serializer=callback__pb2.TextEditorChangedRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)
        self.OnWindowClose = channel.unary_unary(
                '/octaneapi.CallbackHandler/OnWindowClose',
                request_serializer=callback__pb2.OnWindowCloseRequest.SerializeToString,
                response_deserializer=callback__pb2.CallbackAck.FromString,
                _registered_method=True)


class CallbackHandlerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformBlocking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadRenderStateProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnDaemonUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnStatusUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TriggerFunc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvaluateFunc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CleanupFunc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DestroyFunc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ColorChanged(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateFunc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitFunc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeManagerObserver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeManagerTimeObserver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProjectManagerObserver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectionManagerObserver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Notify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommandModuleRunFunc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObserverCallback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DbViewLoaded(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Finish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnTileBlended(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnNewStatistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnNewImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnOcioError(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnRenderFailure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NextChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Checked(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComboBoxChanged(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApiLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnMainWindowClose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MouseEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DbViewClosing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NumericBoxChanged(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Callback1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Callback2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApiProjectManager_AssetMissing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AsyncUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssetMissing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NumRows(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Content(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ButtonClicked(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectionChanged(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TextEditorChanged(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnWindowClose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CallbackHandlerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=callback__pb2.StartRequest.FromString,
                    response_serializer=callback__pb2.StartResponse.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=callback__pb2.StopRequest.FromString,
                    response_serializer=callback__pb2.StopResponse.SerializeToString,
            ),
            'PerformBlocking': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformBlocking,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'LoadRenderStateProject': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadRenderStateProject,
                    request_deserializer=callback__pb2.LoadRenderStateProjectRequest.FromString,
                    response_serializer=callback__pb2.LoadRenderStateProjectResponse.SerializeToString,
            ),
            'OnDaemonUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.OnDaemonUpdate,
                    request_deserializer=callback__pb2.DaemonUpdateRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'OnStatusUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.OnStatusUpdate,
                    request_deserializer=callback__pb2.StatusUpdateRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'TriggerFunc': grpc.unary_unary_rpc_method_handler(
                    servicer.TriggerFunc,
                    request_deserializer=callback__pb2.TriggerFuncRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'EvaluateFunc': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluateFunc,
                    request_deserializer=callback__pb2.EvaluateFuncRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'CleanupFunc': grpc.unary_unary_rpc_method_handler(
                    servicer.CleanupFunc,
                    request_deserializer=callback__pb2.CleanupFuncRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'DestroyFunc': grpc.unary_unary_rpc_method_handler(
                    servicer.DestroyFunc,
                    request_deserializer=callback__pb2.DestroyFuncRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'ColorChanged': grpc.unary_unary_rpc_method_handler(
                    servicer.ColorChanged,
                    request_deserializer=callback__pb2.ColorChangedRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'CreateFunc': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFunc,
                    request_deserializer=callback__pb2.CreateFuncRequest.FromString,
                    response_serializer=callback__pb2.CreateFuncResponse.SerializeToString,
            ),
            'InitFunc': grpc.unary_unary_rpc_method_handler(
                    servicer.InitFunc,
                    request_deserializer=callback__pb2.InitFuncRequest.FromString,
                    response_serializer=callback__pb2.InitFuncResponse.SerializeToString,
            ),
            'ChangeManagerObserver': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeManagerObserver,
                    request_deserializer=callback__pb2.ChangeManagerObserverRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'ChangeManagerTimeObserver': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeManagerTimeObserver,
                    request_deserializer=callback__pb2.ChangeManagerTimeObserverRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'ProjectManagerObserver': grpc.unary_unary_rpc_method_handler(
                    servicer.ProjectManagerObserver,
                    request_deserializer=callback__pb2.ObserverRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'SelectionManagerObserver': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectionManagerObserver,
                    request_deserializer=callback__pb2.ObserverRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'IsReady': grpc.unary_unary_rpc_method_handler(
                    servicer.IsReady,
                    request_deserializer=callback__pb2.IsReadyRequest.FromString,
                    response_serializer=callback__pb2.IsReadyResponse.SerializeToString,
            ),
            'Notify': grpc.unary_unary_rpc_method_handler(
                    servicer.Notify,
                    request_deserializer=callback__pb2.NotificationRequest.FromString,
                    response_serializer=callback__pb2.NotificationResponse.SerializeToString,
            ),
            'CommandModuleRunFunc': grpc.unary_unary_rpc_method_handler(
                    servicer.CommandModuleRunFunc,
                    request_deserializer=callback__pb2.CommandModuleRunFuncRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'ObserverCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.ObserverCallback,
                    request_deserializer=callback__pb2.ObserverCallbackRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'DbViewLoaded': grpc.unary_unary_rpc_method_handler(
                    servicer.DbViewLoaded,
                    request_deserializer=callback__pb2.DbViewLoadedRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'Finish': grpc.unary_unary_rpc_method_handler(
                    servicer.Finish,
                    request_deserializer=callback__pb2.FinishRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'OnTileBlended': grpc.unary_unary_rpc_method_handler(
                    servicer.OnTileBlended,
                    request_deserializer=callback__pb2.BasicCallbackRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'OnNewStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.OnNewStatistics,
                    request_deserializer=callback__pb2.BasicCallbackRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'OnNewImage': grpc.unary_unary_rpc_method_handler(
                    servicer.OnNewImage,
                    request_deserializer=callback__pb2.OnNewImageRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'OnOcioError': grpc.unary_unary_rpc_method_handler(
                    servicer.OnOcioError,
                    request_deserializer=callback__pb2.OnOcioErrorRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'OnRenderFailure': grpc.unary_unary_rpc_method_handler(
                    servicer.OnRenderFailure,
                    request_deserializer=callback__pb2.BasicCallbackRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'NextChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.NextChunk,
                    request_deserializer=callback__pb2.NextChunkRequest.FromString,
                    response_serializer=callback__pb2.NextChunkResponse.SerializeToString,
            ),
            'Checked': grpc.unary_unary_rpc_method_handler(
                    servicer.Checked,
                    request_deserializer=callback__pb2.CheckedRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'ComboBoxChanged': grpc.unary_unary_rpc_method_handler(
                    servicer.ComboBoxChanged,
                    request_deserializer=callback__pb2.ComboBoxChangedRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'ApiLog': grpc.unary_unary_rpc_method_handler(
                    servicer.ApiLog,
                    request_deserializer=callback__pb2.ApiLogRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'OnMainWindowClose': grpc.unary_unary_rpc_method_handler(
                    servicer.OnMainWindowClose,
                    request_deserializer=callback__pb2.BasicCallbackRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'MouseEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.MouseEvent,
                    request_deserializer=callback__pb2.MouseEventRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'DbViewClosing': grpc.unary_unary_rpc_method_handler(
                    servicer.DbViewClosing,
                    request_deserializer=callback__pb2.BasicCallbackRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'NumericBoxChanged': grpc.unary_unary_rpc_method_handler(
                    servicer.NumericBoxChanged,
                    request_deserializer=callback__pb2.NumericBoxChangedRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'Callback1': grpc.unary_unary_rpc_method_handler(
                    servicer.Callback1,
                    request_deserializer=callback__pb2.Callback1Request.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'Callback2': grpc.unary_unary_rpc_method_handler(
                    servicer.Callback2,
                    request_deserializer=callback__pb2.Callback2Request.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'ApiProjectManager_AssetMissing': grpc.unary_unary_rpc_method_handler(
                    servicer.ApiProjectManager_AssetMissing,
                    request_deserializer=callback__pb2.AssetMissingRequest.FromString,
                    response_serializer=callback__pb2.AssetMissingResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=callback__pb2.UpdateRequest.FromString,
                    response_serializer=callback__pb2.UpdateResponse.SerializeToString,
            ),
            'AsyncUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.AsyncUpdate,
                    request_deserializer=callback__pb2.AsyncUpdateRequest.FromString,
                    response_serializer=callback__pb2.UpdateResponse.SerializeToString,
            ),
            'AssetMissing': grpc.unary_unary_rpc_method_handler(
                    servicer.AssetMissing,
                    request_deserializer=callback__pb2.AssetMissingRequest.FromString,
                    response_serializer=callback__pb2.AssetMissingResponse.SerializeToString,
            ),
            'NumRows': grpc.unary_unary_rpc_method_handler(
                    servicer.NumRows,
                    request_deserializer=callback__pb2.BasicCallbackRequest.FromString,
                    response_serializer=callback__pb2.NumRowsResponse.SerializeToString,
            ),
            'Content': grpc.unary_unary_rpc_method_handler(
                    servicer.Content,
                    request_deserializer=callback__pb2.ContentRequest.FromString,
                    response_serializer=callback__pb2.ContentResponse.SerializeToString,
            ),
            'ButtonClicked': grpc.unary_unary_rpc_method_handler(
                    servicer.ButtonClicked,
                    request_deserializer=callback__pb2.ButtonClickedRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'SelectionChanged': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectionChanged,
                    request_deserializer=callback__pb2.SelectionChangedRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'TextEditorChanged': grpc.unary_unary_rpc_method_handler(
                    servicer.TextEditorChanged,
                    request_deserializer=callback__pb2.TextEditorChangedRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
            'OnWindowClose': grpc.unary_unary_rpc_method_handler(
                    servicer.OnWindowClose,
                    request_deserializer=callback__pb2.OnWindowCloseRequest.FromString,
                    response_serializer=callback__pb2.CallbackAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.CallbackHandler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.CallbackHandler', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CallbackHandler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/Start',
            callback__pb2.StartRequest.SerializeToString,
            callback__pb2.StartResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/Stop',
            callback__pb2.StopRequest.SerializeToString,
            callback__pb2.StopResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PerformBlocking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/PerformBlocking',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadRenderStateProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/LoadRenderStateProject',
            callback__pb2.LoadRenderStateProjectRequest.SerializeToString,
            callback__pb2.LoadRenderStateProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OnDaemonUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/OnDaemonUpdate',
            callback__pb2.DaemonUpdateRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OnStatusUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/OnStatusUpdate',
            callback__pb2.StatusUpdateRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TriggerFunc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/TriggerFunc',
            callback__pb2.TriggerFuncRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EvaluateFunc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/EvaluateFunc',
            callback__pb2.EvaluateFuncRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CleanupFunc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/CleanupFunc',
            callback__pb2.CleanupFuncRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DestroyFunc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/DestroyFunc',
            callback__pb2.DestroyFuncRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ColorChanged(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/ColorChanged',
            callback__pb2.ColorChangedRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateFunc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/CreateFunc',
            callback__pb2.CreateFuncRequest.SerializeToString,
            callback__pb2.CreateFuncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InitFunc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/InitFunc',
            callback__pb2.InitFuncRequest.SerializeToString,
            callback__pb2.InitFuncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangeManagerObserver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/ChangeManagerObserver',
            callback__pb2.ChangeManagerObserverRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangeManagerTimeObserver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/ChangeManagerTimeObserver',
            callback__pb2.ChangeManagerTimeObserverRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProjectManagerObserver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/ProjectManagerObserver',
            callback__pb2.ObserverRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SelectionManagerObserver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/SelectionManagerObserver',
            callback__pb2.ObserverRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/IsReady',
            callback__pb2.IsReadyRequest.SerializeToString,
            callback__pb2.IsReadyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/Notify',
            callback__pb2.NotificationRequest.SerializeToString,
            callback__pb2.NotificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CommandModuleRunFunc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/CommandModuleRunFunc',
            callback__pb2.CommandModuleRunFuncRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ObserverCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/ObserverCallback',
            callback__pb2.ObserverCallbackRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DbViewLoaded(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/DbViewLoaded',
            callback__pb2.DbViewLoadedRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Finish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/Finish',
            callback__pb2.FinishRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OnTileBlended(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/OnTileBlended',
            callback__pb2.BasicCallbackRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OnNewStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/OnNewStatistics',
            callback__pb2.BasicCallbackRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OnNewImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/OnNewImage',
            callback__pb2.OnNewImageRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OnOcioError(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/OnOcioError',
            callback__pb2.OnOcioErrorRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OnRenderFailure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/OnRenderFailure',
            callback__pb2.BasicCallbackRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NextChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/NextChunk',
            callback__pb2.NextChunkRequest.SerializeToString,
            callback__pb2.NextChunkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Checked(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/Checked',
            callback__pb2.CheckedRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ComboBoxChanged(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/ComboBoxChanged',
            callback__pb2.ComboBoxChangedRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ApiLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/ApiLog',
            callback__pb2.ApiLogRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OnMainWindowClose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/OnMainWindowClose',
            callback__pb2.BasicCallbackRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MouseEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/MouseEvent',
            callback__pb2.MouseEventRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DbViewClosing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/DbViewClosing',
            callback__pb2.BasicCallbackRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NumericBoxChanged(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/NumericBoxChanged',
            callback__pb2.NumericBoxChangedRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Callback1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/Callback1',
            callback__pb2.Callback1Request.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Callback2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/Callback2',
            callback__pb2.Callback2Request.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ApiProjectManager_AssetMissing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/ApiProjectManager_AssetMissing',
            callback__pb2.AssetMissingRequest.SerializeToString,
            callback__pb2.AssetMissingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/Update',
            callback__pb2.UpdateRequest.SerializeToString,
            callback__pb2.UpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AsyncUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/AsyncUpdate',
            callback__pb2.AsyncUpdateRequest.SerializeToString,
            callback__pb2.UpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssetMissing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/AssetMissing',
            callback__pb2.AssetMissingRequest.SerializeToString,
            callback__pb2.AssetMissingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NumRows(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/NumRows',
            callback__pb2.BasicCallbackRequest.SerializeToString,
            callback__pb2.NumRowsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Content(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/Content',
            callback__pb2.ContentRequest.SerializeToString,
            callback__pb2.ContentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ButtonClicked(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/ButtonClicked',
            callback__pb2.ButtonClickedRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SelectionChanged(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/SelectionChanged',
            callback__pb2.SelectionChangedRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TextEditorChanged(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/TextEditorChanged',
            callback__pb2.TextEditorChangedRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OnWindowClose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.CallbackHandler/OnWindowClose',
            callback__pb2.OnWindowCloseRequest.SerializeToString,
            callback__pb2.CallbackAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class StreamCallbackServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.callbackChannel = channel.unary_stream(
                '/octaneapi.StreamCallbackService/callbackChannel',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=callback__pb2.StreamCallbackRequest.FromString,
                _registered_method=True)


class StreamCallbackServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def callbackChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamCallbackServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'callbackChannel': grpc.unary_stream_rpc_method_handler(
                    servicer.callbackChannel,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=callback__pb2.StreamCallbackRequest.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.StreamCallbackService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.StreamCallbackService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StreamCallbackService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def callbackChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/octaneapi.StreamCallbackService/callbackChannel',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            callback__pb2.StreamCallbackRequest.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
