# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import octanevolume_pb2 as octanevolume__pb2


class VdbGridInfoServiceStub(object):
    """GRPC interface definition for class 'VdbGridInfo' from 'octanevolume.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.name = channel.unary_unary(
                '/octaneapi.VdbGridInfoService/name',
                request_serializer=octanevolume__pb2.VdbGridInfo.nameRequest.SerializeToString,
                response_deserializer=octanevolume__pb2.VdbGridInfo.nameResponse.FromString,
                _registered_method=True)
        self.type = channel.unary_unary(
                '/octaneapi.VdbGridInfoService/type',
                request_serializer=octanevolume__pb2.VdbGridInfo.typeRequest.SerializeToString,
                response_deserializer=octanevolume__pb2.VdbGridInfo.typeResponse.FromString,
                _registered_method=True)
        self.resolution = channel.unary_unary(
                '/octaneapi.VdbGridInfoService/resolution',
                request_serializer=octanevolume__pb2.VdbGridInfo.resolutionRequest.SerializeToString,
                response_deserializer=octanevolume__pb2.VdbGridInfo.resolutionResponse.FromString,
                _registered_method=True)
        self.minBound = channel.unary_unary(
                '/octaneapi.VdbGridInfoService/minBound',
                request_serializer=octanevolume__pb2.VdbGridInfo.minBoundRequest.SerializeToString,
                response_deserializer=octanevolume__pb2.VdbGridInfo.minBoundResponse.FromString,
                _registered_method=True)
        self.maxBound = channel.unary_unary(
                '/octaneapi.VdbGridInfoService/maxBound',
                request_serializer=octanevolume__pb2.VdbGridInfo.maxBoundRequest.SerializeToString,
                response_deserializer=octanevolume__pb2.VdbGridInfo.maxBoundResponse.FromString,
                _registered_method=True)
        self.transform = channel.unary_unary(
                '/octaneapi.VdbGridInfoService/transform',
                request_serializer=octanevolume__pb2.VdbGridInfo.transformRequest.SerializeToString,
                response_deserializer=octanevolume__pb2.VdbGridInfo.transformResponse.FromString,
                _registered_method=True)


class VdbGridInfoServiceServicer(object):
    """GRPC interface definition for class 'VdbGridInfo' from 'octanevolume.h'
    """

    def name(self, request, context):
        """/ Returns the name of this grid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def type(self, request, context):
        """/ Returns the type of this grid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resolution(self, request, context):
        """/ Returns the width, height and depth of the grid in voxels
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def minBound(self, request, context):
        """/ Returns the minimum active voxel bounding box of the grid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def maxBound(self, request, context):
        """/ Returns the maximum active voxel bounding box of the grid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transform(self, request, context):
        """/ Returns the _transposed_ transform from the VDB, excluding the perspective projection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VdbGridInfoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'name': grpc.unary_unary_rpc_method_handler(
                    servicer.name,
                    request_deserializer=octanevolume__pb2.VdbGridInfo.nameRequest.FromString,
                    response_serializer=octanevolume__pb2.VdbGridInfo.nameResponse.SerializeToString,
            ),
            'type': grpc.unary_unary_rpc_method_handler(
                    servicer.type,
                    request_deserializer=octanevolume__pb2.VdbGridInfo.typeRequest.FromString,
                    response_serializer=octanevolume__pb2.VdbGridInfo.typeResponse.SerializeToString,
            ),
            'resolution': grpc.unary_unary_rpc_method_handler(
                    servicer.resolution,
                    request_deserializer=octanevolume__pb2.VdbGridInfo.resolutionRequest.FromString,
                    response_serializer=octanevolume__pb2.VdbGridInfo.resolutionResponse.SerializeToString,
            ),
            'minBound': grpc.unary_unary_rpc_method_handler(
                    servicer.minBound,
                    request_deserializer=octanevolume__pb2.VdbGridInfo.minBoundRequest.FromString,
                    response_serializer=octanevolume__pb2.VdbGridInfo.minBoundResponse.SerializeToString,
            ),
            'maxBound': grpc.unary_unary_rpc_method_handler(
                    servicer.maxBound,
                    request_deserializer=octanevolume__pb2.VdbGridInfo.maxBoundRequest.FromString,
                    response_serializer=octanevolume__pb2.VdbGridInfo.maxBoundResponse.SerializeToString,
            ),
            'transform': grpc.unary_unary_rpc_method_handler(
                    servicer.transform,
                    request_deserializer=octanevolume__pb2.VdbGridInfo.transformRequest.FromString,
                    response_serializer=octanevolume__pb2.VdbGridInfo.transformResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.VdbGridInfoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.VdbGridInfoService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VdbGridInfoService(object):
    """GRPC interface definition for class 'VdbGridInfo' from 'octanevolume.h'
    """

    @staticmethod
    def name(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.VdbGridInfoService/name',
            octanevolume__pb2.VdbGridInfo.nameRequest.SerializeToString,
            octanevolume__pb2.VdbGridInfo.nameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def type(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.VdbGridInfoService/type',
            octanevolume__pb2.VdbGridInfo.typeRequest.SerializeToString,
            octanevolume__pb2.VdbGridInfo.typeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def resolution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.VdbGridInfoService/resolution',
            octanevolume__pb2.VdbGridInfo.resolutionRequest.SerializeToString,
            octanevolume__pb2.VdbGridInfo.resolutionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def minBound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.VdbGridInfoService/minBound',
            octanevolume__pb2.VdbGridInfo.minBoundRequest.SerializeToString,
            octanevolume__pb2.VdbGridInfo.minBoundResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def maxBound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.VdbGridInfoService/maxBound',
            octanevolume__pb2.VdbGridInfo.maxBoundRequest.SerializeToString,
            octanevolume__pb2.VdbGridInfo.maxBoundResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def transform(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.VdbGridInfoService/transform',
            octanevolume__pb2.VdbGridInfo.transformRequest.SerializeToString,
            octanevolume__pb2.VdbGridInfo.transformResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class VdbGridSamplerServiceStub(object):
    """GRPC interface definition for class 'VdbGridSampler' from 'octanevolume.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getValue = channel.unary_unary(
                '/octaneapi.VdbGridSamplerService/getValue',
                request_serializer=octanevolume__pb2.VdbGridSampler.getValueRequest.SerializeToString,
                response_deserializer=octanevolume__pb2.VdbGridSampler.getValueResponse.FromString,
                _registered_method=True)


class VdbGridSamplerServiceServicer(object):
    """GRPC interface definition for class 'VdbGridSampler' from 'octanevolume.h'
    """

    def getValue(self, request, context):
        """/ Returns the voxel value at the given location of the current grid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VdbGridSamplerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getValue': grpc.unary_unary_rpc_method_handler(
                    servicer.getValue,
                    request_deserializer=octanevolume__pb2.VdbGridSampler.getValueRequest.FromString,
                    response_serializer=octanevolume__pb2.VdbGridSampler.getValueResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.VdbGridSamplerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.VdbGridSamplerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VdbGridSamplerService(object):
    """GRPC interface definition for class 'VdbGridSampler' from 'octanevolume.h'
    """

    @staticmethod
    def getValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.VdbGridSamplerService/getValue',
            octanevolume__pb2.VdbGridSampler.getValueRequest.SerializeToString,
            octanevolume__pb2.VdbGridSampler.getValueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class VdbInfoServiceStub(object):
    """GRPC interface definition for class 'VdbInfo' from 'octanevolume.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.valid = channel.unary_unary(
                '/octaneapi.VdbInfoService/valid',
                request_serializer=octanevolume__pb2.VdbInfo.validRequest.SerializeToString,
                response_deserializer=octanevolume__pb2.VdbInfo.validResponse.FromString,
                _registered_method=True)
        self.gridCount = channel.unary_unary(
                '/octaneapi.VdbInfoService/gridCount',
                request_serializer=octanevolume__pb2.VdbInfo.gridCountRequest.SerializeToString,
                response_deserializer=octanevolume__pb2.VdbInfo.gridCountResponse.FromString,
                _registered_method=True)
        self.grid = channel.unary_unary(
                '/octaneapi.VdbInfoService/grid',
                request_serializer=octanevolume__pb2.VdbInfo.gridRequest.SerializeToString,
                response_deserializer=octanevolume__pb2.VdbInfo.gridResponse.FromString,
                _registered_method=True)
        self.sampler = channel.unary_unary(
                '/octaneapi.VdbInfoService/sampler',
                request_serializer=octanevolume__pb2.VdbInfo.samplerRequest.SerializeToString,
                response_deserializer=octanevolume__pb2.VdbInfo.samplerResponse.FromString,
                _registered_method=True)
        self.destroySampler = channel.unary_unary(
                '/octaneapi.VdbInfoService/destroySampler',
                request_serializer=octanevolume__pb2.VdbInfo.destroySamplerRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.findGrid = channel.unary_unary(
                '/octaneapi.VdbInfoService/findGrid',
                request_serializer=octanevolume__pb2.VdbInfo.findGridRequest.SerializeToString,
                response_deserializer=octanevolume__pb2.VdbInfo.findGridResponse.FromString,
                _registered_method=True)


class VdbInfoServiceServicer(object):
    """GRPC interface definition for class 'VdbInfo' from 'octanevolume.h'
    """

    def valid(self, request, context):
        """/ If the VDB information was loaded successfully, this will return TRUE, otherwise FALSE
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gridCount(self, request, context):
        """/ Returns the number of grids stored in the VDB file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def grid(self, request, context):
        """/ Returns a pointer to the VdbGridInfo of the specified index or NULL if the index is invalid
        / or the VdbInfo wasn't loaded correctly
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sampler(self, request, context):
        """/ Returns a pointer to the VdbGridSampler of the specified index or NULL if the index is invalid
        / , the current grid is not a float grid or the VdbInfo wasn't loaded correctly
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def destroySampler(self, request, context):
        """/ Destroys the single sampler if any
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findGrid(self, request, context):
        """/ Convenience function to check whether a grid a) exists, b) is of a suitable type for the 
        / channel specified
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VdbInfoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'valid': grpc.unary_unary_rpc_method_handler(
                    servicer.valid,
                    request_deserializer=octanevolume__pb2.VdbInfo.validRequest.FromString,
                    response_serializer=octanevolume__pb2.VdbInfo.validResponse.SerializeToString,
            ),
            'gridCount': grpc.unary_unary_rpc_method_handler(
                    servicer.gridCount,
                    request_deserializer=octanevolume__pb2.VdbInfo.gridCountRequest.FromString,
                    response_serializer=octanevolume__pb2.VdbInfo.gridCountResponse.SerializeToString,
            ),
            'grid': grpc.unary_unary_rpc_method_handler(
                    servicer.grid,
                    request_deserializer=octanevolume__pb2.VdbInfo.gridRequest.FromString,
                    response_serializer=octanevolume__pb2.VdbInfo.gridResponse.SerializeToString,
            ),
            'sampler': grpc.unary_unary_rpc_method_handler(
                    servicer.sampler,
                    request_deserializer=octanevolume__pb2.VdbInfo.samplerRequest.FromString,
                    response_serializer=octanevolume__pb2.VdbInfo.samplerResponse.SerializeToString,
            ),
            'destroySampler': grpc.unary_unary_rpc_method_handler(
                    servicer.destroySampler,
                    request_deserializer=octanevolume__pb2.VdbInfo.destroySamplerRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'findGrid': grpc.unary_unary_rpc_method_handler(
                    servicer.findGrid,
                    request_deserializer=octanevolume__pb2.VdbInfo.findGridRequest.FromString,
                    response_serializer=octanevolume__pb2.VdbInfo.findGridResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.VdbInfoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.VdbInfoService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VdbInfoService(object):
    """GRPC interface definition for class 'VdbInfo' from 'octanevolume.h'
    """

    @staticmethod
    def valid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.VdbInfoService/valid',
            octanevolume__pb2.VdbInfo.validRequest.SerializeToString,
            octanevolume__pb2.VdbInfo.validResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gridCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.VdbInfoService/gridCount',
            octanevolume__pb2.VdbInfo.gridCountRequest.SerializeToString,
            octanevolume__pb2.VdbInfo.gridCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def grid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.VdbInfoService/grid',
            octanevolume__pb2.VdbInfo.gridRequest.SerializeToString,
            octanevolume__pb2.VdbInfo.gridResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def sampler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.VdbInfoService/sampler',
            octanevolume__pb2.VdbInfo.samplerRequest.SerializeToString,
            octanevolume__pb2.VdbInfo.samplerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def destroySampler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.VdbInfoService/destroySampler',
            octanevolume__pb2.VdbInfo.destroySamplerRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def findGrid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.VdbInfoService/findGrid',
            octanevolume__pb2.VdbInfo.findGridRequest.SerializeToString,
            octanevolume__pb2.VdbInfo.findGridResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
