# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apioctanemodules_pb2 as apioctanemodules__pb2


class ApiOctaneModulesServiceStub(object):
    """GRPC interface definition for class 'ApiOctaneModules' from 'apioctanemodules.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.setDirectory = channel.unary_unary(
                '/octaneapi.ApiOctaneModulesService/setDirectory',
                request_serializer=apioctanemodules__pb2.ApiOctaneModules.setDirectoryRequest.SerializeToString,
                response_deserializer=apioctanemodules__pb2.ApiOctaneModules.setDirectoryResponse.FromString,
                _registered_method=True)
        self.getDirectory = channel.unary_unary(
                '/octaneapi.ApiOctaneModulesService/getDirectory',
                request_serializer=apioctanemodules__pb2.ApiOctaneModules.getDirectoryRequest.SerializeToString,
                response_deserializer=apioctanemodules__pb2.ApiOctaneModules.getDirectoryResponse.FromString,
                _registered_method=True)
        self.getModuleInfo = channel.unary_unary(
                '/octaneapi.ApiOctaneModulesService/getModuleInfo',
                request_serializer=apioctanemodules__pb2.ApiOctaneModules.getModuleInfoRequest.SerializeToString,
                response_deserializer=apioctanemodules__pb2.ApiOctaneModules.getModuleInfoResponse.FromString,
                _registered_method=True)
        self.getNodegraphModules = channel.unary_unary(
                '/octaneapi.ApiOctaneModulesService/getNodegraphModules',
                request_serializer=apioctanemodules__pb2.ApiOctaneModules.getNodegraphModulesRequest.SerializeToString,
                response_deserializer=apioctanemodules__pb2.ApiOctaneModules.getNodegraphModulesResponse.FromString,
                _registered_method=True)
        self.getCommandModules = channel.unary_unary(
                '/octaneapi.ApiOctaneModulesService/getCommandModules',
                request_serializer=apioctanemodules__pb2.ApiOctaneModules.getCommandModulesRequest.SerializeToString,
                response_deserializer=apioctanemodules__pb2.ApiOctaneModules.getCommandModulesResponse.FromString,
                _registered_method=True)
        self.runCommandModule = channel.unary_unary(
                '/octaneapi.ApiOctaneModulesService/runCommandModule',
                request_serializer=apioctanemodules__pb2.ApiOctaneModules.runCommandModuleRequest.SerializeToString,
                response_deserializer=apioctanemodules__pb2.ApiOctaneModules.runCommandModuleResponse.FromString,
                _registered_method=True)


class ApiOctaneModulesServiceServicer(object):
    """GRPC interface definition for class 'ApiOctaneModules' from 'apioctanemodules.h'
    """

    def setDirectory(self, request, context):
        """/ A directory from which modules will be loaded
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDirectory(self, request, context):
        """/ The current directory where the octane loads modules from
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getModuleInfo(self, request, context):
        """/ Returns module information for the moduleId
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNodegraphModules(self, request, context):
        """/ Return list of all available ids of node graph modules
        / Note: To create a module nodegraph pass the module id
        / to the ApiNodeGraph::Create function
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCommandModules(self, request, context):
        """/ Return list of all available ids of command modules
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def runCommandModule(self, request, context):
        """/ Execute a command module
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiOctaneModulesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'setDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.setDirectory,
                    request_deserializer=apioctanemodules__pb2.ApiOctaneModules.setDirectoryRequest.FromString,
                    response_serializer=apioctanemodules__pb2.ApiOctaneModules.setDirectoryResponse.SerializeToString,
            ),
            'getDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.getDirectory,
                    request_deserializer=apioctanemodules__pb2.ApiOctaneModules.getDirectoryRequest.FromString,
                    response_serializer=apioctanemodules__pb2.ApiOctaneModules.getDirectoryResponse.SerializeToString,
            ),
            'getModuleInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getModuleInfo,
                    request_deserializer=apioctanemodules__pb2.ApiOctaneModules.getModuleInfoRequest.FromString,
                    response_serializer=apioctanemodules__pb2.ApiOctaneModules.getModuleInfoResponse.SerializeToString,
            ),
            'getNodegraphModules': grpc.unary_unary_rpc_method_handler(
                    servicer.getNodegraphModules,
                    request_deserializer=apioctanemodules__pb2.ApiOctaneModules.getNodegraphModulesRequest.FromString,
                    response_serializer=apioctanemodules__pb2.ApiOctaneModules.getNodegraphModulesResponse.SerializeToString,
            ),
            'getCommandModules': grpc.unary_unary_rpc_method_handler(
                    servicer.getCommandModules,
                    request_deserializer=apioctanemodules__pb2.ApiOctaneModules.getCommandModulesRequest.FromString,
                    response_serializer=apioctanemodules__pb2.ApiOctaneModules.getCommandModulesResponse.SerializeToString,
            ),
            'runCommandModule': grpc.unary_unary_rpc_method_handler(
                    servicer.runCommandModule,
                    request_deserializer=apioctanemodules__pb2.ApiOctaneModules.runCommandModuleRequest.FromString,
                    response_serializer=apioctanemodules__pb2.ApiOctaneModules.runCommandModuleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiOctaneModulesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiOctaneModulesService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiOctaneModulesService(object):
    """GRPC interface definition for class 'ApiOctaneModules' from 'apioctanemodules.h'
    """

    @staticmethod
    def setDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiOctaneModulesService/setDirectory',
            apioctanemodules__pb2.ApiOctaneModules.setDirectoryRequest.SerializeToString,
            apioctanemodules__pb2.ApiOctaneModules.setDirectoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiOctaneModulesService/getDirectory',
            apioctanemodules__pb2.ApiOctaneModules.getDirectoryRequest.SerializeToString,
            apioctanemodules__pb2.ApiOctaneModules.getDirectoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getModuleInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiOctaneModulesService/getModuleInfo',
            apioctanemodules__pb2.ApiOctaneModules.getModuleInfoRequest.SerializeToString,
            apioctanemodules__pb2.ApiOctaneModules.getModuleInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getNodegraphModules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiOctaneModulesService/getNodegraphModules',
            apioctanemodules__pb2.ApiOctaneModules.getNodegraphModulesRequest.SerializeToString,
            apioctanemodules__pb2.ApiOctaneModules.getNodegraphModulesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getCommandModules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiOctaneModulesService/getCommandModules',
            apioctanemodules__pb2.ApiOctaneModules.getCommandModulesRequest.SerializeToString,
            apioctanemodules__pb2.ApiOctaneModules.getCommandModulesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def runCommandModule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiOctaneModulesService/runCommandModule',
            apioctanemodules__pb2.ApiOctaneModules.runCommandModuleRequest.SerializeToString,
            apioctanemodules__pb2.ApiOctaneModules.runCommandModuleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
