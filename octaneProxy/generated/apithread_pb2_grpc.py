# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apithread_pb2 as apithread__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ApiThreadServiceStub(object):
    """GRPC interface definition for class 'ApiThread' from 'apithread.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/octaneapi.ApiThreadService/create',
                request_serializer=apithread__pb2.ApiThread.createRequest.SerializeToString,
                response_deserializer=apithread__pb2.ApiThread.createResponse.FromString,
                _registered_method=True)
        self.destroy = channel.unary_unary(
                '/octaneapi.ApiThreadService/destroy',
                request_serializer=apithread__pb2.ApiThread.destroyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.startThread = channel.unary_unary(
                '/octaneapi.ApiThreadService/startThread',
                request_serializer=apithread__pb2.ApiThread.startThreadRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.stopThread = channel.unary_unary(
                '/octaneapi.ApiThreadService/stopThread',
                request_serializer=apithread__pb2.ApiThread.stopThreadRequest.SerializeToString,
                response_deserializer=apithread__pb2.ApiThread.stopThreadResponse.FromString,
                _registered_method=True)
        self.isThreadRunning = channel.unary_unary(
                '/octaneapi.ApiThreadService/isThreadRunning',
                request_serializer=apithread__pb2.ApiThread.isThreadRunningRequest.SerializeToString,
                response_deserializer=apithread__pb2.ApiThread.isThreadRunningResponse.FromString,
                _registered_method=True)
        self.signalThreadShouldExit = channel.unary_unary(
                '/octaneapi.ApiThreadService/signalThreadShouldExit',
                request_serializer=apithread__pb2.ApiThread.signalThreadShouldExitRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.threadShouldExit = channel.unary_unary(
                '/octaneapi.ApiThreadService/threadShouldExit',
                request_serializer=apithread__pb2.ApiThread.threadShouldExitRequest.SerializeToString,
                response_deserializer=apithread__pb2.ApiThread.threadShouldExitResponse.FromString,
                _registered_method=True)
        self.waitForThreadToExit = channel.unary_unary(
                '/octaneapi.ApiThreadService/waitForThreadToExit',
                request_serializer=apithread__pb2.ApiThread.waitForThreadToExitRequest.SerializeToString,
                response_deserializer=apithread__pb2.ApiThread.waitForThreadToExitResponse.FromString,
                _registered_method=True)
        self.sleep = channel.unary_unary(
                '/octaneapi.ApiThreadService/sleep',
                request_serializer=apithread__pb2.ApiThread.sleepRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.yield = channel.unary_unary(
                '/octaneapi.ApiThreadService/yield',
                request_serializer=apithread__pb2.ApiThread.yieldRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.wait = channel.unary_unary(
                '/octaneapi.ApiThreadService/wait',
                request_serializer=apithread__pb2.ApiThread.waitRequest.SerializeToString,
                response_deserializer=apithread__pb2.ApiThread.waitResponse.FromString,
                _registered_method=True)
        self.notify = channel.unary_unary(
                '/octaneapi.ApiThreadService/notify',
                request_serializer=apithread__pb2.ApiThread.notifyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.callFunctionOnMessageThread = channel.unary_unary(
                '/octaneapi.ApiThreadService/callFunctionOnMessageThread',
                request_serializer=apithread__pb2.ApiThread.callFunctionOnMessageThreadRequest.SerializeToString,
                response_deserializer=apithread__pb2.ApiThread.callFunctionOnMessageThreadResponse.FromString,
                _registered_method=True)
        self.isThisTheMessageThread = channel.unary_unary(
                '/octaneapi.ApiThreadService/isThisTheMessageThread',
                request_serializer=apithread__pb2.ApiThread.isThisTheMessageThreadRequest.SerializeToString,
                response_deserializer=apithread__pb2.ApiThread.isThisTheMessageThreadResponse.FromString,
                _registered_method=True)


class ApiThreadServiceServicer(object):
    """GRPC interface definition for class 'ApiThread' from 'apithread.h'
    """

    def create(self, request, context):
        """/ Creates a new thread
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def destroy(self, request, context):
        """/ Destroys this thread
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startThread(self, request, context):
        """/ Starts the thread running
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopThread(self, request, context):
        """/ Attempts to stop the thread running
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isThreadRunning(self, request, context):
        """/ Returns TRUE if the thread is currently active
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def signalThreadShouldExit(self, request, context):
        """/ Sets a flag to tell the thread it should stop
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def threadShouldExit(self, request, context):
        """/ Checks whether the thread has been told to stop running
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def waitForThreadToExit(self, request, context):
        """/ Waits for the thread to stop
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sleep(self, request, context):
        """/ This can be called from any thread that needs to pause
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def yield(self, request, context):
        """/ Yields the calling thread's current time-slot
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def wait(self, request, context):
        """/ 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def notify(self, request, context):
        """/ Wakes up the thread
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def callFunctionOnMessageThread(self, request, context):
        """/ Calls the passed in function in the message thread (also referred to as the main thread)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isThisTheMessageThread(self, request, context):
        """/ Returns TRUE if the caller-thread is the message thread
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiThreadServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=apithread__pb2.ApiThread.createRequest.FromString,
                    response_serializer=apithread__pb2.ApiThread.createResponse.SerializeToString,
            ),
            'destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.destroy,
                    request_deserializer=apithread__pb2.ApiThread.destroyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'startThread': grpc.unary_unary_rpc_method_handler(
                    servicer.startThread,
                    request_deserializer=apithread__pb2.ApiThread.startThreadRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'stopThread': grpc.unary_unary_rpc_method_handler(
                    servicer.stopThread,
                    request_deserializer=apithread__pb2.ApiThread.stopThreadRequest.FromString,
                    response_serializer=apithread__pb2.ApiThread.stopThreadResponse.SerializeToString,
            ),
            'isThreadRunning': grpc.unary_unary_rpc_method_handler(
                    servicer.isThreadRunning,
                    request_deserializer=apithread__pb2.ApiThread.isThreadRunningRequest.FromString,
                    response_serializer=apithread__pb2.ApiThread.isThreadRunningResponse.SerializeToString,
            ),
            'signalThreadShouldExit': grpc.unary_unary_rpc_method_handler(
                    servicer.signalThreadShouldExit,
                    request_deserializer=apithread__pb2.ApiThread.signalThreadShouldExitRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'threadShouldExit': grpc.unary_unary_rpc_method_handler(
                    servicer.threadShouldExit,
                    request_deserializer=apithread__pb2.ApiThread.threadShouldExitRequest.FromString,
                    response_serializer=apithread__pb2.ApiThread.threadShouldExitResponse.SerializeToString,
            ),
            'waitForThreadToExit': grpc.unary_unary_rpc_method_handler(
                    servicer.waitForThreadToExit,
                    request_deserializer=apithread__pb2.ApiThread.waitForThreadToExitRequest.FromString,
                    response_serializer=apithread__pb2.ApiThread.waitForThreadToExitResponse.SerializeToString,
            ),
            'sleep': grpc.unary_unary_rpc_method_handler(
                    servicer.sleep,
                    request_deserializer=apithread__pb2.ApiThread.sleepRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'yield': grpc.unary_unary_rpc_method_handler(
                    servicer.yield,
                    request_deserializer=apithread__pb2.ApiThread.yieldRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'wait': grpc.unary_unary_rpc_method_handler(
                    servicer.wait,
                    request_deserializer=apithread__pb2.ApiThread.waitRequest.FromString,
                    response_serializer=apithread__pb2.ApiThread.waitResponse.SerializeToString,
            ),
            'notify': grpc.unary_unary_rpc_method_handler(
                    servicer.notify,
                    request_deserializer=apithread__pb2.ApiThread.notifyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'callFunctionOnMessageThread': grpc.unary_unary_rpc_method_handler(
                    servicer.callFunctionOnMessageThread,
                    request_deserializer=apithread__pb2.ApiThread.callFunctionOnMessageThreadRequest.FromString,
                    response_serializer=apithread__pb2.ApiThread.callFunctionOnMessageThreadResponse.SerializeToString,
            ),
            'isThisTheMessageThread': grpc.unary_unary_rpc_method_handler(
                    servicer.isThisTheMessageThread,
                    request_deserializer=apithread__pb2.ApiThread.isThisTheMessageThreadRequest.FromString,
                    response_serializer=apithread__pb2.ApiThread.isThisTheMessageThreadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiThreadService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiThreadService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiThreadService(object):
    """GRPC interface definition for class 'ApiThread' from 'apithread.h'
    """

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiThreadService/create',
            apithread__pb2.ApiThread.createRequest.SerializeToString,
            apithread__pb2.ApiThread.createResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiThreadService/destroy',
            apithread__pb2.ApiThread.destroyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def startThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiThreadService/startThread',
            apithread__pb2.ApiThread.startThreadRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def stopThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiThreadService/stopThread',
            apithread__pb2.ApiThread.stopThreadRequest.SerializeToString,
            apithread__pb2.ApiThread.stopThreadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isThreadRunning(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiThreadService/isThreadRunning',
            apithread__pb2.ApiThread.isThreadRunningRequest.SerializeToString,
            apithread__pb2.ApiThread.isThreadRunningResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def signalThreadShouldExit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiThreadService/signalThreadShouldExit',
            apithread__pb2.ApiThread.signalThreadShouldExitRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def threadShouldExit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiThreadService/threadShouldExit',
            apithread__pb2.ApiThread.threadShouldExitRequest.SerializeToString,
            apithread__pb2.ApiThread.threadShouldExitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def waitForThreadToExit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiThreadService/waitForThreadToExit',
            apithread__pb2.ApiThread.waitForThreadToExitRequest.SerializeToString,
            apithread__pb2.ApiThread.waitForThreadToExitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def sleep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiThreadService/sleep',
            apithread__pb2.ApiThread.sleepRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def yield(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiThreadService/yield',
            apithread__pb2.ApiThread.yieldRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def wait(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiThreadService/wait',
            apithread__pb2.ApiThread.waitRequest.SerializeToString,
            apithread__pb2.ApiThread.waitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiThreadService/notify',
            apithread__pb2.ApiThread.notifyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def callFunctionOnMessageThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiThreadService/callFunctionOnMessageThread',
            apithread__pb2.ApiThread.callFunctionOnMessageThreadRequest.SerializeToString,
            apithread__pb2.ApiThread.callFunctionOnMessageThreadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isThisTheMessageThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiThreadService/isThisTheMessageThread',
            apithread__pb2.ApiThread.isThisTheMessageThreadRequest.SerializeToString,
            apithread__pb2.ApiThread.isThisTheMessageThreadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
