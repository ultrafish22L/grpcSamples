# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apipackage_pb2 as apipackage__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ApiPackageServiceStub(object):
    """GRPC interface definition for class 'ApiPackage' from 'apipackage.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.freeArray = channel.unary_unary(
                '/octaneapi.ApiPackageService/freeArray',
                request_serializer=apipackage__pb2.ApiPackage.freeArrayRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.open = channel.unary_unary(
                '/octaneapi.ApiPackageService/open',
                request_serializer=apipackage__pb2.ApiPackage.openRequest.SerializeToString,
                response_deserializer=apipackage__pb2.ApiPackage.openResponse.FromString,
                _registered_method=True)
        self.close = channel.unary_unary(
                '/octaneapi.ApiPackageService/close',
                request_serializer=apipackage__pb2.ApiPackage.closeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.getFileList = channel.unary_unary(
                '/octaneapi.ApiPackageService/getFileList',
                request_serializer=apipackage__pb2.ApiPackage.getFileListRequest.SerializeToString,
                response_deserializer=apipackage__pb2.ApiPackage.getFileListResponse.FromString,
                _registered_method=True)
        self.fileExists = channel.unary_unary(
                '/octaneapi.ApiPackageService/fileExists',
                request_serializer=apipackage__pb2.ApiPackage.fileExistsRequest.SerializeToString,
                response_deserializer=apipackage__pb2.ApiPackage.fileExistsResponse.FromString,
                _registered_method=True)
        self.fileExists1 = channel.unary_unary(
                '/octaneapi.ApiPackageService/fileExists1',
                request_serializer=apipackage__pb2.ApiPackage.fileExists1Request.SerializeToString,
                response_deserializer=apipackage__pb2.ApiPackage.fileExists1Response.FromString,
                _registered_method=True)
        self.readFile = channel.unary_unary(
                '/octaneapi.ApiPackageService/readFile',
                request_serializer=apipackage__pb2.ApiPackage.readFileRequest.SerializeToString,
                response_deserializer=apipackage__pb2.ApiPackage.readFileResponse.FromString,
                _registered_method=True)
        self.readFile1 = channel.unary_unary(
                '/octaneapi.ApiPackageService/readFile1',
                request_serializer=apipackage__pb2.ApiPackage.readFile1Request.SerializeToString,
                response_deserializer=apipackage__pb2.ApiPackage.readFile1Response.FromString,
                _registered_method=True)


class ApiPackageServiceServicer(object):
    """GRPC interface definition for class 'ApiPackage' from 'apipackage.h'
    """

    def freeArray(self, request, context):
        """/ Deallocates a string array that 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def open(self, request, context):
        """/ Open a package for reading files
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def close(self, request, context):
        """/ Closes a package
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFileList(self, request, context):
        """/ Creates a list of all files stored in the ORBX package
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fileExists(self, request, context):
        """/ Checks if a file exists in the package
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fileExists1(self, request, context):
        """/ Checks if a file exists in the package
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readFile(self, request, context):
        """/ Reads a file from the package
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readFile1(self, request, context):
        """/ Reads data from the package as a cstring
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiPackageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'freeArray': grpc.unary_unary_rpc_method_handler(
                    servicer.freeArray,
                    request_deserializer=apipackage__pb2.ApiPackage.freeArrayRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'open': grpc.unary_unary_rpc_method_handler(
                    servicer.open,
                    request_deserializer=apipackage__pb2.ApiPackage.openRequest.FromString,
                    response_serializer=apipackage__pb2.ApiPackage.openResponse.SerializeToString,
            ),
            'close': grpc.unary_unary_rpc_method_handler(
                    servicer.close,
                    request_deserializer=apipackage__pb2.ApiPackage.closeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getFileList': grpc.unary_unary_rpc_method_handler(
                    servicer.getFileList,
                    request_deserializer=apipackage__pb2.ApiPackage.getFileListRequest.FromString,
                    response_serializer=apipackage__pb2.ApiPackage.getFileListResponse.SerializeToString,
            ),
            'fileExists': grpc.unary_unary_rpc_method_handler(
                    servicer.fileExists,
                    request_deserializer=apipackage__pb2.ApiPackage.fileExistsRequest.FromString,
                    response_serializer=apipackage__pb2.ApiPackage.fileExistsResponse.SerializeToString,
            ),
            'fileExists1': grpc.unary_unary_rpc_method_handler(
                    servicer.fileExists1,
                    request_deserializer=apipackage__pb2.ApiPackage.fileExists1Request.FromString,
                    response_serializer=apipackage__pb2.ApiPackage.fileExists1Response.SerializeToString,
            ),
            'readFile': grpc.unary_unary_rpc_method_handler(
                    servicer.readFile,
                    request_deserializer=apipackage__pb2.ApiPackage.readFileRequest.FromString,
                    response_serializer=apipackage__pb2.ApiPackage.readFileResponse.SerializeToString,
            ),
            'readFile1': grpc.unary_unary_rpc_method_handler(
                    servicer.readFile1,
                    request_deserializer=apipackage__pb2.ApiPackage.readFile1Request.FromString,
                    response_serializer=apipackage__pb2.ApiPackage.readFile1Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiPackageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiPackageService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiPackageService(object):
    """GRPC interface definition for class 'ApiPackage' from 'apipackage.h'
    """

    @staticmethod
    def freeArray(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiPackageService/freeArray',
            apipackage__pb2.ApiPackage.freeArrayRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def open(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiPackageService/open',
            apipackage__pb2.ApiPackage.openRequest.SerializeToString,
            apipackage__pb2.ApiPackage.openResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiPackageService/close',
            apipackage__pb2.ApiPackage.closeRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getFileList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiPackageService/getFileList',
            apipackage__pb2.ApiPackage.getFileListRequest.SerializeToString,
            apipackage__pb2.ApiPackage.getFileListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def fileExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiPackageService/fileExists',
            apipackage__pb2.ApiPackage.fileExistsRequest.SerializeToString,
            apipackage__pb2.ApiPackage.fileExistsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def fileExists1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiPackageService/fileExists1',
            apipackage__pb2.ApiPackage.fileExists1Request.SerializeToString,
            apipackage__pb2.ApiPackage.fileExists1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def readFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiPackageService/readFile',
            apipackage__pb2.ApiPackage.readFileRequest.SerializeToString,
            apipackage__pb2.ApiPackage.readFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def readFile1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiPackageService/readFile1',
            apipackage__pb2.ApiPackage.readFile1Request.SerializeToString,
            apipackage__pb2.ApiPackage.readFile1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
