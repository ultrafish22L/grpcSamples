# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import octanerenderpasses_pb2 as octanerenderpasses__pb2


class RenderResultStatisticsServiceStub(object):
    """GRPC interface definition for class 'ApiRenderPassInfo' from 'octanerenderpasses.h'

    GRPC interface definition for class 'RenderPassExport' from 'octanerenderpasses.h'

    GRPC interface definition for class 'RenderResultStatistics' from 'octanerenderpasses.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.clear = channel.unary_unary(
                '/octaneapi.RenderResultStatisticsService/clear',
                request_serializer=octanerenderpasses__pb2.RenderResultStatistics.clearRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.internalFilmResolution = channel.unary_unary(
                '/octaneapi.RenderResultStatisticsService/internalFilmResolution',
                request_serializer=octanerenderpasses__pb2.RenderResultStatistics.internalFilmResolutionRequest.SerializeToString,
                response_deserializer=octanerenderpasses__pb2.RenderResultStatistics.internalFilmResolutionResponse.FromString,
                _registered_method=True)
        self.channelType = channel.unary_unary(
                '/octaneapi.RenderResultStatisticsService/channelType',
                request_serializer=octanerenderpasses__pb2.RenderResultStatistics.channelTypeRequest.SerializeToString,
                response_deserializer=octanerenderpasses__pb2.RenderResultStatistics.channelTypeResponse.FromString,
                _registered_method=True)
        self.samplesPerPixel = channel.unary_unary(
                '/octaneapi.RenderResultStatisticsService/samplesPerPixel',
                request_serializer=octanerenderpasses__pb2.RenderResultStatistics.samplesPerPixelRequest.SerializeToString,
                response_deserializer=octanerenderpasses__pb2.RenderResultStatistics.samplesPerPixelResponse.FromString,
                _registered_method=True)
        self.maxSamplesPerPixel = channel.unary_unary(
                '/octaneapi.RenderResultStatisticsService/maxSamplesPerPixel',
                request_serializer=octanerenderpasses__pb2.RenderResultStatistics.maxSamplesPerPixelRequest.SerializeToString,
                response_deserializer=octanerenderpasses__pb2.RenderResultStatistics.maxSamplesPerPixelResponse.FromString,
                _registered_method=True)
        self.samplesPerSecond = channel.unary_unary(
                '/octaneapi.RenderResultStatisticsService/samplesPerSecond',
                request_serializer=octanerenderpasses__pb2.RenderResultStatistics.samplesPerSecondRequest.SerializeToString,
                response_deserializer=octanerenderpasses__pb2.RenderResultStatistics.samplesPerSecondResponse.FromString,
                _registered_method=True)
        self.progress = channel.unary_unary(
                '/octaneapi.RenderResultStatisticsService/progress',
                request_serializer=octanerenderpasses__pb2.RenderResultStatistics.progressRequest.SerializeToString,
                response_deserializer=octanerenderpasses__pb2.RenderResultStatistics.progressResponse.FromString,
                _registered_method=True)
        self.started = channel.unary_unary(
                '/octaneapi.RenderResultStatisticsService/started',
                request_serializer=octanerenderpasses__pb2.RenderResultStatistics.startedRequest.SerializeToString,
                response_deserializer=octanerenderpasses__pb2.RenderResultStatistics.startedResponse.FromString,
                _registered_method=True)
        self.finished = channel.unary_unary(
                '/octaneapi.RenderResultStatisticsService/finished',
                request_serializer=octanerenderpasses__pb2.RenderResultStatistics.finishedRequest.SerializeToString,
                response_deserializer=octanerenderpasses__pb2.RenderResultStatistics.finishedResponse.FromString,
                _registered_method=True)


class RenderResultStatisticsServiceServicer(object):
    """GRPC interface definition for class 'ApiRenderPassInfo' from 'octanerenderpasses.h'

    GRPC interface definition for class 'RenderPassExport' from 'octanerenderpasses.h'

    GRPC interface definition for class 'RenderResultStatistics' from 'octanerenderpasses.h'
    """

    def clear(self, request, context):
        """/ Clears our members and sets the sub sample mode to SUBSAMPLE_NONE and the state to
        / RSTATE_STOPPED
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def internalFilmResolution(self, request, context):
        """/ Returns the internal film resolution which takes the upsampling into account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def channelType(self, request, context):
        """/ Returns the type of the channels, this is either float or 8-bit unsigned int
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def samplesPerPixel(self, request, context):
        """/ Returns the samples per pixel of the specified render pass
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def maxSamplesPerPixel(self, request, context):
        """/ Returns the maximum samples per pixel of the specified render pass
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def samplesPerSecond(self, request, context):
        """/ Returns the samples per second of the specified render pass
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def progress(self, request, context):
        """/ Returns the render progress for the specified render pass
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def started(self, request, context):
        """/ Returns TRUE if at least one sample per pixel has been calculated for the specified render
        / pass
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def finished(self, request, context):
        """/ Returns TRUE if all samples per pixel have been calculated for the specified render pass
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RenderResultStatisticsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'clear': grpc.unary_unary_rpc_method_handler(
                    servicer.clear,
                    request_deserializer=octanerenderpasses__pb2.RenderResultStatistics.clearRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'internalFilmResolution': grpc.unary_unary_rpc_method_handler(
                    servicer.internalFilmResolution,
                    request_deserializer=octanerenderpasses__pb2.RenderResultStatistics.internalFilmResolutionRequest.FromString,
                    response_serializer=octanerenderpasses__pb2.RenderResultStatistics.internalFilmResolutionResponse.SerializeToString,
            ),
            'channelType': grpc.unary_unary_rpc_method_handler(
                    servicer.channelType,
                    request_deserializer=octanerenderpasses__pb2.RenderResultStatistics.channelTypeRequest.FromString,
                    response_serializer=octanerenderpasses__pb2.RenderResultStatistics.channelTypeResponse.SerializeToString,
            ),
            'samplesPerPixel': grpc.unary_unary_rpc_method_handler(
                    servicer.samplesPerPixel,
                    request_deserializer=octanerenderpasses__pb2.RenderResultStatistics.samplesPerPixelRequest.FromString,
                    response_serializer=octanerenderpasses__pb2.RenderResultStatistics.samplesPerPixelResponse.SerializeToString,
            ),
            'maxSamplesPerPixel': grpc.unary_unary_rpc_method_handler(
                    servicer.maxSamplesPerPixel,
                    request_deserializer=octanerenderpasses__pb2.RenderResultStatistics.maxSamplesPerPixelRequest.FromString,
                    response_serializer=octanerenderpasses__pb2.RenderResultStatistics.maxSamplesPerPixelResponse.SerializeToString,
            ),
            'samplesPerSecond': grpc.unary_unary_rpc_method_handler(
                    servicer.samplesPerSecond,
                    request_deserializer=octanerenderpasses__pb2.RenderResultStatistics.samplesPerSecondRequest.FromString,
                    response_serializer=octanerenderpasses__pb2.RenderResultStatistics.samplesPerSecondResponse.SerializeToString,
            ),
            'progress': grpc.unary_unary_rpc_method_handler(
                    servicer.progress,
                    request_deserializer=octanerenderpasses__pb2.RenderResultStatistics.progressRequest.FromString,
                    response_serializer=octanerenderpasses__pb2.RenderResultStatistics.progressResponse.SerializeToString,
            ),
            'started': grpc.unary_unary_rpc_method_handler(
                    servicer.started,
                    request_deserializer=octanerenderpasses__pb2.RenderResultStatistics.startedRequest.FromString,
                    response_serializer=octanerenderpasses__pb2.RenderResultStatistics.startedResponse.SerializeToString,
            ),
            'finished': grpc.unary_unary_rpc_method_handler(
                    servicer.finished,
                    request_deserializer=octanerenderpasses__pb2.RenderResultStatistics.finishedRequest.FromString,
                    response_serializer=octanerenderpasses__pb2.RenderResultStatistics.finishedResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.RenderResultStatisticsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.RenderResultStatisticsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RenderResultStatisticsService(object):
    """GRPC interface definition for class 'ApiRenderPassInfo' from 'octanerenderpasses.h'

    GRPC interface definition for class 'RenderPassExport' from 'octanerenderpasses.h'

    GRPC interface definition for class 'RenderResultStatistics' from 'octanerenderpasses.h'
    """

    @staticmethod
    def clear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.RenderResultStatisticsService/clear',
            octanerenderpasses__pb2.RenderResultStatistics.clearRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def internalFilmResolution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.RenderResultStatisticsService/internalFilmResolution',
            octanerenderpasses__pb2.RenderResultStatistics.internalFilmResolutionRequest.SerializeToString,
            octanerenderpasses__pb2.RenderResultStatistics.internalFilmResolutionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def channelType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.RenderResultStatisticsService/channelType',
            octanerenderpasses__pb2.RenderResultStatistics.channelTypeRequest.SerializeToString,
            octanerenderpasses__pb2.RenderResultStatistics.channelTypeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def samplesPerPixel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.RenderResultStatisticsService/samplesPerPixel',
            octanerenderpasses__pb2.RenderResultStatistics.samplesPerPixelRequest.SerializeToString,
            octanerenderpasses__pb2.RenderResultStatistics.samplesPerPixelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def maxSamplesPerPixel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.RenderResultStatisticsService/maxSamplesPerPixel',
            octanerenderpasses__pb2.RenderResultStatistics.maxSamplesPerPixelRequest.SerializeToString,
            octanerenderpasses__pb2.RenderResultStatistics.maxSamplesPerPixelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def samplesPerSecond(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.RenderResultStatisticsService/samplesPerSecond',
            octanerenderpasses__pb2.RenderResultStatistics.samplesPerSecondRequest.SerializeToString,
            octanerenderpasses__pb2.RenderResultStatistics.samplesPerSecondResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def progress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.RenderResultStatisticsService/progress',
            octanerenderpasses__pb2.RenderResultStatistics.progressRequest.SerializeToString,
            octanerenderpasses__pb2.RenderResultStatistics.progressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def started(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.RenderResultStatisticsService/started',
            octanerenderpasses__pb2.RenderResultStatistics.startedRequest.SerializeToString,
            octanerenderpasses__pb2.RenderResultStatistics.startedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def finished(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.RenderResultStatisticsService/finished',
            octanerenderpasses__pb2.RenderResultStatistics.finishedRequest.SerializeToString,
            octanerenderpasses__pb2.RenderResultStatistics.finishedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
