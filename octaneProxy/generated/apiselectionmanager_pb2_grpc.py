# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apiselectionmanager_pb2 as apiselectionmanager__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ApiSelectionManagerServiceStub(object):
    """GRPC interface definition for class 'ApiSelectionManager' from 'apiselectionmanager.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.isItemSelected = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/isItemSelected',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.isItemSelectedRequest.SerializeToString,
                response_deserializer=apiselectionmanager__pb2.ApiSelectionManager.isItemSelectedResponse.FromString,
                _registered_method=True)
        self.isPinSelected = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/isPinSelected',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.isPinSelectedRequest.SerializeToString,
                response_deserializer=apiselectionmanager__pb2.ApiSelectionManager.isPinSelectedResponse.FromString,
                _registered_method=True)
        self.isPinSelected1 = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/isPinSelected1',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.isPinSelected1Request.SerializeToString,
                response_deserializer=apiselectionmanager__pb2.ApiSelectionManager.isPinSelected1Response.FromString,
                _registered_method=True)
        self.isPinSelectedIx = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/isPinSelectedIx',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.isPinSelectedIxRequest.SerializeToString,
                response_deserializer=apiselectionmanager__pb2.ApiSelectionManager.isPinSelectedIxResponse.FromString,
                _registered_method=True)
        self.selectedItemCount = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/selectedItemCount',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.selectedItemCountRequest.SerializeToString,
                response_deserializer=apiselectionmanager__pb2.ApiSelectionManager.selectedItemCountResponse.FromString,
                _registered_method=True)
        self.selectedPinCount = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/selectedPinCount',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.selectedPinCountRequest.SerializeToString,
                response_deserializer=apiselectionmanager__pb2.ApiSelectionManager.selectedPinCountResponse.FromString,
                _registered_method=True)
        self.getSelection = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/getSelection',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.getSelectionRequest.SerializeToString,
                response_deserializer=apiselectionmanager__pb2.ApiSelectionManager.getSelectionResponse.FromString,
                _registered_method=True)
        self.getSelection1 = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/getSelection1',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.getSelection1Request.SerializeToString,
                response_deserializer=apiselectionmanager__pb2.ApiSelectionManager.getSelection1Response.FromString,
                _registered_method=True)
        self.clearSelection = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/clearSelection',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.clearSelectionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.setSelection = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/setSelection',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.setSelectionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.select = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/select',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.selectRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.select1 = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/select1',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.select1Request.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.deselect = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/deselect',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.deselectRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.deselect1 = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/deselect1',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.deselect1Request.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.swapSelection = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/swapSelection',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.swapSelectionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.addSelectionObserver = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/addSelectionObserver',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.addSelectionObserverRequest.SerializeToString,
                response_deserializer=apiselectionmanager__pb2.ApiSelectionManager.addSelectionObserverResponse.FromString,
                _registered_method=True)
        self.removeSelectionObserver = channel.unary_unary(
                '/octaneapi.ApiSelectionManagerService/removeSelectionObserver',
                request_serializer=apiselectionmanager__pb2.ApiSelectionManager.removeSelectionObserverRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class ApiSelectionManagerServiceServicer(object):
    """GRPC interface definition for class 'ApiSelectionManager' from 'apiselectionmanager.h'
    """

    def isItemSelected(self, request, context):
        """/ Returns TRUE if the specified item is currently selected
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isPinSelected(self, request, context):
        """/ Returns TRUE if the specified pin is currently selected on the specified node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isPinSelected1(self, request, context):
        """/ Returns TRUE if the specified pin is currently selected on the specified node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isPinSelectedIx(self, request, context):
        """/ Returns TRUE if the specified pin is currently selected on the specified node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def selectedItemCount(self, request, context):
        """/ Returns the number of selected items
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def selectedPinCount(self, request, context):
        """/ Returns the number of selected pins
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSelection(self, request, context):
        """/ Copies the set of currently selected items into the specified array
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSelection1(self, request, context):
        """/ Copies the set of currently selected pins into the specified array
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clearSelection(self, request, context):
        """/ De-selects everything and sends a selection change event if something actually got
        / deselected
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setSelection(self, request, context):
        """/ Replaces the complete current selection with a new item/pin selection and sends a selection
        / change event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def select(self, request, context):
        """/ Adds an item to the current selection and sends a change event if the selection changed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def select1(self, request, context):
        """/ Adds a pin to the current selection and sends a change event if the selection changed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deselect(self, request, context):
        """/ Removed an item from the current selection and sends a change event if the selection changed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deselect1(self, request, context):
        """/ Removes a pin from the current selection and sends a change event if the selection changed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def swapSelection(self, request, context):
        """/ If the old item was selected, the new item will be selected and the old item deselected
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addSelectionObserver(self, request, context):
        """/ Adds a selection changed observer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeSelectionObserver(self, request, context):
        """/ Removes a selection observer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiSelectionManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'isItemSelected': grpc.unary_unary_rpc_method_handler(
                    servicer.isItemSelected,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.isItemSelectedRequest.FromString,
                    response_serializer=apiselectionmanager__pb2.ApiSelectionManager.isItemSelectedResponse.SerializeToString,
            ),
            'isPinSelected': grpc.unary_unary_rpc_method_handler(
                    servicer.isPinSelected,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.isPinSelectedRequest.FromString,
                    response_serializer=apiselectionmanager__pb2.ApiSelectionManager.isPinSelectedResponse.SerializeToString,
            ),
            'isPinSelected1': grpc.unary_unary_rpc_method_handler(
                    servicer.isPinSelected1,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.isPinSelected1Request.FromString,
                    response_serializer=apiselectionmanager__pb2.ApiSelectionManager.isPinSelected1Response.SerializeToString,
            ),
            'isPinSelectedIx': grpc.unary_unary_rpc_method_handler(
                    servicer.isPinSelectedIx,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.isPinSelectedIxRequest.FromString,
                    response_serializer=apiselectionmanager__pb2.ApiSelectionManager.isPinSelectedIxResponse.SerializeToString,
            ),
            'selectedItemCount': grpc.unary_unary_rpc_method_handler(
                    servicer.selectedItemCount,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.selectedItemCountRequest.FromString,
                    response_serializer=apiselectionmanager__pb2.ApiSelectionManager.selectedItemCountResponse.SerializeToString,
            ),
            'selectedPinCount': grpc.unary_unary_rpc_method_handler(
                    servicer.selectedPinCount,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.selectedPinCountRequest.FromString,
                    response_serializer=apiselectionmanager__pb2.ApiSelectionManager.selectedPinCountResponse.SerializeToString,
            ),
            'getSelection': grpc.unary_unary_rpc_method_handler(
                    servicer.getSelection,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.getSelectionRequest.FromString,
                    response_serializer=apiselectionmanager__pb2.ApiSelectionManager.getSelectionResponse.SerializeToString,
            ),
            'getSelection1': grpc.unary_unary_rpc_method_handler(
                    servicer.getSelection1,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.getSelection1Request.FromString,
                    response_serializer=apiselectionmanager__pb2.ApiSelectionManager.getSelection1Response.SerializeToString,
            ),
            'clearSelection': grpc.unary_unary_rpc_method_handler(
                    servicer.clearSelection,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.clearSelectionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'setSelection': grpc.unary_unary_rpc_method_handler(
                    servicer.setSelection,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.setSelectionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'select': grpc.unary_unary_rpc_method_handler(
                    servicer.select,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.selectRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'select1': grpc.unary_unary_rpc_method_handler(
                    servicer.select1,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.select1Request.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'deselect': grpc.unary_unary_rpc_method_handler(
                    servicer.deselect,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.deselectRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'deselect1': grpc.unary_unary_rpc_method_handler(
                    servicer.deselect1,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.deselect1Request.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'swapSelection': grpc.unary_unary_rpc_method_handler(
                    servicer.swapSelection,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.swapSelectionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'addSelectionObserver': grpc.unary_unary_rpc_method_handler(
                    servicer.addSelectionObserver,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.addSelectionObserverRequest.FromString,
                    response_serializer=apiselectionmanager__pb2.ApiSelectionManager.addSelectionObserverResponse.SerializeToString,
            ),
            'removeSelectionObserver': grpc.unary_unary_rpc_method_handler(
                    servicer.removeSelectionObserver,
                    request_deserializer=apiselectionmanager__pb2.ApiSelectionManager.removeSelectionObserverRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiSelectionManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiSelectionManagerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiSelectionManagerService(object):
    """GRPC interface definition for class 'ApiSelectionManager' from 'apiselectionmanager.h'
    """

    @staticmethod
    def isItemSelected(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/isItemSelected',
            apiselectionmanager__pb2.ApiSelectionManager.isItemSelectedRequest.SerializeToString,
            apiselectionmanager__pb2.ApiSelectionManager.isItemSelectedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isPinSelected(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/isPinSelected',
            apiselectionmanager__pb2.ApiSelectionManager.isPinSelectedRequest.SerializeToString,
            apiselectionmanager__pb2.ApiSelectionManager.isPinSelectedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isPinSelected1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/isPinSelected1',
            apiselectionmanager__pb2.ApiSelectionManager.isPinSelected1Request.SerializeToString,
            apiselectionmanager__pb2.ApiSelectionManager.isPinSelected1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isPinSelectedIx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/isPinSelectedIx',
            apiselectionmanager__pb2.ApiSelectionManager.isPinSelectedIxRequest.SerializeToString,
            apiselectionmanager__pb2.ApiSelectionManager.isPinSelectedIxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def selectedItemCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/selectedItemCount',
            apiselectionmanager__pb2.ApiSelectionManager.selectedItemCountRequest.SerializeToString,
            apiselectionmanager__pb2.ApiSelectionManager.selectedItemCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def selectedPinCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/selectedPinCount',
            apiselectionmanager__pb2.ApiSelectionManager.selectedPinCountRequest.SerializeToString,
            apiselectionmanager__pb2.ApiSelectionManager.selectedPinCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getSelection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/getSelection',
            apiselectionmanager__pb2.ApiSelectionManager.getSelectionRequest.SerializeToString,
            apiselectionmanager__pb2.ApiSelectionManager.getSelectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getSelection1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/getSelection1',
            apiselectionmanager__pb2.ApiSelectionManager.getSelection1Request.SerializeToString,
            apiselectionmanager__pb2.ApiSelectionManager.getSelection1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def clearSelection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/clearSelection',
            apiselectionmanager__pb2.ApiSelectionManager.clearSelectionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setSelection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/setSelection',
            apiselectionmanager__pb2.ApiSelectionManager.setSelectionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def select(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/select',
            apiselectionmanager__pb2.ApiSelectionManager.selectRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def select1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/select1',
            apiselectionmanager__pb2.ApiSelectionManager.select1Request.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deselect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/deselect',
            apiselectionmanager__pb2.ApiSelectionManager.deselectRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deselect1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/deselect1',
            apiselectionmanager__pb2.ApiSelectionManager.deselect1Request.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def swapSelection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/swapSelection',
            apiselectionmanager__pb2.ApiSelectionManager.swapSelectionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def addSelectionObserver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/addSelectionObserver',
            apiselectionmanager__pb2.ApiSelectionManager.addSelectionObserverRequest.SerializeToString,
            apiselectionmanager__pb2.ApiSelectionManager.addSelectionObserverResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def removeSelectionObserver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSelectionManagerService/removeSelectionObserver',
            apiselectionmanager__pb2.ApiSelectionManager.removeSelectionObserverRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
