# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apimouselistener_pb2 as apimouselistener__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ApiMouseEventServiceStub(object):
    """GRPC interface definition for class 'ApiMouseEvent' from 'apimouselistener.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.make = channel.unary_unary(
                '/octaneapi.ApiMouseEventService/make',
                request_serializer=apimouselistener__pb2.ApiMouseEvent.makeRequest.SerializeToString,
                response_deserializer=apimouselistener__pb2.ApiMouseEvent.makeResponse.FromString,
                _registered_method=True)


class ApiMouseEventServiceServicer(object):
    """GRPC interface definition for class 'ApiMouseEvent' from 'apimouselistener.h'
    """

    def make(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiMouseEventServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'make': grpc.unary_unary_rpc_method_handler(
                    servicer.make,
                    request_deserializer=apimouselistener__pb2.ApiMouseEvent.makeRequest.FromString,
                    response_serializer=apimouselistener__pb2.ApiMouseEvent.makeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiMouseEventService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiMouseEventService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiMouseEventService(object):
    """GRPC interface definition for class 'ApiMouseEvent' from 'apimouselistener.h'
    """

    @staticmethod
    def make(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMouseEventService/make',
            apimouselistener__pb2.ApiMouseEvent.makeRequest.SerializeToString,
            apimouselistener__pb2.ApiMouseEvent.makeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ApiMouseListenerServiceStub(object):
    """GRPC interface definition for class 'ApiMouseListener' from 'apimouselistener.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/octaneapi.ApiMouseListenerService/create',
                request_serializer=apimouselistener__pb2.ApiMouseListener.createRequest.SerializeToString,
                response_deserializer=apimouselistener__pb2.ApiMouseListener.createResponse.FromString,
                _registered_method=True)
        self.destroy = channel.unary_unary(
                '/octaneapi.ApiMouseListenerService/destroy',
                request_serializer=apimouselistener__pb2.ApiMouseListener.destroyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class ApiMouseListenerServiceServicer(object):
    """GRPC interface definition for class 'ApiMouseListener' from 'apimouselistener.h'
    """

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def destroy(self, request, context):
        """/ Destroys the listener created with create(
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiMouseListenerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=apimouselistener__pb2.ApiMouseListener.createRequest.FromString,
                    response_serializer=apimouselistener__pb2.ApiMouseListener.createResponse.SerializeToString,
            ),
            'destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.destroy,
                    request_deserializer=apimouselistener__pb2.ApiMouseListener.destroyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiMouseListenerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiMouseListenerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiMouseListenerService(object):
    """GRPC interface definition for class 'ApiMouseListener' from 'apimouselistener.h'
    """

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMouseListenerService/create',
            apimouselistener__pb2.ApiMouseListener.createRequest.SerializeToString,
            apimouselistener__pb2.ApiMouseListener.createResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMouseListenerService/destroy',
            apimouselistener__pb2.ApiMouseListener.destroyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ApiMouseWheelDetailsServiceStub(object):
    """GRPC interface definition for class 'ApiMouseWheelDetails' from 'apimouselistener.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.make1 = channel.unary_unary(
                '/octaneapi.ApiMouseWheelDetailsService/make1',
                request_serializer=apimouselistener__pb2.ApiMouseWheelDetails.makeRequest.SerializeToString,
                response_deserializer=apimouselistener__pb2.ApiMouseWheelDetails.makeResponse.FromString,
                _registered_method=True)


class ApiMouseWheelDetailsServiceServicer(object):
    """GRPC interface definition for class 'ApiMouseWheelDetails' from 'apimouselistener.h'
    """

    def make1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiMouseWheelDetailsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'make1': grpc.unary_unary_rpc_method_handler(
                    servicer.make1,
                    request_deserializer=apimouselistener__pb2.ApiMouseWheelDetails.makeRequest.FromString,
                    response_serializer=apimouselistener__pb2.ApiMouseWheelDetails.makeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiMouseWheelDetailsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiMouseWheelDetailsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiMouseWheelDetailsService(object):
    """GRPC interface definition for class 'ApiMouseWheelDetails' from 'apimouselistener.h'
    """

    @staticmethod
    def make1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMouseWheelDetailsService/make1',
            apimouselistener__pb2.ApiMouseWheelDetails.makeRequest.SerializeToString,
            apimouselistener__pb2.ApiMouseWheelDetails.makeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
