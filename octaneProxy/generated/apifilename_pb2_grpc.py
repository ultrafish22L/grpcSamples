# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apifilename_pb2 as apifilename__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ApiFileNameServiceStub(object):
    """GRPC interface definition for class 'ApiFileName' from 'apifilename.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/octaneapi.ApiFileNameService/create',
                request_serializer=apifilename__pb2.ApiFileName.createRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.createResponse.FromString,
                _registered_method=True)
        self.destroy = channel.unary_unary(
                '/octaneapi.ApiFileNameService/destroy',
                request_serializer=apifilename__pb2.ApiFileName.destroyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.set = channel.unary_unary(
                '/octaneapi.ApiFileNameService/set',
                request_serializer=apifilename__pb2.ApiFileName.setRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.clear = channel.unary_unary(
                '/octaneapi.ApiFileNameService/clear',
                request_serializer=apifilename__pb2.ApiFileName.clearRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.isEmpty = channel.unary_unary(
                '/octaneapi.ApiFileNameService/isEmpty',
                request_serializer=apifilename__pb2.ApiFileName.isEmptyRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.isEmptyResponse.FromString,
                _registered_method=True)
        self.isAbsolute = channel.unary_unary(
                '/octaneapi.ApiFileNameService/isAbsolute',
                request_serializer=apifilename__pb2.ApiFileName.isAbsoluteRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.isAbsoluteResponse.FromString,
                _registered_method=True)
        self.isRelative = channel.unary_unary(
                '/octaneapi.ApiFileNameService/isRelative',
                request_serializer=apifilename__pb2.ApiFileName.isRelativeRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.isRelativeResponse.FromString,
                _registered_method=True)
        self.getParent = channel.unary_unary(
                '/octaneapi.ApiFileNameService/getParent',
                request_serializer=apifilename__pb2.ApiFileName.getParentRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.getParentResponse.FromString,
                _registered_method=True)
        self.getFileOnly = channel.unary_unary(
                '/octaneapi.ApiFileNameService/getFileOnly',
                request_serializer=apifilename__pb2.ApiFileName.getFileOnlyRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.getFileOnlyResponse.FromString,
                _registered_method=True)
        self.getFullString = channel.unary_unary(
                '/octaneapi.ApiFileNameService/getFullString',
                request_serializer=apifilename__pb2.ApiFileName.getFullStringRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.getFullStringResponse.FromString,
                _registered_method=True)
        self.getRootString = channel.unary_unary(
                '/octaneapi.ApiFileNameService/getRootString',
                request_serializer=apifilename__pb2.ApiFileName.getRootStringRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.getRootStringResponse.FromString,
                _registered_method=True)
        self.getParentString = channel.unary_unary(
                '/octaneapi.ApiFileNameService/getParentString',
                request_serializer=apifilename__pb2.ApiFileName.getParentStringRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.getParentStringResponse.FromString,
                _registered_method=True)
        self.getFileString = channel.unary_unary(
                '/octaneapi.ApiFileNameService/getFileString',
                request_serializer=apifilename__pb2.ApiFileName.getFileStringRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.getFileStringResponse.FromString,
                _registered_method=True)
        self.getSuffix = channel.unary_unary(
                '/octaneapi.ApiFileNameService/getSuffix',
                request_serializer=apifilename__pb2.ApiFileName.getSuffixRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.getSuffixResponse.FromString,
                _registered_method=True)
        self.setSuffix = channel.unary_unary(
                '/octaneapi.ApiFileNameService/setSuffix',
                request_serializer=apifilename__pb2.ApiFileName.setSuffixRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.withSuffix = channel.unary_unary(
                '/octaneapi.ApiFileNameService/withSuffix',
                request_serializer=apifilename__pb2.ApiFileName.withSuffixRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.withSuffixResponse.FromString,
                _registered_method=True)
        self.makeRelativeTo = channel.unary_unary(
                '/octaneapi.ApiFileNameService/makeRelativeTo',
                request_serializer=apifilename__pb2.ApiFileName.makeRelativeToRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.makeRelativeToResponse.FromString,
                _registered_method=True)
        self.getConcat = channel.unary_unary(
                '/octaneapi.ApiFileNameService/getConcat',
                request_serializer=apifilename__pb2.ApiFileName.getConcatRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.getConcatResponse.FromString,
                _registered_method=True)
        self.concat = channel.unary_unary(
                '/octaneapi.ApiFileNameService/concat',
                request_serializer=apifilename__pb2.ApiFileName.concatRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.equals = channel.unary_unary(
                '/octaneapi.ApiFileNameService/equals',
                request_serializer=apifilename__pb2.ApiFileName.equalsRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.equalsResponse.FromString,
                _registered_method=True)
        self.notEquals = channel.unary_unary(
                '/octaneapi.ApiFileNameService/notEquals',
                request_serializer=apifilename__pb2.ApiFileName.notEqualsRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.notEqualsResponse.FromString,
                _registered_method=True)
        self.lessThan = channel.unary_unary(
                '/octaneapi.ApiFileNameService/lessThan',
                request_serializer=apifilename__pb2.ApiFileName.lessThanRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.lessThanResponse.FromString,
                _registered_method=True)
        self.exactlyEquals = channel.unary_unary(
                '/octaneapi.ApiFileNameService/exactlyEquals',
                request_serializer=apifilename__pb2.ApiFileName.exactlyEqualsRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.exactlyEqualsResponse.FromString,
                _registered_method=True)
        self.exactlyLessThan = channel.unary_unary(
                '/octaneapi.ApiFileNameService/exactlyLessThan',
                request_serializer=apifilename__pb2.ApiFileName.exactlyLessThanRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.exactlyLessThanResponse.FromString,
                _registered_method=True)
        self.appendToFileName = channel.unary_unary(
                '/octaneapi.ApiFileNameService/appendToFileName',
                request_serializer=apifilename__pb2.ApiFileName.appendToFileNameRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.exists = channel.unary_unary(
                '/octaneapi.ApiFileNameService/exists',
                request_serializer=apifilename__pb2.ApiFileName.existsRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.existsResponse.FromString,
                _registered_method=True)
        self.existsAsFile = channel.unary_unary(
                '/octaneapi.ApiFileNameService/existsAsFile',
                request_serializer=apifilename__pb2.ApiFileName.existsAsFileRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.existsAsFileResponse.FromString,
                _registered_method=True)
        self.existsAsDirectory = channel.unary_unary(
                '/octaneapi.ApiFileNameService/existsAsDirectory',
                request_serializer=apifilename__pb2.ApiFileName.existsAsDirectoryRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.existsAsDirectoryResponse.FromString,
                _registered_method=True)
        self.hasWriteAccess = channel.unary_unary(
                '/octaneapi.ApiFileNameService/hasWriteAccess',
                request_serializer=apifilename__pb2.ApiFileName.hasWriteAccessRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.hasWriteAccessResponse.FromString,
                _registered_method=True)
        self.createDirectory = channel.unary_unary(
                '/octaneapi.ApiFileNameService/createDirectory',
                request_serializer=apifilename__pb2.ApiFileName.createDirectoryRequest.SerializeToString,
                response_deserializer=apifilename__pb2.ApiFileName.createDirectoryResponse.FromString,
                _registered_method=True)


class ApiFileNameServiceServicer(object):
    """GRPC interface definition for class 'ApiFileName' from 'apifilename.h'
    """

    def create(self, request, context):
        """/ Creates a new ApiFileName instance
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def destroy(self, request, context):
        """/ Destroys the ApiFileName object created by create() and other getters below
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set(self, request, context):
        """/ Assigns a new file name path to this instance
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clear(self, request, context):
        """/ Clears the instance
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isEmpty(self, request, context):
        """/ Returns TRUE if this is an empty instance, i
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isAbsolute(self, request, context):
        """/ Returns TRUE if the stored file name is absolute, i
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isRelative(self, request, context):
        """/ Returns TRUE if the stored file name is relative
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getParent(self, request, context):
        """/ Returns the parent directory of the file name (including any root, like drive/server)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFileOnly(self, request, context):
        """/ Returns a file name of the file part (without root and directory)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFullString(self, request, context):
        """/ Returns the full file name as string
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRootString(self, request, context):
        """/ Returns the root of the file name as string (only != "" on Windows)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getParentString(self, request, context):
        """/ Returns the directory part of the file name as string (including the root part on Windows)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFileString(self, request, context):
        """/ Returns the file part of the instance as string
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSuffix(self, request, context):
        """/ Returns the suffix of the last token (i
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setSuffix(self, request, context):
        """/ Sets the suffix of the last token (i
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def withSuffix(self, request, context):
        """/ Similar to setSuffix(), but returning a new FileName instead
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def makeRelativeTo(self, request, context):
        """/ Makes this file name relative to the specified file name
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getConcat(self, request, context):
        """/ Returns the concatenation of this file name with another
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def concat(self, request, context):
        """/ Concats other filename to this file name
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def equals(self, request, context):
        """/ Returns TRUE if this instance is equal to the other one
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def notEquals(self, request, context):
        """/ Returns TRUE if this instance is not equal to the other one
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def lessThan(self, request, context):
        """/ Returns TRUE if this instance is "less" than the other one (useful for ordered maps)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def exactlyEquals(self, request, context):
        """/ Returns TRUE if this instance is equal to the other one, using a case-sensitive comparison
        / on all platforms
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def exactlyLessThan(self, request, context):
        """/ Returns TRUE if this instance is "less" than the other one, using a case-sensitive comparison
        / on all platforms
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def appendToFileName(self, request, context):
        """/ Appends some text to the file name of the last token, but makes sure
        / that it is inserted in front of the suffix (if the last token has one)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def exists(self, request, context):
        """/ Returns TRUE if this file name exists as directory OR as file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def existsAsFile(self, request, context):
        """/ Returns TRUE if this file name exists and is a file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def existsAsDirectory(self, request, context):
        """/ Returns TRUE if this file name exists and is a file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasWriteAccess(self, request, context):
        """/ Returns TRUE if we can write to the specified file name
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createDirectory(self, request, context):
        """/ Tries to create a directory with this file name, which must be an absolute file name
        / (asserted)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiFileNameServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=apifilename__pb2.ApiFileName.createRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.createResponse.SerializeToString,
            ),
            'destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.destroy,
                    request_deserializer=apifilename__pb2.ApiFileName.destroyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'set': grpc.unary_unary_rpc_method_handler(
                    servicer.set,
                    request_deserializer=apifilename__pb2.ApiFileName.setRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'clear': grpc.unary_unary_rpc_method_handler(
                    servicer.clear,
                    request_deserializer=apifilename__pb2.ApiFileName.clearRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'isEmpty': grpc.unary_unary_rpc_method_handler(
                    servicer.isEmpty,
                    request_deserializer=apifilename__pb2.ApiFileName.isEmptyRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.isEmptyResponse.SerializeToString,
            ),
            'isAbsolute': grpc.unary_unary_rpc_method_handler(
                    servicer.isAbsolute,
                    request_deserializer=apifilename__pb2.ApiFileName.isAbsoluteRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.isAbsoluteResponse.SerializeToString,
            ),
            'isRelative': grpc.unary_unary_rpc_method_handler(
                    servicer.isRelative,
                    request_deserializer=apifilename__pb2.ApiFileName.isRelativeRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.isRelativeResponse.SerializeToString,
            ),
            'getParent': grpc.unary_unary_rpc_method_handler(
                    servicer.getParent,
                    request_deserializer=apifilename__pb2.ApiFileName.getParentRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.getParentResponse.SerializeToString,
            ),
            'getFileOnly': grpc.unary_unary_rpc_method_handler(
                    servicer.getFileOnly,
                    request_deserializer=apifilename__pb2.ApiFileName.getFileOnlyRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.getFileOnlyResponse.SerializeToString,
            ),
            'getFullString': grpc.unary_unary_rpc_method_handler(
                    servicer.getFullString,
                    request_deserializer=apifilename__pb2.ApiFileName.getFullStringRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.getFullStringResponse.SerializeToString,
            ),
            'getRootString': grpc.unary_unary_rpc_method_handler(
                    servicer.getRootString,
                    request_deserializer=apifilename__pb2.ApiFileName.getRootStringRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.getRootStringResponse.SerializeToString,
            ),
            'getParentString': grpc.unary_unary_rpc_method_handler(
                    servicer.getParentString,
                    request_deserializer=apifilename__pb2.ApiFileName.getParentStringRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.getParentStringResponse.SerializeToString,
            ),
            'getFileString': grpc.unary_unary_rpc_method_handler(
                    servicer.getFileString,
                    request_deserializer=apifilename__pb2.ApiFileName.getFileStringRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.getFileStringResponse.SerializeToString,
            ),
            'getSuffix': grpc.unary_unary_rpc_method_handler(
                    servicer.getSuffix,
                    request_deserializer=apifilename__pb2.ApiFileName.getSuffixRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.getSuffixResponse.SerializeToString,
            ),
            'setSuffix': grpc.unary_unary_rpc_method_handler(
                    servicer.setSuffix,
                    request_deserializer=apifilename__pb2.ApiFileName.setSuffixRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'withSuffix': grpc.unary_unary_rpc_method_handler(
                    servicer.withSuffix,
                    request_deserializer=apifilename__pb2.ApiFileName.withSuffixRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.withSuffixResponse.SerializeToString,
            ),
            'makeRelativeTo': grpc.unary_unary_rpc_method_handler(
                    servicer.makeRelativeTo,
                    request_deserializer=apifilename__pb2.ApiFileName.makeRelativeToRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.makeRelativeToResponse.SerializeToString,
            ),
            'getConcat': grpc.unary_unary_rpc_method_handler(
                    servicer.getConcat,
                    request_deserializer=apifilename__pb2.ApiFileName.getConcatRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.getConcatResponse.SerializeToString,
            ),
            'concat': grpc.unary_unary_rpc_method_handler(
                    servicer.concat,
                    request_deserializer=apifilename__pb2.ApiFileName.concatRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'equals': grpc.unary_unary_rpc_method_handler(
                    servicer.equals,
                    request_deserializer=apifilename__pb2.ApiFileName.equalsRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.equalsResponse.SerializeToString,
            ),
            'notEquals': grpc.unary_unary_rpc_method_handler(
                    servicer.notEquals,
                    request_deserializer=apifilename__pb2.ApiFileName.notEqualsRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.notEqualsResponse.SerializeToString,
            ),
            'lessThan': grpc.unary_unary_rpc_method_handler(
                    servicer.lessThan,
                    request_deserializer=apifilename__pb2.ApiFileName.lessThanRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.lessThanResponse.SerializeToString,
            ),
            'exactlyEquals': grpc.unary_unary_rpc_method_handler(
                    servicer.exactlyEquals,
                    request_deserializer=apifilename__pb2.ApiFileName.exactlyEqualsRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.exactlyEqualsResponse.SerializeToString,
            ),
            'exactlyLessThan': grpc.unary_unary_rpc_method_handler(
                    servicer.exactlyLessThan,
                    request_deserializer=apifilename__pb2.ApiFileName.exactlyLessThanRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.exactlyLessThanResponse.SerializeToString,
            ),
            'appendToFileName': grpc.unary_unary_rpc_method_handler(
                    servicer.appendToFileName,
                    request_deserializer=apifilename__pb2.ApiFileName.appendToFileNameRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'exists': grpc.unary_unary_rpc_method_handler(
                    servicer.exists,
                    request_deserializer=apifilename__pb2.ApiFileName.existsRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.existsResponse.SerializeToString,
            ),
            'existsAsFile': grpc.unary_unary_rpc_method_handler(
                    servicer.existsAsFile,
                    request_deserializer=apifilename__pb2.ApiFileName.existsAsFileRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.existsAsFileResponse.SerializeToString,
            ),
            'existsAsDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.existsAsDirectory,
                    request_deserializer=apifilename__pb2.ApiFileName.existsAsDirectoryRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.existsAsDirectoryResponse.SerializeToString,
            ),
            'hasWriteAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.hasWriteAccess,
                    request_deserializer=apifilename__pb2.ApiFileName.hasWriteAccessRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.hasWriteAccessResponse.SerializeToString,
            ),
            'createDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.createDirectory,
                    request_deserializer=apifilename__pb2.ApiFileName.createDirectoryRequest.FromString,
                    response_serializer=apifilename__pb2.ApiFileName.createDirectoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiFileNameService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiFileNameService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiFileNameService(object):
    """GRPC interface definition for class 'ApiFileName' from 'apifilename.h'
    """

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/create',
            apifilename__pb2.ApiFileName.createRequest.SerializeToString,
            apifilename__pb2.ApiFileName.createResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/destroy',
            apifilename__pb2.ApiFileName.destroyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def set(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/set',
            apifilename__pb2.ApiFileName.setRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def clear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/clear',
            apifilename__pb2.ApiFileName.clearRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isEmpty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/isEmpty',
            apifilename__pb2.ApiFileName.isEmptyRequest.SerializeToString,
            apifilename__pb2.ApiFileName.isEmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isAbsolute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/isAbsolute',
            apifilename__pb2.ApiFileName.isAbsoluteRequest.SerializeToString,
            apifilename__pb2.ApiFileName.isAbsoluteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isRelative(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/isRelative',
            apifilename__pb2.ApiFileName.isRelativeRequest.SerializeToString,
            apifilename__pb2.ApiFileName.isRelativeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getParent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/getParent',
            apifilename__pb2.ApiFileName.getParentRequest.SerializeToString,
            apifilename__pb2.ApiFileName.getParentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getFileOnly(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/getFileOnly',
            apifilename__pb2.ApiFileName.getFileOnlyRequest.SerializeToString,
            apifilename__pb2.ApiFileName.getFileOnlyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getFullString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/getFullString',
            apifilename__pb2.ApiFileName.getFullStringRequest.SerializeToString,
            apifilename__pb2.ApiFileName.getFullStringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getRootString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/getRootString',
            apifilename__pb2.ApiFileName.getRootStringRequest.SerializeToString,
            apifilename__pb2.ApiFileName.getRootStringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getParentString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/getParentString',
            apifilename__pb2.ApiFileName.getParentStringRequest.SerializeToString,
            apifilename__pb2.ApiFileName.getParentStringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getFileString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/getFileString',
            apifilename__pb2.ApiFileName.getFileStringRequest.SerializeToString,
            apifilename__pb2.ApiFileName.getFileStringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getSuffix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/getSuffix',
            apifilename__pb2.ApiFileName.getSuffixRequest.SerializeToString,
            apifilename__pb2.ApiFileName.getSuffixResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setSuffix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/setSuffix',
            apifilename__pb2.ApiFileName.setSuffixRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def withSuffix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/withSuffix',
            apifilename__pb2.ApiFileName.withSuffixRequest.SerializeToString,
            apifilename__pb2.ApiFileName.withSuffixResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def makeRelativeTo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/makeRelativeTo',
            apifilename__pb2.ApiFileName.makeRelativeToRequest.SerializeToString,
            apifilename__pb2.ApiFileName.makeRelativeToResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getConcat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/getConcat',
            apifilename__pb2.ApiFileName.getConcatRequest.SerializeToString,
            apifilename__pb2.ApiFileName.getConcatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def concat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/concat',
            apifilename__pb2.ApiFileName.concatRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def equals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/equals',
            apifilename__pb2.ApiFileName.equalsRequest.SerializeToString,
            apifilename__pb2.ApiFileName.equalsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def notEquals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/notEquals',
            apifilename__pb2.ApiFileName.notEqualsRequest.SerializeToString,
            apifilename__pb2.ApiFileName.notEqualsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def lessThan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/lessThan',
            apifilename__pb2.ApiFileName.lessThanRequest.SerializeToString,
            apifilename__pb2.ApiFileName.lessThanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def exactlyEquals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/exactlyEquals',
            apifilename__pb2.ApiFileName.exactlyEqualsRequest.SerializeToString,
            apifilename__pb2.ApiFileName.exactlyEqualsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def exactlyLessThan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/exactlyLessThan',
            apifilename__pb2.ApiFileName.exactlyLessThanRequest.SerializeToString,
            apifilename__pb2.ApiFileName.exactlyLessThanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def appendToFileName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/appendToFileName',
            apifilename__pb2.ApiFileName.appendToFileNameRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def exists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/exists',
            apifilename__pb2.ApiFileName.existsRequest.SerializeToString,
            apifilename__pb2.ApiFileName.existsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def existsAsFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/existsAsFile',
            apifilename__pb2.ApiFileName.existsAsFileRequest.SerializeToString,
            apifilename__pb2.ApiFileName.existsAsFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def existsAsDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/existsAsDirectory',
            apifilename__pb2.ApiFileName.existsAsDirectoryRequest.SerializeToString,
            apifilename__pb2.ApiFileName.existsAsDirectoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def hasWriteAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/hasWriteAccess',
            apifilename__pb2.ApiFileName.hasWriteAccessRequest.SerializeToString,
            apifilename__pb2.ApiFileName.hasWriteAccessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiFileNameService/createDirectory',
            apifilename__pb2.ApiFileName.createDirectoryRequest.SerializeToString,
            apifilename__pb2.ApiFileName.createDirectoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
