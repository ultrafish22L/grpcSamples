# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apireferencegraph_pb2 as apireferencegraph__pb2


class ApiReferenceGraphServiceStub(object):
    """GRPC interface definition for class 'ApiReferenceGraph' from 'apireferencegraph.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/octaneapi.ApiReferenceGraphService/create',
                request_serializer=apireferencegraph__pb2.ApiReferenceGraph.createRequest.SerializeToString,
                response_deserializer=apireferencegraph__pb2.ApiReferenceGraph.createResponse.FromString,
                _registered_method=True)
        self.obtain = channel.unary_unary(
                '/octaneapi.ApiReferenceGraphService/obtain',
                request_serializer=apireferencegraph__pb2.ApiReferenceGraph.obtainRequest.SerializeToString,
                response_deserializer=apireferencegraph__pb2.ApiReferenceGraph.obtainResponse.FromString,
                _registered_method=True)
        self.hasAabbData = channel.unary_unary(
                '/octaneapi.ApiReferenceGraphService/hasAabbData',
                request_serializer=apireferencegraph__pb2.ApiReferenceGraph.hasAabbDataRequest.SerializeToString,
                response_deserializer=apireferencegraph__pb2.ApiReferenceGraph.hasAabbDataResponse.FromString,
                _registered_method=True)
        self.totalAabbEntries = channel.unary_unary(
                '/octaneapi.ApiReferenceGraphService/totalAabbEntries',
                request_serializer=apireferencegraph__pb2.ApiReferenceGraph.totalAabbEntriesRequest.SerializeToString,
                response_deserializer=apireferencegraph__pb2.ApiReferenceGraph.totalAabbEntriesResponse.FromString,
                _registered_method=True)
        self.fetchAllBounds = channel.unary_unary(
                '/octaneapi.ApiReferenceGraphService/fetchAllBounds',
                request_serializer=apireferencegraph__pb2.ApiReferenceGraph.fetchAllBoundsRequest.SerializeToString,
                response_deserializer=apireferencegraph__pb2.ApiReferenceGraph.fetchAllBoundsResponse.FromString,
                _registered_method=True)
        self.totalAabbEntriesForOutput = channel.unary_unary(
                '/octaneapi.ApiReferenceGraphService/totalAabbEntriesForOutput',
                request_serializer=apireferencegraph__pb2.ApiReferenceGraph.totalAabbEntriesForOutputRequest.SerializeToString,
                response_deserializer=apireferencegraph__pb2.ApiReferenceGraph.totalAabbEntriesForOutputResponse.FromString,
                _registered_method=True)
        self.fetchBoundsForOutput = channel.unary_unary(
                '/octaneapi.ApiReferenceGraphService/fetchBoundsForOutput',
                request_serializer=apireferencegraph__pb2.ApiReferenceGraph.fetchBoundsForOutputRequest.SerializeToString,
                response_deserializer=apireferencegraph__pb2.ApiReferenceGraph.fetchBoundsForOutputResponse.FromString,
                _registered_method=True)


class ApiReferenceGraphServiceServicer(object):
    """GRPC interface definition for class 'ApiReferenceGraph' from 'apireferencegraph.h'
    """

    def create(self, request, context):
        """/ creates a new graph of the GT_REFERENCE type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def obtain(self, request, context):
        """/ Returns ApiReferenceGraph interface for the ApiNodeGraph of GT_REFERENCE type
        / 
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasAabbData(self, request, context):
        """/ Returns true if the AABB data is present in the referenced orbx
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def totalAabbEntries(self, request, context):
        """/ Returns the number of AABB entries for all outputs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fetchAllBounds(self, request, context):
        """/ Populates the buffer with AABBs for all the output nodes at current time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def totalAabbEntriesForOutput(self, request, context):
        """/ Returns the number of AABB entries for the certain output node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fetchBoundsForOutput(self, request, context):
        """/ Populates the buffer with AABBs for a particular output node index at current scene time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiReferenceGraphServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=apireferencegraph__pb2.ApiReferenceGraph.createRequest.FromString,
                    response_serializer=apireferencegraph__pb2.ApiReferenceGraph.createResponse.SerializeToString,
            ),
            'obtain': grpc.unary_unary_rpc_method_handler(
                    servicer.obtain,
                    request_deserializer=apireferencegraph__pb2.ApiReferenceGraph.obtainRequest.FromString,
                    response_serializer=apireferencegraph__pb2.ApiReferenceGraph.obtainResponse.SerializeToString,
            ),
            'hasAabbData': grpc.unary_unary_rpc_method_handler(
                    servicer.hasAabbData,
                    request_deserializer=apireferencegraph__pb2.ApiReferenceGraph.hasAabbDataRequest.FromString,
                    response_serializer=apireferencegraph__pb2.ApiReferenceGraph.hasAabbDataResponse.SerializeToString,
            ),
            'totalAabbEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.totalAabbEntries,
                    request_deserializer=apireferencegraph__pb2.ApiReferenceGraph.totalAabbEntriesRequest.FromString,
                    response_serializer=apireferencegraph__pb2.ApiReferenceGraph.totalAabbEntriesResponse.SerializeToString,
            ),
            'fetchAllBounds': grpc.unary_unary_rpc_method_handler(
                    servicer.fetchAllBounds,
                    request_deserializer=apireferencegraph__pb2.ApiReferenceGraph.fetchAllBoundsRequest.FromString,
                    response_serializer=apireferencegraph__pb2.ApiReferenceGraph.fetchAllBoundsResponse.SerializeToString,
            ),
            'totalAabbEntriesForOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.totalAabbEntriesForOutput,
                    request_deserializer=apireferencegraph__pb2.ApiReferenceGraph.totalAabbEntriesForOutputRequest.FromString,
                    response_serializer=apireferencegraph__pb2.ApiReferenceGraph.totalAabbEntriesForOutputResponse.SerializeToString,
            ),
            'fetchBoundsForOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.fetchBoundsForOutput,
                    request_deserializer=apireferencegraph__pb2.ApiReferenceGraph.fetchBoundsForOutputRequest.FromString,
                    response_serializer=apireferencegraph__pb2.ApiReferenceGraph.fetchBoundsForOutputResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiReferenceGraphService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiReferenceGraphService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiReferenceGraphService(object):
    """GRPC interface definition for class 'ApiReferenceGraph' from 'apireferencegraph.h'
    """

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiReferenceGraphService/create',
            apireferencegraph__pb2.ApiReferenceGraph.createRequest.SerializeToString,
            apireferencegraph__pb2.ApiReferenceGraph.createResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def obtain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiReferenceGraphService/obtain',
            apireferencegraph__pb2.ApiReferenceGraph.obtainRequest.SerializeToString,
            apireferencegraph__pb2.ApiReferenceGraph.obtainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def hasAabbData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiReferenceGraphService/hasAabbData',
            apireferencegraph__pb2.ApiReferenceGraph.hasAabbDataRequest.SerializeToString,
            apireferencegraph__pb2.ApiReferenceGraph.hasAabbDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def totalAabbEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiReferenceGraphService/totalAabbEntries',
            apireferencegraph__pb2.ApiReferenceGraph.totalAabbEntriesRequest.SerializeToString,
            apireferencegraph__pb2.ApiReferenceGraph.totalAabbEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def fetchAllBounds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiReferenceGraphService/fetchAllBounds',
            apireferencegraph__pb2.ApiReferenceGraph.fetchAllBoundsRequest.SerializeToString,
            apireferencegraph__pb2.ApiReferenceGraph.fetchAllBoundsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def totalAabbEntriesForOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiReferenceGraphService/totalAabbEntriesForOutput',
            apireferencegraph__pb2.ApiReferenceGraph.totalAabbEntriesForOutputRequest.SerializeToString,
            apireferencegraph__pb2.ApiReferenceGraph.totalAabbEntriesForOutputResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def fetchBoundsForOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiReferenceGraphService/fetchBoundsForOutput',
            apireferencegraph__pb2.ApiReferenceGraph.fetchBoundsForOutputRequest.SerializeToString,
            apireferencegraph__pb2.ApiReferenceGraph.fetchBoundsForOutputResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
