# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apimaterialx_pb2 as apimaterialx__pb2


class ApiMaterialXGlobalServiceStub(object):
    """GRPC interface definition for class 'ApiMaterialXGlobal' from 'apimaterialx.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.importMaterialXFile = channel.unary_unary(
                '/octaneapi.ApiMaterialXGlobalService/importMaterialXFile',
                request_serializer=apimaterialx__pb2.ApiMaterialXGlobal.importMaterialXFileRequest.SerializeToString,
                response_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.importMaterialXFileResponse.FromString,
                _registered_method=True)
        self.getAllMxNodeCategories = channel.unary_unary(
                '/octaneapi.ApiMaterialXGlobalService/getAllMxNodeCategories',
                request_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getAllMxNodeCategoriesRequest.SerializeToString,
                response_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getAllMxNodeCategoriesResponse.FromString,
                _registered_method=True)
        self.getMxNodeCategory = channel.unary_unary(
                '/octaneapi.ApiMaterialXGlobalService/getMxNodeCategory',
                request_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxNodeCategoryRequest.SerializeToString,
                response_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxNodeCategoryResponse.FromString,
                _registered_method=True)
        self.getMxNodeCategory1 = channel.unary_unary(
                '/octaneapi.ApiMaterialXGlobalService/getMxNodeCategory1',
                request_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxNodeCategory1Request.SerializeToString,
                response_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxNodeCategory1Response.FromString,
                _registered_method=True)
        self.getMxValueType = channel.unary_unary(
                '/octaneapi.ApiMaterialXGlobalService/getMxValueType',
                request_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxValueTypeRequest.SerializeToString,
                response_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxValueTypeResponse.FromString,
                _registered_method=True)
        self.getTextureValueType = channel.unary_unary(
                '/octaneapi.ApiMaterialXGlobalService/getTextureValueType',
                request_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getTextureValueTypeRequest.SerializeToString,
                response_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getTextureValueTypeResponse.FromString,
                _registered_method=True)
        self.getMxColorSpace = channel.unary_unary(
                '/octaneapi.ApiMaterialXGlobalService/getMxColorSpace',
                request_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxColorSpaceRequest.SerializeToString,
                response_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxColorSpaceResponse.FromString,
                _registered_method=True)
        self.getNamedColorSpace = channel.unary_unary(
                '/octaneapi.ApiMaterialXGlobalService/getNamedColorSpace',
                request_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getNamedColorSpaceRequest.SerializeToString,
                response_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getNamedColorSpaceResponse.FromString,
                _registered_method=True)
        self.getNodeTypes = channel.unary_unary(
                '/octaneapi.ApiMaterialXGlobalService/getNodeTypes',
                request_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getNodeTypesRequest.SerializeToString,
                response_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getNodeTypesResponse.FromString,
                _registered_method=True)
        self.getGraphType = channel.unary_unary(
                '/octaneapi.ApiMaterialXGlobalService/getGraphType',
                request_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getGraphTypeRequest.SerializeToString,
                response_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getGraphTypeResponse.FromString,
                _registered_method=True)
        self.getMxInputNamesAndPinIds = channel.unary_unary(
                '/octaneapi.ApiMaterialXGlobalService/getMxInputNamesAndPinIds',
                request_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxInputNamesAndPinIdsRequest.SerializeToString,
                response_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxInputNamesAndPinIdsResponse.FromString,
                _registered_method=True)
        self.getGraphMxInputNames = channel.unary_unary(
                '/octaneapi.ApiMaterialXGlobalService/getGraphMxInputNames',
                request_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getGraphMxInputNamesRequest.SerializeToString,
                response_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getGraphMxInputNamesResponse.FromString,
                _registered_method=True)
        self.getGraphMxOutputNames = channel.unary_unary(
                '/octaneapi.ApiMaterialXGlobalService/getGraphMxOutputNames',
                request_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getGraphMxOutputNamesRequest.SerializeToString,
                response_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getGraphMxOutputNamesResponse.FromString,
                _registered_method=True)
        self.findConfiguration1 = channel.unary_unary(
                '/octaneapi.ApiMaterialXGlobalService/findConfiguration1',
                request_serializer=apimaterialx__pb2.ApiMaterialXGlobal.findConfiguration1Request.SerializeToString,
                response_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.findConfiguration1Response.FromString,
                _registered_method=True)


class ApiMaterialXGlobalServiceServicer(object):
    """GRPC interface definition for class 'ApiMaterialXGlobal' from 'apimaterialx.h'
    """

    def importMaterialXFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllMxNodeCategories(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMxNodeCategory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMxNodeCategory1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMxValueType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTextureValueType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMxColorSpace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNamedColorSpace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNodeTypes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGraphType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMxInputNamesAndPinIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGraphMxInputNames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGraphMxOutputNames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findConfiguration1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiMaterialXGlobalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'importMaterialXFile': grpc.unary_unary_rpc_method_handler(
                    servicer.importMaterialXFile,
                    request_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.importMaterialXFileRequest.FromString,
                    response_serializer=apimaterialx__pb2.ApiMaterialXGlobal.importMaterialXFileResponse.SerializeToString,
            ),
            'getAllMxNodeCategories': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllMxNodeCategories,
                    request_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getAllMxNodeCategoriesRequest.FromString,
                    response_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getAllMxNodeCategoriesResponse.SerializeToString,
            ),
            'getMxNodeCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.getMxNodeCategory,
                    request_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxNodeCategoryRequest.FromString,
                    response_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxNodeCategoryResponse.SerializeToString,
            ),
            'getMxNodeCategory1': grpc.unary_unary_rpc_method_handler(
                    servicer.getMxNodeCategory1,
                    request_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxNodeCategory1Request.FromString,
                    response_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxNodeCategory1Response.SerializeToString,
            ),
            'getMxValueType': grpc.unary_unary_rpc_method_handler(
                    servicer.getMxValueType,
                    request_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxValueTypeRequest.FromString,
                    response_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxValueTypeResponse.SerializeToString,
            ),
            'getTextureValueType': grpc.unary_unary_rpc_method_handler(
                    servicer.getTextureValueType,
                    request_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getTextureValueTypeRequest.FromString,
                    response_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getTextureValueTypeResponse.SerializeToString,
            ),
            'getMxColorSpace': grpc.unary_unary_rpc_method_handler(
                    servicer.getMxColorSpace,
                    request_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxColorSpaceRequest.FromString,
                    response_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxColorSpaceResponse.SerializeToString,
            ),
            'getNamedColorSpace': grpc.unary_unary_rpc_method_handler(
                    servicer.getNamedColorSpace,
                    request_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getNamedColorSpaceRequest.FromString,
                    response_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getNamedColorSpaceResponse.SerializeToString,
            ),
            'getNodeTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.getNodeTypes,
                    request_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getNodeTypesRequest.FromString,
                    response_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getNodeTypesResponse.SerializeToString,
            ),
            'getGraphType': grpc.unary_unary_rpc_method_handler(
                    servicer.getGraphType,
                    request_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getGraphTypeRequest.FromString,
                    response_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getGraphTypeResponse.SerializeToString,
            ),
            'getMxInputNamesAndPinIds': grpc.unary_unary_rpc_method_handler(
                    servicer.getMxInputNamesAndPinIds,
                    request_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxInputNamesAndPinIdsRequest.FromString,
                    response_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getMxInputNamesAndPinIdsResponse.SerializeToString,
            ),
            'getGraphMxInputNames': grpc.unary_unary_rpc_method_handler(
                    servicer.getGraphMxInputNames,
                    request_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getGraphMxInputNamesRequest.FromString,
                    response_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getGraphMxInputNamesResponse.SerializeToString,
            ),
            'getGraphMxOutputNames': grpc.unary_unary_rpc_method_handler(
                    servicer.getGraphMxOutputNames,
                    request_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.getGraphMxOutputNamesRequest.FromString,
                    response_serializer=apimaterialx__pb2.ApiMaterialXGlobal.getGraphMxOutputNamesResponse.SerializeToString,
            ),
            'findConfiguration1': grpc.unary_unary_rpc_method_handler(
                    servicer.findConfiguration1,
                    request_deserializer=apimaterialx__pb2.ApiMaterialXGlobal.findConfiguration1Request.FromString,
                    response_serializer=apimaterialx__pb2.ApiMaterialXGlobal.findConfiguration1Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiMaterialXGlobalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiMaterialXGlobalService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiMaterialXGlobalService(object):
    """GRPC interface definition for class 'ApiMaterialXGlobal' from 'apimaterialx.h'
    """

    @staticmethod
    def importMaterialXFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMaterialXGlobalService/importMaterialXFile',
            apimaterialx__pb2.ApiMaterialXGlobal.importMaterialXFileRequest.SerializeToString,
            apimaterialx__pb2.ApiMaterialXGlobal.importMaterialXFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAllMxNodeCategories(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMaterialXGlobalService/getAllMxNodeCategories',
            apimaterialx__pb2.ApiMaterialXGlobal.getAllMxNodeCategoriesRequest.SerializeToString,
            apimaterialx__pb2.ApiMaterialXGlobal.getAllMxNodeCategoriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMxNodeCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMaterialXGlobalService/getMxNodeCategory',
            apimaterialx__pb2.ApiMaterialXGlobal.getMxNodeCategoryRequest.SerializeToString,
            apimaterialx__pb2.ApiMaterialXGlobal.getMxNodeCategoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMxNodeCategory1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMaterialXGlobalService/getMxNodeCategory1',
            apimaterialx__pb2.ApiMaterialXGlobal.getMxNodeCategory1Request.SerializeToString,
            apimaterialx__pb2.ApiMaterialXGlobal.getMxNodeCategory1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMxValueType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMaterialXGlobalService/getMxValueType',
            apimaterialx__pb2.ApiMaterialXGlobal.getMxValueTypeRequest.SerializeToString,
            apimaterialx__pb2.ApiMaterialXGlobal.getMxValueTypeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTextureValueType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMaterialXGlobalService/getTextureValueType',
            apimaterialx__pb2.ApiMaterialXGlobal.getTextureValueTypeRequest.SerializeToString,
            apimaterialx__pb2.ApiMaterialXGlobal.getTextureValueTypeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMxColorSpace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMaterialXGlobalService/getMxColorSpace',
            apimaterialx__pb2.ApiMaterialXGlobal.getMxColorSpaceRequest.SerializeToString,
            apimaterialx__pb2.ApiMaterialXGlobal.getMxColorSpaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getNamedColorSpace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMaterialXGlobalService/getNamedColorSpace',
            apimaterialx__pb2.ApiMaterialXGlobal.getNamedColorSpaceRequest.SerializeToString,
            apimaterialx__pb2.ApiMaterialXGlobal.getNamedColorSpaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getNodeTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMaterialXGlobalService/getNodeTypes',
            apimaterialx__pb2.ApiMaterialXGlobal.getNodeTypesRequest.SerializeToString,
            apimaterialx__pb2.ApiMaterialXGlobal.getNodeTypesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getGraphType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMaterialXGlobalService/getGraphType',
            apimaterialx__pb2.ApiMaterialXGlobal.getGraphTypeRequest.SerializeToString,
            apimaterialx__pb2.ApiMaterialXGlobal.getGraphTypeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMxInputNamesAndPinIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMaterialXGlobalService/getMxInputNamesAndPinIds',
            apimaterialx__pb2.ApiMaterialXGlobal.getMxInputNamesAndPinIdsRequest.SerializeToString,
            apimaterialx__pb2.ApiMaterialXGlobal.getMxInputNamesAndPinIdsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getGraphMxInputNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMaterialXGlobalService/getGraphMxInputNames',
            apimaterialx__pb2.ApiMaterialXGlobal.getGraphMxInputNamesRequest.SerializeToString,
            apimaterialx__pb2.ApiMaterialXGlobal.getGraphMxInputNamesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getGraphMxOutputNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMaterialXGlobalService/getGraphMxOutputNames',
            apimaterialx__pb2.ApiMaterialXGlobal.getGraphMxOutputNamesRequest.SerializeToString,
            apimaterialx__pb2.ApiMaterialXGlobal.getGraphMxOutputNamesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def findConfiguration1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiMaterialXGlobalService/findConfiguration1',
            apimaterialx__pb2.ApiMaterialXGlobal.findConfiguration1Request.SerializeToString,
            apimaterialx__pb2.ApiMaterialXGlobal.findConfiguration1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
