# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apinetrendermanager_pb2 as apinetrendermanager__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ApiNetRenderManagerServiceStub(object):
    """GRPC interface definition for class 'ApiNetRenderManager' from 'apinetrendermanager.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.configure = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/configure',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.configureRequest.SerializeToString,
                response_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.configureResponse.FromString,
                _registered_method=True)
        self.configuration = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/configuration',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.configurationRequest.SerializeToString,
                response_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.configurationResponse.FromString,
                _registered_method=True)
        self.enable = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/enable',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.enableRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.isSupported = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/isSupported',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.isSupportedRequest.SerializeToString,
                response_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.isSupportedResponse.FromString,
                _registered_method=True)
        self.isEnabled = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/isEnabled',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.isEnabledRequest.SerializeToString,
                response_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.isEnabledResponse.FromString,
                _registered_method=True)
        self.saveConfiguration = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/saveConfiguration',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.saveConfigurationRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.openOctanePreferences = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/openOctanePreferences',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.openOctanePreferencesRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.networkInterfaceCount = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/networkInterfaceCount',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.networkInterfaceCountRequest.SerializeToString,
                response_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.networkInterfaceCountResponse.FromString,
                _registered_method=True)
        self.networkInterface = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/networkInterface',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.networkInterfaceRequest.SerializeToString,
                response_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.networkInterfaceResponse.FromString,
                _registered_method=True)
        self.setNetStatusListener = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/setNetStatusListener',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.setNetStatusListenerRequest.SerializeToString,
                response_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.setNetStatusListenerResponse.FromString,
                _registered_method=True)
        self.status = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/status',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.statusRequest.SerializeToString,
                response_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.statusResponse.FromString,
                _registered_method=True)
        self.setDaemonListener = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/setDaemonListener',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.setDaemonListenerRequest.SerializeToString,
                response_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.setDaemonListenerResponse.FromString,
                _registered_method=True)
        self.bindDaemon = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/bindDaemon',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.bindDaemonRequest.SerializeToString,
                response_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.bindDaemonResponse.FromString,
                _registered_method=True)
        self.unbindDaemon = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/unbindDaemon',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.unbindDaemonRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.stealDaemon = channel.unary_unary(
                '/octaneapi.ApiNetRenderManagerService/stealDaemon',
                request_serializer=apinetrendermanager__pb2.ApiNetRenderManager.stealDaemonRequest.SerializeToString,
                response_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.stealDaemonResponse.FromString,
                _registered_method=True)


class ApiNetRenderManagerServiceServicer(object):
    """GRPC interface definition for class 'ApiNetRenderManager' from 'apinetrendermanager.h'
    """

    def configure(self, request, context):
        """/ Configures network rendering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def configuration(self, request, context):
        """/ Returns the current net render configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def enable(self, request, context):
        """/ Enables/disables network rendering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isSupported(self, request, context):
        """/ Returns TRUE if network rendering is supported in this build
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isEnabled(self, request, context):
        """/ Checks if network rendering is enabled
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveConfiguration(self, request, context):
        """/ Stores the current network rendering configuration in the application preferences
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openOctanePreferences(self, request, context):
        """/ Opens a modal dialog to allow the user to set the network render configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def networkInterfaceCount(self, request, context):
        """/ Returns the number of network interfaces available on this computer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def networkInterface(self, request, context):
        """/ Retrieves info about a specific network interface on this computer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setNetStatusListener(self, request, context):
        """/ Registers a status update called
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def status(self, request, context):
        """/ Returns the current net render status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setDaemonListener(self, request, context):
        """/ Register a daemon listeners
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def bindDaemon(self, request, context):
        """/ Binds a daemon to this master
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unbindDaemon(self, request, context):
        """/ Unbinds a daemon from this master
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stealDaemon(self, request, context):
        """/ Steals a daemon
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiNetRenderManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'configure': grpc.unary_unary_rpc_method_handler(
                    servicer.configure,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.configureRequest.FromString,
                    response_serializer=apinetrendermanager__pb2.ApiNetRenderManager.configureResponse.SerializeToString,
            ),
            'configuration': grpc.unary_unary_rpc_method_handler(
                    servicer.configuration,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.configurationRequest.FromString,
                    response_serializer=apinetrendermanager__pb2.ApiNetRenderManager.configurationResponse.SerializeToString,
            ),
            'enable': grpc.unary_unary_rpc_method_handler(
                    servicer.enable,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.enableRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'isSupported': grpc.unary_unary_rpc_method_handler(
                    servicer.isSupported,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.isSupportedRequest.FromString,
                    response_serializer=apinetrendermanager__pb2.ApiNetRenderManager.isSupportedResponse.SerializeToString,
            ),
            'isEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.isEnabled,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.isEnabledRequest.FromString,
                    response_serializer=apinetrendermanager__pb2.ApiNetRenderManager.isEnabledResponse.SerializeToString,
            ),
            'saveConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.saveConfiguration,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.saveConfigurationRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'openOctanePreferences': grpc.unary_unary_rpc_method_handler(
                    servicer.openOctanePreferences,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.openOctanePreferencesRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'networkInterfaceCount': grpc.unary_unary_rpc_method_handler(
                    servicer.networkInterfaceCount,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.networkInterfaceCountRequest.FromString,
                    response_serializer=apinetrendermanager__pb2.ApiNetRenderManager.networkInterfaceCountResponse.SerializeToString,
            ),
            'networkInterface': grpc.unary_unary_rpc_method_handler(
                    servicer.networkInterface,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.networkInterfaceRequest.FromString,
                    response_serializer=apinetrendermanager__pb2.ApiNetRenderManager.networkInterfaceResponse.SerializeToString,
            ),
            'setNetStatusListener': grpc.unary_unary_rpc_method_handler(
                    servicer.setNetStatusListener,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.setNetStatusListenerRequest.FromString,
                    response_serializer=apinetrendermanager__pb2.ApiNetRenderManager.setNetStatusListenerResponse.SerializeToString,
            ),
            'status': grpc.unary_unary_rpc_method_handler(
                    servicer.status,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.statusRequest.FromString,
                    response_serializer=apinetrendermanager__pb2.ApiNetRenderManager.statusResponse.SerializeToString,
            ),
            'setDaemonListener': grpc.unary_unary_rpc_method_handler(
                    servicer.setDaemonListener,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.setDaemonListenerRequest.FromString,
                    response_serializer=apinetrendermanager__pb2.ApiNetRenderManager.setDaemonListenerResponse.SerializeToString,
            ),
            'bindDaemon': grpc.unary_unary_rpc_method_handler(
                    servicer.bindDaemon,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.bindDaemonRequest.FromString,
                    response_serializer=apinetrendermanager__pb2.ApiNetRenderManager.bindDaemonResponse.SerializeToString,
            ),
            'unbindDaemon': grpc.unary_unary_rpc_method_handler(
                    servicer.unbindDaemon,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.unbindDaemonRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'stealDaemon': grpc.unary_unary_rpc_method_handler(
                    servicer.stealDaemon,
                    request_deserializer=apinetrendermanager__pb2.ApiNetRenderManager.stealDaemonRequest.FromString,
                    response_serializer=apinetrendermanager__pb2.ApiNetRenderManager.stealDaemonResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiNetRenderManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiNetRenderManagerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiNetRenderManagerService(object):
    """GRPC interface definition for class 'ApiNetRenderManager' from 'apinetrendermanager.h'
    """

    @staticmethod
    def configure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/configure',
            apinetrendermanager__pb2.ApiNetRenderManager.configureRequest.SerializeToString,
            apinetrendermanager__pb2.ApiNetRenderManager.configureResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def configuration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/configuration',
            apinetrendermanager__pb2.ApiNetRenderManager.configurationRequest.SerializeToString,
            apinetrendermanager__pb2.ApiNetRenderManager.configurationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def enable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/enable',
            apinetrendermanager__pb2.ApiNetRenderManager.enableRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isSupported(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/isSupported',
            apinetrendermanager__pb2.ApiNetRenderManager.isSupportedRequest.SerializeToString,
            apinetrendermanager__pb2.ApiNetRenderManager.isSupportedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/isEnabled',
            apinetrendermanager__pb2.ApiNetRenderManager.isEnabledRequest.SerializeToString,
            apinetrendermanager__pb2.ApiNetRenderManager.isEnabledResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/saveConfiguration',
            apinetrendermanager__pb2.ApiNetRenderManager.saveConfigurationRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def openOctanePreferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/openOctanePreferences',
            apinetrendermanager__pb2.ApiNetRenderManager.openOctanePreferencesRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def networkInterfaceCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/networkInterfaceCount',
            apinetrendermanager__pb2.ApiNetRenderManager.networkInterfaceCountRequest.SerializeToString,
            apinetrendermanager__pb2.ApiNetRenderManager.networkInterfaceCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def networkInterface(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/networkInterface',
            apinetrendermanager__pb2.ApiNetRenderManager.networkInterfaceRequest.SerializeToString,
            apinetrendermanager__pb2.ApiNetRenderManager.networkInterfaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setNetStatusListener(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/setNetStatusListener',
            apinetrendermanager__pb2.ApiNetRenderManager.setNetStatusListenerRequest.SerializeToString,
            apinetrendermanager__pb2.ApiNetRenderManager.setNetStatusListenerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/status',
            apinetrendermanager__pb2.ApiNetRenderManager.statusRequest.SerializeToString,
            apinetrendermanager__pb2.ApiNetRenderManager.statusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setDaemonListener(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/setDaemonListener',
            apinetrendermanager__pb2.ApiNetRenderManager.setDaemonListenerRequest.SerializeToString,
            apinetrendermanager__pb2.ApiNetRenderManager.setDaemonListenerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def bindDaemon(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/bindDaemon',
            apinetrendermanager__pb2.ApiNetRenderManager.bindDaemonRequest.SerializeToString,
            apinetrendermanager__pb2.ApiNetRenderManager.bindDaemonResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def unbindDaemon(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/unbindDaemon',
            apinetrendermanager__pb2.ApiNetRenderManager.unbindDaemonRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def stealDaemon(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiNetRenderManagerService/stealDaemon',
            apinetrendermanager__pb2.ApiNetRenderManager.stealDaemonRequest.SerializeToString,
            apinetrendermanager__pb2.ApiNetRenderManager.stealDaemonResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
