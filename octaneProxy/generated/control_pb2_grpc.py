# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import control_pb2 as control__pb2


class ApiControlServiceStub(object):
    """GRPC interface definition for class 'ApiWindow' from 'apiwindow.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.startBlockingOperation = channel.unary_unary(
                '/octaneapi.ApiControlService/startBlockingOperation',
                request_serializer=control__pb2.ApiControl.StartBlockingRequest.SerializeToString,
                response_deserializer=control__pb2.ApiControl.ControlResponse.FromString,
                _registered_method=True)
        self.setApiLogFilePath = channel.unary_unary(
                '/octaneapi.ApiControlService/setApiLogFilePath',
                request_serializer=control__pb2.ApiControl.ApiLogRequest.SerializeToString,
                response_deserializer=control__pb2.ApiControl.ControlResponse.FromString,
                _registered_method=True)


class ApiControlServiceServicer(object):
    """GRPC interface definition for class 'ApiWindow' from 'apiwindow.h'
    """

    def startBlockingOperation(self, request, context):
        """/ Method to block UI so thaty multiple RPC calls can be made by the module without the suer interfering
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setApiLogFilePath(self, request, context):
        """/ Method to istnruct ApiLog class  (used by GRPC calls) to save to a text file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiControlServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'startBlockingOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.startBlockingOperation,
                    request_deserializer=control__pb2.ApiControl.StartBlockingRequest.FromString,
                    response_serializer=control__pb2.ApiControl.ControlResponse.SerializeToString,
            ),
            'setApiLogFilePath': grpc.unary_unary_rpc_method_handler(
                    servicer.setApiLogFilePath,
                    request_deserializer=control__pb2.ApiControl.ApiLogRequest.FromString,
                    response_serializer=control__pb2.ApiControl.ControlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiControlService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiControlService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiControlService(object):
    """GRPC interface definition for class 'ApiWindow' from 'apiwindow.h'
    """

    @staticmethod
    def startBlockingOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiControlService/startBlockingOperation',
            control__pb2.ApiControl.StartBlockingRequest.SerializeToString,
            control__pb2.ApiControl.ControlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setApiLogFilePath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiControlService/setApiLogFilePath',
            control__pb2.ApiControl.ApiLogRequest.SerializeToString,
            control__pb2.ApiControl.ControlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
