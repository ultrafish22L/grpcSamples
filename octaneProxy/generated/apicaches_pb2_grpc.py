# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apicaches_pb2 as apicaches__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ApiCachesServiceStub(object):
    """GRPC interface definition for class 'ApiCaches' from 'apicaches.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getMeshletCacheSize = channel.unary_unary(
                '/octaneapi.ApiCachesService/getMeshletCacheSize',
                request_serializer=apicaches__pb2.ApiCaches.getMeshletCacheSizeRequest.SerializeToString,
                response_deserializer=apicaches__pb2.ApiCaches.getMeshletCacheSizeResponse.FromString,
                _registered_method=True)
        self.getMeshletCacheUsedSize = channel.unary_unary(
                '/octaneapi.ApiCachesService/getMeshletCacheUsedSize',
                request_serializer=apicaches__pb2.ApiCaches.getMeshletCacheUsedSizeRequest.SerializeToString,
                response_deserializer=apicaches__pb2.ApiCaches.getMeshletCacheUsedSizeResponse.FromString,
                _registered_method=True)
        self.clearMeshletCache = channel.unary_unary(
                '/octaneapi.ApiCachesService/clearMeshletCache',
                request_serializer=apicaches__pb2.ApiCaches.clearMeshletCacheRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.getVirtualTextureCacheSize = channel.unary_unary(
                '/octaneapi.ApiCachesService/getVirtualTextureCacheSize',
                request_serializer=apicaches__pb2.ApiCaches.getVirtualTextureCacheSizeRequest.SerializeToString,
                response_deserializer=apicaches__pb2.ApiCaches.getVirtualTextureCacheSizeResponse.FromString,
                _registered_method=True)
        self.getVirtualTextureCacheUsedSize = channel.unary_unary(
                '/octaneapi.ApiCachesService/getVirtualTextureCacheUsedSize',
                request_serializer=apicaches__pb2.ApiCaches.getVirtualTextureCacheUsedSizeRequest.SerializeToString,
                response_deserializer=apicaches__pb2.ApiCaches.getVirtualTextureCacheUsedSizeResponse.FromString,
                _registered_method=True)
        self.pruneVirtualTextureCache = channel.unary_unary(
                '/octaneapi.ApiCachesService/pruneVirtualTextureCache',
                request_serializer=apicaches__pb2.ApiCaches.pruneVirtualTextureCacheRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.checkVirtualTextureStatus = channel.unary_unary(
                '/octaneapi.ApiCachesService/checkVirtualTextureStatus',
                request_serializer=apicaches__pb2.ApiCaches.checkVirtualTextureStatusRequest.SerializeToString,
                response_deserializer=apicaches__pb2.ApiCaches.checkVirtualTextureStatusResponse.FromString,
                _registered_method=True)
        self.clearVirtualTextureCacheForNode = channel.unary_unary(
                '/octaneapi.ApiCachesService/clearVirtualTextureCacheForNode',
                request_serializer=apicaches__pb2.ApiCaches.clearVirtualTextureCacheForNodeRequest.SerializeToString,
                response_deserializer=apicaches__pb2.ApiCaches.clearVirtualTextureCacheForNodeResponse.FromString,
                _registered_method=True)


class ApiCachesServiceServicer(object):
    """GRPC interface definition for class 'ApiCaches' from 'apicaches.h'
    """

    def getMeshletCacheSize(self, request, context):
        """/ Returns the maximum size of the meshlet cache in bytes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMeshletCacheUsedSize(self, request, context):
        """/ Returns the amount data stored in the meshlet cache in number of bytes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clearMeshletCache(self, request, context):
        """/ Deletes all meshlet cache files that are currently not in use
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getVirtualTextureCacheSize(self, request, context):
        """/ Returns the maximum size of the virtual texture cache in bytes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getVirtualTextureCacheUsedSize(self, request, context):
        """/ Returns the amount data stored in the virtual texture cache in number of bytes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pruneVirtualTextureCache(self, request, context):
        """/ Deletes virtual texture cache files that are currently not in use, until
        / the cache reaches the desired maximum size
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkVirtualTextureStatus(self, request, context):
        """/ Check the status of the cached virtual texture corresponding to the settings contained
        / in the given node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clearVirtualTextureCacheForNode(self, request, context):
        """/ Clears the cache entry matching the settings contained in the given node item
        / This call succeeds only if there are no other node items referencing the same
        / file, and if the build for the given cache entry is not currently in progress
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiCachesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getMeshletCacheSize': grpc.unary_unary_rpc_method_handler(
                    servicer.getMeshletCacheSize,
                    request_deserializer=apicaches__pb2.ApiCaches.getMeshletCacheSizeRequest.FromString,
                    response_serializer=apicaches__pb2.ApiCaches.getMeshletCacheSizeResponse.SerializeToString,
            ),
            'getMeshletCacheUsedSize': grpc.unary_unary_rpc_method_handler(
                    servicer.getMeshletCacheUsedSize,
                    request_deserializer=apicaches__pb2.ApiCaches.getMeshletCacheUsedSizeRequest.FromString,
                    response_serializer=apicaches__pb2.ApiCaches.getMeshletCacheUsedSizeResponse.SerializeToString,
            ),
            'clearMeshletCache': grpc.unary_unary_rpc_method_handler(
                    servicer.clearMeshletCache,
                    request_deserializer=apicaches__pb2.ApiCaches.clearMeshletCacheRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getVirtualTextureCacheSize': grpc.unary_unary_rpc_method_handler(
                    servicer.getVirtualTextureCacheSize,
                    request_deserializer=apicaches__pb2.ApiCaches.getVirtualTextureCacheSizeRequest.FromString,
                    response_serializer=apicaches__pb2.ApiCaches.getVirtualTextureCacheSizeResponse.SerializeToString,
            ),
            'getVirtualTextureCacheUsedSize': grpc.unary_unary_rpc_method_handler(
                    servicer.getVirtualTextureCacheUsedSize,
                    request_deserializer=apicaches__pb2.ApiCaches.getVirtualTextureCacheUsedSizeRequest.FromString,
                    response_serializer=apicaches__pb2.ApiCaches.getVirtualTextureCacheUsedSizeResponse.SerializeToString,
            ),
            'pruneVirtualTextureCache': grpc.unary_unary_rpc_method_handler(
                    servicer.pruneVirtualTextureCache,
                    request_deserializer=apicaches__pb2.ApiCaches.pruneVirtualTextureCacheRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'checkVirtualTextureStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.checkVirtualTextureStatus,
                    request_deserializer=apicaches__pb2.ApiCaches.checkVirtualTextureStatusRequest.FromString,
                    response_serializer=apicaches__pb2.ApiCaches.checkVirtualTextureStatusResponse.SerializeToString,
            ),
            'clearVirtualTextureCacheForNode': grpc.unary_unary_rpc_method_handler(
                    servicer.clearVirtualTextureCacheForNode,
                    request_deserializer=apicaches__pb2.ApiCaches.clearVirtualTextureCacheForNodeRequest.FromString,
                    response_serializer=apicaches__pb2.ApiCaches.clearVirtualTextureCacheForNodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiCachesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiCachesService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiCachesService(object):
    """GRPC interface definition for class 'ApiCaches' from 'apicaches.h'
    """

    @staticmethod
    def getMeshletCacheSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiCachesService/getMeshletCacheSize',
            apicaches__pb2.ApiCaches.getMeshletCacheSizeRequest.SerializeToString,
            apicaches__pb2.ApiCaches.getMeshletCacheSizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMeshletCacheUsedSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiCachesService/getMeshletCacheUsedSize',
            apicaches__pb2.ApiCaches.getMeshletCacheUsedSizeRequest.SerializeToString,
            apicaches__pb2.ApiCaches.getMeshletCacheUsedSizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def clearMeshletCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiCachesService/clearMeshletCache',
            apicaches__pb2.ApiCaches.clearMeshletCacheRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getVirtualTextureCacheSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiCachesService/getVirtualTextureCacheSize',
            apicaches__pb2.ApiCaches.getVirtualTextureCacheSizeRequest.SerializeToString,
            apicaches__pb2.ApiCaches.getVirtualTextureCacheSizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getVirtualTextureCacheUsedSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiCachesService/getVirtualTextureCacheUsedSize',
            apicaches__pb2.ApiCaches.getVirtualTextureCacheUsedSizeRequest.SerializeToString,
            apicaches__pb2.ApiCaches.getVirtualTextureCacheUsedSizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pruneVirtualTextureCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiCachesService/pruneVirtualTextureCache',
            apicaches__pb2.ApiCaches.pruneVirtualTextureCacheRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def checkVirtualTextureStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiCachesService/checkVirtualTextureStatus',
            apicaches__pb2.ApiCaches.checkVirtualTextureStatusRequest.SerializeToString,
            apicaches__pb2.ApiCaches.checkVirtualTextureStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def clearVirtualTextureCacheForNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiCachesService/clearVirtualTextureCacheForNode',
            apicaches__pb2.ApiCaches.clearVirtualTextureCacheForNodeRequest.SerializeToString,
            apicaches__pb2.ApiCaches.clearVirtualTextureCacheForNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
