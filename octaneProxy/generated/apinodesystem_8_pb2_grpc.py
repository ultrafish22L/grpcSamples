# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apinodesystem_8_pb2 as apinodesystem__8__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ApiRootNodeGraphServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create2 = channel.unary_unary(
                '/octaneapi.ApiRootNodeGraphService/create2',
                request_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.createRequest.SerializeToString,
                response_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.createResponse.FromString,
                _registered_method=True)
        self.init2 = channel.unary_unary(
                '/octaneapi.ApiRootNodeGraphService/init2',
                request_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.initRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.convertAndEvaluate = channel.unary_unary(
                '/octaneapi.ApiRootNodeGraphService/convertAndEvaluate',
                request_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.convertAndEvaluateRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.animationTimeSpan = channel.unary_unary(
                '/octaneapi.ApiRootNodeGraphService/animationTimeSpan',
                request_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.animationTimeSpanRequest.SerializeToString,
                response_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.animationTimeSpanResponse.FromString,
                _registered_method=True)
        self.updateTime = channel.unary_unary(
                '/octaneapi.ApiRootNodeGraphService/updateTime',
                request_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.updateTimeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.importFromFile = channel.unary_unary(
                '/octaneapi.ApiRootNodeGraphService/importFromFile',
                request_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.importFromFileRequest.SerializeToString,
                response_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.importFromFileResponse.FromString,
                _registered_method=True)
        self.importOcsFromMemory = channel.unary_unary(
                '/octaneapi.ApiRootNodeGraphService/importOcsFromMemory',
                request_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.importOcsFromMemoryRequest.SerializeToString,
                response_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.importOcsFromMemoryResponse.FromString,
                _registered_method=True)
        self.importOrbxFromCallback = channel.unary_unary(
                '/octaneapi.ApiRootNodeGraphService/importOrbxFromCallback',
                request_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.importOrbxFromCallbackRequest.SerializeToString,
                response_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.importOrbxFromCallbackResponse.FromString,
                _registered_method=True)
        self.importOrbxFromMemory = channel.unary_unary(
                '/octaneapi.ApiRootNodeGraphService/importOrbxFromMemory',
                request_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.importOrbxFromMemoryRequest.SerializeToString,
                response_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.importOrbxFromMemoryResponse.FromString,
                _registered_method=True)
        self.exportToFile = channel.unary_unary(
                '/octaneapi.ApiRootNodeGraphService/exportToFile',
                request_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.exportToFileRequest.SerializeToString,
                response_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.exportToFileResponse.FromString,
                _registered_method=True)
        self.exportToString = channel.unary_unary(
                '/octaneapi.ApiRootNodeGraphService/exportToString',
                request_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.exportToStringRequest.SerializeToString,
                response_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.exportToStringResponse.FromString,
                _registered_method=True)
        self.referenceGraphCount = channel.unary_unary(
                '/octaneapi.ApiRootNodeGraphService/referenceGraphCount',
                request_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.referenceGraphCountRequest.SerializeToString,
                response_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.referenceGraphCountResponse.FromString,
                _registered_method=True)
        self.loadAllReferences = channel.unary_unary(
                '/octaneapi.ApiRootNodeGraphService/loadAllReferences',
                request_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.loadAllReferencesRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.unloadAllReferences = channel.unary_unary(
                '/octaneapi.ApiRootNodeGraphService/unloadAllReferences',
                request_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.unloadAllReferencesRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class ApiRootNodeGraphServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create2(self, request, context):
        """/ Creates a root node graph (graph without owner) with the specified version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def init2(self, request, context):
        """/ Clears the root node graph (it will be empty afterwards) and sets it to the specified
        / version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def convertAndEvaluate(self, request, context):
        """/ Converts the root node graph to the current version and evaluates all nodes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def animationTimeSpan(self, request, context):
        """/ Returns the total time span for all animations in this graph
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTime(self, request, context):
        """/ Updates the time of all attributes in this root node graph
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def importFromFile(self, request, context):
        """/ Imports a scene from disk into this graph
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def importOcsFromMemory(self, request, context):
        """/ Imports an OCS XML string scene from disk into this graph
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def importOrbxFromCallback(self, request, context):
        """/ Imports an ORBX data from memory into this graph, chunk by chunk
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def importOrbxFromMemory(self, request, context):
        """/ Imports an ORBX data from memory into this graph
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def exportToFile(self, request, context):
        """/ Exports this root graph into a file (regular ocs or package)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def exportToString(self, request, context):
        """/ Exports this graph into a string and optionally exports the raw data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def referenceGraphCount(self, request, context):
        """/ Returns the number of reference graphs that this root graph contains
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loadAllReferences(self, request, context):
        """/ Loads all reference graphs in this graph
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unloadAllReferences(self, request, context):
        """/ Unloads all reference graphs in this graph
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiRootNodeGraphServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create2': grpc.unary_unary_rpc_method_handler(
                    servicer.create2,
                    request_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.createRequest.FromString,
                    response_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.createResponse.SerializeToString,
            ),
            'init2': grpc.unary_unary_rpc_method_handler(
                    servicer.init2,
                    request_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.initRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'convertAndEvaluate': grpc.unary_unary_rpc_method_handler(
                    servicer.convertAndEvaluate,
                    request_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.convertAndEvaluateRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'animationTimeSpan': grpc.unary_unary_rpc_method_handler(
                    servicer.animationTimeSpan,
                    request_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.animationTimeSpanRequest.FromString,
                    response_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.animationTimeSpanResponse.SerializeToString,
            ),
            'updateTime': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTime,
                    request_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.updateTimeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'importFromFile': grpc.unary_unary_rpc_method_handler(
                    servicer.importFromFile,
                    request_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.importFromFileRequest.FromString,
                    response_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.importFromFileResponse.SerializeToString,
            ),
            'importOcsFromMemory': grpc.unary_unary_rpc_method_handler(
                    servicer.importOcsFromMemory,
                    request_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.importOcsFromMemoryRequest.FromString,
                    response_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.importOcsFromMemoryResponse.SerializeToString,
            ),
            'importOrbxFromCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.importOrbxFromCallback,
                    request_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.importOrbxFromCallbackRequest.FromString,
                    response_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.importOrbxFromCallbackResponse.SerializeToString,
            ),
            'importOrbxFromMemory': grpc.unary_unary_rpc_method_handler(
                    servicer.importOrbxFromMemory,
                    request_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.importOrbxFromMemoryRequest.FromString,
                    response_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.importOrbxFromMemoryResponse.SerializeToString,
            ),
            'exportToFile': grpc.unary_unary_rpc_method_handler(
                    servicer.exportToFile,
                    request_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.exportToFileRequest.FromString,
                    response_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.exportToFileResponse.SerializeToString,
            ),
            'exportToString': grpc.unary_unary_rpc_method_handler(
                    servicer.exportToString,
                    request_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.exportToStringRequest.FromString,
                    response_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.exportToStringResponse.SerializeToString,
            ),
            'referenceGraphCount': grpc.unary_unary_rpc_method_handler(
                    servicer.referenceGraphCount,
                    request_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.referenceGraphCountRequest.FromString,
                    response_serializer=apinodesystem__8__pb2.ApiRootNodeGraph.referenceGraphCountResponse.SerializeToString,
            ),
            'loadAllReferences': grpc.unary_unary_rpc_method_handler(
                    servicer.loadAllReferences,
                    request_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.loadAllReferencesRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'unloadAllReferences': grpc.unary_unary_rpc_method_handler(
                    servicer.unloadAllReferences,
                    request_deserializer=apinodesystem__8__pb2.ApiRootNodeGraph.unloadAllReferencesRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiRootNodeGraphService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiRootNodeGraphService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiRootNodeGraphService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRootNodeGraphService/create2',
            apinodesystem__8__pb2.ApiRootNodeGraph.createRequest.SerializeToString,
            apinodesystem__8__pb2.ApiRootNodeGraph.createResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def init2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRootNodeGraphService/init2',
            apinodesystem__8__pb2.ApiRootNodeGraph.initRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def convertAndEvaluate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRootNodeGraphService/convertAndEvaluate',
            apinodesystem__8__pb2.ApiRootNodeGraph.convertAndEvaluateRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def animationTimeSpan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRootNodeGraphService/animationTimeSpan',
            apinodesystem__8__pb2.ApiRootNodeGraph.animationTimeSpanRequest.SerializeToString,
            apinodesystem__8__pb2.ApiRootNodeGraph.animationTimeSpanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRootNodeGraphService/updateTime',
            apinodesystem__8__pb2.ApiRootNodeGraph.updateTimeRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def importFromFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRootNodeGraphService/importFromFile',
            apinodesystem__8__pb2.ApiRootNodeGraph.importFromFileRequest.SerializeToString,
            apinodesystem__8__pb2.ApiRootNodeGraph.importFromFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def importOcsFromMemory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRootNodeGraphService/importOcsFromMemory',
            apinodesystem__8__pb2.ApiRootNodeGraph.importOcsFromMemoryRequest.SerializeToString,
            apinodesystem__8__pb2.ApiRootNodeGraph.importOcsFromMemoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def importOrbxFromCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRootNodeGraphService/importOrbxFromCallback',
            apinodesystem__8__pb2.ApiRootNodeGraph.importOrbxFromCallbackRequest.SerializeToString,
            apinodesystem__8__pb2.ApiRootNodeGraph.importOrbxFromCallbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def importOrbxFromMemory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRootNodeGraphService/importOrbxFromMemory',
            apinodesystem__8__pb2.ApiRootNodeGraph.importOrbxFromMemoryRequest.SerializeToString,
            apinodesystem__8__pb2.ApiRootNodeGraph.importOrbxFromMemoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def exportToFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRootNodeGraphService/exportToFile',
            apinodesystem__8__pb2.ApiRootNodeGraph.exportToFileRequest.SerializeToString,
            apinodesystem__8__pb2.ApiRootNodeGraph.exportToFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def exportToString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRootNodeGraphService/exportToString',
            apinodesystem__8__pb2.ApiRootNodeGraph.exportToStringRequest.SerializeToString,
            apinodesystem__8__pb2.ApiRootNodeGraph.exportToStringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def referenceGraphCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRootNodeGraphService/referenceGraphCount',
            apinodesystem__8__pb2.ApiRootNodeGraph.referenceGraphCountRequest.SerializeToString,
            apinodesystem__8__pb2.ApiRootNodeGraph.referenceGraphCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def loadAllReferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRootNodeGraphService/loadAllReferences',
            apinodesystem__8__pb2.ApiRootNodeGraph.loadAllReferencesRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def unloadAllReferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRootNodeGraphService/unloadAllReferences',
            apinodesystem__8__pb2.ApiRootNodeGraph.unloadAllReferencesRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
