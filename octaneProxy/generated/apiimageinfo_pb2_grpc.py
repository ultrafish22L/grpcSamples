# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apiimageinfo_pb2 as apiimageinfo__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ImageInfoServiceStub(object):
    """GRPC interface definition for class 'ImageInfo' from 'apiimageinfo.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.initFromFile = channel.unary_unary(
                '/octaneapi.ImageInfoService/initFromFile',
                request_serializer=apiimageinfo__pb2.ImageInfo.initFromFileRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.initFromBuffer = channel.unary_unary(
                '/octaneapi.ImageInfoService/initFromBuffer',
                request_serializer=apiimageinfo__pb2.ImageInfo.initFromBufferRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.layerInfo = channel.unary_unary(
                '/octaneapi.ImageInfoService/layerInfo',
                request_serializer=apiimageinfo__pb2.ImageInfo.layerInfoRequest.SerializeToString,
                response_deserializer=apiimageinfo__pb2.ImageInfo.layerInfoResponse.FromString,
                _registered_method=True)
        self.layerCount = channel.unary_unary(
                '/octaneapi.ImageInfoService/layerCount',
                request_serializer=apiimageinfo__pb2.ImageInfo.layerCountRequest.SerializeToString,
                response_deserializer=apiimageinfo__pb2.ImageInfo.layerCountResponse.FromString,
                _registered_method=True)
        self.size = channel.unary_unary(
                '/octaneapi.ImageInfoService/size',
                request_serializer=apiimageinfo__pb2.ImageInfo.sizeRequest.SerializeToString,
                response_deserializer=apiimageinfo__pb2.ImageInfo.sizeResponse.FromString,
                _registered_method=True)
        self.isHdr = channel.unary_unary(
                '/octaneapi.ImageInfoService/isHdr',
                request_serializer=apiimageinfo__pb2.ImageInfo.isHdrRequest.SerializeToString,
                response_deserializer=apiimageinfo__pb2.ImageInfo.isHdrResponse.FromString,
                _registered_method=True)
        self.isCompressed = channel.unary_unary(
                '/octaneapi.ImageInfoService/isCompressed',
                request_serializer=apiimageinfo__pb2.ImageInfo.isCompressedRequest.SerializeToString,
                response_deserializer=apiimageinfo__pb2.ImageInfo.isCompressedResponse.FromString,
                _registered_method=True)


class ImageInfoServiceServicer(object):
    """GRPC interface definition for class 'ImageInfo' from 'apiimageinfo.h'
    """

    def initFromFile(self, request, context):
        """/ Initializes the current ImageInfo object with the image file at the given path
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def initFromBuffer(self, request, context):
        """/ Initializes the current ImageInfo object from the given buffer with the given length
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def layerInfo(self, request, context):
        """/ Gets the layer info using the given layer index
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def layerCount(self, request, context):
        """/ Gets the layer count of the current image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def size(self, request, context):
        """/ Gets the size of the image in pixel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isHdr(self, request, context):
        """/ Checks if the current image is a HDR image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isCompressed(self, request, context):
        """/ Checks if the current image is compressed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageInfoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'initFromFile': grpc.unary_unary_rpc_method_handler(
                    servicer.initFromFile,
                    request_deserializer=apiimageinfo__pb2.ImageInfo.initFromFileRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'initFromBuffer': grpc.unary_unary_rpc_method_handler(
                    servicer.initFromBuffer,
                    request_deserializer=apiimageinfo__pb2.ImageInfo.initFromBufferRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'layerInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.layerInfo,
                    request_deserializer=apiimageinfo__pb2.ImageInfo.layerInfoRequest.FromString,
                    response_serializer=apiimageinfo__pb2.ImageInfo.layerInfoResponse.SerializeToString,
            ),
            'layerCount': grpc.unary_unary_rpc_method_handler(
                    servicer.layerCount,
                    request_deserializer=apiimageinfo__pb2.ImageInfo.layerCountRequest.FromString,
                    response_serializer=apiimageinfo__pb2.ImageInfo.layerCountResponse.SerializeToString,
            ),
            'size': grpc.unary_unary_rpc_method_handler(
                    servicer.size,
                    request_deserializer=apiimageinfo__pb2.ImageInfo.sizeRequest.FromString,
                    response_serializer=apiimageinfo__pb2.ImageInfo.sizeResponse.SerializeToString,
            ),
            'isHdr': grpc.unary_unary_rpc_method_handler(
                    servicer.isHdr,
                    request_deserializer=apiimageinfo__pb2.ImageInfo.isHdrRequest.FromString,
                    response_serializer=apiimageinfo__pb2.ImageInfo.isHdrResponse.SerializeToString,
            ),
            'isCompressed': grpc.unary_unary_rpc_method_handler(
                    servicer.isCompressed,
                    request_deserializer=apiimageinfo__pb2.ImageInfo.isCompressedRequest.FromString,
                    response_serializer=apiimageinfo__pb2.ImageInfo.isCompressedResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ImageInfoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ImageInfoService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ImageInfoService(object):
    """GRPC interface definition for class 'ImageInfo' from 'apiimageinfo.h'
    """

    @staticmethod
    def initFromFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ImageInfoService/initFromFile',
            apiimageinfo__pb2.ImageInfo.initFromFileRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def initFromBuffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ImageInfoService/initFromBuffer',
            apiimageinfo__pb2.ImageInfo.initFromBufferRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def layerInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ImageInfoService/layerInfo',
            apiimageinfo__pb2.ImageInfo.layerInfoRequest.SerializeToString,
            apiimageinfo__pb2.ImageInfo.layerInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def layerCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ImageInfoService/layerCount',
            apiimageinfo__pb2.ImageInfo.layerCountRequest.SerializeToString,
            apiimageinfo__pb2.ImageInfo.layerCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def size(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ImageInfoService/size',
            apiimageinfo__pb2.ImageInfo.sizeRequest.SerializeToString,
            apiimageinfo__pb2.ImageInfo.sizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isHdr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ImageInfoService/isHdr',
            apiimageinfo__pb2.ImageInfo.isHdrRequest.SerializeToString,
            apiimageinfo__pb2.ImageInfo.isHdrResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isCompressed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ImageInfoService/isCompressed',
            apiimageinfo__pb2.ImageInfo.isCompressedRequest.SerializeToString,
            apiimageinfo__pb2.ImageInfo.isCompressedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class LayerInfoServiceStub(object):
    """GRPC interface definition for class 'LayerInfo' from 'apiimageinfo.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.hasTransparency = channel.unary_unary(
                '/octaneapi.LayerInfoService/hasTransparency',
                request_serializer=apiimageinfo__pb2.LayerInfo.hasTransparencyRequest.SerializeToString,
                response_deserializer=apiimageinfo__pb2.LayerInfo.hasTransparencyResponse.FromString,
                _registered_method=True)
        self.isGrayscale = channel.unary_unary(
                '/octaneapi.LayerInfoService/isGrayscale',
                request_serializer=apiimageinfo__pb2.LayerInfo.isGrayscaleRequest.SerializeToString,
                response_deserializer=apiimageinfo__pb2.LayerInfo.isGrayscaleResponse.FromString,
                _registered_method=True)
        self.name = channel.unary_unary(
                '/octaneapi.LayerInfoService/name',
                request_serializer=apiimageinfo__pb2.LayerInfo.nameRequest.SerializeToString,
                response_deserializer=apiimageinfo__pb2.LayerInfo.nameResponse.FromString,
                _registered_method=True)
        self.type = channel.unary_unary(
                '/octaneapi.LayerInfoService/type',
                request_serializer=apiimageinfo__pb2.LayerInfo.typeRequest.SerializeToString,
                response_deserializer=apiimageinfo__pb2.LayerInfo.typeResponse.FromString,
                _registered_method=True)
        self.prefCompressType = channel.unary_unary(
                '/octaneapi.LayerInfoService/prefCompressType',
                request_serializer=apiimageinfo__pb2.LayerInfo.prefCompressTypeRequest.SerializeToString,
                response_deserializer=apiimageinfo__pb2.LayerInfo.prefCompressTypeResponse.FromString,
                _registered_method=True)


class LayerInfoServiceServicer(object):
    """GRPC interface definition for class 'LayerInfo' from 'apiimageinfo.h'
    """

    def hasTransparency(self, request, context):
        """/ Checks if the current layer has alpha data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isGrayscale(self, request, context):
        """/ Checks if the current layer is gray scale data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def name(self, request, context):
        """/ Gets the name of this layer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def type(self, request, context):
        """/ Gets the type of this layer's data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def prefCompressType(self, request, context):
        """/ Gets the preferred BC compression type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LayerInfoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'hasTransparency': grpc.unary_unary_rpc_method_handler(
                    servicer.hasTransparency,
                    request_deserializer=apiimageinfo__pb2.LayerInfo.hasTransparencyRequest.FromString,
                    response_serializer=apiimageinfo__pb2.LayerInfo.hasTransparencyResponse.SerializeToString,
            ),
            'isGrayscale': grpc.unary_unary_rpc_method_handler(
                    servicer.isGrayscale,
                    request_deserializer=apiimageinfo__pb2.LayerInfo.isGrayscaleRequest.FromString,
                    response_serializer=apiimageinfo__pb2.LayerInfo.isGrayscaleResponse.SerializeToString,
            ),
            'name': grpc.unary_unary_rpc_method_handler(
                    servicer.name,
                    request_deserializer=apiimageinfo__pb2.LayerInfo.nameRequest.FromString,
                    response_serializer=apiimageinfo__pb2.LayerInfo.nameResponse.SerializeToString,
            ),
            'type': grpc.unary_unary_rpc_method_handler(
                    servicer.type,
                    request_deserializer=apiimageinfo__pb2.LayerInfo.typeRequest.FromString,
                    response_serializer=apiimageinfo__pb2.LayerInfo.typeResponse.SerializeToString,
            ),
            'prefCompressType': grpc.unary_unary_rpc_method_handler(
                    servicer.prefCompressType,
                    request_deserializer=apiimageinfo__pb2.LayerInfo.prefCompressTypeRequest.FromString,
                    response_serializer=apiimageinfo__pb2.LayerInfo.prefCompressTypeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.LayerInfoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.LayerInfoService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LayerInfoService(object):
    """GRPC interface definition for class 'LayerInfo' from 'apiimageinfo.h'
    """

    @staticmethod
    def hasTransparency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.LayerInfoService/hasTransparency',
            apiimageinfo__pb2.LayerInfo.hasTransparencyRequest.SerializeToString,
            apiimageinfo__pb2.LayerInfo.hasTransparencyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isGrayscale(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.LayerInfoService/isGrayscale',
            apiimageinfo__pb2.LayerInfo.isGrayscaleRequest.SerializeToString,
            apiimageinfo__pb2.LayerInfo.isGrayscaleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def name(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.LayerInfoService/name',
            apiimageinfo__pb2.LayerInfo.nameRequest.SerializeToString,
            apiimageinfo__pb2.LayerInfo.nameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def type(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.LayerInfoService/type',
            apiimageinfo__pb2.LayerInfo.typeRequest.SerializeToString,
            apiimageinfo__pb2.LayerInfo.typeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def prefCompressType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.LayerInfoService/prefCompressType',
            apiimageinfo__pb2.LayerInfo.prefCompressTypeRequest.SerializeToString,
            apiimageinfo__pb2.LayerInfo.prefCompressTypeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
