# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apitilegrid_pb2 as apitilegrid__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ApiTileGridLoaderServiceStub(object):
    """GRPC interface definition for class 'ApiTileGridLoader' from 'apitilegrid.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/create',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.createRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.createResponse.FromString,
                _registered_method=True)
        self.destroy = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/destroy',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.destroyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.loadFromNodeItem = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/loadFromNodeItem',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.loadFromNodeItemRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.saveToNodeItem = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/saveToNodeItem',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.saveToNodeItemRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.saveToNodeItemResponse.FromString,
                _registered_method=True)
        self.applyStoredSettings = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/applyStoredSettings',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.applyStoredSettingsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.inferSettingsFromFilename = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/inferSettingsFromFilename',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.inferSettingsFromFilenameRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.inferSettingsFromFilenameResponse.FromString,
                _registered_method=True)
        self.scanTiles = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/scanTiles',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.scanTilesRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.automaticSizeGrid = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/automaticSizeGrid',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.automaticSizeGridRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.getSettings = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/getSettings',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.getSettingsRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.getSettingsResponse.FromString,
                _registered_method=True)
        self.updateSettings = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/updateSettings',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.updateSettingsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.getFiles = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/getFiles',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.getFilesRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.getFilesResponse.FromString,
                _registered_method=True)
        self.setFiles = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/setFiles',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.setFilesRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.hasFileInCell = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/hasFileInCell',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.hasFileInCellRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.hasFileInCellResponse.FromString,
                _registered_method=True)
        self.fileNameForCell = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/fileNameForCell',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.fileNameForCellRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.fileNameForCellResponse.FromString,
                _registered_method=True)
        self.count = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/count',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.countRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.countResponse.FromString,
                _registered_method=True)
        self.updatePattern = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/updatePattern',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.updatePatternRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.hasEmptyPattern = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/hasEmptyPattern',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.hasEmptyPatternRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.hasEmptyPatternResponse.FromString,
                _registered_method=True)
        self.patternString = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/patternString',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.patternStringRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.patternStringResponse.FromString,
                _registered_method=True)
        self.hasPlaceholders = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/hasPlaceholders',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.hasPlaceholdersRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.hasPlaceholdersResponse.FromString,
                _registered_method=True)
        self.hasIndex = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/hasIndex',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.hasIndexRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.hasIndexResponse.FromString,
                _registered_method=True)
        self.hasUDIM = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/hasUDIM',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.hasUDIMRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.hasUDIMResponse.FromString,
                _registered_method=True)
        self.hasUv = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/hasUv',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.hasUvRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.hasUvResponse.FromString,
                _registered_method=True)
        self.substitute = channel.unary_unary(
                '/octaneapi.ApiTileGridLoaderService/substitute',
                request_serializer=apitilegrid__pb2.ApiTileGridLoader.substituteRequest.SerializeToString,
                response_deserializer=apitilegrid__pb2.ApiTileGridLoader.substituteResponse.FromString,
                _registered_method=True)


class ApiTileGridLoaderServiceServicer(object):
    """GRPC interface definition for class 'ApiTileGridLoader' from 'apitilegrid.h'
    """

    def create(self, request, context):
        """/ Creates a pattern for generating file names, as described in the 
        / attribute info of A_GRID_FILE_PATTERN on NT_TEX_IMAGE_TILES
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def destroy(self, request, context):
        """/ Destroy this object
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loadFromNodeItem(self, request, context):
        """/ Initialize from settings stored in a supported node item (NT_TEX_IMAGE_TILES and NT_TEX_IMAGE_TILE_SET)
        / Equivalent to calling updatePattern() and applyStoredSettings(), but it reads the source data from the
        / passed in node item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveToNodeItem(self, request, context):
        """/ Store data in this object in a supported node item (NT_TEX_IMAGE_TILES and NT_TEX_IMAGE_TILE_SET)
        / This does not evaluate the item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyStoredSettings(self, request, context):
        """/ Set from settings stored in a node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def inferSettingsFromFilename(self, request, context):
        """/ Given a file name, guess which pattern it may represent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def scanTiles(self, request, context):
        """/ Look for tiles in the file system
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def automaticSizeGrid(self, request, context):
        """/ Automatically resize a tile grid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSettings(self, request, context):
        """/ Get the current settings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateSettings(self, request, context):
        """/ Change the settings stored in this object, and if the list of files is set, add or
        / remove padding to it so that it covers the new grid size
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFiles(self, request, context):
        """/ Get the list of files
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setFiles(self, request, context):
        """/ Populate the current list of files
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasFileInCell(self, request, context):
        """/ Check if a cell has a file assigned to it
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fileNameForCell(self, request, context):
        """/ For cells which aren't empty, return the file name
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def count(self, request, context):
        """/ Count the number of valid files in the currently defined tile grid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updatePattern(self, request, context):
        """/ Updates the file name pattern
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasEmptyPattern(self, request, context):
        """/ Returns true if the pattern is empty
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def patternString(self, request, context):
        """/ Returns the pattern as a string
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasPlaceholders(self, request, context):
        """/ True if the pattern contains any placeholders
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasIndex(self, request, context):
        """/ True if the pattern has any linear indexing (including UDIM)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasUDIM(self, request, context):
        """/ True if the pattern has a UDIM placeholder
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasUv(self, request, context):
        """/ True if the pattern uses two-dimensional indexing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def substitute(self, request, context):
        """/ Sutstitute placeholders in the file name pattern with the given
        / indices
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiTileGridLoaderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.createRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.createResponse.SerializeToString,
            ),
            'destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.destroy,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.destroyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'loadFromNodeItem': grpc.unary_unary_rpc_method_handler(
                    servicer.loadFromNodeItem,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.loadFromNodeItemRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'saveToNodeItem': grpc.unary_unary_rpc_method_handler(
                    servicer.saveToNodeItem,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.saveToNodeItemRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.saveToNodeItemResponse.SerializeToString,
            ),
            'applyStoredSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.applyStoredSettings,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.applyStoredSettingsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'inferSettingsFromFilename': grpc.unary_unary_rpc_method_handler(
                    servicer.inferSettingsFromFilename,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.inferSettingsFromFilenameRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.inferSettingsFromFilenameResponse.SerializeToString,
            ),
            'scanTiles': grpc.unary_unary_rpc_method_handler(
                    servicer.scanTiles,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.scanTilesRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'automaticSizeGrid': grpc.unary_unary_rpc_method_handler(
                    servicer.automaticSizeGrid,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.automaticSizeGridRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.getSettings,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.getSettingsRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.getSettingsResponse.SerializeToString,
            ),
            'updateSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.updateSettings,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.updateSettingsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.getFiles,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.getFilesRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.getFilesResponse.SerializeToString,
            ),
            'setFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.setFiles,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.setFilesRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'hasFileInCell': grpc.unary_unary_rpc_method_handler(
                    servicer.hasFileInCell,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.hasFileInCellRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.hasFileInCellResponse.SerializeToString,
            ),
            'fileNameForCell': grpc.unary_unary_rpc_method_handler(
                    servicer.fileNameForCell,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.fileNameForCellRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.fileNameForCellResponse.SerializeToString,
            ),
            'count': grpc.unary_unary_rpc_method_handler(
                    servicer.count,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.countRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.countResponse.SerializeToString,
            ),
            'updatePattern': grpc.unary_unary_rpc_method_handler(
                    servicer.updatePattern,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.updatePatternRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'hasEmptyPattern': grpc.unary_unary_rpc_method_handler(
                    servicer.hasEmptyPattern,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.hasEmptyPatternRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.hasEmptyPatternResponse.SerializeToString,
            ),
            'patternString': grpc.unary_unary_rpc_method_handler(
                    servicer.patternString,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.patternStringRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.patternStringResponse.SerializeToString,
            ),
            'hasPlaceholders': grpc.unary_unary_rpc_method_handler(
                    servicer.hasPlaceholders,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.hasPlaceholdersRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.hasPlaceholdersResponse.SerializeToString,
            ),
            'hasIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.hasIndex,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.hasIndexRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.hasIndexResponse.SerializeToString,
            ),
            'hasUDIM': grpc.unary_unary_rpc_method_handler(
                    servicer.hasUDIM,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.hasUDIMRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.hasUDIMResponse.SerializeToString,
            ),
            'hasUv': grpc.unary_unary_rpc_method_handler(
                    servicer.hasUv,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.hasUvRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.hasUvResponse.SerializeToString,
            ),
            'substitute': grpc.unary_unary_rpc_method_handler(
                    servicer.substitute,
                    request_deserializer=apitilegrid__pb2.ApiTileGridLoader.substituteRequest.FromString,
                    response_serializer=apitilegrid__pb2.ApiTileGridLoader.substituteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiTileGridLoaderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiTileGridLoaderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiTileGridLoaderService(object):
    """GRPC interface definition for class 'ApiTileGridLoader' from 'apitilegrid.h'
    """

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/create',
            apitilegrid__pb2.ApiTileGridLoader.createRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.createResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/destroy',
            apitilegrid__pb2.ApiTileGridLoader.destroyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def loadFromNodeItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/loadFromNodeItem',
            apitilegrid__pb2.ApiTileGridLoader.loadFromNodeItemRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveToNodeItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/saveToNodeItem',
            apitilegrid__pb2.ApiTileGridLoader.saveToNodeItemRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.saveToNodeItemResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def applyStoredSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/applyStoredSettings',
            apitilegrid__pb2.ApiTileGridLoader.applyStoredSettingsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def inferSettingsFromFilename(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/inferSettingsFromFilename',
            apitilegrid__pb2.ApiTileGridLoader.inferSettingsFromFilenameRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.inferSettingsFromFilenameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def scanTiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/scanTiles',
            apitilegrid__pb2.ApiTileGridLoader.scanTilesRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def automaticSizeGrid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/automaticSizeGrid',
            apitilegrid__pb2.ApiTileGridLoader.automaticSizeGridRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/getSettings',
            apitilegrid__pb2.ApiTileGridLoader.getSettingsRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.getSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/updateSettings',
            apitilegrid__pb2.ApiTileGridLoader.updateSettingsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/getFiles',
            apitilegrid__pb2.ApiTileGridLoader.getFilesRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.getFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/setFiles',
            apitilegrid__pb2.ApiTileGridLoader.setFilesRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def hasFileInCell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/hasFileInCell',
            apitilegrid__pb2.ApiTileGridLoader.hasFileInCellRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.hasFileInCellResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def fileNameForCell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/fileNameForCell',
            apitilegrid__pb2.ApiTileGridLoader.fileNameForCellRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.fileNameForCellResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def count(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/count',
            apitilegrid__pb2.ApiTileGridLoader.countRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.countResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updatePattern(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/updatePattern',
            apitilegrid__pb2.ApiTileGridLoader.updatePatternRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def hasEmptyPattern(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/hasEmptyPattern',
            apitilegrid__pb2.ApiTileGridLoader.hasEmptyPatternRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.hasEmptyPatternResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def patternString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/patternString',
            apitilegrid__pb2.ApiTileGridLoader.patternStringRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.patternStringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def hasPlaceholders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/hasPlaceholders',
            apitilegrid__pb2.ApiTileGridLoader.hasPlaceholdersRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.hasPlaceholdersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def hasIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/hasIndex',
            apitilegrid__pb2.ApiTileGridLoader.hasIndexRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.hasIndexResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def hasUDIM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/hasUDIM',
            apitilegrid__pb2.ApiTileGridLoader.hasUDIMRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.hasUDIMResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def hasUv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/hasUv',
            apitilegrid__pb2.ApiTileGridLoader.hasUvRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.hasUvResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def substitute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiTileGridLoaderService/substitute',
            apitilegrid__pb2.ApiTileGridLoader.substituteRequest.SerializeToString,
            apitilegrid__pb2.ApiTileGridLoader.substituteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
