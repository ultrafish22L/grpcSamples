# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apisceneexporter_pb2 as apisceneexporter__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ApiSceneExporterServiceStub(object):
    """GRPC interface definition for class 'ApiSceneExporter' from 'apisceneexporter.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.isSupported = channel.unary_unary(
                '/octaneapi.ApiSceneExporterService/isSupported',
                request_serializer=apisceneexporter__pb2.ApiSceneExporter.isSupportedRequest.SerializeToString,
                response_deserializer=apisceneexporter__pb2.ApiSceneExporter.isSupportedResponse.FromString,
                _registered_method=True)
        self.create = channel.unary_unary(
                '/octaneapi.ApiSceneExporterService/create',
                request_serializer=apisceneexporter__pb2.ApiSceneExporter.createRequest.SerializeToString,
                response_deserializer=apisceneexporter__pb2.ApiSceneExporter.createResponse.FromString,
                _registered_method=True)
        self.destroy = channel.unary_unary(
                '/octaneapi.ApiSceneExporterService/destroy',
                request_serializer=apisceneexporter__pb2.ApiSceneExporter.destroyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.state = channel.unary_unary(
                '/octaneapi.ApiSceneExporterService/state',
                request_serializer=apisceneexporter__pb2.ApiSceneExporter.stateRequest.SerializeToString,
                response_deserializer=apisceneexporter__pb2.ApiSceneExporter.stateResponse.FromString,
                _registered_method=True)
        self.exportSample = channel.unary_unary(
                '/octaneapi.ApiSceneExporterService/exportSample',
                request_serializer=apisceneexporter__pb2.ApiSceneExporter.exportSampleRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.sampleIx = channel.unary_unary(
                '/octaneapi.ApiSceneExporterService/sampleIx',
                request_serializer=apisceneexporter__pb2.ApiSceneExporter.sampleIxRequest.SerializeToString,
                response_deserializer=apisceneexporter__pb2.ApiSceneExporter.sampleIxResponse.FromString,
                _registered_method=True)
        self.finish = channel.unary_unary(
                '/octaneapi.ApiSceneExporterService/finish',
                request_serializer=apisceneexporter__pb2.ApiSceneExporter.finishRequest.SerializeToString,
                response_deserializer=apisceneexporter__pb2.ApiSceneExporter.finishResponse.FromString,
                _registered_method=True)
        self.ocsString = channel.unary_unary(
                '/octaneapi.ApiSceneExporterService/ocsString',
                request_serializer=apisceneexporter__pb2.ApiSceneExporter.ocsStringRequest.SerializeToString,
                response_deserializer=apisceneexporter__pb2.ApiSceneExporter.ocsStringResponse.FromString,
                _registered_method=True)


class ApiSceneExporterServiceServicer(object):
    """GRPC interface definition for class 'ApiSceneExporter' from 'apisceneexporter.h'
    """

    def isSupported(self, request, context):
        """/ Tells whether the 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create(self, request, context):
        """/ Starts a new export
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def destroy(self, request, context):
        """/ Destroys the instance
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def state(self, request, context):
        """/ Returns the current state of the scene exporter
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def exportSample(self, request, context):
        """/ Exports the next time sample
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sampleIx(self, request, context):
        """/ Returns the current sample/frame index of the export
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def finish(self, request, context):
        """/ Finishes the scene export and creates the scene file or creates an OCS string if no
        / sceneFile
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ocsString(self, request, context):
        """/ Returns the current OCS string that was written during finish() or an empty string if
        / finish() wasn't called yet or a sceneFile was specified during create()
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiSceneExporterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'isSupported': grpc.unary_unary_rpc_method_handler(
                    servicer.isSupported,
                    request_deserializer=apisceneexporter__pb2.ApiSceneExporter.isSupportedRequest.FromString,
                    response_serializer=apisceneexporter__pb2.ApiSceneExporter.isSupportedResponse.SerializeToString,
            ),
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=apisceneexporter__pb2.ApiSceneExporter.createRequest.FromString,
                    response_serializer=apisceneexporter__pb2.ApiSceneExporter.createResponse.SerializeToString,
            ),
            'destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.destroy,
                    request_deserializer=apisceneexporter__pb2.ApiSceneExporter.destroyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'state': grpc.unary_unary_rpc_method_handler(
                    servicer.state,
                    request_deserializer=apisceneexporter__pb2.ApiSceneExporter.stateRequest.FromString,
                    response_serializer=apisceneexporter__pb2.ApiSceneExporter.stateResponse.SerializeToString,
            ),
            'exportSample': grpc.unary_unary_rpc_method_handler(
                    servicer.exportSample,
                    request_deserializer=apisceneexporter__pb2.ApiSceneExporter.exportSampleRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'sampleIx': grpc.unary_unary_rpc_method_handler(
                    servicer.sampleIx,
                    request_deserializer=apisceneexporter__pb2.ApiSceneExporter.sampleIxRequest.FromString,
                    response_serializer=apisceneexporter__pb2.ApiSceneExporter.sampleIxResponse.SerializeToString,
            ),
            'finish': grpc.unary_unary_rpc_method_handler(
                    servicer.finish,
                    request_deserializer=apisceneexporter__pb2.ApiSceneExporter.finishRequest.FromString,
                    response_serializer=apisceneexporter__pb2.ApiSceneExporter.finishResponse.SerializeToString,
            ),
            'ocsString': grpc.unary_unary_rpc_method_handler(
                    servicer.ocsString,
                    request_deserializer=apisceneexporter__pb2.ApiSceneExporter.ocsStringRequest.FromString,
                    response_serializer=apisceneexporter__pb2.ApiSceneExporter.ocsStringResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiSceneExporterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiSceneExporterService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiSceneExporterService(object):
    """GRPC interface definition for class 'ApiSceneExporter' from 'apisceneexporter.h'
    """

    @staticmethod
    def isSupported(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSceneExporterService/isSupported',
            apisceneexporter__pb2.ApiSceneExporter.isSupportedRequest.SerializeToString,
            apisceneexporter__pb2.ApiSceneExporter.isSupportedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSceneExporterService/create',
            apisceneexporter__pb2.ApiSceneExporter.createRequest.SerializeToString,
            apisceneexporter__pb2.ApiSceneExporter.createResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSceneExporterService/destroy',
            apisceneexporter__pb2.ApiSceneExporter.destroyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSceneExporterService/state',
            apisceneexporter__pb2.ApiSceneExporter.stateRequest.SerializeToString,
            apisceneexporter__pb2.ApiSceneExporter.stateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def exportSample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSceneExporterService/exportSample',
            apisceneexporter__pb2.ApiSceneExporter.exportSampleRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def sampleIx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSceneExporterService/sampleIx',
            apisceneexporter__pb2.ApiSceneExporter.sampleIxRequest.SerializeToString,
            apisceneexporter__pb2.ApiSceneExporter.sampleIxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def finish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSceneExporterService/finish',
            apisceneexporter__pb2.ApiSceneExporter.finishRequest.SerializeToString,
            apisceneexporter__pb2.ApiSceneExporter.finishResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ocsString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiSceneExporterService/ocsString',
            apisceneexporter__pb2.ApiSceneExporter.ocsStringRequest.SerializeToString,
            apisceneexporter__pb2.ApiSceneExporter.ocsStringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
