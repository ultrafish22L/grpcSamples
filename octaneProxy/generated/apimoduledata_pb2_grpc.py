# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apimoduledata_pb2 as apimoduledata__pb2


class ApiModuleDataServiceStub(object):
    """GRPC interface definition for class 'ApiModuleData' from 'apimoduledata.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.loadApplicationData = channel.unary_unary(
                '/octaneapi.ApiModuleDataService/loadApplicationData',
                request_serializer=apimoduledata__pb2.ApiModuleData.loadApplicationDataRequest.SerializeToString,
                response_deserializer=apimoduledata__pb2.ApiModuleData.loadApplicationDataResponse.FromString,
                _registered_method=True)
        self.storeApplicationData = channel.unary_unary(
                '/octaneapi.ApiModuleDataService/storeApplicationData',
                request_serializer=apimoduledata__pb2.ApiModuleData.storeApplicationDataRequest.SerializeToString,
                response_deserializer=apimoduledata__pb2.ApiModuleData.storeApplicationDataResponse.FromString,
                _registered_method=True)


class ApiModuleDataServiceServicer(object):
    """GRPC interface definition for class 'ApiModuleData' from 'apimoduledata.h'
    """

    def loadApplicationData(self, request, context):
        """/ Loads application data stored for this module
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def storeApplicationData(self, request, context):
        """/ Stores application data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiModuleDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'loadApplicationData': grpc.unary_unary_rpc_method_handler(
                    servicer.loadApplicationData,
                    request_deserializer=apimoduledata__pb2.ApiModuleData.loadApplicationDataRequest.FromString,
                    response_serializer=apimoduledata__pb2.ApiModuleData.loadApplicationDataResponse.SerializeToString,
            ),
            'storeApplicationData': grpc.unary_unary_rpc_method_handler(
                    servicer.storeApplicationData,
                    request_deserializer=apimoduledata__pb2.ApiModuleData.storeApplicationDataRequest.FromString,
                    response_serializer=apimoduledata__pb2.ApiModuleData.storeApplicationDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiModuleDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiModuleDataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiModuleDataService(object):
    """GRPC interface definition for class 'ApiModuleData' from 'apimoduledata.h'
    """

    @staticmethod
    def loadApplicationData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiModuleDataService/loadApplicationData',
            apimoduledata__pb2.ApiModuleData.loadApplicationDataRequest.SerializeToString,
            apimoduledata__pb2.ApiModuleData.loadApplicationDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def storeApplicationData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiModuleDataService/storeApplicationData',
            apimoduledata__pb2.ApiModuleData.storeApplicationDataRequest.SerializeToString,
            apimoduledata__pb2.ApiModuleData.storeApplicationDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
