# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apiinfo_pb2 as apiinfo__pb2


class ApiInfoServiceStub(object):
    """GRPC interface definition for class 'ApiInfo' from 'apiinfo.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.octaneVersion = channel.unary_unary(
                '/octaneapi.ApiInfoService/octaneVersion',
                request_serializer=apiinfo__pb2.ApiInfo.octaneVersionRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.octaneVersionResponse.FromString,
                _registered_method=True)
        self.octaneName = channel.unary_unary(
                '/octaneapi.ApiInfoService/octaneName',
                request_serializer=apiinfo__pb2.ApiInfo.octaneNameRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.octaneNameResponse.FromString,
                _registered_method=True)
        self.isDemoVersion = channel.unary_unary(
                '/octaneapi.ApiInfoService/isDemoVersion',
                request_serializer=apiinfo__pb2.ApiInfo.isDemoVersionRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.isDemoVersionResponse.FromString,
                _registered_method=True)
        self.isSubscriptionVersion = channel.unary_unary(
                '/octaneapi.ApiInfoService/isSubscriptionVersion',
                request_serializer=apiinfo__pb2.ApiInfo.isSubscriptionVersionRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.isSubscriptionVersionResponse.FromString,
                _registered_method=True)
        self.tierIdx = channel.unary_unary(
                '/octaneapi.ApiInfoService/tierIdx',
                request_serializer=apiinfo__pb2.ApiInfo.tierIdxRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.tierIdxResponse.FromString,
                _registered_method=True)
        self.osVersionInfo = channel.unary_unary(
                '/octaneapi.ApiInfoService/osVersionInfo',
                request_serializer=apiinfo__pb2.ApiInfo.osVersionInfoRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.osVersionInfoResponse.FromString,
                _registered_method=True)
        self.driverVersionInfo = channel.unary_unary(
                '/octaneapi.ApiInfoService/driverVersionInfo',
                request_serializer=apiinfo__pb2.ApiInfo.driverVersionInfoRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.driverVersionInfoResponse.FromString,
                _registered_method=True)
        self.cpuInfo = channel.unary_unary(
                '/octaneapi.ApiInfoService/cpuInfo',
                request_serializer=apiinfo__pb2.ApiInfo.cpuInfoRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.cpuInfoResponse.FromString,
                _registered_method=True)
        self.texCacheFolder = channel.unary_unary(
                '/octaneapi.ApiInfoService/texCacheFolder',
                request_serializer=apiinfo__pb2.ApiInfo.texCacheFolderRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.texCacheFolderResponse.FromString,
                _registered_method=True)
        self.getAttributeTypes = channel.unary_unary(
                '/octaneapi.ApiInfoService/getAttributeTypes',
                request_serializer=apiinfo__pb2.ApiInfo.getAttributeTypesRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getAttributeTypesResponse.FromString,
                _registered_method=True)
        self.getPinTypes = channel.unary_unary(
                '/octaneapi.ApiInfoService/getPinTypes',
                request_serializer=apiinfo__pb2.ApiInfo.getPinTypesRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getPinTypesResponse.FromString,
                _registered_method=True)
        self.getGraphTypes = channel.unary_unary(
                '/octaneapi.ApiInfoService/getGraphTypes',
                request_serializer=apiinfo__pb2.ApiInfo.getGraphTypesRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getGraphTypesResponse.FromString,
                _registered_method=True)
        self.getNodeTypes = channel.unary_unary(
                '/octaneapi.ApiInfoService/getNodeTypes',
                request_serializer=apiinfo__pb2.ApiInfo.getNodeTypesRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getNodeTypesResponse.FromString,
                _registered_method=True)
        self.nodeInfo = channel.unary_unary(
                '/octaneapi.ApiInfoService/nodeInfo',
                request_serializer=apiinfo__pb2.ApiInfo.nodeInfoRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.nodeInfoResponse.FromString,
                _registered_method=True)
        self.graphInfo = channel.unary_unary(
                '/octaneapi.ApiInfoService/graphInfo',
                request_serializer=apiinfo__pb2.ApiInfo.graphInfoRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.graphInfoResponse.FromString,
                _registered_method=True)
        self.nodeIconImage = channel.unary_unary(
                '/octaneapi.ApiInfoService/nodeIconImage',
                request_serializer=apiinfo__pb2.ApiInfo.nodeIconImageRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.nodeIconImageResponse.FromString,
                _registered_method=True)
        self.graphIconImage = channel.unary_unary(
                '/octaneapi.ApiInfoService/graphIconImage',
                request_serializer=apiinfo__pb2.ApiInfo.graphIconImageRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.graphIconImageResponse.FromString,
                _registered_method=True)
        self.attributeInfo = channel.unary_unary(
                '/octaneapi.ApiInfoService/attributeInfo',
                request_serializer=apiinfo__pb2.ApiInfo.attributeInfoRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.attributeInfoResponse.FromString,
                _registered_method=True)
        self.attributeInfo1 = channel.unary_unary(
                '/octaneapi.ApiInfoService/attributeInfo1',
                request_serializer=apiinfo__pb2.ApiInfo.attributeInfo1Request.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.attributeInfo1Response.FromString,
                _registered_method=True)
        self.attributeInfo2 = channel.unary_unary(
                '/octaneapi.ApiInfoService/attributeInfo2',
                request_serializer=apiinfo__pb2.ApiInfo.attributeInfo2Request.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.attributeInfo2Response.FromString,
                _registered_method=True)
        self.nodePinInfo = channel.unary_unary(
                '/octaneapi.ApiInfoService/nodePinInfo',
                request_serializer=apiinfo__pb2.ApiInfo.nodePinInfoRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.nodePinInfoResponse.FromString,
                _registered_method=True)
        self.getAttributeTypeName = channel.unary_unary(
                '/octaneapi.ApiInfoService/getAttributeTypeName',
                request_serializer=apiinfo__pb2.ApiInfo.getAttributeTypeNameRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getAttributeTypeNameResponse.FromString,
                _registered_method=True)
        self.getPinTypeName = channel.unary_unary(
                '/octaneapi.ApiInfoService/getPinTypeName',
                request_serializer=apiinfo__pb2.ApiInfo.getPinTypeNameRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getPinTypeNameResponse.FromString,
                _registered_method=True)
        self.getPinTypeColor = channel.unary_unary(
                '/octaneapi.ApiInfoService/getPinTypeColor',
                request_serializer=apiinfo__pb2.ApiInfo.getPinTypeColorRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getPinTypeColorResponse.FromString,
                _registered_method=True)
        self.getGraphTypeName = channel.unary_unary(
                '/octaneapi.ApiInfoService/getGraphTypeName',
                request_serializer=apiinfo__pb2.ApiInfo.getGraphTypeNameRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getGraphTypeNameResponse.FromString,
                _registered_method=True)
        self.getNodeTypeName = channel.unary_unary(
                '/octaneapi.ApiInfoService/getNodeTypeName',
                request_serializer=apiinfo__pb2.ApiInfo.getNodeTypeNameRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getNodeTypeNameResponse.FromString,
                _registered_method=True)
        self.getItemTypeName = channel.unary_unary(
                '/octaneapi.ApiInfoService/getItemTypeName',
                request_serializer=apiinfo__pb2.ApiInfo.getItemTypeNameRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getItemTypeNameResponse.FromString,
                _registered_method=True)
        self.getAttributeName = channel.unary_unary(
                '/octaneapi.ApiInfoService/getAttributeName',
                request_serializer=apiinfo__pb2.ApiInfo.getAttributeNameRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getAttributeNameResponse.FromString,
                _registered_method=True)
        self.getAttributeId = channel.unary_unary(
                '/octaneapi.ApiInfoService/getAttributeId',
                request_serializer=apiinfo__pb2.ApiInfo.getAttributeIdRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getAttributeIdResponse.FromString,
                _registered_method=True)
        self.getAttributeIdName = channel.unary_unary(
                '/octaneapi.ApiInfoService/getAttributeIdName',
                request_serializer=apiinfo__pb2.ApiInfo.getAttributeIdNameRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getAttributeIdNameResponse.FromString,
                _registered_method=True)
        self.getAttributeIdName1 = channel.unary_unary(
                '/octaneapi.ApiInfoService/getAttributeIdName1',
                request_serializer=apiinfo__pb2.ApiInfo.getAttributeIdName1Request.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getAttributeIdName1Response.FromString,
                _registered_method=True)
        self.getPinName = channel.unary_unary(
                '/octaneapi.ApiInfoService/getPinName',
                request_serializer=apiinfo__pb2.ApiInfo.getPinNameRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getPinNameResponse.FromString,
                _registered_method=True)
        self.getPinId = channel.unary_unary(
                '/octaneapi.ApiInfoService/getPinId',
                request_serializer=apiinfo__pb2.ApiInfo.getPinIdRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getPinIdResponse.FromString,
                _registered_method=True)
        self.getPinIdName = channel.unary_unary(
                '/octaneapi.ApiInfoService/getPinIdName',
                request_serializer=apiinfo__pb2.ApiInfo.getPinIdNameRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getPinIdNameResponse.FromString,
                _registered_method=True)
        self.getPinIdName1 = channel.unary_unary(
                '/octaneapi.ApiInfoService/getPinIdName1',
                request_serializer=apiinfo__pb2.ApiInfo.getPinIdName1Request.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getPinIdName1Response.FromString,
                _registered_method=True)
        self.getTextureValueTypeName = channel.unary_unary(
                '/octaneapi.ApiInfoService/getTextureValueTypeName',
                request_serializer=apiinfo__pb2.ApiInfo.getTextureValueTypeNameRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getTextureValueTypeNameResponse.FromString,
                _registered_method=True)
        self.getTextureValueTypeForOslType = channel.unary_unary(
                '/octaneapi.ApiInfoService/getTextureValueTypeForOslType',
                request_serializer=apiinfo__pb2.ApiInfo.getTextureValueTypeForOslTypeRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getTextureValueTypeForOslTypeResponse.FromString,
                _registered_method=True)
        self.getCompatibleTypes = channel.unary_unary(
                '/octaneapi.ApiInfoService/getCompatibleTypes',
                request_serializer=apiinfo__pb2.ApiInfo.getCompatibleTypesRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getCompatibleTypesResponse.FromString,
                _registered_method=True)
        self.renderPassInfo = channel.unary_unary(
                '/octaneapi.ApiInfoService/renderPassInfo',
                request_serializer=apiinfo__pb2.ApiInfo.renderPassInfoRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.renderPassInfoResponse.FromString,
                _registered_method=True)
        self.getAllRenderPassIds = channel.unary_unary(
                '/octaneapi.ApiInfoService/getAllRenderPassIds',
                request_serializer=apiinfo__pb2.ApiInfo.getAllRenderPassIdsRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getAllRenderPassIdsResponse.FromString,
                _registered_method=True)
        self.getRenderPassIdFromRenderAovNode = channel.unary_unary(
                '/octaneapi.ApiInfoService/getRenderPassIdFromRenderAovNode',
                request_serializer=apiinfo__pb2.ApiInfo.getRenderPassIdFromRenderAovNodeRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getRenderPassIdFromRenderAovNodeResponse.FromString,
                _registered_method=True)
        self.getRenderAovInfoFromRenderAovNode = channel.unary_unary(
                '/octaneapi.ApiInfoService/getRenderAovInfoFromRenderAovNode',
                request_serializer=apiinfo__pb2.ApiInfo.getRenderAovInfoFromRenderAovNodeRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.getRenderAovInfoFromRenderAovNodeResponse.FromString,
                _registered_method=True)
        self.renderPassName = channel.unary_unary(
                '/octaneapi.ApiInfoService/renderPassName',
                request_serializer=apiinfo__pb2.ApiInfo.renderPassNameRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.renderPassNameResponse.FromString,
                _registered_method=True)
        self.renderPassShortName = channel.unary_unary(
                '/octaneapi.ApiInfoService/renderPassShortName',
                request_serializer=apiinfo__pb2.ApiInfo.renderPassShortNameRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.renderPassShortNameResponse.FromString,
                _registered_method=True)
        self.renderPassIdToPinId = channel.unary_unary(
                '/octaneapi.ApiInfoService/renderPassIdToPinId',
                request_serializer=apiinfo__pb2.ApiInfo.renderPassIdToPinIdRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.renderPassIdToPinIdResponse.FromString,
                _registered_method=True)
        self.renderPassGroupName = channel.unary_unary(
                '/octaneapi.ApiInfoService/renderPassGroupName',
                request_serializer=apiinfo__pb2.ApiInfo.renderPassGroupNameRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.renderPassGroupNameResponse.FromString,
                _registered_method=True)
        self.pinIdToRenderPassId = channel.unary_unary(
                '/octaneapi.ApiInfoService/pinIdToRenderPassId',
                request_serializer=apiinfo__pb2.ApiInfo.pinIdToRenderPassIdRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.pinIdToRenderPassIdResponse.FromString,
                _registered_method=True)
        self.findPinIdForRenderPassId = channel.unary_unary(
                '/octaneapi.ApiInfoService/findPinIdForRenderPassId',
                request_serializer=apiinfo__pb2.ApiInfo.findPinIdForRenderPassIdRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.findPinIdForRenderPassIdResponse.FromString,
                _registered_method=True)
        self.findRenderPassIdForPinId = channel.unary_unary(
                '/octaneapi.ApiInfoService/findRenderPassIdForPinId',
                request_serializer=apiinfo__pb2.ApiInfo.findRenderPassIdForPinIdRequest.SerializeToString,
                response_deserializer=apiinfo__pb2.ApiInfo.findRenderPassIdForPinIdResponse.FromString,
                _registered_method=True)


class ApiInfoServiceServicer(object):
    """GRPC interface definition for class 'ApiInfo' from 'apiinfo.h'
    """

    def octaneVersion(self, request, context):
        """/ Returns the version of the Octane DLL
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def octaneName(self, request, context):
        """/ Returns the full name of the Octane DLL build
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isDemoVersion(self, request, context):
        """/ Returns TRUE if the DLL is a demo version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isSubscriptionVersion(self, request, context):
        """/ Returns TRUE if the DLL is a subscription version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def tierIdx(self, request, context):
        """/ Returns -1 for builds with no tiers or the build tier index (1-3)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def osVersionInfo(self, request, context):
        """/ Returns a string describing the OS version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def driverVersionInfo(self, request, context):
        """/  Returns the driver version string (NVIDIA only)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cpuInfo(self, request, context):
        """/ Returns info about the cpu(s)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def texCacheFolder(self, request, context):
        """/ Returns the absolute path of the texture cache folder
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAttributeTypes(self, request, context):
        """/ Returns a sorted list of all attribute types
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPinTypes(self, request, context):
        """/ Returns a sorted list of all pin types
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGraphTypes(self, request, context):
        """/ Returns a sorted list of all graph types
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNodeTypes(self, request, context):
        """/ Returns a sorted list of all node types
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def nodeInfo(self, request, context):
        """/ Returns info for this particular node type or NULL if no info is available
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def graphInfo(self, request, context):
        """/ Returns info for this particular graph type or NULL if no info is available
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def nodeIconImage(self, request, context):
        """/ Returns an image containing the icon of a given node type
        / Note: Octane is the owner of the returned image and 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def graphIconImage(self, request, context):
        """/ Returns an image containing the icon of a given graph type
        / Note: Octane is the owner of the returned image and 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def attributeInfo(self, request, context):
        """/ Returns info for an attribute available on nodes of the given type or NULL if no info for the
        / attribute is available
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def attributeInfo1(self, request, context):
        """/ Returns info for an attribute available on nodes of the given type or NULL
        / if no info for the attribute is available
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def attributeInfo2(self, request, context):
        """/ Returns info for an attribute available on graphs of the given type or NULL
        / if no info for the attribute is available
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def nodePinInfo(self, request, context):
        """/ Returns info for a pin available on a node or NULL if there's no such pin
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAttributeTypeName(self, request, context):
        """/ Returns the name for an attribute type, e
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPinTypeName(self, request, context):
        """/ Returns the name for a node pin type, e
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPinTypeColor(self, request, context):
        """/ Returns the color for a node pin type (ARGB encoded)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGraphTypeName(self, request, context):
        """/ Returns the name for a node graph type, e
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNodeTypeName(self, request, context):
        """/ Returns the name for a node type, e
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getItemTypeName(self, request, context):
        """/ Returns the type name of an api item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAttributeName(self, request, context):
        """/ Returns the name for an attribute ID, e
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAttributeId(self, request, context):
        """/ Returns the ID for an attribute name, e
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAttributeIdName(self, request, context):
        """/ Returns the enum name for an attribute ID, e
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAttributeIdName1(self, request, context):
        """/ Returns the enum name for an attribute name, e
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPinName(self, request, context):
        """/ Returns the name for a pin ID, e
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPinId(self, request, context):
        """/ Returns the ID for a pin name, e
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPinIdName(self, request, context):
        """/ Returns the enum name for a pin ID, e
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPinIdName1(self, request, context):
        """/ Returns the enum name for a pin name, e
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTextureValueTypeName(self, request, context):
        """/ Get the string name of an OSL value type of a given texture value type enum
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTextureValueTypeForOslType(self, request, context):
        """/ Get the OSL value type for a given OSL type name
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCompatibleTypes(self, request, context):
        """/ Returns a list of graphs compatible with the output type and a list
        / of nodes compatible with the output type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def renderPassInfo(self, request, context):
        """/ Returns the information related to a render pass given its id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllRenderPassIds(self, request, context):
        """/ Returns an array with all the available render pass ids
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRenderPassIdFromRenderAovNode(self, request, context):
        """/ Returns the 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRenderAovInfoFromRenderAovNode(self, request, context):
        """/ Returns the 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def renderPassName(self, request, context):
        """/ Returns the name of the render pass associated with the id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def renderPassShortName(self, request, context):
        """/ Returns the short (~ abbreviated) name of a render pass
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def renderPassIdToPinId(self, request, context):
        """/ Returns the pin id for a render pass
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def renderPassGroupName(self, request, context):
        """/ Returns the group name of a render pass
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pinIdToRenderPassId(self, request, context):
        """/ Returns the render pass id for a pin id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findPinIdForRenderPassId(self, request, context):
        """/ Finds the bool pin used to enable/disable the render pass
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findRenderPassIdForPinId(self, request, context):
        """/ Finds the render pass you can enable/disable with the passed in pin id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiInfoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'octaneVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.octaneVersion,
                    request_deserializer=apiinfo__pb2.ApiInfo.octaneVersionRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.octaneVersionResponse.SerializeToString,
            ),
            'octaneName': grpc.unary_unary_rpc_method_handler(
                    servicer.octaneName,
                    request_deserializer=apiinfo__pb2.ApiInfo.octaneNameRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.octaneNameResponse.SerializeToString,
            ),
            'isDemoVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.isDemoVersion,
                    request_deserializer=apiinfo__pb2.ApiInfo.isDemoVersionRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.isDemoVersionResponse.SerializeToString,
            ),
            'isSubscriptionVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.isSubscriptionVersion,
                    request_deserializer=apiinfo__pb2.ApiInfo.isSubscriptionVersionRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.isSubscriptionVersionResponse.SerializeToString,
            ),
            'tierIdx': grpc.unary_unary_rpc_method_handler(
                    servicer.tierIdx,
                    request_deserializer=apiinfo__pb2.ApiInfo.tierIdxRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.tierIdxResponse.SerializeToString,
            ),
            'osVersionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.osVersionInfo,
                    request_deserializer=apiinfo__pb2.ApiInfo.osVersionInfoRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.osVersionInfoResponse.SerializeToString,
            ),
            'driverVersionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.driverVersionInfo,
                    request_deserializer=apiinfo__pb2.ApiInfo.driverVersionInfoRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.driverVersionInfoResponse.SerializeToString,
            ),
            'cpuInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.cpuInfo,
                    request_deserializer=apiinfo__pb2.ApiInfo.cpuInfoRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.cpuInfoResponse.SerializeToString,
            ),
            'texCacheFolder': grpc.unary_unary_rpc_method_handler(
                    servicer.texCacheFolder,
                    request_deserializer=apiinfo__pb2.ApiInfo.texCacheFolderRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.texCacheFolderResponse.SerializeToString,
            ),
            'getAttributeTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.getAttributeTypes,
                    request_deserializer=apiinfo__pb2.ApiInfo.getAttributeTypesRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getAttributeTypesResponse.SerializeToString,
            ),
            'getPinTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.getPinTypes,
                    request_deserializer=apiinfo__pb2.ApiInfo.getPinTypesRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getPinTypesResponse.SerializeToString,
            ),
            'getGraphTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.getGraphTypes,
                    request_deserializer=apiinfo__pb2.ApiInfo.getGraphTypesRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getGraphTypesResponse.SerializeToString,
            ),
            'getNodeTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.getNodeTypes,
                    request_deserializer=apiinfo__pb2.ApiInfo.getNodeTypesRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getNodeTypesResponse.SerializeToString,
            ),
            'nodeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.nodeInfo,
                    request_deserializer=apiinfo__pb2.ApiInfo.nodeInfoRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.nodeInfoResponse.SerializeToString,
            ),
            'graphInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.graphInfo,
                    request_deserializer=apiinfo__pb2.ApiInfo.graphInfoRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.graphInfoResponse.SerializeToString,
            ),
            'nodeIconImage': grpc.unary_unary_rpc_method_handler(
                    servicer.nodeIconImage,
                    request_deserializer=apiinfo__pb2.ApiInfo.nodeIconImageRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.nodeIconImageResponse.SerializeToString,
            ),
            'graphIconImage': grpc.unary_unary_rpc_method_handler(
                    servicer.graphIconImage,
                    request_deserializer=apiinfo__pb2.ApiInfo.graphIconImageRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.graphIconImageResponse.SerializeToString,
            ),
            'attributeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.attributeInfo,
                    request_deserializer=apiinfo__pb2.ApiInfo.attributeInfoRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.attributeInfoResponse.SerializeToString,
            ),
            'attributeInfo1': grpc.unary_unary_rpc_method_handler(
                    servicer.attributeInfo1,
                    request_deserializer=apiinfo__pb2.ApiInfo.attributeInfo1Request.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.attributeInfo1Response.SerializeToString,
            ),
            'attributeInfo2': grpc.unary_unary_rpc_method_handler(
                    servicer.attributeInfo2,
                    request_deserializer=apiinfo__pb2.ApiInfo.attributeInfo2Request.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.attributeInfo2Response.SerializeToString,
            ),
            'nodePinInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.nodePinInfo,
                    request_deserializer=apiinfo__pb2.ApiInfo.nodePinInfoRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.nodePinInfoResponse.SerializeToString,
            ),
            'getAttributeTypeName': grpc.unary_unary_rpc_method_handler(
                    servicer.getAttributeTypeName,
                    request_deserializer=apiinfo__pb2.ApiInfo.getAttributeTypeNameRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getAttributeTypeNameResponse.SerializeToString,
            ),
            'getPinTypeName': grpc.unary_unary_rpc_method_handler(
                    servicer.getPinTypeName,
                    request_deserializer=apiinfo__pb2.ApiInfo.getPinTypeNameRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getPinTypeNameResponse.SerializeToString,
            ),
            'getPinTypeColor': grpc.unary_unary_rpc_method_handler(
                    servicer.getPinTypeColor,
                    request_deserializer=apiinfo__pb2.ApiInfo.getPinTypeColorRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getPinTypeColorResponse.SerializeToString,
            ),
            'getGraphTypeName': grpc.unary_unary_rpc_method_handler(
                    servicer.getGraphTypeName,
                    request_deserializer=apiinfo__pb2.ApiInfo.getGraphTypeNameRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getGraphTypeNameResponse.SerializeToString,
            ),
            'getNodeTypeName': grpc.unary_unary_rpc_method_handler(
                    servicer.getNodeTypeName,
                    request_deserializer=apiinfo__pb2.ApiInfo.getNodeTypeNameRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getNodeTypeNameResponse.SerializeToString,
            ),
            'getItemTypeName': grpc.unary_unary_rpc_method_handler(
                    servicer.getItemTypeName,
                    request_deserializer=apiinfo__pb2.ApiInfo.getItemTypeNameRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getItemTypeNameResponse.SerializeToString,
            ),
            'getAttributeName': grpc.unary_unary_rpc_method_handler(
                    servicer.getAttributeName,
                    request_deserializer=apiinfo__pb2.ApiInfo.getAttributeNameRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getAttributeNameResponse.SerializeToString,
            ),
            'getAttributeId': grpc.unary_unary_rpc_method_handler(
                    servicer.getAttributeId,
                    request_deserializer=apiinfo__pb2.ApiInfo.getAttributeIdRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getAttributeIdResponse.SerializeToString,
            ),
            'getAttributeIdName': grpc.unary_unary_rpc_method_handler(
                    servicer.getAttributeIdName,
                    request_deserializer=apiinfo__pb2.ApiInfo.getAttributeIdNameRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getAttributeIdNameResponse.SerializeToString,
            ),
            'getAttributeIdName1': grpc.unary_unary_rpc_method_handler(
                    servicer.getAttributeIdName1,
                    request_deserializer=apiinfo__pb2.ApiInfo.getAttributeIdName1Request.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getAttributeIdName1Response.SerializeToString,
            ),
            'getPinName': grpc.unary_unary_rpc_method_handler(
                    servicer.getPinName,
                    request_deserializer=apiinfo__pb2.ApiInfo.getPinNameRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getPinNameResponse.SerializeToString,
            ),
            'getPinId': grpc.unary_unary_rpc_method_handler(
                    servicer.getPinId,
                    request_deserializer=apiinfo__pb2.ApiInfo.getPinIdRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getPinIdResponse.SerializeToString,
            ),
            'getPinIdName': grpc.unary_unary_rpc_method_handler(
                    servicer.getPinIdName,
                    request_deserializer=apiinfo__pb2.ApiInfo.getPinIdNameRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getPinIdNameResponse.SerializeToString,
            ),
            'getPinIdName1': grpc.unary_unary_rpc_method_handler(
                    servicer.getPinIdName1,
                    request_deserializer=apiinfo__pb2.ApiInfo.getPinIdName1Request.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getPinIdName1Response.SerializeToString,
            ),
            'getTextureValueTypeName': grpc.unary_unary_rpc_method_handler(
                    servicer.getTextureValueTypeName,
                    request_deserializer=apiinfo__pb2.ApiInfo.getTextureValueTypeNameRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getTextureValueTypeNameResponse.SerializeToString,
            ),
            'getTextureValueTypeForOslType': grpc.unary_unary_rpc_method_handler(
                    servicer.getTextureValueTypeForOslType,
                    request_deserializer=apiinfo__pb2.ApiInfo.getTextureValueTypeForOslTypeRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getTextureValueTypeForOslTypeResponse.SerializeToString,
            ),
            'getCompatibleTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.getCompatibleTypes,
                    request_deserializer=apiinfo__pb2.ApiInfo.getCompatibleTypesRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getCompatibleTypesResponse.SerializeToString,
            ),
            'renderPassInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.renderPassInfo,
                    request_deserializer=apiinfo__pb2.ApiInfo.renderPassInfoRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.renderPassInfoResponse.SerializeToString,
            ),
            'getAllRenderPassIds': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllRenderPassIds,
                    request_deserializer=apiinfo__pb2.ApiInfo.getAllRenderPassIdsRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getAllRenderPassIdsResponse.SerializeToString,
            ),
            'getRenderPassIdFromRenderAovNode': grpc.unary_unary_rpc_method_handler(
                    servicer.getRenderPassIdFromRenderAovNode,
                    request_deserializer=apiinfo__pb2.ApiInfo.getRenderPassIdFromRenderAovNodeRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getRenderPassIdFromRenderAovNodeResponse.SerializeToString,
            ),
            'getRenderAovInfoFromRenderAovNode': grpc.unary_unary_rpc_method_handler(
                    servicer.getRenderAovInfoFromRenderAovNode,
                    request_deserializer=apiinfo__pb2.ApiInfo.getRenderAovInfoFromRenderAovNodeRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.getRenderAovInfoFromRenderAovNodeResponse.SerializeToString,
            ),
            'renderPassName': grpc.unary_unary_rpc_method_handler(
                    servicer.renderPassName,
                    request_deserializer=apiinfo__pb2.ApiInfo.renderPassNameRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.renderPassNameResponse.SerializeToString,
            ),
            'renderPassShortName': grpc.unary_unary_rpc_method_handler(
                    servicer.renderPassShortName,
                    request_deserializer=apiinfo__pb2.ApiInfo.renderPassShortNameRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.renderPassShortNameResponse.SerializeToString,
            ),
            'renderPassIdToPinId': grpc.unary_unary_rpc_method_handler(
                    servicer.renderPassIdToPinId,
                    request_deserializer=apiinfo__pb2.ApiInfo.renderPassIdToPinIdRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.renderPassIdToPinIdResponse.SerializeToString,
            ),
            'renderPassGroupName': grpc.unary_unary_rpc_method_handler(
                    servicer.renderPassGroupName,
                    request_deserializer=apiinfo__pb2.ApiInfo.renderPassGroupNameRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.renderPassGroupNameResponse.SerializeToString,
            ),
            'pinIdToRenderPassId': grpc.unary_unary_rpc_method_handler(
                    servicer.pinIdToRenderPassId,
                    request_deserializer=apiinfo__pb2.ApiInfo.pinIdToRenderPassIdRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.pinIdToRenderPassIdResponse.SerializeToString,
            ),
            'findPinIdForRenderPassId': grpc.unary_unary_rpc_method_handler(
                    servicer.findPinIdForRenderPassId,
                    request_deserializer=apiinfo__pb2.ApiInfo.findPinIdForRenderPassIdRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.findPinIdForRenderPassIdResponse.SerializeToString,
            ),
            'findRenderPassIdForPinId': grpc.unary_unary_rpc_method_handler(
                    servicer.findRenderPassIdForPinId,
                    request_deserializer=apiinfo__pb2.ApiInfo.findRenderPassIdForPinIdRequest.FromString,
                    response_serializer=apiinfo__pb2.ApiInfo.findRenderPassIdForPinIdResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiInfoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiInfoService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiInfoService(object):
    """GRPC interface definition for class 'ApiInfo' from 'apiinfo.h'
    """

    @staticmethod
    def octaneVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/octaneVersion',
            apiinfo__pb2.ApiInfo.octaneVersionRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.octaneVersionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def octaneName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/octaneName',
            apiinfo__pb2.ApiInfo.octaneNameRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.octaneNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isDemoVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/isDemoVersion',
            apiinfo__pb2.ApiInfo.isDemoVersionRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.isDemoVersionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isSubscriptionVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/isSubscriptionVersion',
            apiinfo__pb2.ApiInfo.isSubscriptionVersionRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.isSubscriptionVersionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def tierIdx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/tierIdx',
            apiinfo__pb2.ApiInfo.tierIdxRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.tierIdxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def osVersionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/osVersionInfo',
            apiinfo__pb2.ApiInfo.osVersionInfoRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.osVersionInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def driverVersionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/driverVersionInfo',
            apiinfo__pb2.ApiInfo.driverVersionInfoRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.driverVersionInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def cpuInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/cpuInfo',
            apiinfo__pb2.ApiInfo.cpuInfoRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.cpuInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def texCacheFolder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/texCacheFolder',
            apiinfo__pb2.ApiInfo.texCacheFolderRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.texCacheFolderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAttributeTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getAttributeTypes',
            apiinfo__pb2.ApiInfo.getAttributeTypesRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getAttributeTypesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getPinTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getPinTypes',
            apiinfo__pb2.ApiInfo.getPinTypesRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getPinTypesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getGraphTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getGraphTypes',
            apiinfo__pb2.ApiInfo.getGraphTypesRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getGraphTypesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getNodeTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getNodeTypes',
            apiinfo__pb2.ApiInfo.getNodeTypesRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getNodeTypesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def nodeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/nodeInfo',
            apiinfo__pb2.ApiInfo.nodeInfoRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.nodeInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def graphInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/graphInfo',
            apiinfo__pb2.ApiInfo.graphInfoRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.graphInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def nodeIconImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/nodeIconImage',
            apiinfo__pb2.ApiInfo.nodeIconImageRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.nodeIconImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def graphIconImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/graphIconImage',
            apiinfo__pb2.ApiInfo.graphIconImageRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.graphIconImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def attributeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/attributeInfo',
            apiinfo__pb2.ApiInfo.attributeInfoRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.attributeInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def attributeInfo1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/attributeInfo1',
            apiinfo__pb2.ApiInfo.attributeInfo1Request.SerializeToString,
            apiinfo__pb2.ApiInfo.attributeInfo1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def attributeInfo2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/attributeInfo2',
            apiinfo__pb2.ApiInfo.attributeInfo2Request.SerializeToString,
            apiinfo__pb2.ApiInfo.attributeInfo2Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def nodePinInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/nodePinInfo',
            apiinfo__pb2.ApiInfo.nodePinInfoRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.nodePinInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAttributeTypeName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getAttributeTypeName',
            apiinfo__pb2.ApiInfo.getAttributeTypeNameRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getAttributeTypeNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getPinTypeName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getPinTypeName',
            apiinfo__pb2.ApiInfo.getPinTypeNameRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getPinTypeNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getPinTypeColor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getPinTypeColor',
            apiinfo__pb2.ApiInfo.getPinTypeColorRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getPinTypeColorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getGraphTypeName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getGraphTypeName',
            apiinfo__pb2.ApiInfo.getGraphTypeNameRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getGraphTypeNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getNodeTypeName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getNodeTypeName',
            apiinfo__pb2.ApiInfo.getNodeTypeNameRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getNodeTypeNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getItemTypeName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getItemTypeName',
            apiinfo__pb2.ApiInfo.getItemTypeNameRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getItemTypeNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAttributeName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getAttributeName',
            apiinfo__pb2.ApiInfo.getAttributeNameRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getAttributeNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAttributeId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getAttributeId',
            apiinfo__pb2.ApiInfo.getAttributeIdRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getAttributeIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAttributeIdName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getAttributeIdName',
            apiinfo__pb2.ApiInfo.getAttributeIdNameRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getAttributeIdNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAttributeIdName1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getAttributeIdName1',
            apiinfo__pb2.ApiInfo.getAttributeIdName1Request.SerializeToString,
            apiinfo__pb2.ApiInfo.getAttributeIdName1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getPinName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getPinName',
            apiinfo__pb2.ApiInfo.getPinNameRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getPinNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getPinId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getPinId',
            apiinfo__pb2.ApiInfo.getPinIdRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getPinIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getPinIdName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getPinIdName',
            apiinfo__pb2.ApiInfo.getPinIdNameRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getPinIdNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getPinIdName1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getPinIdName1',
            apiinfo__pb2.ApiInfo.getPinIdName1Request.SerializeToString,
            apiinfo__pb2.ApiInfo.getPinIdName1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTextureValueTypeName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getTextureValueTypeName',
            apiinfo__pb2.ApiInfo.getTextureValueTypeNameRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getTextureValueTypeNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTextureValueTypeForOslType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getTextureValueTypeForOslType',
            apiinfo__pb2.ApiInfo.getTextureValueTypeForOslTypeRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getTextureValueTypeForOslTypeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getCompatibleTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getCompatibleTypes',
            apiinfo__pb2.ApiInfo.getCompatibleTypesRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getCompatibleTypesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def renderPassInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/renderPassInfo',
            apiinfo__pb2.ApiInfo.renderPassInfoRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.renderPassInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAllRenderPassIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getAllRenderPassIds',
            apiinfo__pb2.ApiInfo.getAllRenderPassIdsRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getAllRenderPassIdsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getRenderPassIdFromRenderAovNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getRenderPassIdFromRenderAovNode',
            apiinfo__pb2.ApiInfo.getRenderPassIdFromRenderAovNodeRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getRenderPassIdFromRenderAovNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getRenderAovInfoFromRenderAovNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/getRenderAovInfoFromRenderAovNode',
            apiinfo__pb2.ApiInfo.getRenderAovInfoFromRenderAovNodeRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.getRenderAovInfoFromRenderAovNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def renderPassName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/renderPassName',
            apiinfo__pb2.ApiInfo.renderPassNameRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.renderPassNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def renderPassShortName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/renderPassShortName',
            apiinfo__pb2.ApiInfo.renderPassShortNameRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.renderPassShortNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def renderPassIdToPinId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/renderPassIdToPinId',
            apiinfo__pb2.ApiInfo.renderPassIdToPinIdRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.renderPassIdToPinIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def renderPassGroupName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/renderPassGroupName',
            apiinfo__pb2.ApiInfo.renderPassGroupNameRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.renderPassGroupNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pinIdToRenderPassId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/pinIdToRenderPassId',
            apiinfo__pb2.ApiInfo.pinIdToRenderPassIdRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.pinIdToRenderPassIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def findPinIdForRenderPassId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/findPinIdForRenderPassId',
            apiinfo__pb2.ApiInfo.findPinIdForRenderPassIdRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.findPinIdForRenderPassIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def findRenderPassIdForPinId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiInfoService/findRenderPassIdForPinId',
            apiinfo__pb2.ApiInfo.findRenderPassIdForPinIdRequest.SerializeToString,
            apiinfo__pb2.ApiInfo.findRenderPassIdForPinIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
