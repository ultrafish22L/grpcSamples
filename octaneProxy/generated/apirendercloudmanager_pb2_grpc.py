# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apirendercloudmanager_pb2 as apirendercloudmanager__pb2


class ApiRenderCloudManagerServiceStub(object):
    """GRPC interface definition for class 'ApiRenderCloudManager' from 'apirendercloudmanager.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.userSubscriptionInfo = channel.unary_unary(
                '/octaneapi.ApiRenderCloudManagerService/userSubscriptionInfo',
                request_serializer=apirendercloudmanager__pb2.ApiRenderCloudManager.userSubscriptionInfoRequest.SerializeToString,
                response_deserializer=apirendercloudmanager__pb2.ApiRenderCloudManager.userSubscriptionInfoResponse.FromString,
                _registered_method=True)
        self.uploadCurrentProject = channel.unary_unary(
                '/octaneapi.ApiRenderCloudManagerService/uploadCurrentProject',
                request_serializer=apirendercloudmanager__pb2.ApiRenderCloudManager.uploadCurrentProjectRequest.SerializeToString,
                response_deserializer=apirendercloudmanager__pb2.ApiRenderCloudManager.uploadCurrentProjectResponse.FromString,
                _registered_method=True)
        self.uploadRootNodeGraph = channel.unary_unary(
                '/octaneapi.ApiRenderCloudManagerService/uploadRootNodeGraph',
                request_serializer=apirendercloudmanager__pb2.ApiRenderCloudManager.uploadRootNodeGraphRequest.SerializeToString,
                response_deserializer=apirendercloudmanager__pb2.ApiRenderCloudManager.uploadRootNodeGraphResponse.FromString,
                _registered_method=True)
        self.newRenderTask = channel.unary_unary(
                '/octaneapi.ApiRenderCloudManagerService/newRenderTask',
                request_serializer=apirendercloudmanager__pb2.ApiRenderCloudManager.newRenderTaskRequest.SerializeToString,
                response_deserializer=apirendercloudmanager__pb2.ApiRenderCloudManager.newRenderTaskResponse.FromString,
                _registered_method=True)


class ApiRenderCloudManagerServiceServicer(object):
    """GRPC interface definition for class 'ApiRenderCloudManager' from 'apirendercloudmanager.h'
    """

    def userSubscriptionInfo(self, request, context):
        """/ Populates the provided struct with the information for the current user's
        / subscription
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def uploadCurrentProject(self, request, context):
        """/ Uploads the current project to the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def uploadRootNodeGraph(self, request, context):
        """/ Uploads a root node graph together with the current project settings to the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def newRenderTask(self, request, context):
        """/ Opens a Web UI for creating a new render task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiRenderCloudManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'userSubscriptionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.userSubscriptionInfo,
                    request_deserializer=apirendercloudmanager__pb2.ApiRenderCloudManager.userSubscriptionInfoRequest.FromString,
                    response_serializer=apirendercloudmanager__pb2.ApiRenderCloudManager.userSubscriptionInfoResponse.SerializeToString,
            ),
            'uploadCurrentProject': grpc.unary_unary_rpc_method_handler(
                    servicer.uploadCurrentProject,
                    request_deserializer=apirendercloudmanager__pb2.ApiRenderCloudManager.uploadCurrentProjectRequest.FromString,
                    response_serializer=apirendercloudmanager__pb2.ApiRenderCloudManager.uploadCurrentProjectResponse.SerializeToString,
            ),
            'uploadRootNodeGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.uploadRootNodeGraph,
                    request_deserializer=apirendercloudmanager__pb2.ApiRenderCloudManager.uploadRootNodeGraphRequest.FromString,
                    response_serializer=apirendercloudmanager__pb2.ApiRenderCloudManager.uploadRootNodeGraphResponse.SerializeToString,
            ),
            'newRenderTask': grpc.unary_unary_rpc_method_handler(
                    servicer.newRenderTask,
                    request_deserializer=apirendercloudmanager__pb2.ApiRenderCloudManager.newRenderTaskRequest.FromString,
                    response_serializer=apirendercloudmanager__pb2.ApiRenderCloudManager.newRenderTaskResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiRenderCloudManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiRenderCloudManagerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiRenderCloudManagerService(object):
    """GRPC interface definition for class 'ApiRenderCloudManager' from 'apirendercloudmanager.h'
    """

    @staticmethod
    def userSubscriptionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderCloudManagerService/userSubscriptionInfo',
            apirendercloudmanager__pb2.ApiRenderCloudManager.userSubscriptionInfoRequest.SerializeToString,
            apirendercloudmanager__pb2.ApiRenderCloudManager.userSubscriptionInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def uploadCurrentProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderCloudManagerService/uploadCurrentProject',
            apirendercloudmanager__pb2.ApiRenderCloudManager.uploadCurrentProjectRequest.SerializeToString,
            apirendercloudmanager__pb2.ApiRenderCloudManager.uploadCurrentProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def uploadRootNodeGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderCloudManagerService/uploadRootNodeGraph',
            apirendercloudmanager__pb2.ApiRenderCloudManager.uploadRootNodeGraphRequest.SerializeToString,
            apirendercloudmanager__pb2.ApiRenderCloudManager.uploadRootNodeGraphResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def newRenderTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiRenderCloudManagerService/newRenderTask',
            apirendercloudmanager__pb2.ApiRenderCloudManager.newRenderTaskRequest.SerializeToString,
            apirendercloudmanager__pb2.ApiRenderCloudManager.newRenderTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
