# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import apiprojectmanager_pb2 as apiprojectmanager__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in apiprojectmanager_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ApiProjectManagerServiceStub(object):
    """GRPC interface definition for class 'ApiProjectManager' from 'apiprojectmanager.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.isValid = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/isValid',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.isValidRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.isValidResponse.FromString,
                _registered_method=True)
        self.rootNodeGraph = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/rootNodeGraph',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.rootNodeGraphRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.rootNodeGraphResponse.FromString,
                _registered_method=True)
        self.applicationPreferences = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/applicationPreferences',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.applicationPreferencesRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.applicationPreferencesResponse.FromString,
                _registered_method=True)
        self.projectSettings = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/projectSettings',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.projectSettingsRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.projectSettingsResponse.FromString,
                _registered_method=True)
        self.projectMetadata = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/projectMetadata',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.projectMetadataRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.projectMetadataResponse.FromString,
                _registered_method=True)
        self.previewRenderTarget = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/previewRenderTarget',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.previewRenderTargetRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.previewRenderTargetResponse.FromString,
                _registered_method=True)
        self.materialBall = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/materialBall',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.materialBallRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.materialBallResponse.FromString,
                _registered_method=True)
        self.getCurrentProject = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/getCurrentProject',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.getCurrentProjectRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.getCurrentProjectResponse.FromString,
                _registered_method=True)
        self.resetProject = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/resetProject',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.resetProjectRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.resetProjectResponse.FromString,
                _registered_method=True)
        self.loadProject = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/loadProject',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.loadProjectRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.loadProjectResponse.FromString,
                _registered_method=True)
        self.loadedFromPackage = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/loadedFromPackage',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.loadedFromPackageRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.loadedFromPackageResponse.FromString,
                _registered_method=True)
        self.loadedOcsVersion = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/loadedOcsVersion',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.loadedOcsVersionRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.loadedOcsVersionResponse.FromString,
                _registered_method=True)
        self.saveProject = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/saveProject',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.saveProjectRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.saveProjectResponse.FromString,
                _registered_method=True)
        self.saveProjectAs = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/saveProjectAs',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.saveProjectAsRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.saveProjectAsResponse.FromString,
                _registered_method=True)
        self.saveProjectAsReferencePackage = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/saveProjectAsReferencePackage',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.saveProjectAsReferencePackageRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.saveProjectAsReferencePackageResponse.FromString,
                _registered_method=True)
        self.unpackPackage = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/unpackPackage',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.unpackPackageRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.unpackPackageResponse.FromString,
                _registered_method=True)
        self.addObserver = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/addObserver',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.addObserverRequest.SerializeToString,
                response_deserializer=apiprojectmanager__pb2.ApiProjectManager.addObserverResponse.FromString,
                _registered_method=True)
        self.removeObserver = channel.unary_unary(
                '/octaneapi.ApiProjectManagerService/removeObserver',
                request_serializer=apiprojectmanager__pb2.ApiProjectManager.removeObserverRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class ApiProjectManagerServiceServicer(object):
    """GRPC interface definition for class 'ApiProjectManager' from 'apiprojectmanager.h'
    """

    def isValid(self, request, context):
        """/ Returns whether the project manager is valid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rootNodeGraph(self, request, context):
        """/ Returns the root node graph of the current project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applicationPreferences(self, request, context):
        """/ Returns the application preferences node (node type NT_LOCAL_APP_PREFS)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def projectSettings(self, request, context):
        """/ Returns the project settings node (node type NT_PROJECT_SETTINGS)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def projectMetadata(self, request, context):
        """/ Returns the project metadata node (node type NT_METADATA)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def previewRenderTarget(self, request, context):
        """/ Returns the preview render target of the current project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def materialBall(self, request, context):
        """/ Returns the geometry of the material ball we use for previewing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCurrentProject(self, request, context):
        """/ Returns the absolute path to the current project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resetProject(self, request, context):
        """/ Resets a project to a fresh new project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loadProject(self, request, context):
        """/ Loads a project into octane
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loadedFromPackage(self, request, context):
        """/ Returns TRUE if the project is loaded from a package (
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loadedOcsVersion(self, request, context):
        """/ Returns the OCS version that the current project was loaded from
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveProject(self, request, context):
        """/ Saves a project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveProjectAs(self, request, context):
        """/ Saves a project under a different name
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveProjectAsReferencePackage(self, request, context):
        """/ Saves a project into an orbx package
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unpackPackage(self, request, context):
        """/ Unpacks a package into the provided directory
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addObserver(self, request, context):
        """/ Adds a new observer for the project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeObserver(self, request, context):
        """/ Removes an existing observer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiProjectManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'isValid': grpc.unary_unary_rpc_method_handler(
                    servicer.isValid,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.isValidRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.isValidResponse.SerializeToString,
            ),
            'rootNodeGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.rootNodeGraph,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.rootNodeGraphRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.rootNodeGraphResponse.SerializeToString,
            ),
            'applicationPreferences': grpc.unary_unary_rpc_method_handler(
                    servicer.applicationPreferences,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.applicationPreferencesRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.applicationPreferencesResponse.SerializeToString,
            ),
            'projectSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.projectSettings,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.projectSettingsRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.projectSettingsResponse.SerializeToString,
            ),
            'projectMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.projectMetadata,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.projectMetadataRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.projectMetadataResponse.SerializeToString,
            ),
            'previewRenderTarget': grpc.unary_unary_rpc_method_handler(
                    servicer.previewRenderTarget,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.previewRenderTargetRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.previewRenderTargetResponse.SerializeToString,
            ),
            'materialBall': grpc.unary_unary_rpc_method_handler(
                    servicer.materialBall,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.materialBallRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.materialBallResponse.SerializeToString,
            ),
            'getCurrentProject': grpc.unary_unary_rpc_method_handler(
                    servicer.getCurrentProject,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.getCurrentProjectRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.getCurrentProjectResponse.SerializeToString,
            ),
            'resetProject': grpc.unary_unary_rpc_method_handler(
                    servicer.resetProject,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.resetProjectRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.resetProjectResponse.SerializeToString,
            ),
            'loadProject': grpc.unary_unary_rpc_method_handler(
                    servicer.loadProject,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.loadProjectRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.loadProjectResponse.SerializeToString,
            ),
            'loadedFromPackage': grpc.unary_unary_rpc_method_handler(
                    servicer.loadedFromPackage,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.loadedFromPackageRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.loadedFromPackageResponse.SerializeToString,
            ),
            'loadedOcsVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.loadedOcsVersion,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.loadedOcsVersionRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.loadedOcsVersionResponse.SerializeToString,
            ),
            'saveProject': grpc.unary_unary_rpc_method_handler(
                    servicer.saveProject,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.saveProjectRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.saveProjectResponse.SerializeToString,
            ),
            'saveProjectAs': grpc.unary_unary_rpc_method_handler(
                    servicer.saveProjectAs,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.saveProjectAsRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.saveProjectAsResponse.SerializeToString,
            ),
            'saveProjectAsReferencePackage': grpc.unary_unary_rpc_method_handler(
                    servicer.saveProjectAsReferencePackage,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.saveProjectAsReferencePackageRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.saveProjectAsReferencePackageResponse.SerializeToString,
            ),
            'unpackPackage': grpc.unary_unary_rpc_method_handler(
                    servicer.unpackPackage,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.unpackPackageRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.unpackPackageResponse.SerializeToString,
            ),
            'addObserver': grpc.unary_unary_rpc_method_handler(
                    servicer.addObserver,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.addObserverRequest.FromString,
                    response_serializer=apiprojectmanager__pb2.ApiProjectManager.addObserverResponse.SerializeToString,
            ),
            'removeObserver': grpc.unary_unary_rpc_method_handler(
                    servicer.removeObserver,
                    request_deserializer=apiprojectmanager__pb2.ApiProjectManager.removeObserverRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiProjectManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiProjectManagerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiProjectManagerService(object):
    """GRPC interface definition for class 'ApiProjectManager' from 'apiprojectmanager.h'
    """

    @staticmethod
    def isValid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/isValid',
            apiprojectmanager__pb2.ApiProjectManager.isValidRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.isValidResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def rootNodeGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/rootNodeGraph',
            apiprojectmanager__pb2.ApiProjectManager.rootNodeGraphRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.rootNodeGraphResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def applicationPreferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/applicationPreferences',
            apiprojectmanager__pb2.ApiProjectManager.applicationPreferencesRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.applicationPreferencesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def projectSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/projectSettings',
            apiprojectmanager__pb2.ApiProjectManager.projectSettingsRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.projectSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def projectMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/projectMetadata',
            apiprojectmanager__pb2.ApiProjectManager.projectMetadataRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.projectMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def previewRenderTarget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/previewRenderTarget',
            apiprojectmanager__pb2.ApiProjectManager.previewRenderTargetRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.previewRenderTargetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def materialBall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/materialBall',
            apiprojectmanager__pb2.ApiProjectManager.materialBallRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.materialBallResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getCurrentProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/getCurrentProject',
            apiprojectmanager__pb2.ApiProjectManager.getCurrentProjectRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.getCurrentProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def resetProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/resetProject',
            apiprojectmanager__pb2.ApiProjectManager.resetProjectRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.resetProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def loadProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/loadProject',
            apiprojectmanager__pb2.ApiProjectManager.loadProjectRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.loadProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def loadedFromPackage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/loadedFromPackage',
            apiprojectmanager__pb2.ApiProjectManager.loadedFromPackageRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.loadedFromPackageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def loadedOcsVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/loadedOcsVersion',
            apiprojectmanager__pb2.ApiProjectManager.loadedOcsVersionRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.loadedOcsVersionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/saveProject',
            apiprojectmanager__pb2.ApiProjectManager.saveProjectRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.saveProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveProjectAs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/saveProjectAs',
            apiprojectmanager__pb2.ApiProjectManager.saveProjectAsRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.saveProjectAsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveProjectAsReferencePackage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/saveProjectAsReferencePackage',
            apiprojectmanager__pb2.ApiProjectManager.saveProjectAsReferencePackageRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.saveProjectAsReferencePackageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def unpackPackage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/unpackPackage',
            apiprojectmanager__pb2.ApiProjectManager.unpackPackageRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.unpackPackageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def addObserver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/addObserver',
            apiprojectmanager__pb2.ApiProjectManager.addObserverRequest.SerializeToString,
            apiprojectmanager__pb2.ApiProjectManager.addObserverResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def removeObserver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiProjectManagerService/removeObserver',
            apiprojectmanager__pb2.ApiProjectManager.removeObserverRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
