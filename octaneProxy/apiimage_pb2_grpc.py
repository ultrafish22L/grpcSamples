# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import apiimage_pb2 as apiimage__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in apiimage_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ApiImageServiceStub(object):
    """GRPC interface definition for class 'ApiImage' from 'apiimage.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/octaneapi.ApiImageService/create',
                request_serializer=apiimage__pb2.ApiImage.createRequest.SerializeToString,
                response_deserializer=apiimage__pb2.ApiImage.createResponse.FromString,
                _registered_method=True)
        self.create1 = channel.unary_unary(
                '/octaneapi.ApiImageService/create1',
                request_serializer=apiimage__pb2.ApiImage.create1Request.SerializeToString,
                response_deserializer=apiimage__pb2.ApiImage.create1Response.FromString,
                _registered_method=True)
        self.saveToFile = channel.unary_unary(
                '/octaneapi.ApiImageService/saveToFile',
                request_serializer=apiimage__pb2.ApiImage.saveToFileRequest.SerializeToString,
                response_deserializer=apiimage__pb2.ApiImage.saveToFileResponse.FromString,
                _registered_method=True)
        self.loadFromFile = channel.unary_unary(
                '/octaneapi.ApiImageService/loadFromFile',
                request_serializer=apiimage__pb2.ApiImage.loadFromFileRequest.SerializeToString,
                response_deserializer=apiimage__pb2.ApiImage.loadFromFileResponse.FromString,
                _registered_method=True)
        self.loadFromMemory = channel.unary_unary(
                '/octaneapi.ApiImageService/loadFromMemory',
                request_serializer=apiimage__pb2.ApiImage.loadFromMemoryRequest.SerializeToString,
                response_deserializer=apiimage__pb2.ApiImage.loadFromMemoryResponse.FromString,
                _registered_method=True)
        self.destroy = channel.unary_unary(
                '/octaneapi.ApiImageService/destroy',
                request_serializer=apiimage__pb2.ApiImage.destroyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.width = channel.unary_unary(
                '/octaneapi.ApiImageService/width',
                request_serializer=apiimage__pb2.ApiImage.widthRequest.SerializeToString,
                response_deserializer=apiimage__pb2.ApiImage.widthResponse.FromString,
                _registered_method=True)
        self.height = channel.unary_unary(
                '/octaneapi.ApiImageService/height',
                request_serializer=apiimage__pb2.ApiImage.heightRequest.SerializeToString,
                response_deserializer=apiimage__pb2.ApiImage.heightResponse.FromString,
                _registered_method=True)
        self.pixelFormat = channel.unary_unary(
                '/octaneapi.ApiImageService/pixelFormat',
                request_serializer=apiimage__pb2.ApiImage.pixelFormatRequest.SerializeToString,
                response_deserializer=apiimage__pb2.ApiImage.pixelFormatResponse.FromString,
                _registered_method=True)
        self.isARGB = channel.unary_unary(
                '/octaneapi.ApiImageService/isARGB',
                request_serializer=apiimage__pb2.ApiImage.isARGBRequest.SerializeToString,
                response_deserializer=apiimage__pb2.ApiImage.isARGBResponse.FromString,
                _registered_method=True)
        self.isRGB = channel.unary_unary(
                '/octaneapi.ApiImageService/isRGB',
                request_serializer=apiimage__pb2.ApiImage.isRGBRequest.SerializeToString,
                response_deserializer=apiimage__pb2.ApiImage.isRGBResponse.FromString,
                _registered_method=True)
        self.isSingleChannel = channel.unary_unary(
                '/octaneapi.ApiImageService/isSingleChannel',
                request_serializer=apiimage__pb2.ApiImage.isSingleChannelRequest.SerializeToString,
                response_deserializer=apiimage__pb2.ApiImage.isSingleChannelResponse.FromString,
                _registered_method=True)
        self.hasAlphaChannel = channel.unary_unary(
                '/octaneapi.ApiImageService/hasAlphaChannel',
                request_serializer=apiimage__pb2.ApiImage.hasAlphaChannelRequest.SerializeToString,
                response_deserializer=apiimage__pb2.ApiImage.hasAlphaChannelResponse.FromString,
                _registered_method=True)
        self.clear = channel.unary_unary(
                '/octaneapi.ApiImageService/clear',
                request_serializer=apiimage__pb2.ApiImage.clearRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.updateTo = channel.unary_unary(
                '/octaneapi.ApiImageService/updateTo',
                request_serializer=apiimage__pb2.ApiImage.updateToRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.pixelAt = channel.unary_unary(
                '/octaneapi.ApiImageService/pixelAt',
                request_serializer=apiimage__pb2.ApiImage.pixelAtRequest.SerializeToString,
                response_deserializer=apiimage__pb2.ApiImage.pixelAtResponse.FromString,
                _registered_method=True)
        self.setPixelAt = channel.unary_unary(
                '/octaneapi.ApiImageService/setPixelAt',
                request_serializer=apiimage__pb2.ApiImage.setPixelAtRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.multiplyAlphaAt = channel.unary_unary(
                '/octaneapi.ApiImageService/multiplyAlphaAt',
                request_serializer=apiimage__pb2.ApiImage.multiplyAlphaAtRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.multiplyAllAlphas = channel.unary_unary(
                '/octaneapi.ApiImageService/multiplyAllAlphas',
                request_serializer=apiimage__pb2.ApiImage.multiplyAllAlphasRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.desaturate = channel.unary_unary(
                '/octaneapi.ApiImageService/desaturate',
                request_serializer=apiimage__pb2.ApiImage.desaturateRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.resize = channel.unary_unary(
                '/octaneapi.ApiImageService/resize',
                request_serializer=apiimage__pb2.ApiImage.resizeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class ApiImageServiceServicer(object):
    """GRPC interface definition for class 'ApiImage' from 'apiimage.h'
    """

    def create(self, request, context):
        """/ Creates a new image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create1(self, request, context):
        """/ Creates a new image and initializes it with the provided data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveToFile(self, request, context):
        """/ Writes this ApiImage into a file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loadFromFile(self, request, context):
        """/ Loads an image from a file, which needs to be of one of the following formats:
        / GIF, JPEG, PNG
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loadFromMemory(self, request, context):
        """/ Loads an image from an in-memory image file, i
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def destroy(self, request, context):
        """/ Destroys the image created by create
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def width(self, request, context):
        """/ Returns the width of this image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def height(self, request, context):
        """/ Returns the height of this image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pixelFormat(self, request, context):
        """/ Returns this image's pixel format
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isARGB(self, request, context):
        """/ TRUE if the image's format is ARGB
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isRGB(self, request, context):
        """/ True if the image's format is RGB
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isSingleChannel(self, request, context):
        """/ TRUE if the image's format is a single-channel alpha map
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasAlphaChannel(self, request, context):
        """/ TRUE if the image contains an alpha-channel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clear(self, request, context):
        """/ Clears a section of the image with a given color
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTo(self, request, context):
        """/ Updates the content of the instance
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pixelAt(self, request, context):
        """/ Returns the color of one of the pixels in the image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setPixelAt(self, request, context):
        """/ Sets the color of one of the image's pixels
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def multiplyAlphaAt(self, request, context):
        """/ Changes the opacity of a pixel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def multiplyAllAlphas(self, request, context):
        """/ Changes the overall opacity of the image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def desaturate(self, request, context):
        """/ Changes all the colors to be shades of grey, based on their current luminosity
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resize(self, request, context):
        """/ Resize this image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiImageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=apiimage__pb2.ApiImage.createRequest.FromString,
                    response_serializer=apiimage__pb2.ApiImage.createResponse.SerializeToString,
            ),
            'create1': grpc.unary_unary_rpc_method_handler(
                    servicer.create1,
                    request_deserializer=apiimage__pb2.ApiImage.create1Request.FromString,
                    response_serializer=apiimage__pb2.ApiImage.create1Response.SerializeToString,
            ),
            'saveToFile': grpc.unary_unary_rpc_method_handler(
                    servicer.saveToFile,
                    request_deserializer=apiimage__pb2.ApiImage.saveToFileRequest.FromString,
                    response_serializer=apiimage__pb2.ApiImage.saveToFileResponse.SerializeToString,
            ),
            'loadFromFile': grpc.unary_unary_rpc_method_handler(
                    servicer.loadFromFile,
                    request_deserializer=apiimage__pb2.ApiImage.loadFromFileRequest.FromString,
                    response_serializer=apiimage__pb2.ApiImage.loadFromFileResponse.SerializeToString,
            ),
            'loadFromMemory': grpc.unary_unary_rpc_method_handler(
                    servicer.loadFromMemory,
                    request_deserializer=apiimage__pb2.ApiImage.loadFromMemoryRequest.FromString,
                    response_serializer=apiimage__pb2.ApiImage.loadFromMemoryResponse.SerializeToString,
            ),
            'destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.destroy,
                    request_deserializer=apiimage__pb2.ApiImage.destroyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'width': grpc.unary_unary_rpc_method_handler(
                    servicer.width,
                    request_deserializer=apiimage__pb2.ApiImage.widthRequest.FromString,
                    response_serializer=apiimage__pb2.ApiImage.widthResponse.SerializeToString,
            ),
            'height': grpc.unary_unary_rpc_method_handler(
                    servicer.height,
                    request_deserializer=apiimage__pb2.ApiImage.heightRequest.FromString,
                    response_serializer=apiimage__pb2.ApiImage.heightResponse.SerializeToString,
            ),
            'pixelFormat': grpc.unary_unary_rpc_method_handler(
                    servicer.pixelFormat,
                    request_deserializer=apiimage__pb2.ApiImage.pixelFormatRequest.FromString,
                    response_serializer=apiimage__pb2.ApiImage.pixelFormatResponse.SerializeToString,
            ),
            'isARGB': grpc.unary_unary_rpc_method_handler(
                    servicer.isARGB,
                    request_deserializer=apiimage__pb2.ApiImage.isARGBRequest.FromString,
                    response_serializer=apiimage__pb2.ApiImage.isARGBResponse.SerializeToString,
            ),
            'isRGB': grpc.unary_unary_rpc_method_handler(
                    servicer.isRGB,
                    request_deserializer=apiimage__pb2.ApiImage.isRGBRequest.FromString,
                    response_serializer=apiimage__pb2.ApiImage.isRGBResponse.SerializeToString,
            ),
            'isSingleChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.isSingleChannel,
                    request_deserializer=apiimage__pb2.ApiImage.isSingleChannelRequest.FromString,
                    response_serializer=apiimage__pb2.ApiImage.isSingleChannelResponse.SerializeToString,
            ),
            'hasAlphaChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.hasAlphaChannel,
                    request_deserializer=apiimage__pb2.ApiImage.hasAlphaChannelRequest.FromString,
                    response_serializer=apiimage__pb2.ApiImage.hasAlphaChannelResponse.SerializeToString,
            ),
            'clear': grpc.unary_unary_rpc_method_handler(
                    servicer.clear,
                    request_deserializer=apiimage__pb2.ApiImage.clearRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'updateTo': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTo,
                    request_deserializer=apiimage__pb2.ApiImage.updateToRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'pixelAt': grpc.unary_unary_rpc_method_handler(
                    servicer.pixelAt,
                    request_deserializer=apiimage__pb2.ApiImage.pixelAtRequest.FromString,
                    response_serializer=apiimage__pb2.ApiImage.pixelAtResponse.SerializeToString,
            ),
            'setPixelAt': grpc.unary_unary_rpc_method_handler(
                    servicer.setPixelAt,
                    request_deserializer=apiimage__pb2.ApiImage.setPixelAtRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'multiplyAlphaAt': grpc.unary_unary_rpc_method_handler(
                    servicer.multiplyAlphaAt,
                    request_deserializer=apiimage__pb2.ApiImage.multiplyAlphaAtRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'multiplyAllAlphas': grpc.unary_unary_rpc_method_handler(
                    servicer.multiplyAllAlphas,
                    request_deserializer=apiimage__pb2.ApiImage.multiplyAllAlphasRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'desaturate': grpc.unary_unary_rpc_method_handler(
                    servicer.desaturate,
                    request_deserializer=apiimage__pb2.ApiImage.desaturateRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'resize': grpc.unary_unary_rpc_method_handler(
                    servicer.resize,
                    request_deserializer=apiimage__pb2.ApiImage.resizeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiImageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiImageService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiImageService(object):
    """GRPC interface definition for class 'ApiImage' from 'apiimage.h'
    """

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/create',
            apiimage__pb2.ApiImage.createRequest.SerializeToString,
            apiimage__pb2.ApiImage.createResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def create1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/create1',
            apiimage__pb2.ApiImage.create1Request.SerializeToString,
            apiimage__pb2.ApiImage.create1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def saveToFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/saveToFile',
            apiimage__pb2.ApiImage.saveToFileRequest.SerializeToString,
            apiimage__pb2.ApiImage.saveToFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def loadFromFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/loadFromFile',
            apiimage__pb2.ApiImage.loadFromFileRequest.SerializeToString,
            apiimage__pb2.ApiImage.loadFromFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def loadFromMemory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/loadFromMemory',
            apiimage__pb2.ApiImage.loadFromMemoryRequest.SerializeToString,
            apiimage__pb2.ApiImage.loadFromMemoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/destroy',
            apiimage__pb2.ApiImage.destroyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def width(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/width',
            apiimage__pb2.ApiImage.widthRequest.SerializeToString,
            apiimage__pb2.ApiImage.widthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def height(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/height',
            apiimage__pb2.ApiImage.heightRequest.SerializeToString,
            apiimage__pb2.ApiImage.heightResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pixelFormat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/pixelFormat',
            apiimage__pb2.ApiImage.pixelFormatRequest.SerializeToString,
            apiimage__pb2.ApiImage.pixelFormatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isARGB(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/isARGB',
            apiimage__pb2.ApiImage.isARGBRequest.SerializeToString,
            apiimage__pb2.ApiImage.isARGBResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isRGB(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/isRGB',
            apiimage__pb2.ApiImage.isRGBRequest.SerializeToString,
            apiimage__pb2.ApiImage.isRGBResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def isSingleChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/isSingleChannel',
            apiimage__pb2.ApiImage.isSingleChannelRequest.SerializeToString,
            apiimage__pb2.ApiImage.isSingleChannelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def hasAlphaChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/hasAlphaChannel',
            apiimage__pb2.ApiImage.hasAlphaChannelRequest.SerializeToString,
            apiimage__pb2.ApiImage.hasAlphaChannelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def clear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/clear',
            apiimage__pb2.ApiImage.clearRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateTo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/updateTo',
            apiimage__pb2.ApiImage.updateToRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pixelAt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/pixelAt',
            apiimage__pb2.ApiImage.pixelAtRequest.SerializeToString,
            apiimage__pb2.ApiImage.pixelAtResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setPixelAt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/setPixelAt',
            apiimage__pb2.ApiImage.setPixelAtRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def multiplyAlphaAt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/multiplyAlphaAt',
            apiimage__pb2.ApiImage.multiplyAlphaAtRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def multiplyAllAlphas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/multiplyAllAlphas',
            apiimage__pb2.ApiImage.multiplyAllAlphasRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def desaturate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/desaturate',
            apiimage__pb2.ApiImage.desaturateRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def resize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiImageService/resize',
            apiimage__pb2.ApiImage.resizeRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
