// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: camera_control.proto

#include "camera_control.pb.h"
#include "camera_control.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace octaneapi {

static const char* CameraControl_method_names[] = {
  "/octaneapi.CameraControl/SetCameraPosition",
  "/octaneapi.CameraControl/GetCameraPosition",
  "/octaneapi.CameraControl/SetCameraTarget",
  "/octaneapi.CameraControl/GetCameraTarget",
  "/octaneapi.CameraControl/SetCameraUp",
  "/octaneapi.CameraControl/GetCameraUp",
};

std::unique_ptr< CameraControl::Stub> CameraControl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CameraControl::Stub> stub(new CameraControl::Stub(channel, options));
  return stub;
}

CameraControl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetCameraPosition_(CameraControl_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCameraPosition_(CameraControl_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCameraTarget_(CameraControl_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCameraTarget_(CameraControl_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCameraUp_(CameraControl_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCameraUp_(CameraControl_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CameraControl::Stub::SetCameraPosition(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::CameraPositionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCameraPosition_, context, request, response);
}

void CameraControl::Stub::async::SetCameraPosition(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::CameraPositionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCameraPosition_, context, request, response, std::move(f));
}

void CameraControl::Stub::async::SetCameraPosition(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCameraPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraControl::Stub::PrepareAsyncSetCameraPositionRaw(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::CameraPositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCameraPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraControl::Stub::AsyncSetCameraPositionRaw(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCameraPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CameraControl::Stub::GetCameraPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::octaneapi::CameraPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::octaneapi::CameraPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCameraPosition_, context, request, response);
}

void CameraControl::Stub::async::GetCameraPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::octaneapi::CameraPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCameraPosition_, context, request, response, std::move(f));
}

void CameraControl::Stub::async::GetCameraPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCameraPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CameraPositionResponse>* CameraControl::Stub::PrepareAsyncGetCameraPositionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CameraPositionResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCameraPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CameraPositionResponse>* CameraControl::Stub::AsyncGetCameraPositionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCameraPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CameraControl::Stub::SetCameraTarget(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::CameraTargetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCameraTarget_, context, request, response);
}

void CameraControl::Stub::async::SetCameraTarget(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::CameraTargetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCameraTarget_, context, request, response, std::move(f));
}

void CameraControl::Stub::async::SetCameraTarget(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCameraTarget_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraControl::Stub::PrepareAsyncSetCameraTargetRaw(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::CameraTargetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCameraTarget_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraControl::Stub::AsyncSetCameraTargetRaw(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCameraTargetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CameraControl::Stub::GetCameraTarget(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::octaneapi::CameraTargetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::octaneapi::CameraTargetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCameraTarget_, context, request, response);
}

void CameraControl::Stub::async::GetCameraTarget(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraTargetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::octaneapi::CameraTargetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCameraTarget_, context, request, response, std::move(f));
}

void CameraControl::Stub::async::GetCameraTarget(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraTargetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCameraTarget_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CameraTargetResponse>* CameraControl::Stub::PrepareAsyncGetCameraTargetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CameraTargetResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCameraTarget_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CameraTargetResponse>* CameraControl::Stub::AsyncGetCameraTargetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCameraTargetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CameraControl::Stub::SetCameraUp(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::octaneapi::CameraUpRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCameraUp_, context, request, response);
}

void CameraControl::Stub::async::SetCameraUp(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::octaneapi::CameraUpRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCameraUp_, context, request, response, std::move(f));
}

void CameraControl::Stub::async::SetCameraUp(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCameraUp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraControl::Stub::PrepareAsyncSetCameraUpRaw(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::octaneapi::CameraUpRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCameraUp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CameraControl::Stub::AsyncSetCameraUpRaw(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCameraUpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CameraControl::Stub::GetCameraUp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::octaneapi::CameraUpResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::octaneapi::CameraUpResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCameraUp_, context, request, response);
}

void CameraControl::Stub::async::GetCameraUp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraUpResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::octaneapi::CameraUpResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCameraUp_, context, request, response, std::move(f));
}

void CameraControl::Stub::async::GetCameraUp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraUpResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCameraUp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CameraUpResponse>* CameraControl::Stub::PrepareAsyncGetCameraUpRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::octaneapi::CameraUpResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCameraUp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::octaneapi::CameraUpResponse>* CameraControl::Stub::AsyncGetCameraUpRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCameraUpRaw(context, request, cq);
  result->StartCall();
  return result;
}

CameraControl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraControl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraControl::Service, ::octaneapi::CameraPositionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CameraControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::CameraPositionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetCameraPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraControl_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraControl::Service, ::google::protobuf::Empty, ::octaneapi::CameraPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CameraControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::octaneapi::CameraPositionResponse* resp) {
               return service->GetCameraPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraControl_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraControl::Service, ::octaneapi::CameraTargetRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CameraControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::CameraTargetRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetCameraTarget(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraControl_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraControl::Service, ::google::protobuf::Empty, ::octaneapi::CameraTargetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CameraControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::octaneapi::CameraTargetResponse* resp) {
               return service->GetCameraTarget(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraControl_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraControl::Service, ::octaneapi::CameraUpRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CameraControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::octaneapi::CameraUpRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetCameraUp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraControl_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraControl::Service, ::google::protobuf::Empty, ::octaneapi::CameraUpResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CameraControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::octaneapi::CameraUpResponse* resp) {
               return service->GetCameraUp(ctx, req, resp);
             }, this)));
}

CameraControl::Service::~Service() {
}

::grpc::Status CameraControl::Service::SetCameraPosition(::grpc::ServerContext* context, const ::octaneapi::CameraPositionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraControl::Service::GetCameraPosition(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraControl::Service::SetCameraTarget(::grpc::ServerContext* context, const ::octaneapi::CameraTargetRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraControl::Service::GetCameraTarget(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraTargetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraControl::Service::SetCameraUp(::grpc::ServerContext* context, const ::octaneapi::CameraUpRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraControl::Service::GetCameraUp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraUpResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace octaneapi
#include <grpcpp/ports_undef.inc>

