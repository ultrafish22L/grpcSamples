// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: livelink.proto
#ifndef GRPC_livelink_2eproto__INCLUDED
#define GRPC_livelink_2eproto__INCLUDED

#include "livelink.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace livelinkapi {

// Core camera control service
class LiveLinkService final {
 public:
  static constexpr char const* service_full_name() {
    return "livelinkapi.LiveLinkService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Allows full or partial update of the camera
    virtual ::grpc::Status SetCamera(::grpc::ClientContext* context, const ::livelinkapi::CameraState& request, ::livelinkapi::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::Empty>> AsyncSetCamera(::grpc::ClientContext* context, const ::livelinkapi::CameraState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::Empty>>(AsyncSetCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::Empty>> PrepareAsyncSetCamera(::grpc::ClientContext* context, const ::livelinkapi::CameraState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::Empty>>(PrepareAsyncSetCameraRaw(context, request, cq));
    }
    // Optional: you may still want this
    virtual ::grpc::Status GetCamera(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::livelinkapi::CameraState* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::CameraState>> AsyncGetCamera(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::CameraState>>(AsyncGetCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::CameraState>> PrepareAsyncGetCamera(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::CameraState>>(PrepareAsyncGetCameraRaw(context, request, cq));
    }
    // New: retrieve list of meshes
    virtual ::grpc::Status GetMeshes(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::livelinkapi::MeshList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::MeshList>> AsyncGetMeshes(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::MeshList>>(AsyncGetMeshesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::MeshList>> PrepareAsyncGetMeshes(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::MeshList>>(PrepareAsyncGetMeshesRaw(context, request, cq));
    }
    // Fetch full mesh geometry by Object ID
    virtual ::grpc::Status GetMesh(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest& request, ::livelinkapi::MeshData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::MeshData>> AsyncGetMesh(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::MeshData>>(AsyncGetMeshRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::MeshData>> PrepareAsyncGetMesh(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::MeshData>>(PrepareAsyncGetMeshRaw(context, request, cq));
    }
    // RPC to request an image by filename
    virtual ::grpc::Status GetFile(::grpc::ClientContext* context, const ::livelinkapi::FileRequest& request, ::livelinkapi::FileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::FileResponse>> AsyncGetFile(::grpc::ClientContext* context, const ::livelinkapi::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::FileResponse>>(AsyncGetFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::FileResponse>> PrepareAsyncGetFile(::grpc::ClientContext* context, const ::livelinkapi::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::FileResponse>>(PrepareAsyncGetFileRaw(context, request, cq));
    }
    // Client streaming: client streams CameraState messages continuously.
    // Server replies ONCE (can be an Empty or StreamStatus).
    std::unique_ptr< ::grpc::ClientWriterInterface< ::livelinkapi::CameraState>> StreamCamera(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::livelinkapi::CameraState>>(StreamCameraRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::livelinkapi::CameraState>> AsyncStreamCamera(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::livelinkapi::CameraState>>(AsyncStreamCameraRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::livelinkapi::CameraState>> PrepareAsyncStreamCamera(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::livelinkapi::CameraState>>(PrepareAsyncStreamCameraRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Allows full or partial update of the camera
      virtual void SetCamera(::grpc::ClientContext* context, const ::livelinkapi::CameraState* request, ::livelinkapi::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCamera(::grpc::ClientContext* context, const ::livelinkapi::CameraState* request, ::livelinkapi::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Optional: you may still want this
      virtual void GetCamera(::grpc::ClientContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::CameraState* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCamera(::grpc::ClientContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::CameraState* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // New: retrieve list of meshes
      virtual void GetMeshes(::grpc::ClientContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::MeshList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMeshes(::grpc::ClientContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::MeshList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Fetch full mesh geometry by Object ID
      virtual void GetMesh(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest* request, ::livelinkapi::MeshData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMesh(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest* request, ::livelinkapi::MeshData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RPC to request an image by filename
      virtual void GetFile(::grpc::ClientContext* context, const ::livelinkapi::FileRequest* request, ::livelinkapi::FileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFile(::grpc::ClientContext* context, const ::livelinkapi::FileRequest* request, ::livelinkapi::FileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Client streaming: client streams CameraState messages continuously.
      // Server replies ONCE (can be an Empty or StreamStatus).
      virtual void StreamCamera(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response, ::grpc::ClientWriteReactor< ::livelinkapi::CameraState>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::Empty>* AsyncSetCameraRaw(::grpc::ClientContext* context, const ::livelinkapi::CameraState& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::Empty>* PrepareAsyncSetCameraRaw(::grpc::ClientContext* context, const ::livelinkapi::CameraState& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::CameraState>* AsyncGetCameraRaw(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::CameraState>* PrepareAsyncGetCameraRaw(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::MeshList>* AsyncGetMeshesRaw(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::MeshList>* PrepareAsyncGetMeshesRaw(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::MeshData>* AsyncGetMeshRaw(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::MeshData>* PrepareAsyncGetMeshRaw(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::FileResponse>* AsyncGetFileRaw(::grpc::ClientContext* context, const ::livelinkapi::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::livelinkapi::FileResponse>* PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::livelinkapi::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::livelinkapi::CameraState>* StreamCameraRaw(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::livelinkapi::CameraState>* AsyncStreamCameraRaw(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::livelinkapi::CameraState>* PrepareAsyncStreamCameraRaw(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetCamera(::grpc::ClientContext* context, const ::livelinkapi::CameraState& request, ::livelinkapi::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::Empty>> AsyncSetCamera(::grpc::ClientContext* context, const ::livelinkapi::CameraState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::Empty>>(AsyncSetCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::Empty>> PrepareAsyncSetCamera(::grpc::ClientContext* context, const ::livelinkapi::CameraState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::Empty>>(PrepareAsyncSetCameraRaw(context, request, cq));
    }
    ::grpc::Status GetCamera(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::livelinkapi::CameraState* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::CameraState>> AsyncGetCamera(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::CameraState>>(AsyncGetCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::CameraState>> PrepareAsyncGetCamera(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::CameraState>>(PrepareAsyncGetCameraRaw(context, request, cq));
    }
    ::grpc::Status GetMeshes(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::livelinkapi::MeshList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshList>> AsyncGetMeshes(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshList>>(AsyncGetMeshesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshList>> PrepareAsyncGetMeshes(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshList>>(PrepareAsyncGetMeshesRaw(context, request, cq));
    }
    ::grpc::Status GetMesh(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest& request, ::livelinkapi::MeshData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshData>> AsyncGetMesh(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshData>>(AsyncGetMeshRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshData>> PrepareAsyncGetMesh(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshData>>(PrepareAsyncGetMeshRaw(context, request, cq));
    }
    ::grpc::Status GetFile(::grpc::ClientContext* context, const ::livelinkapi::FileRequest& request, ::livelinkapi::FileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::FileResponse>> AsyncGetFile(::grpc::ClientContext* context, const ::livelinkapi::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::FileResponse>>(AsyncGetFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::FileResponse>> PrepareAsyncGetFile(::grpc::ClientContext* context, const ::livelinkapi::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::livelinkapi::FileResponse>>(PrepareAsyncGetFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::livelinkapi::CameraState>> StreamCamera(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::livelinkapi::CameraState>>(StreamCameraRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::livelinkapi::CameraState>> AsyncStreamCamera(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::livelinkapi::CameraState>>(AsyncStreamCameraRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::livelinkapi::CameraState>> PrepareAsyncStreamCamera(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::livelinkapi::CameraState>>(PrepareAsyncStreamCameraRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetCamera(::grpc::ClientContext* context, const ::livelinkapi::CameraState* request, ::livelinkapi::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetCamera(::grpc::ClientContext* context, const ::livelinkapi::CameraState* request, ::livelinkapi::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCamera(::grpc::ClientContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::CameraState* response, std::function<void(::grpc::Status)>) override;
      void GetCamera(::grpc::ClientContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::CameraState* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMeshes(::grpc::ClientContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::MeshList* response, std::function<void(::grpc::Status)>) override;
      void GetMeshes(::grpc::ClientContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::MeshList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMesh(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest* request, ::livelinkapi::MeshData* response, std::function<void(::grpc::Status)>) override;
      void GetMesh(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest* request, ::livelinkapi::MeshData* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFile(::grpc::ClientContext* context, const ::livelinkapi::FileRequest* request, ::livelinkapi::FileResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFile(::grpc::ClientContext* context, const ::livelinkapi::FileRequest* request, ::livelinkapi::FileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamCamera(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response, ::grpc::ClientWriteReactor< ::livelinkapi::CameraState>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::livelinkapi::Empty>* AsyncSetCameraRaw(::grpc::ClientContext* context, const ::livelinkapi::CameraState& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::livelinkapi::Empty>* PrepareAsyncSetCameraRaw(::grpc::ClientContext* context, const ::livelinkapi::CameraState& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::livelinkapi::CameraState>* AsyncGetCameraRaw(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::livelinkapi::CameraState>* PrepareAsyncGetCameraRaw(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshList>* AsyncGetMeshesRaw(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshList>* PrepareAsyncGetMeshesRaw(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshData>* AsyncGetMeshRaw(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshData>* PrepareAsyncGetMeshRaw(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::livelinkapi::FileResponse>* AsyncGetFileRaw(::grpc::ClientContext* context, const ::livelinkapi::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::livelinkapi::FileResponse>* PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::livelinkapi::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::livelinkapi::CameraState>* StreamCameraRaw(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response) override;
    ::grpc::ClientAsyncWriter< ::livelinkapi::CameraState>* AsyncStreamCameraRaw(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::livelinkapi::CameraState>* PrepareAsyncStreamCameraRaw(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetCamera_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCamera_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMeshes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMesh_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFile_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamCamera_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Allows full or partial update of the camera
    virtual ::grpc::Status SetCamera(::grpc::ServerContext* context, const ::livelinkapi::CameraState* request, ::livelinkapi::Empty* response);
    // Optional: you may still want this
    virtual ::grpc::Status GetCamera(::grpc::ServerContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::CameraState* response);
    // New: retrieve list of meshes
    virtual ::grpc::Status GetMeshes(::grpc::ServerContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::MeshList* response);
    // Fetch full mesh geometry by Object ID
    virtual ::grpc::Status GetMesh(::grpc::ServerContext* context, const ::livelinkapi::MeshRequest* request, ::livelinkapi::MeshData* response);
    // RPC to request an image by filename
    virtual ::grpc::Status GetFile(::grpc::ServerContext* context, const ::livelinkapi::FileRequest* request, ::livelinkapi::FileResponse* response);
    // Client streaming: client streams CameraState messages continuously.
    // Server replies ONCE (can be an Empty or StreamStatus).
    virtual ::grpc::Status StreamCamera(::grpc::ServerContext* context, ::grpc::ServerReader< ::livelinkapi::CameraState>* reader, ::livelinkapi::StreamStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetCamera() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCamera(::grpc::ServerContext* /*context*/, const ::livelinkapi::CameraState* /*request*/, ::livelinkapi::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCamera(::grpc::ServerContext* context, ::livelinkapi::CameraState* request, ::grpc::ServerAsyncResponseWriter< ::livelinkapi::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCamera() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCamera(::grpc::ServerContext* /*context*/, const ::livelinkapi::Empty* /*request*/, ::livelinkapi::CameraState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCamera(::grpc::ServerContext* context, ::livelinkapi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::livelinkapi::CameraState>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMeshes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMeshes() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetMeshes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeshes(::grpc::ServerContext* /*context*/, const ::livelinkapi::Empty* /*request*/, ::livelinkapi::MeshList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMeshes(::grpc::ServerContext* context, ::livelinkapi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::livelinkapi::MeshList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMesh() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMesh(::grpc::ServerContext* /*context*/, const ::livelinkapi::MeshRequest* /*request*/, ::livelinkapi::MeshData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMesh(::grpc::ServerContext* context, ::livelinkapi::MeshRequest* request, ::grpc::ServerAsyncResponseWriter< ::livelinkapi::MeshData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFile() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::livelinkapi::FileRequest* /*request*/, ::livelinkapi::FileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFile(::grpc::ServerContext* context, ::livelinkapi::FileRequest* request, ::grpc::ServerAsyncResponseWriter< ::livelinkapi::FileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamCamera() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_StreamCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCamera(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::livelinkapi::CameraState>* /*reader*/, ::livelinkapi::StreamStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamCamera(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::livelinkapi::StreamStatus, ::livelinkapi::CameraState>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(5, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetCamera<WithAsyncMethod_GetCamera<WithAsyncMethod_GetMeshes<WithAsyncMethod_GetMesh<WithAsyncMethod_GetFile<WithAsyncMethod_StreamCamera<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetCamera() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::livelinkapi::CameraState, ::livelinkapi::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::livelinkapi::CameraState* request, ::livelinkapi::Empty* response) { return this->SetCamera(context, request, response); }));}
    void SetMessageAllocatorFor_SetCamera(
        ::grpc::MessageAllocator< ::livelinkapi::CameraState, ::livelinkapi::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::livelinkapi::CameraState, ::livelinkapi::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCamera(::grpc::ServerContext* /*context*/, const ::livelinkapi::CameraState* /*request*/, ::livelinkapi::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCamera(
      ::grpc::CallbackServerContext* /*context*/, const ::livelinkapi::CameraState* /*request*/, ::livelinkapi::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCamera() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::livelinkapi::Empty, ::livelinkapi::CameraState>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::CameraState* response) { return this->GetCamera(context, request, response); }));}
    void SetMessageAllocatorFor_GetCamera(
        ::grpc::MessageAllocator< ::livelinkapi::Empty, ::livelinkapi::CameraState>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::livelinkapi::Empty, ::livelinkapi::CameraState>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCamera(::grpc::ServerContext* /*context*/, const ::livelinkapi::Empty* /*request*/, ::livelinkapi::CameraState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCamera(
      ::grpc::CallbackServerContext* /*context*/, const ::livelinkapi::Empty* /*request*/, ::livelinkapi::CameraState* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMeshes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMeshes() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::livelinkapi::Empty, ::livelinkapi::MeshList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::MeshList* response) { return this->GetMeshes(context, request, response); }));}
    void SetMessageAllocatorFor_GetMeshes(
        ::grpc::MessageAllocator< ::livelinkapi::Empty, ::livelinkapi::MeshList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::livelinkapi::Empty, ::livelinkapi::MeshList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMeshes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeshes(::grpc::ServerContext* /*context*/, const ::livelinkapi::Empty* /*request*/, ::livelinkapi::MeshList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMeshes(
      ::grpc::CallbackServerContext* /*context*/, const ::livelinkapi::Empty* /*request*/, ::livelinkapi::MeshList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMesh() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::livelinkapi::MeshRequest, ::livelinkapi::MeshData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::livelinkapi::MeshRequest* request, ::livelinkapi::MeshData* response) { return this->GetMesh(context, request, response); }));}
    void SetMessageAllocatorFor_GetMesh(
        ::grpc::MessageAllocator< ::livelinkapi::MeshRequest, ::livelinkapi::MeshData>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::livelinkapi::MeshRequest, ::livelinkapi::MeshData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMesh(::grpc::ServerContext* /*context*/, const ::livelinkapi::MeshRequest* /*request*/, ::livelinkapi::MeshData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMesh(
      ::grpc::CallbackServerContext* /*context*/, const ::livelinkapi::MeshRequest* /*request*/, ::livelinkapi::MeshData* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFile() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::livelinkapi::FileRequest, ::livelinkapi::FileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::livelinkapi::FileRequest* request, ::livelinkapi::FileResponse* response) { return this->GetFile(context, request, response); }));}
    void SetMessageAllocatorFor_GetFile(
        ::grpc::MessageAllocator< ::livelinkapi::FileRequest, ::livelinkapi::FileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::livelinkapi::FileRequest, ::livelinkapi::FileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::livelinkapi::FileRequest* /*request*/, ::livelinkapi::FileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFile(
      ::grpc::CallbackServerContext* /*context*/, const ::livelinkapi::FileRequest* /*request*/, ::livelinkapi::FileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamCamera() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackClientStreamingHandler< ::livelinkapi::CameraState, ::livelinkapi::StreamStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, ::livelinkapi::StreamStatus* response) { return this->StreamCamera(context, response); }));
    }
    ~WithCallbackMethod_StreamCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCamera(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::livelinkapi::CameraState>* /*reader*/, ::livelinkapi::StreamStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::livelinkapi::CameraState>* StreamCamera(
      ::grpc::CallbackServerContext* /*context*/, ::livelinkapi::StreamStatus* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetCamera<WithCallbackMethod_GetCamera<WithCallbackMethod_GetMeshes<WithCallbackMethod_GetMesh<WithCallbackMethod_GetFile<WithCallbackMethod_StreamCamera<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetCamera() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCamera(::grpc::ServerContext* /*context*/, const ::livelinkapi::CameraState* /*request*/, ::livelinkapi::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCamera() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCamera(::grpc::ServerContext* /*context*/, const ::livelinkapi::Empty* /*request*/, ::livelinkapi::CameraState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMeshes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMeshes() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetMeshes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeshes(::grpc::ServerContext* /*context*/, const ::livelinkapi::Empty* /*request*/, ::livelinkapi::MeshList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMesh() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMesh(::grpc::ServerContext* /*context*/, const ::livelinkapi::MeshRequest* /*request*/, ::livelinkapi::MeshData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFile() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::livelinkapi::FileRequest* /*request*/, ::livelinkapi::FileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamCamera() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_StreamCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCamera(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::livelinkapi::CameraState>* /*reader*/, ::livelinkapi::StreamStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetCamera() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCamera(::grpc::ServerContext* /*context*/, const ::livelinkapi::CameraState* /*request*/, ::livelinkapi::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCamera() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCamera(::grpc::ServerContext* /*context*/, const ::livelinkapi::Empty* /*request*/, ::livelinkapi::CameraState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMeshes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMeshes() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetMeshes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeshes(::grpc::ServerContext* /*context*/, const ::livelinkapi::Empty* /*request*/, ::livelinkapi::MeshList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMeshes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMesh() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMesh(::grpc::ServerContext* /*context*/, const ::livelinkapi::MeshRequest* /*request*/, ::livelinkapi::MeshData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMesh(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFile() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::livelinkapi::FileRequest* /*request*/, ::livelinkapi::FileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamCamera() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_StreamCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCamera(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::livelinkapi::CameraState>* /*reader*/, ::livelinkapi::StreamStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamCamera(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(5, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetCamera() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetCamera(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCamera(::grpc::ServerContext* /*context*/, const ::livelinkapi::CameraState* /*request*/, ::livelinkapi::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCamera(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCamera() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCamera(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCamera(::grpc::ServerContext* /*context*/, const ::livelinkapi::Empty* /*request*/, ::livelinkapi::CameraState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCamera(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMeshes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMeshes() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMeshes(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMeshes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMeshes(::grpc::ServerContext* /*context*/, const ::livelinkapi::Empty* /*request*/, ::livelinkapi::MeshList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMeshes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMesh() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMesh(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMesh(::grpc::ServerContext* /*context*/, const ::livelinkapi::MeshRequest* /*request*/, ::livelinkapi::MeshData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMesh(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFile() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::livelinkapi::FileRequest* /*request*/, ::livelinkapi::FileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamCamera() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->StreamCamera(context, response); }));
    }
    ~WithRawCallbackMethod_StreamCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamCamera(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::livelinkapi::CameraState>* /*reader*/, ::livelinkapi::StreamStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* StreamCamera(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetCamera() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::livelinkapi::CameraState, ::livelinkapi::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::livelinkapi::CameraState, ::livelinkapi::Empty>* streamer) {
                       return this->StreamedSetCamera(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCamera(::grpc::ServerContext* /*context*/, const ::livelinkapi::CameraState* /*request*/, ::livelinkapi::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::livelinkapi::CameraState,::livelinkapi::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCamera() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::livelinkapi::Empty, ::livelinkapi::CameraState>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::livelinkapi::Empty, ::livelinkapi::CameraState>* streamer) {
                       return this->StreamedGetCamera(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCamera(::grpc::ServerContext* /*context*/, const ::livelinkapi::Empty* /*request*/, ::livelinkapi::CameraState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::livelinkapi::Empty,::livelinkapi::CameraState>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMeshes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMeshes() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::livelinkapi::Empty, ::livelinkapi::MeshList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::livelinkapi::Empty, ::livelinkapi::MeshList>* streamer) {
                       return this->StreamedGetMeshes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMeshes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMeshes(::grpc::ServerContext* /*context*/, const ::livelinkapi::Empty* /*request*/, ::livelinkapi::MeshList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMeshes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::livelinkapi::Empty,::livelinkapi::MeshList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMesh() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::livelinkapi::MeshRequest, ::livelinkapi::MeshData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::livelinkapi::MeshRequest, ::livelinkapi::MeshData>* streamer) {
                       return this->StreamedGetMesh(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMesh(::grpc::ServerContext* /*context*/, const ::livelinkapi::MeshRequest* /*request*/, ::livelinkapi::MeshData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMesh(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::livelinkapi::MeshRequest,::livelinkapi::MeshData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFile() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::livelinkapi::FileRequest, ::livelinkapi::FileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::livelinkapi::FileRequest, ::livelinkapi::FileResponse>* streamer) {
                       return this->StreamedGetFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* /*context*/, const ::livelinkapi::FileRequest* /*request*/, ::livelinkapi::FileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::livelinkapi::FileRequest,::livelinkapi::FileResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetCamera<WithStreamedUnaryMethod_GetCamera<WithStreamedUnaryMethod_GetMeshes<WithStreamedUnaryMethod_GetMesh<WithStreamedUnaryMethod_GetFile<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetCamera<WithStreamedUnaryMethod_GetCamera<WithStreamedUnaryMethod_GetMeshes<WithStreamedUnaryMethod_GetMesh<WithStreamedUnaryMethod_GetFile<Service > > > > > StreamedService;
};

}  // namespace livelinkapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_livelink_2eproto__INCLUDED
