// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: livelink.proto

#include "livelink.pb.h"
#include "livelink.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace livelinkapi {

static const char* LiveLinkService_method_names[] = {
  "/livelinkapi.LiveLinkService/SetCamera",
  "/livelinkapi.LiveLinkService/GetCamera",
  "/livelinkapi.LiveLinkService/GetMeshes",
  "/livelinkapi.LiveLinkService/GetMesh",
  "/livelinkapi.LiveLinkService/GetFile",
  "/livelinkapi.LiveLinkService/StreamCamera",
};

std::unique_ptr< LiveLinkService::Stub> LiveLinkService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LiveLinkService::Stub> stub(new LiveLinkService::Stub(channel, options));
  return stub;
}

LiveLinkService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetCamera_(LiveLinkService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCamera_(LiveLinkService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMeshes_(LiveLinkService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMesh_(LiveLinkService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFile_(LiveLinkService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamCamera_(LiveLinkService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status LiveLinkService::Stub::SetCamera(::grpc::ClientContext* context, const ::livelinkapi::CameraState& request, ::livelinkapi::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::livelinkapi::CameraState, ::livelinkapi::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCamera_, context, request, response);
}

void LiveLinkService::Stub::async::SetCamera(::grpc::ClientContext* context, const ::livelinkapi::CameraState* request, ::livelinkapi::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::livelinkapi::CameraState, ::livelinkapi::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCamera_, context, request, response, std::move(f));
}

void LiveLinkService::Stub::async::SetCamera(::grpc::ClientContext* context, const ::livelinkapi::CameraState* request, ::livelinkapi::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCamera_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::livelinkapi::Empty>* LiveLinkService::Stub::PrepareAsyncSetCameraRaw(::grpc::ClientContext* context, const ::livelinkapi::CameraState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::livelinkapi::Empty, ::livelinkapi::CameraState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCamera_, context, request);
}

::grpc::ClientAsyncResponseReader< ::livelinkapi::Empty>* LiveLinkService::Stub::AsyncSetCameraRaw(::grpc::ClientContext* context, const ::livelinkapi::CameraState& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCameraRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LiveLinkService::Stub::GetCamera(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::livelinkapi::CameraState* response) {
  return ::grpc::internal::BlockingUnaryCall< ::livelinkapi::Empty, ::livelinkapi::CameraState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCamera_, context, request, response);
}

void LiveLinkService::Stub::async::GetCamera(::grpc::ClientContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::CameraState* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::livelinkapi::Empty, ::livelinkapi::CameraState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCamera_, context, request, response, std::move(f));
}

void LiveLinkService::Stub::async::GetCamera(::grpc::ClientContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::CameraState* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCamera_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::livelinkapi::CameraState>* LiveLinkService::Stub::PrepareAsyncGetCameraRaw(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::livelinkapi::CameraState, ::livelinkapi::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCamera_, context, request);
}

::grpc::ClientAsyncResponseReader< ::livelinkapi::CameraState>* LiveLinkService::Stub::AsyncGetCameraRaw(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCameraRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LiveLinkService::Stub::GetMeshes(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::livelinkapi::MeshList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::livelinkapi::Empty, ::livelinkapi::MeshList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMeshes_, context, request, response);
}

void LiveLinkService::Stub::async::GetMeshes(::grpc::ClientContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::MeshList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::livelinkapi::Empty, ::livelinkapi::MeshList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMeshes_, context, request, response, std::move(f));
}

void LiveLinkService::Stub::async::GetMeshes(::grpc::ClientContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::MeshList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMeshes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshList>* LiveLinkService::Stub::PrepareAsyncGetMeshesRaw(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::livelinkapi::MeshList, ::livelinkapi::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMeshes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshList>* LiveLinkService::Stub::AsyncGetMeshesRaw(::grpc::ClientContext* context, const ::livelinkapi::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMeshesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LiveLinkService::Stub::GetMesh(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest& request, ::livelinkapi::MeshData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::livelinkapi::MeshRequest, ::livelinkapi::MeshData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMesh_, context, request, response);
}

void LiveLinkService::Stub::async::GetMesh(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest* request, ::livelinkapi::MeshData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::livelinkapi::MeshRequest, ::livelinkapi::MeshData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMesh_, context, request, response, std::move(f));
}

void LiveLinkService::Stub::async::GetMesh(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest* request, ::livelinkapi::MeshData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMesh_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshData>* LiveLinkService::Stub::PrepareAsyncGetMeshRaw(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::livelinkapi::MeshData, ::livelinkapi::MeshRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMesh_, context, request);
}

::grpc::ClientAsyncResponseReader< ::livelinkapi::MeshData>* LiveLinkService::Stub::AsyncGetMeshRaw(::grpc::ClientContext* context, const ::livelinkapi::MeshRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMeshRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LiveLinkService::Stub::GetFile(::grpc::ClientContext* context, const ::livelinkapi::FileRequest& request, ::livelinkapi::FileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::livelinkapi::FileRequest, ::livelinkapi::FileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFile_, context, request, response);
}

void LiveLinkService::Stub::async::GetFile(::grpc::ClientContext* context, const ::livelinkapi::FileRequest* request, ::livelinkapi::FileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::livelinkapi::FileRequest, ::livelinkapi::FileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFile_, context, request, response, std::move(f));
}

void LiveLinkService::Stub::async::GetFile(::grpc::ClientContext* context, const ::livelinkapi::FileRequest* request, ::livelinkapi::FileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::livelinkapi::FileResponse>* LiveLinkService::Stub::PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::livelinkapi::FileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::livelinkapi::FileResponse, ::livelinkapi::FileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::livelinkapi::FileResponse>* LiveLinkService::Stub::AsyncGetFileRaw(::grpc::ClientContext* context, const ::livelinkapi::FileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::livelinkapi::CameraState>* LiveLinkService::Stub::StreamCameraRaw(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response) {
  return ::grpc::internal::ClientWriterFactory< ::livelinkapi::CameraState>::Create(channel_.get(), rpcmethod_StreamCamera_, context, response);
}

void LiveLinkService::Stub::async::StreamCamera(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response, ::grpc::ClientWriteReactor< ::livelinkapi::CameraState>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::livelinkapi::CameraState>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamCamera_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::livelinkapi::CameraState>* LiveLinkService::Stub::AsyncStreamCameraRaw(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::livelinkapi::CameraState>::Create(channel_.get(), cq, rpcmethod_StreamCamera_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::livelinkapi::CameraState>* LiveLinkService::Stub::PrepareAsyncStreamCameraRaw(::grpc::ClientContext* context, ::livelinkapi::StreamStatus* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::livelinkapi::CameraState>::Create(channel_.get(), cq, rpcmethod_StreamCamera_, context, response, false, nullptr);
}

LiveLinkService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LiveLinkService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LiveLinkService::Service, ::livelinkapi::CameraState, ::livelinkapi::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LiveLinkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::livelinkapi::CameraState* req,
             ::livelinkapi::Empty* resp) {
               return service->SetCamera(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LiveLinkService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LiveLinkService::Service, ::livelinkapi::Empty, ::livelinkapi::CameraState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LiveLinkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::livelinkapi::Empty* req,
             ::livelinkapi::CameraState* resp) {
               return service->GetCamera(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LiveLinkService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LiveLinkService::Service, ::livelinkapi::Empty, ::livelinkapi::MeshList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LiveLinkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::livelinkapi::Empty* req,
             ::livelinkapi::MeshList* resp) {
               return service->GetMeshes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LiveLinkService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LiveLinkService::Service, ::livelinkapi::MeshRequest, ::livelinkapi::MeshData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LiveLinkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::livelinkapi::MeshRequest* req,
             ::livelinkapi::MeshData* resp) {
               return service->GetMesh(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LiveLinkService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LiveLinkService::Service, ::livelinkapi::FileRequest, ::livelinkapi::FileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LiveLinkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::livelinkapi::FileRequest* req,
             ::livelinkapi::FileResponse* resp) {
               return service->GetFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LiveLinkService_method_names[5],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< LiveLinkService::Service, ::livelinkapi::CameraState, ::livelinkapi::StreamStatus>(
          [](LiveLinkService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::livelinkapi::CameraState>* reader,
             ::livelinkapi::StreamStatus* resp) {
               return service->StreamCamera(ctx, reader, resp);
             }, this)));
}

LiveLinkService::Service::~Service() {
}

::grpc::Status LiveLinkService::Service::SetCamera(::grpc::ServerContext* context, const ::livelinkapi::CameraState* request, ::livelinkapi::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LiveLinkService::Service::GetCamera(::grpc::ServerContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::CameraState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LiveLinkService::Service::GetMeshes(::grpc::ServerContext* context, const ::livelinkapi::Empty* request, ::livelinkapi::MeshList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LiveLinkService::Service::GetMesh(::grpc::ServerContext* context, const ::livelinkapi::MeshRequest* request, ::livelinkapi::MeshData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LiveLinkService::Service::GetFile(::grpc::ServerContext* context, const ::livelinkapi::FileRequest* request, ::livelinkapi::FileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LiveLinkService::Service::StreamCamera(::grpc::ServerContext* context, ::grpc::ServerReader< ::livelinkapi::CameraState>* reader, ::livelinkapi::StreamStatus* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace livelinkapi
#include <grpcpp/ports_undef.inc>

