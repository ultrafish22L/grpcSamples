// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: camera_control.proto
#ifndef GRPC_camera_5fcontrol_2eproto__INCLUDED
#define GRPC_camera_5fcontrol_2eproto__INCLUDED

#include "camera_control.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace octaneapi {

// Basic camera control service for simpleGlGrpc
class CameraControl final {
 public:
  static constexpr char const* service_full_name() {
    return "octaneapi.CameraControl";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Set camera position
    virtual ::grpc::Status SetCameraPosition(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSetCameraPosition(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSetCameraPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSetCameraPosition(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSetCameraPositionRaw(context, request, cq));
    }
    // Get camera position
    virtual ::grpc::Status GetCameraPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::octaneapi::CameraPositionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraPositionResponse>> AsyncGetCameraPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraPositionResponse>>(AsyncGetCameraPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraPositionResponse>> PrepareAsyncGetCameraPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraPositionResponse>>(PrepareAsyncGetCameraPositionRaw(context, request, cq));
    }
    // Set camera target (look at point)
    virtual ::grpc::Status SetCameraTarget(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSetCameraTarget(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSetCameraTargetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSetCameraTarget(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSetCameraTargetRaw(context, request, cq));
    }
    // Get camera target
    virtual ::grpc::Status GetCameraTarget(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::octaneapi::CameraTargetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraTargetResponse>> AsyncGetCameraTarget(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraTargetResponse>>(AsyncGetCameraTargetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraTargetResponse>> PrepareAsyncGetCameraTarget(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraTargetResponse>>(PrepareAsyncGetCameraTargetRaw(context, request, cq));
    }
    // Set camera up vector
    virtual ::grpc::Status SetCameraUp(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSetCameraUp(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSetCameraUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSetCameraUp(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSetCameraUpRaw(context, request, cq));
    }
    // Get camera up vector
    virtual ::grpc::Status GetCameraUp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::octaneapi::CameraUpResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraUpResponse>> AsyncGetCameraUp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraUpResponse>>(AsyncGetCameraUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraUpResponse>> PrepareAsyncGetCameraUp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraUpResponse>>(PrepareAsyncGetCameraUpRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Set camera position
      virtual void SetCameraPosition(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCameraPosition(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get camera position
      virtual void GetCameraPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraPositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCameraPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Set camera target (look at point)
      virtual void SetCameraTarget(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCameraTarget(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get camera target
      virtual void GetCameraTarget(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraTargetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCameraTarget(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraTargetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Set camera up vector
      virtual void SetCameraUp(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCameraUp(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get camera up vector
      virtual void GetCameraUp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraUpResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCameraUp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraUpResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSetCameraPositionRaw(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSetCameraPositionRaw(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraPositionResponse>* AsyncGetCameraPositionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraPositionResponse>* PrepareAsyncGetCameraPositionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSetCameraTargetRaw(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSetCameraTargetRaw(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraTargetResponse>* AsyncGetCameraTargetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraTargetResponse>* PrepareAsyncGetCameraTargetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSetCameraUpRaw(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSetCameraUpRaw(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraUpResponse>* AsyncGetCameraUpRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::octaneapi::CameraUpResponse>* PrepareAsyncGetCameraUpRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetCameraPosition(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSetCameraPosition(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSetCameraPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSetCameraPosition(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSetCameraPositionRaw(context, request, cq));
    }
    ::grpc::Status GetCameraPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::octaneapi::CameraPositionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraPositionResponse>> AsyncGetCameraPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraPositionResponse>>(AsyncGetCameraPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraPositionResponse>> PrepareAsyncGetCameraPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraPositionResponse>>(PrepareAsyncGetCameraPositionRaw(context, request, cq));
    }
    ::grpc::Status SetCameraTarget(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSetCameraTarget(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSetCameraTargetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSetCameraTarget(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSetCameraTargetRaw(context, request, cq));
    }
    ::grpc::Status GetCameraTarget(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::octaneapi::CameraTargetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraTargetResponse>> AsyncGetCameraTarget(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraTargetResponse>>(AsyncGetCameraTargetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraTargetResponse>> PrepareAsyncGetCameraTarget(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraTargetResponse>>(PrepareAsyncGetCameraTargetRaw(context, request, cq));
    }
    ::grpc::Status SetCameraUp(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSetCameraUp(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSetCameraUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSetCameraUp(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSetCameraUpRaw(context, request, cq));
    }
    ::grpc::Status GetCameraUp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::octaneapi::CameraUpResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraUpResponse>> AsyncGetCameraUp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraUpResponse>>(AsyncGetCameraUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraUpResponse>> PrepareAsyncGetCameraUp(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraUpResponse>>(PrepareAsyncGetCameraUpRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetCameraPosition(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetCameraPosition(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCameraPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraPositionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCameraPosition(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetCameraTarget(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetCameraTarget(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCameraTarget(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraTargetResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCameraTarget(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraTargetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetCameraUp(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetCameraUp(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCameraUp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraUpResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCameraUp(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraUpResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSetCameraPositionRaw(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSetCameraPositionRaw(::grpc::ClientContext* context, const ::octaneapi::CameraPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraPositionResponse>* AsyncGetCameraPositionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraPositionResponse>* PrepareAsyncGetCameraPositionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSetCameraTargetRaw(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSetCameraTargetRaw(::grpc::ClientContext* context, const ::octaneapi::CameraTargetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraTargetResponse>* AsyncGetCameraTargetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraTargetResponse>* PrepareAsyncGetCameraTargetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSetCameraUpRaw(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSetCameraUpRaw(::grpc::ClientContext* context, const ::octaneapi::CameraUpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraUpResponse>* AsyncGetCameraUpRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::octaneapi::CameraUpResponse>* PrepareAsyncGetCameraUpRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetCameraPosition_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCameraPosition_;
    const ::grpc::internal::RpcMethod rpcmethod_SetCameraTarget_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCameraTarget_;
    const ::grpc::internal::RpcMethod rpcmethod_SetCameraUp_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCameraUp_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Set camera position
    virtual ::grpc::Status SetCameraPosition(::grpc::ServerContext* context, const ::octaneapi::CameraPositionRequest* request, ::google::protobuf::Empty* response);
    // Get camera position
    virtual ::grpc::Status GetCameraPosition(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraPositionResponse* response);
    // Set camera target (look at point)
    virtual ::grpc::Status SetCameraTarget(::grpc::ServerContext* context, const ::octaneapi::CameraTargetRequest* request, ::google::protobuf::Empty* response);
    // Get camera target
    virtual ::grpc::Status GetCameraTarget(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraTargetResponse* response);
    // Set camera up vector
    virtual ::grpc::Status SetCameraUp(::grpc::ServerContext* context, const ::octaneapi::CameraUpRequest* request, ::google::protobuf::Empty* response);
    // Get camera up vector
    virtual ::grpc::Status GetCameraUp(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraUpResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCameraPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetCameraPosition() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetCameraPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraPosition(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraPositionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCameraPosition(::grpc::ServerContext* context, ::octaneapi::CameraPositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCameraPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCameraPosition() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCameraPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraPosition(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCameraPosition(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CameraPositionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCameraTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetCameraTarget() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetCameraTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraTarget(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraTargetRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCameraTarget(::grpc::ServerContext* context, ::octaneapi::CameraTargetRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCameraTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCameraTarget() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetCameraTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraTarget(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraTargetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCameraTarget(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CameraTargetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCameraUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetCameraUp() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetCameraUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraUp(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraUpRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCameraUp(::grpc::ServerContext* context, ::octaneapi::CameraUpRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCameraUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCameraUp() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetCameraUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraUp(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraUpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCameraUp(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::octaneapi::CameraUpResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetCameraPosition<WithAsyncMethod_GetCameraPosition<WithAsyncMethod_SetCameraTarget<WithAsyncMethod_GetCameraTarget<WithAsyncMethod_SetCameraUp<WithAsyncMethod_GetCameraUp<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetCameraPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetCameraPosition() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::CameraPositionRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::CameraPositionRequest* request, ::google::protobuf::Empty* response) { return this->SetCameraPosition(context, request, response); }));}
    void SetMessageAllocatorFor_SetCameraPosition(
        ::grpc::MessageAllocator< ::octaneapi::CameraPositionRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::CameraPositionRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetCameraPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraPosition(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraPositionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCameraPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::CameraPositionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCameraPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCameraPosition() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::octaneapi::CameraPositionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraPositionResponse* response) { return this->GetCameraPosition(context, request, response); }));}
    void SetMessageAllocatorFor_GetCameraPosition(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::octaneapi::CameraPositionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::octaneapi::CameraPositionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCameraPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraPosition(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCameraPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraPositionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetCameraTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetCameraTarget() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::CameraTargetRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::CameraTargetRequest* request, ::google::protobuf::Empty* response) { return this->SetCameraTarget(context, request, response); }));}
    void SetMessageAllocatorFor_SetCameraTarget(
        ::grpc::MessageAllocator< ::octaneapi::CameraTargetRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::CameraTargetRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetCameraTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraTarget(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraTargetRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCameraTarget(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::CameraTargetRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCameraTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCameraTarget() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::octaneapi::CameraTargetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraTargetResponse* response) { return this->GetCameraTarget(context, request, response); }));}
    void SetMessageAllocatorFor_GetCameraTarget(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::octaneapi::CameraTargetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::octaneapi::CameraTargetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCameraTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraTarget(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraTargetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCameraTarget(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraTargetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetCameraUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetCameraUp() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::octaneapi::CameraUpRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::octaneapi::CameraUpRequest* request, ::google::protobuf::Empty* response) { return this->SetCameraUp(context, request, response); }));}
    void SetMessageAllocatorFor_SetCameraUp(
        ::grpc::MessageAllocator< ::octaneapi::CameraUpRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::octaneapi::CameraUpRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetCameraUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraUp(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraUpRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCameraUp(
      ::grpc::CallbackServerContext* /*context*/, const ::octaneapi::CameraUpRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCameraUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCameraUp() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::octaneapi::CameraUpResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::octaneapi::CameraUpResponse* response) { return this->GetCameraUp(context, request, response); }));}
    void SetMessageAllocatorFor_GetCameraUp(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::octaneapi::CameraUpResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::octaneapi::CameraUpResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCameraUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraUp(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraUpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCameraUp(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraUpResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetCameraPosition<WithCallbackMethod_GetCameraPosition<WithCallbackMethod_SetCameraTarget<WithCallbackMethod_GetCameraTarget<WithCallbackMethod_SetCameraUp<WithCallbackMethod_GetCameraUp<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetCameraPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetCameraPosition() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetCameraPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraPosition(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraPositionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCameraPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCameraPosition() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCameraPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraPosition(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCameraTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetCameraTarget() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetCameraTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraTarget(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraTargetRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCameraTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCameraTarget() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetCameraTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraTarget(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraTargetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCameraUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetCameraUp() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetCameraUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraUp(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraUpRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCameraUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCameraUp() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetCameraUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraUp(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraUpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCameraPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetCameraPosition() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetCameraPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraPosition(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraPositionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCameraPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCameraPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCameraPosition() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCameraPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraPosition(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCameraPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCameraTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetCameraTarget() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetCameraTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraTarget(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraTargetRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCameraTarget(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCameraTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCameraTarget() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetCameraTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraTarget(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraTargetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCameraTarget(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCameraUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetCameraUp() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetCameraUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraUp(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraUpRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCameraUp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCameraUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCameraUp() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetCameraUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraUp(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraUpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCameraUp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetCameraPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetCameraPosition() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetCameraPosition(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetCameraPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraPosition(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraPositionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCameraPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCameraPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCameraPosition() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCameraPosition(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCameraPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraPosition(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCameraPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetCameraTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetCameraTarget() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetCameraTarget(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetCameraTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraTarget(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraTargetRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCameraTarget(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCameraTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCameraTarget() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCameraTarget(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCameraTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraTarget(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraTargetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCameraTarget(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetCameraUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetCameraUp() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetCameraUp(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetCameraUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraUp(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraUpRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCameraUp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCameraUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCameraUp() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCameraUp(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCameraUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraUp(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraUpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCameraUp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCameraPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetCameraPosition() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::CameraPositionRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::CameraPositionRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedSetCameraPosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetCameraPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCameraPosition(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraPositionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCameraPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::CameraPositionRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCameraPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCameraPosition() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::octaneapi::CameraPositionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::octaneapi::CameraPositionResponse>* streamer) {
                       return this->StreamedGetCameraPosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCameraPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCameraPosition(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCameraPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::octaneapi::CameraPositionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCameraTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetCameraTarget() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::CameraTargetRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::CameraTargetRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedSetCameraTarget(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetCameraTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCameraTarget(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraTargetRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCameraTarget(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::CameraTargetRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCameraTarget : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCameraTarget() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::octaneapi::CameraTargetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::octaneapi::CameraTargetResponse>* streamer) {
                       return this->StreamedGetCameraTarget(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCameraTarget() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCameraTarget(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraTargetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCameraTarget(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::octaneapi::CameraTargetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCameraUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetCameraUp() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::octaneapi::CameraUpRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::octaneapi::CameraUpRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedSetCameraUp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetCameraUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCameraUp(::grpc::ServerContext* /*context*/, const ::octaneapi::CameraUpRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCameraUp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::octaneapi::CameraUpRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCameraUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCameraUp() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::octaneapi::CameraUpResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::octaneapi::CameraUpResponse>* streamer) {
                       return this->StreamedGetCameraUp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCameraUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCameraUp(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::octaneapi::CameraUpResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCameraUp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::octaneapi::CameraUpResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetCameraPosition<WithStreamedUnaryMethod_GetCameraPosition<WithStreamedUnaryMethod_SetCameraTarget<WithStreamedUnaryMethod_GetCameraTarget<WithStreamedUnaryMethod_SetCameraUp<WithStreamedUnaryMethod_GetCameraUp<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetCameraPosition<WithStreamedUnaryMethod_GetCameraPosition<WithStreamedUnaryMethod_SetCameraTarget<WithStreamedUnaryMethod_GetCameraTarget<WithStreamedUnaryMethod_SetCameraUp<WithStreamedUnaryMethod_GetCameraUp<Service > > > > > > StreamedService;
};

}  // namespace octaneapi


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_camera_5fcontrol_2eproto__INCLUDED
