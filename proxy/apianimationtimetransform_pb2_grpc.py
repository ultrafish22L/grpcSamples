# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import apianimationtimetransform_pb2 as apianimationtimetransform__pb2


class ApiAnimationTimeTransformServiceStub(object):
    """GRPC interface definition for class 'ApiAnimationTimeTransform' from 'apianimationtimetransform.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.type = channel.unary_unary(
                '/octaneapi.ApiAnimationTimeTransformService/type',
                request_serializer=apianimationtimetransform__pb2.ApiAnimationTimeTransform.typeRequest.SerializeToString,
                response_deserializer=apianimationtimetransform__pb2.ApiAnimationTimeTransform.typeResponse.FromString,
                )


class ApiAnimationTimeTransformServiceServicer(object):
    """GRPC interface definition for class 'ApiAnimationTimeTransform' from 'apianimationtimetransform.h'
    """

    def type(self, request, context):
        """/ Returns the type of this time transform
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiAnimationTimeTransformServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'type': grpc.unary_unary_rpc_method_handler(
                    servicer.type,
                    request_deserializer=apianimationtimetransform__pb2.ApiAnimationTimeTransform.typeRequest.FromString,
                    response_serializer=apianimationtimetransform__pb2.ApiAnimationTimeTransform.typeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiAnimationTimeTransformService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ApiAnimationTimeTransformService(object):
    """GRPC interface definition for class 'ApiAnimationTimeTransform' from 'apianimationtimetransform.h'
    """

    @staticmethod
    def type(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ApiAnimationTimeTransformService/type',
            apianimationtimetransform__pb2.ApiAnimationTimeTransform.typeRequest.SerializeToString,
            apianimationtimetransform__pb2.ApiAnimationTimeTransform.typeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ApiLinearTimeTransformServiceStub(object):
    """GRPC interface definition for class 'ApiLinearTimeTransform' from 'apianimationtimetransform.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.delay = channel.unary_unary(
                '/octaneapi.ApiLinearTimeTransformService/delay',
                request_serializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.delayRequest.SerializeToString,
                response_deserializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.delayResponse.FromString,
                )
        self.speedUp = channel.unary_unary(
                '/octaneapi.ApiLinearTimeTransformService/speedUp',
                request_serializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.speedUpRequest.SerializeToString,
                response_deserializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.speedUpResponse.FromString,
                )
        self.customIntervalEnabled = channel.unary_unary(
                '/octaneapi.ApiLinearTimeTransformService/customIntervalEnabled',
                request_serializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.customIntervalEnabledRequest.SerializeToString,
                response_deserializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.customIntervalEnabledResponse.FromString,
                )
        self.customInterval = channel.unary_unary(
                '/octaneapi.ApiLinearTimeTransformService/customInterval',
                request_serializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.customIntervalRequest.SerializeToString,
                response_deserializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.customIntervalResponse.FromString,
                )


class ApiLinearTimeTransformServiceServicer(object):
    """GRPC interface definition for class 'ApiLinearTimeTransform' from 'apianimationtimetransform.h'
    """

    def delay(self, request, context):
        """/ The delay of the animation start time in seconds
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def speedUp(self, request, context):
        """/ The scale of the animation playback speed (default is 1)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def customIntervalEnabled(self, request, context):
        """/ Returns TRUE when custom interval is enabled
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def customInterval(self, request, context):
        """/ Returns interval of the animation that should be played
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiLinearTimeTransformServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'delay': grpc.unary_unary_rpc_method_handler(
                    servicer.delay,
                    request_deserializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.delayRequest.FromString,
                    response_serializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.delayResponse.SerializeToString,
            ),
            'speedUp': grpc.unary_unary_rpc_method_handler(
                    servicer.speedUp,
                    request_deserializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.speedUpRequest.FromString,
                    response_serializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.speedUpResponse.SerializeToString,
            ),
            'customIntervalEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.customIntervalEnabled,
                    request_deserializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.customIntervalEnabledRequest.FromString,
                    response_serializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.customIntervalEnabledResponse.SerializeToString,
            ),
            'customInterval': grpc.unary_unary_rpc_method_handler(
                    servicer.customInterval,
                    request_deserializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.customIntervalRequest.FromString,
                    response_serializer=apianimationtimetransform__pb2.ApiLinearTimeTransform.customIntervalResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiLinearTimeTransformService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ApiLinearTimeTransformService(object):
    """GRPC interface definition for class 'ApiLinearTimeTransform' from 'apianimationtimetransform.h'
    """

    @staticmethod
    def delay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ApiLinearTimeTransformService/delay',
            apianimationtimetransform__pb2.ApiLinearTimeTransform.delayRequest.SerializeToString,
            apianimationtimetransform__pb2.ApiLinearTimeTransform.delayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def speedUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ApiLinearTimeTransformService/speedUp',
            apianimationtimetransform__pb2.ApiLinearTimeTransform.speedUpRequest.SerializeToString,
            apianimationtimetransform__pb2.ApiLinearTimeTransform.speedUpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def customIntervalEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ApiLinearTimeTransformService/customIntervalEnabled',
            apianimationtimetransform__pb2.ApiLinearTimeTransform.customIntervalEnabledRequest.SerializeToString,
            apianimationtimetransform__pb2.ApiLinearTimeTransform.customIntervalEnabledResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def customInterval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ApiLinearTimeTransformService/customInterval',
            apianimationtimetransform__pb2.ApiLinearTimeTransform.customIntervalRequest.SerializeToString,
            apianimationtimetransform__pb2.ApiLinearTimeTransform.customIntervalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
