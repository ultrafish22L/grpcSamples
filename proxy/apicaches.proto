//////////////////////////////////////////////////////////////////////////////
// WARNING: This code is machine generated. Manual changes will be overridden.

syntax = "proto3";

package octaneapi;

option optimize_for = CODE_SIZE;

import "common.proto";
import "google/protobuf/empty.proto";
import "octaneenums.proto";

 // GRPC proto definitions for 'ApiCaches' class from 'apicaches.h'
message ApiCaches
{
    // Request packet corresponding to '[in] parameters in ApiCaches::getMeshletCacheSize'
    message getMeshletCacheSizeRequest
    {
    }

    // Response packet corresponding to '[out] parameters in 'ApiCaches::getMeshletCacheSize'
    message getMeshletCacheSizeResponse
    {
        
        uint64 result = 1;
    }

    // Request packet corresponding to '[in] parameters in ApiCaches::getMeshletCacheUsedSize'
    message getMeshletCacheUsedSizeRequest
    {
    }

    // Response packet corresponding to '[out] parameters in 'ApiCaches::getMeshletCacheUsedSize'
    message getMeshletCacheUsedSizeResponse
    {
        
        uint64 result = 1;
    }

    // Request packet corresponding to '[in] parameters in ApiCaches::clearMeshletCache'
    message clearMeshletCacheRequest
    {
    }

    // Request packet corresponding to '[in] parameters in ApiCaches::getVirtualTextureCacheSize'
    message getVirtualTextureCacheSizeRequest
    {
    }

    // Response packet corresponding to '[out] parameters in 'ApiCaches::getVirtualTextureCacheSize'
    message getVirtualTextureCacheSizeResponse
    {
        
        uint64 result = 1;
    }

    // Request packet corresponding to '[in] parameters in ApiCaches::getVirtualTextureCacheUsedSize'
    message getVirtualTextureCacheUsedSizeRequest
    {
    }

    // Response packet corresponding to '[out] parameters in 'ApiCaches::getVirtualTextureCacheUsedSize'
    message getVirtualTextureCacheUsedSizeResponse
    {
        
        uint64 result = 1;
    }

    // Request packet corresponding to '[in] parameters in ApiCaches::pruneVirtualTextureCache'
    message pruneVirtualTextureCacheRequest
    {
        // Maximum size to keep. Pass in 0 if you want to remove all cache files not
        uint64 maximumSize = 1;
    }

    // Request packet corresponding to '[in] parameters in ApiCaches::checkVirtualTextureStatus'
    message checkVirtualTextureStatusRequest
    {
        ObjectRef node = 1;
    }

    // Response packet corresponding to '[out] parameters in 'ApiCaches::checkVirtualTextureStatus'
    message checkVirtualTextureStatusResponse
    {
        
        CacheStatus result = 1;
        ObjectRef node = 2;
    }

    // Request packet corresponding to '[in] parameters in ApiCaches::clearVirtualTextureCacheForNode'
    message clearVirtualTextureCacheForNodeRequest
    {
        ObjectRef node = 1;
    }

    // Response packet corresponding to '[out] parameters in 'ApiCaches::clearVirtualTextureCacheForNode'
    message clearVirtualTextureCacheForNodeResponse
    {
        //     true if either the node didn't represent a virtual texture cache, or if
        bool result = 1;
        ObjectRef node = 2;
    }

}


// GRPC interface definition for class 'ApiCaches' from 'apicaches.h'
service ApiCachesService
{
    /// Returns the maximum size of the meshlet cache in bytes
    rpc getMeshletCacheSize(ApiCaches.getMeshletCacheSizeRequest) returns (ApiCaches.getMeshletCacheSizeResponse);
    /// Returns the amount data stored in the meshlet cache in number of bytes
    rpc getMeshletCacheUsedSize(ApiCaches.getMeshletCacheUsedSizeRequest) returns (ApiCaches.getMeshletCacheUsedSizeResponse);
    /// Deletes all meshlet cache files that are currently not in use
    rpc clearMeshletCache(ApiCaches.clearMeshletCacheRequest) returns (google.protobuf.Empty);
    /// Returns the maximum size of the virtual texture cache in bytes
    rpc getVirtualTextureCacheSize(ApiCaches.getVirtualTextureCacheSizeRequest) returns (ApiCaches.getVirtualTextureCacheSizeResponse);
    /// Returns the amount data stored in the virtual texture cache in number of bytes
    rpc getVirtualTextureCacheUsedSize(ApiCaches.getVirtualTextureCacheUsedSizeRequest) returns (ApiCaches.getVirtualTextureCacheUsedSizeResponse);
    /// Deletes virtual texture cache files that are currently not in use, until
    /// the cache reaches the desired maximum size
    ///
    /// 
    rpc pruneVirtualTextureCache(ApiCaches.pruneVirtualTextureCacheRequest) returns (google.protobuf.Empty);
    /// Check the status of the cached virtual texture corresponding to the settings contained
    /// in the given node
    rpc checkVirtualTextureStatus(ApiCaches.checkVirtualTextureStatusRequest) returns (ApiCaches.checkVirtualTextureStatusResponse);
    /// Clears the cache entry matching the settings contained in the given node item
    /// This call succeeds only if there are no other node items referencing the same
    /// file, and if the build for the given cache entry is not currently in progress
    rpc clearVirtualTextureCacheForNode(ApiCaches.clearVirtualTextureCacheForNodeRequest) returns (ApiCaches.clearVirtualTextureCacheForNodeResponse);
}
