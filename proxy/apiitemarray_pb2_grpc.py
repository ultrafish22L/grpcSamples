# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import apiitemarray_pb2 as apiitemarray__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in apiitemarray_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ApiItemArrayServiceStub(object):
    """GRPC interface definition for class 'ApiItemArray' from 'apiitemarray.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.size = channel.unary_unary(
                '/octaneapi.ApiItemArrayService/size',
                request_serializer=apiitemarray__pb2.ApiItemArray.sizeRequest.SerializeToString,
                response_deserializer=apiitemarray__pb2.ApiItemArray.sizeResponse.FromString,
                _registered_method=True)
        self.get = channel.unary_unary(
                '/octaneapi.ApiItemArrayService/get',
                request_serializer=apiitemarray__pb2.ApiItemArray.getRequest.SerializeToString,
                response_deserializer=apiitemarray__pb2.ApiItemArray.getResponse.FromString,
                _registered_method=True)
        self.items = channel.unary_unary(
                '/octaneapi.ApiItemArrayService/items',
                request_serializer=apiitemarray__pb2.ApiItemArray.itemsRequest.SerializeToString,
                response_deserializer=apiitemarray__pb2.ApiItemArray.itemsResponse.FromString,
                _registered_method=True)
        self.begin1 = channel.unary_unary(
                '/octaneapi.ApiItemArrayService/begin1',
                request_serializer=apiitemarray__pb2.ApiItemArray.begin1Request.SerializeToString,
                response_deserializer=apiitemarray__pb2.ApiItemArray.begin1Response.FromString,
                _registered_method=True)
        self.end1 = channel.unary_unary(
                '/octaneapi.ApiItemArrayService/end1',
                request_serializer=apiitemarray__pb2.ApiItemArray.end1Request.SerializeToString,
                response_deserializer=apiitemarray__pb2.ApiItemArray.end1Response.FromString,
                _registered_method=True)
        self.init = channel.unary_unary(
                '/octaneapi.ApiItemArrayService/init',
                request_serializer=apiitemarray__pb2.ApiItemArray.initRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class ApiItemArrayServiceServicer(object):
    """GRPC interface definition for class 'ApiItemArray' from 'apiitemarray.h'
    """

    def size(self, request, context):
        """/ Returns the size of the item list
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """/ Returns the item at the given index
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def items(self, request, context):
        """/ Returns the internal array (owned by this object)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def begin1(self, request, context):
        """/ Begin function for constant range-based for loop
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def end1(self, request, context):
        """/ End function for constant range-based for loop
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def init(self, request, context):
        """/ Init function (only used internally)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiItemArrayServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'size': grpc.unary_unary_rpc_method_handler(
                    servicer.size,
                    request_deserializer=apiitemarray__pb2.ApiItemArray.sizeRequest.FromString,
                    response_serializer=apiitemarray__pb2.ApiItemArray.sizeResponse.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=apiitemarray__pb2.ApiItemArray.getRequest.FromString,
                    response_serializer=apiitemarray__pb2.ApiItemArray.getResponse.SerializeToString,
            ),
            'items': grpc.unary_unary_rpc_method_handler(
                    servicer.items,
                    request_deserializer=apiitemarray__pb2.ApiItemArray.itemsRequest.FromString,
                    response_serializer=apiitemarray__pb2.ApiItemArray.itemsResponse.SerializeToString,
            ),
            'begin1': grpc.unary_unary_rpc_method_handler(
                    servicer.begin1,
                    request_deserializer=apiitemarray__pb2.ApiItemArray.begin1Request.FromString,
                    response_serializer=apiitemarray__pb2.ApiItemArray.begin1Response.SerializeToString,
            ),
            'end1': grpc.unary_unary_rpc_method_handler(
                    servicer.end1,
                    request_deserializer=apiitemarray__pb2.ApiItemArray.end1Request.FromString,
                    response_serializer=apiitemarray__pb2.ApiItemArray.end1Response.SerializeToString,
            ),
            'init': grpc.unary_unary_rpc_method_handler(
                    servicer.init,
                    request_deserializer=apiitemarray__pb2.ApiItemArray.initRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ApiItemArrayService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('octaneapi.ApiItemArrayService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiItemArrayService(object):
    """GRPC interface definition for class 'ApiItemArray' from 'apiitemarray.h'
    """

    @staticmethod
    def size(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiItemArrayService/size',
            apiitemarray__pb2.ApiItemArray.sizeRequest.SerializeToString,
            apiitemarray__pb2.ApiItemArray.sizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiItemArrayService/get',
            apiitemarray__pb2.ApiItemArray.getRequest.SerializeToString,
            apiitemarray__pb2.ApiItemArray.getResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def items(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiItemArrayService/items',
            apiitemarray__pb2.ApiItemArray.itemsRequest.SerializeToString,
            apiitemarray__pb2.ApiItemArray.itemsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def begin1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiItemArrayService/begin1',
            apiitemarray__pb2.ApiItemArray.begin1Request.SerializeToString,
            apiitemarray__pb2.ApiItemArray.begin1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def end1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiItemArrayService/end1',
            apiitemarray__pb2.ApiItemArray.end1Request.SerializeToString,
            apiitemarray__pb2.ApiItemArray.end1Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/octaneapi.ApiItemArrayService/init',
            apiitemarray__pb2.ApiItemArray.initRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
