# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import octaneimageexport_pb2 as octaneimageexport__pb2


class ImageExportSettingsServiceStub(object):
    """GRPC interface definition for class 'ImageExportSettings' from 'octaneimageexport.h'
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getExtension = channel.unary_unary(
                '/octaneapi.ImageExportSettingsService/getExtension',
                request_serializer=octaneimageexport__pb2.ImageExportSettings.getExtensionRequest.SerializeToString,
                response_deserializer=octaneimageexport__pb2.ImageExportSettings.getExtensionResponse.FromString,
                )
        self.getBitsPerComponent = channel.unary_unary(
                '/octaneapi.ImageExportSettingsService/getBitsPerComponent',
                request_serializer=octaneimageexport__pb2.ImageExportSettings.getBitsPerComponentRequest.SerializeToString,
                response_deserializer=octaneimageexport__pb2.ImageExportSettings.getBitsPerComponentResponse.FromString,
                )
        self.getBitsPerComponent1 = channel.unary_unary(
                '/octaneapi.ImageExportSettingsService/getBitsPerComponent1',
                request_serializer=octaneimageexport__pb2.ImageExportSettings.getBitsPerComponent1Request.SerializeToString,
                response_deserializer=octaneimageexport__pb2.ImageExportSettings.getBitsPerComponent1Response.FromString,
                )
        self.getBitDepth = channel.unary_unary(
                '/octaneapi.ImageExportSettingsService/getBitDepth',
                request_serializer=octaneimageexport__pb2.ImageExportSettings.getBitDepthRequest.SerializeToString,
                response_deserializer=octaneimageexport__pb2.ImageExportSettings.getBitDepthResponse.FromString,
                )
        self.getFormat = channel.unary_unary(
                '/octaneapi.ImageExportSettingsService/getFormat',
                request_serializer=octaneimageexport__pb2.ImageExportSettings.getFormatRequest.SerializeToString,
                response_deserializer=octaneimageexport__pb2.ImageExportSettings.getFormatResponse.FromString,
                )
        self.getType = channel.unary_unary(
                '/octaneapi.ImageExportSettingsService/getType',
                request_serializer=octaneimageexport__pb2.ImageExportSettings.getTypeRequest.SerializeToString,
                response_deserializer=octaneimageexport__pb2.ImageExportSettings.getTypeResponse.FromString,
                )
        self.makeFromOldSettings = channel.unary_unary(
                '/octaneapi.ImageExportSettingsService/makeFromOldSettings',
                request_serializer=octaneimageexport__pb2.ImageExportSettings.makeFromOldSettingsRequest.SerializeToString,
                response_deserializer=octaneimageexport__pb2.ImageExportSettings.makeFromOldSettingsResponse.FromString,
                )
        self.makeFromImageSaveFormat = channel.unary_unary(
                '/octaneapi.ImageExportSettingsService/makeFromImageSaveFormat',
                request_serializer=octaneimageexport__pb2.ImageExportSettings.makeFromImageSaveFormatRequest.SerializeToString,
                response_deserializer=octaneimageexport__pb2.ImageExportSettings.makeFromImageSaveFormatResponse.FromString,
                )
        self.makeExr = channel.unary_unary(
                '/octaneapi.ImageExportSettingsService/makeExr',
                request_serializer=octaneimageexport__pb2.ImageExportSettings.makeExrRequest.SerializeToString,
                response_deserializer=octaneimageexport__pb2.ImageExportSettings.makeExrResponse.FromString,
                )
        self.makeTiff = channel.unary_unary(
                '/octaneapi.ImageExportSettingsService/makeTiff',
                request_serializer=octaneimageexport__pb2.ImageExportSettings.makeTiffRequest.SerializeToString,
                response_deserializer=octaneimageexport__pb2.ImageExportSettings.makeTiffResponse.FromString,
                )
        self.makePng = channel.unary_unary(
                '/octaneapi.ImageExportSettingsService/makePng',
                request_serializer=octaneimageexport__pb2.ImageExportSettings.makePngRequest.SerializeToString,
                response_deserializer=octaneimageexport__pb2.ImageExportSettings.makePngResponse.FromString,
                )
        self.makeJpeg = channel.unary_unary(
                '/octaneapi.ImageExportSettingsService/makeJpeg',
                request_serializer=octaneimageexport__pb2.ImageExportSettings.makeJpegRequest.SerializeToString,
                response_deserializer=octaneimageexport__pb2.ImageExportSettings.makeJpegResponse.FromString,
                )


class ImageExportSettingsServiceServicer(object):
    """GRPC interface definition for class 'ImageExportSettings' from 'octaneimageexport.h'
    """

    def getExtension(self, request, context):
        """/ Returns extension for the type
        / 
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBitsPerComponent(self, request, context):
        """/ Returns number of bits per component for bit depth
        / 
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBitsPerComponent1(self, request, context):
        """/ Returns number of bits per component for image format
        / 
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBitDepth(self, request, context):
        """/ Returns bit depth of the format
        / 
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFormat(self, request, context):
        """/ Returns image save format from file type and bit depth
        /
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getType(self, request, context):
        """/ Returns image file type from the format
        / 
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def makeFromOldSettings(self, request, context):
        """/ Creates ImageExportSettings from a set parameters used in older version of the API
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def makeFromImageSaveFormat(self, request, context):
        """/ Creates ImageExportSettings from ImageSaveFormat
        / Any additional settings are set to the default values
        / 
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def makeExr(self, request, context):
        """/ Creates ImageExportSettings for writing EXR format
        / 
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def makeTiff(self, request, context):
        """/ Creates ImageExportSettings for writing TIFF format
        / 
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def makePng(self, request, context):
        """/ Creates ImageExportSettings for writing PNG format
        / 
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def makeJpeg(self, request, context):
        """/ Creates ImageExportSettings for writing JPEG format
        / 
        / 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageExportSettingsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getExtension': grpc.unary_unary_rpc_method_handler(
                    servicer.getExtension,
                    request_deserializer=octaneimageexport__pb2.ImageExportSettings.getExtensionRequest.FromString,
                    response_serializer=octaneimageexport__pb2.ImageExportSettings.getExtensionResponse.SerializeToString,
            ),
            'getBitsPerComponent': grpc.unary_unary_rpc_method_handler(
                    servicer.getBitsPerComponent,
                    request_deserializer=octaneimageexport__pb2.ImageExportSettings.getBitsPerComponentRequest.FromString,
                    response_serializer=octaneimageexport__pb2.ImageExportSettings.getBitsPerComponentResponse.SerializeToString,
            ),
            'getBitsPerComponent1': grpc.unary_unary_rpc_method_handler(
                    servicer.getBitsPerComponent1,
                    request_deserializer=octaneimageexport__pb2.ImageExportSettings.getBitsPerComponent1Request.FromString,
                    response_serializer=octaneimageexport__pb2.ImageExportSettings.getBitsPerComponent1Response.SerializeToString,
            ),
            'getBitDepth': grpc.unary_unary_rpc_method_handler(
                    servicer.getBitDepth,
                    request_deserializer=octaneimageexport__pb2.ImageExportSettings.getBitDepthRequest.FromString,
                    response_serializer=octaneimageexport__pb2.ImageExportSettings.getBitDepthResponse.SerializeToString,
            ),
            'getFormat': grpc.unary_unary_rpc_method_handler(
                    servicer.getFormat,
                    request_deserializer=octaneimageexport__pb2.ImageExportSettings.getFormatRequest.FromString,
                    response_serializer=octaneimageexport__pb2.ImageExportSettings.getFormatResponse.SerializeToString,
            ),
            'getType': grpc.unary_unary_rpc_method_handler(
                    servicer.getType,
                    request_deserializer=octaneimageexport__pb2.ImageExportSettings.getTypeRequest.FromString,
                    response_serializer=octaneimageexport__pb2.ImageExportSettings.getTypeResponse.SerializeToString,
            ),
            'makeFromOldSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.makeFromOldSettings,
                    request_deserializer=octaneimageexport__pb2.ImageExportSettings.makeFromOldSettingsRequest.FromString,
                    response_serializer=octaneimageexport__pb2.ImageExportSettings.makeFromOldSettingsResponse.SerializeToString,
            ),
            'makeFromImageSaveFormat': grpc.unary_unary_rpc_method_handler(
                    servicer.makeFromImageSaveFormat,
                    request_deserializer=octaneimageexport__pb2.ImageExportSettings.makeFromImageSaveFormatRequest.FromString,
                    response_serializer=octaneimageexport__pb2.ImageExportSettings.makeFromImageSaveFormatResponse.SerializeToString,
            ),
            'makeExr': grpc.unary_unary_rpc_method_handler(
                    servicer.makeExr,
                    request_deserializer=octaneimageexport__pb2.ImageExportSettings.makeExrRequest.FromString,
                    response_serializer=octaneimageexport__pb2.ImageExportSettings.makeExrResponse.SerializeToString,
            ),
            'makeTiff': grpc.unary_unary_rpc_method_handler(
                    servicer.makeTiff,
                    request_deserializer=octaneimageexport__pb2.ImageExportSettings.makeTiffRequest.FromString,
                    response_serializer=octaneimageexport__pb2.ImageExportSettings.makeTiffResponse.SerializeToString,
            ),
            'makePng': grpc.unary_unary_rpc_method_handler(
                    servicer.makePng,
                    request_deserializer=octaneimageexport__pb2.ImageExportSettings.makePngRequest.FromString,
                    response_serializer=octaneimageexport__pb2.ImageExportSettings.makePngResponse.SerializeToString,
            ),
            'makeJpeg': grpc.unary_unary_rpc_method_handler(
                    servicer.makeJpeg,
                    request_deserializer=octaneimageexport__pb2.ImageExportSettings.makeJpegRequest.FromString,
                    response_serializer=octaneimageexport__pb2.ImageExportSettings.makeJpegResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'octaneapi.ImageExportSettingsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImageExportSettingsService(object):
    """GRPC interface definition for class 'ImageExportSettings' from 'octaneimageexport.h'
    """

    @staticmethod
    def getExtension(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ImageExportSettingsService/getExtension',
            octaneimageexport__pb2.ImageExportSettings.getExtensionRequest.SerializeToString,
            octaneimageexport__pb2.ImageExportSettings.getExtensionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getBitsPerComponent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ImageExportSettingsService/getBitsPerComponent',
            octaneimageexport__pb2.ImageExportSettings.getBitsPerComponentRequest.SerializeToString,
            octaneimageexport__pb2.ImageExportSettings.getBitsPerComponentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getBitsPerComponent1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ImageExportSettingsService/getBitsPerComponent1',
            octaneimageexport__pb2.ImageExportSettings.getBitsPerComponent1Request.SerializeToString,
            octaneimageexport__pb2.ImageExportSettings.getBitsPerComponent1Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getBitDepth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ImageExportSettingsService/getBitDepth',
            octaneimageexport__pb2.ImageExportSettings.getBitDepthRequest.SerializeToString,
            octaneimageexport__pb2.ImageExportSettings.getBitDepthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFormat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ImageExportSettingsService/getFormat',
            octaneimageexport__pb2.ImageExportSettings.getFormatRequest.SerializeToString,
            octaneimageexport__pb2.ImageExportSettings.getFormatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ImageExportSettingsService/getType',
            octaneimageexport__pb2.ImageExportSettings.getTypeRequest.SerializeToString,
            octaneimageexport__pb2.ImageExportSettings.getTypeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def makeFromOldSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ImageExportSettingsService/makeFromOldSettings',
            octaneimageexport__pb2.ImageExportSettings.makeFromOldSettingsRequest.SerializeToString,
            octaneimageexport__pb2.ImageExportSettings.makeFromOldSettingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def makeFromImageSaveFormat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ImageExportSettingsService/makeFromImageSaveFormat',
            octaneimageexport__pb2.ImageExportSettings.makeFromImageSaveFormatRequest.SerializeToString,
            octaneimageexport__pb2.ImageExportSettings.makeFromImageSaveFormatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def makeExr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ImageExportSettingsService/makeExr',
            octaneimageexport__pb2.ImageExportSettings.makeExrRequest.SerializeToString,
            octaneimageexport__pb2.ImageExportSettings.makeExrResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def makeTiff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ImageExportSettingsService/makeTiff',
            octaneimageexport__pb2.ImageExportSettings.makeTiffRequest.SerializeToString,
            octaneimageexport__pb2.ImageExportSettings.makeTiffResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def makePng(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ImageExportSettingsService/makePng',
            octaneimageexport__pb2.ImageExportSettings.makePngRequest.SerializeToString,
            octaneimageexport__pb2.ImageExportSettings.makePngResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def makeJpeg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/octaneapi.ImageExportSettingsService/makeJpeg',
            octaneimageexport__pb2.ImageExportSettings.makeJpegRequest.SerializeToString,
            octaneimageexport__pb2.ImageExportSettings.makeJpegResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
